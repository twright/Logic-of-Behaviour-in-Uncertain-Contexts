/* Generated by Cython 0.28.5 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "flowstar/flowstar-2.1.0/Continuous.h", 
            "flowstar/flowstar-2.1.0/Interval.h", 
            "flowstar/flowstar-2.1.0/Monomial.h", 
            "flowstar/flowstar-2.1.0/Polynomial.h", 
            "flowstar/flowstar-2.1.0/TaylorModel.h", 
            "flowstar/flowstar-2.1.0/include.h"
        ], 
        "extra_compile_args": [
            "-O3", 
            "-std=c++17", 
            "-Wno-register", 
            "-march=native"
        ], 
        "extra_link_args": [
            "-std=c++17"
        ], 
        "include_dirs": [
            ".", 
            "./flowstar/", 
            "./ulbc/", 
            "./flowstar/flowstar-2.1.0", 
            "/usr/include/boost"
        ], 
        "language": "c++", 
        "libraries": [
            "flowstar", 
            "mpfr", 
            "gmp", 
            "gsl", 
            "gslcblas", 
            "m", 
            "glpk"
        ], 
        "library_dirs": [
            ".", 
            "./flowstar/", 
            "./ulbc/", 
            "./flowstar/flowstar-2.1.0", 
            "/usr/include/boost"
        ], 
        "name": "flowstar.observers", 
        "sources": [
            "flowstar/observers.pyx"
        ]
    }, 
    "module_name": "flowstar.observers"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_5"
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__flowstar__observers
#define __PYX_HAVE_API__flowstar__observers
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include "mpfr.h"
#include "Interval.h"
#include <vector>
#include "Monomial.h"

    class MonoWrap: public flowstar::Monomial {
        public:
            flowstar::Interval getCoefficient() {
                return this->coefficient;
            }

            std::vector<int> getDegrees() {
                return this->degrees;
            }
    };
    
#include <list>
#include "Polynomial.h"

    class PolyWrap: public flowstar::Polynomial {
        /*
        PolyWrap(flowstar::Polynomial & P) {
            this->monomials = P.monomials;
        }
        */

        public:
            std::list<flowstar::Monomial> getMonomials() {
                return this->monomials;
            }
    };
    
#include "TaylorModel.h"
#include <functional>
#include <optional>

    std::function<flowstar::Interval(const flowstar::Interval &)>
    compose_interval_fn(
    std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> f, flowstar::TaylorModelVec& tmv,
    std::vector<flowstar::Interval>& domain
    ) {
        return [f, &tmv, &domain](const flowstar::Interval & t) -> flowstar::Interval {
            std::vector<flowstar::Interval> I;
            domain[0] = t;
            tmv.intEval(I, domain);
            I.insert(I.begin(), t);
            return f(I);
        };
    }
    

    std::function<flowstar::Interval(std::vector<flowstar::Interval>&)>
    poly_fn(const flowstar::Polynomial & p) {
        // flowstar::HornerForm hf;
        // Convert p to HornerForm to increase accuracy
        // of interval evaluation
        // p.toHornerForm(hf);

        return [p](auto & v) {
            flowstar::Interval res;
            p.intEval(res, v);
            return res;
        };
    }

    std::function<flowstar::Interval(const flowstar::Interval&)>
    poly_time_fn(const flowstar::Polynomial & p) {
        return [p](const flowstar::Interval & t) -> flowstar::Interval {
            flowstar::Interval res;
            std::vector<flowstar::Interval> v;
            v.push_back(t);
            // v.push_back(t);
            p.intEval(res, v);
            return res;
        };
    }

    std::function<flowstar::Interval(const flowstar::Interval &)>
    poly_domain_time_fn(
    const flowstar::Polynomial & f,
    std::vector<flowstar::Interval>& domain
    ) {
        return [f, &domain](const flowstar::Interval & t) -> flowstar::Interval {
            flowstar::Interval I;
            domain[0] = t;
            f.intEval(I, domain);
            return I;
        };
    }
    
#include "include.h"
#include <utility>
#include <map>
#include "Continuous.h"
#include <boost/logic/tribool.hpp>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "flowstar/observers.pyx",
  "flowstar/poly.pxd",
  "flowstar/reachability.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_8flowstar_4poly_Poly;
struct __pyx_obj_8flowstar_12reachability_CReach;
struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager;
struct __pyx_obj_8flowstar_9observers_PolyObserver;
struct __pyx_obj_8flowstar_9observers_RestrictedObserver;

/* "flowstar/Monomial.pxd":74
 *         vector[int] getDegrees()
 * 
 * ctypedef MonoWrap* MonoWrapPtr             # <<<<<<<<<<<<<<
 * ctypedef Monomial* MonomialPtr
 */
typedef MonoWrap *__pyx_t_8flowstar_8Monomial_MonoWrapPtr;

/* "flowstar/Monomial.pxd":75
 * 
 * ctypedef MonoWrap* MonoWrapPtr
 * ctypedef Monomial* MonomialPtr             # <<<<<<<<<<<<<<
 */
typedef flowstar::Monomial *__pyx_t_8flowstar_8Monomial_MonomialPtr;

/* "flowstar/Polynomial.pxd":64
 *         clist[Monomial] & getMonomials()
 * 
 * ctypedef PolyWrap* PolyWrapPtr             # <<<<<<<<<<<<<<
 * ctypedef Polynomial* PolynomialPtr
 */
typedef PolyWrap *__pyx_t_8flowstar_10Polynomial_PolyWrapPtr;

/* "flowstar/Polynomial.pxd":65
 * 
 * ctypedef PolyWrap* PolyWrapPtr
 * ctypedef Polynomial* PolynomialPtr             # <<<<<<<<<<<<<<
 */
typedef flowstar::Polynomial *__pyx_t_8flowstar_10Polynomial_PolynomialPtr;
struct __pyx_opt_args_8flowstar_4poly_compose;
struct __pyx_opt_args_8flowstar_4poly_4Poly_from_polynomial;

/* "flowstar/poly.pxd":8
 * from libcpp.vector cimport vector
 * 
 * cdef TaylorModel compose(const Polynomial & P,             # <<<<<<<<<<<<<<
 *                          const TaylorModelVec tmv,
 *                          const vector[Interval] & domain,
 */
struct __pyx_opt_args_8flowstar_4poly_compose {
  int __pyx_n;
  int verbosity;
};

/* "flowstar/poly.pxd":67
 * 
 *     @staticmethod
 *     cdef Poly from_polynomial(Polynomial & P, vars, explicit_time=?)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_8flowstar_4poly_4Poly_from_polynomial {
  int __pyx_n;
  PyObject *explicit_time;
};
struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval;
struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain;

/* "flowstar/reachability.pxd":21
 *     cdef vector[Polynomial] odes
 * 
 *     cdef vector[Interval] eval_interval(CReach, Interval,             # <<<<<<<<<<<<<<
 *             optional[reference_wrapper[vector[Interval]]] space_domain=*,
 *             optional[reference_wrapper[Polynomial]] poly=*)
 */
struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval {
  int __pyx_n;
  std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  space_domain;
  std::optional<std::reference_wrapper<flowstar::Polynomial> >  poly;
};

/* "flowstar/reachability.pxd":25
 *             optional[reference_wrapper[Polynomial]] poly=*)
 *     cdef optional[vector[Interval]]\
 *             _convert_space_domain(CReach self, space_domain=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain {
  int __pyx_n;
  PyObject *space_domain;
};
struct __pyx_opt_args_8flowstar_14root_detection_detect_roots;

/* "flowstar/root_detection.pxd":7
 * 
 * 
 * cdef void detect_roots(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                        interval_time_fn f, interval_time_fn fprime,
 *                        Interval & T0,
 */
struct __pyx_opt_args_8flowstar_14root_detection_detect_roots {
  int __pyx_n;
  double epsilon;
  int verbosity;
};
struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_c_roots;
struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_interval;
struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_bool_interval;
struct __pyx_opt_args_8flowstar_9observers_12PolyObserver__amalgamate_roots;

/* "flowstar/observers.pxd":24
 *     cdef vector[Interval] masked_regions
 * 
 *     cdef vector[Interval] c_roots(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                   double epsilon=?, int verbosity=?)
 *     cdef Interval eval_interval(PolyObserver self, Interval & x,
 */
struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_c_roots {
  int __pyx_n;
  double epsilon;
  int verbosity;
};

/* "flowstar/observers.pxd":26
 *     cdef vector[Interval] c_roots(PolyObserver self,
 *                                   double epsilon=?, int verbosity=?)
 *     cdef Interval eval_interval(PolyObserver self, Interval & x,             # <<<<<<<<<<<<<<
 *                                 int verbosity=?)
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & x,
 */
struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_interval {
  int __pyx_n;
  int verbosity;
};

/* "flowstar/observers.pxd":28
 *     cdef Interval eval_interval(PolyObserver self, Interval & x,
 *                                 int verbosity=?)
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & x,             # <<<<<<<<<<<<<<
 *                                     int verbosity=?)
 *     cdef bint _tm_segment_loop(PolyObserver self,
 */
struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_bool_interval {
  int __pyx_n;
  int verbosity;
};

/* "flowstar/observers.pxd":42
 *                                const Interval & t00)
 *     cdef optional[Interval] _mask_overlap(self, const Interval & x) nogil
 *     cdef void _amalgamate_roots(PolyObserver self, vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                                 vector[Interval] & new_roots,
 *                                 Interval & t, int verbosity=?)
 */
struct __pyx_opt_args_8flowstar_9observers_12PolyObserver__amalgamate_roots {
  int __pyx_n;
  int verbosity;
};

/* "flowstar/poly.pxd":61
 *                                                const vector[Interval] & domain)
 * 
 * cdef class Poly:             # <<<<<<<<<<<<<<
 *     cdef Polynomial c_poly
 *     cdef readonly dict vars
 */
struct __pyx_obj_8flowstar_4poly_Poly {
  PyObject_HEAD
  struct __pyx_vtabstruct_8flowstar_4poly_Poly *__pyx_vtab;
  flowstar::Polynomial c_poly;
  PyObject *vars;
  int explicit_time;
};


/* "flowstar/reachability.pxd":10
 * 
 * 
 * cdef class CReach:             # <<<<<<<<<<<<<<
 *     cdef public FlowstarGlobalManager global_manager
 * 
 */
struct __pyx_obj_8flowstar_12reachability_CReach {
  PyObject_HEAD
  struct __pyx_vtabstruct_8flowstar_12reachability_CReach *__pyx_vtab;
  struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *global_manager;
  flowstar::ContinuousReachability c_reach;
  int ran;
  int prepared;
  int result;
  int symbolic_composition;
  std::vector<flowstar::Interval>  initials;
  std::vector<flowstar::Polynomial>  odes;
};


/* "flowstar/reachability.pxd":28
 * 
 * 
 * cdef class FlowstarGlobalManager:             # <<<<<<<<<<<<<<
 *     cdef vector[Interval] factorial_rec
 *     cdef vector[Interval] power_4
 */
struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager {
  PyObject_HEAD
  std::vector<flowstar::Interval>  factorial_rec;
  std::vector<flowstar::Interval>  power_4;
  std::vector<flowstar::Interval>  double_factorial;
  std::vector<std::string>  domainVarNames;
};


/* "flowstar/observers.pxd":13
 * 
 * 
 * cdef class PolyObserver:             # <<<<<<<<<<<<<<
 *     cdef CReach reach
 *     cdef readonly Poly f
 */
struct __pyx_obj_8flowstar_9observers_PolyObserver {
  PyObject_HEAD
  struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *__pyx_vtab;
  struct __pyx_obj_8flowstar_12reachability_CReach *reach;
  struct __pyx_obj_8flowstar_4poly_Poly *f;
  struct __pyx_obj_8flowstar_4poly_Poly *fprime;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> >  poly_f_fns;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> >  poly_fprime_fns;
  std::vector<std::optional<int> >  bools;
  int symbolic_composition;
  PyObject *mask;
  std::vector<flowstar::Interval>  masked_regions;
};


/* "flowstar/observers.pxd":65
 * 
 * 
 * cdef class RestrictedObserver(PolyObserver):             # <<<<<<<<<<<<<<
 *     cdef vector[Interval] space_domain
 * 
 */
struct __pyx_obj_8flowstar_9observers_RestrictedObserver {
  struct __pyx_obj_8flowstar_9observers_PolyObserver __pyx_base;
  std::vector<flowstar::Interval>  space_domain;
};



/* "flowstar/poly.pxd":61
 *                                                const vector[Interval] & domain)
 * 
 * cdef class Poly:             # <<<<<<<<<<<<<<
 *     cdef Polynomial c_poly
 *     cdef readonly dict vars
 */

struct __pyx_vtabstruct_8flowstar_4poly_Poly {
  struct __pyx_obj_8flowstar_4poly_Poly *(*from_polynomial)(flowstar::Polynomial &, PyObject *, struct __pyx_opt_args_8flowstar_4poly_4Poly_from_polynomial *__pyx_optional_args);
};
static struct __pyx_vtabstruct_8flowstar_4poly_Poly *__pyx_vtabptr_8flowstar_4poly_Poly;


/* "flowstar/reachability.pxd":10
 * 
 * 
 * cdef class CReach:             # <<<<<<<<<<<<<<
 *     cdef public FlowstarGlobalManager global_manager
 * 
 */

struct __pyx_vtabstruct_8flowstar_12reachability_CReach {
  std::vector<flowstar::Interval>  (*eval_interval)(struct __pyx_obj_8flowstar_12reachability_CReach *, flowstar::Interval, struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval *__pyx_optional_args);
  std::optional<std::vector<flowstar::Interval> >  (*_convert_space_domain)(struct __pyx_obj_8flowstar_12reachability_CReach *, struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain *__pyx_optional_args);
};
static struct __pyx_vtabstruct_8flowstar_12reachability_CReach *__pyx_vtabptr_8flowstar_12reachability_CReach;


/* "flowstar/observers.pyx":90
 * 
 * 
 * cdef class PolyObserver:             # <<<<<<<<<<<<<<
 *     def __init__(PolyObserver self, f, CReach reach,
 *                  bint symbolic_composition,
 */

struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver {
  std::vector<flowstar::Interval>  (*c_roots)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_c_roots *__pyx_optional_args);
  flowstar::Interval (*eval_interval)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, flowstar::Interval &, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_interval *__pyx_optional_args);
  boost::logic::tribool (*eval_bool_interval)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, flowstar::Interval &, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_bool_interval *__pyx_optional_args);
  int (*_tm_segment_loop)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, int &, std::vector<flowstar::Interval>  *&, std::optional<std::vector<flowstar::Interval> >  &, std::list<flowstar::TaylorModelVec> ::iterator &, std::list<std::vector<flowstar::Interval> > ::iterator &, std::vector<std::optional<int> > ::iterator &, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &, flowstar::Interval &, flowstar::Interval &, flowstar::Interval const &);
  std::optional<flowstar::Interval>  (*_mask_overlap)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, flowstar::Interval const &);
  void (*_amalgamate_roots)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, std::vector<flowstar::Interval>  &, std::vector<flowstar::Interval>  &, flowstar::Interval &, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver__amalgamate_roots *__pyx_optional_args);
  int (*_mask_intersect_check)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, flowstar::Interval &, flowstar::Interval &, int);
  void (*_pre_retrieve_f)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, std::function<flowstar::Interval(const flowstar::Interval &)> &, std::function<flowstar::Interval(const flowstar::Interval &)> &, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  *);
  void (*_post_retrieve_f)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, std::function<flowstar::Interval(const flowstar::Interval &)> &, std::function<flowstar::Interval(const flowstar::Interval &)> &, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  *);
  std::optional<std::vector<flowstar::Interval> >  (*_global_domain)(struct __pyx_obj_8flowstar_9observers_PolyObserver *);
  struct __pyx_obj_8flowstar_4poly_Poly *(*_fprime_given_f)(struct __pyx_obj_8flowstar_9observers_PolyObserver *);
};
static struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *__pyx_vtabptr_8flowstar_9observers_PolyObserver;


/* "flowstar/observers.pyx":27
 * 
 * # noinspection PyUnreachableCode
 * cdef class RestrictedObserver(PolyObserver):             # <<<<<<<<<<<<<<
 *     def __init__(RestrictedObserver self, PolyObserver p,
 *                  list space_domain not None):
 */

struct __pyx_vtabstruct_8flowstar_9observers_RestrictedObserver {
  struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver __pyx_base;
  void (*_invalidate_indeterminate_polys)(struct __pyx_obj_8flowstar_9observers_RestrictedObserver *);
};
static struct __pyx_vtabstruct_8flowstar_9observers_RestrictedObserver *__pyx_vtabptr_8flowstar_9observers_RestrictedObserver;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_8flowstar_9observers_18RestrictedObserver__invalidate_indeterminate_polys(struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self); /* proto*/
static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_9observers_18RestrictedObserver__global_domain(struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self); /* proto*/
static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_9observers_12PolyObserver__global_domain(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self); /* proto*/
static std::vector<flowstar::Interval>  __pyx_f_8flowstar_9observers_12PolyObserver_c_roots(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_c_roots *__pyx_optional_args); /* proto*/
static flowstar::Interval __pyx_f_8flowstar_9observers_12PolyObserver_eval_interval(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_x, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_interval *__pyx_optional_args); /* proto*/
static boost::logic::tribool __pyx_f_8flowstar_9observers_12PolyObserver_eval_bool_interval(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_x, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_bool_interval *__pyx_optional_args); /* proto*/
static int __pyx_f_8flowstar_9observers_12PolyObserver__tm_segment_loop(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, int &__pyx_v_i, std::vector<flowstar::Interval>  *&__pyx_v_loop_domain, std::optional<std::vector<flowstar::Interval> >  &__pyx_v_global_domain, std::list<flowstar::TaylorModelVec> ::iterator &__pyx_v_tmv, std::list<std::vector<flowstar::Interval> > ::iterator &__pyx_v_domain, std::vector<std::optional<int> > ::iterator &__pyx_v_cached_bool, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &__pyx_v_poly_f_fn, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &__pyx_v_poly_fprime_fn, flowstar::Interval &__pyx_v_t, flowstar::Interval &__pyx_v_t0, flowstar::Interval const &__pyx_v_t00); /* proto*/
static int __pyx_f_8flowstar_9observers_12PolyObserver__mask_intersect_check(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_t, flowstar::Interval &__pyx_v_t0, int __pyx_v_verbosity); /* proto*/
static void __pyx_f_8flowstar_9observers_12PolyObserver__pre_retrieve_f(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, std::function<flowstar::Interval(const flowstar::Interval &)> &__pyx_v_f_fn, std::function<flowstar::Interval(const flowstar::Interval &)> &__pyx_v_fprime_fn, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &__pyx_v_poly_f_fn, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &__pyx_v_poly_fprime_fn, flowstar::TaylorModelVec &__pyx_v_tmv, std::vector<flowstar::Interval>  *__pyx_v_loop_domain); /* proto*/
static void __pyx_f_8flowstar_9observers_12PolyObserver__post_retrieve_f(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, std::function<flowstar::Interval(const flowstar::Interval &)> &__pyx_v_f_fn, std::function<flowstar::Interval(const flowstar::Interval &)> &__pyx_v_fprime_fn, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &__pyx_v_poly_f_fn, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &__pyx_v_poly_fprime_fn, flowstar::TaylorModelVec &__pyx_v_tmv, std::vector<flowstar::Interval>  *__pyx_v_loop_domain); /* proto*/
static std::optional<flowstar::Interval>  __pyx_f_8flowstar_9observers_12PolyObserver__mask_overlap(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, flowstar::Interval const &__pyx_v_x); /* proto*/
static void __pyx_f_8flowstar_9observers_12PolyObserver__amalgamate_roots(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, std::vector<flowstar::Interval>  &__pyx_v_roots, std::vector<flowstar::Interval>  &__pyx_v_new_roots, flowstar::Interval &__pyx_v_t, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver__amalgamate_roots *__pyx_optional_args); /* proto*/
static struct __pyx_obj_8flowstar_4poly_Poly *__pyx_f_8flowstar_9observers_12PolyObserver__fprime_given_f(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'flowstar.Interval' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'flowstar.Monomial' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'flowstar.Polynomial' */

/* Module declarations from 'flowstar.TaylorModel' */

/* Module declarations from 'flowstar.cppstd' */

/* Module declarations from 'flowstar.interval' */
static PyObject *(*__pyx_f_8flowstar_8interval_as_str)(flowstar::Interval const &); /*proto*/
static flowstar::Interval (*__pyx_f_8flowstar_8interval_make_interval)(PyObject *); /*proto*/
static bool (*__pyx_f_8flowstar_8interval_overlaps)(flowstar::Interval const &, flowstar::Interval const &); /*proto*/
static void (*__pyx_f_8flowstar_8interval_interval_union)(flowstar::Interval &, flowstar::Interval const &); /*proto*/
static double (*__pyx_f_8flowstar_8interval_int_min_dist)(flowstar::Interval const &, flowstar::Interval const &); /*proto*/

/* Module declarations from 'flowstar.poly' */
static PyTypeObject *__pyx_ptype_8flowstar_4poly_Poly = 0;
static flowstar::TaylorModel (*__pyx_f_8flowstar_4poly_compose)(flowstar::Polynomial const &, flowstar::TaylorModelVec const , std::vector<flowstar::Interval>  const &, int const , flowstar::Interval const , struct __pyx_opt_args_8flowstar_4poly_compose *__pyx_optional_args); /*proto*/

/* Module declarations from 'flowstar.includeh' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'flowstar.Continuous' */

/* Module declarations from 'flowstar.reachability' */
static PyTypeObject *__pyx_ptype_8flowstar_12reachability_CReach = 0;
static PyTypeObject *__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager = 0;

/* Module declarations from 'flowstar.tribool' */

/* Module declarations from 'flowstar.root_detection' */
static void (*__pyx_f_8flowstar_14root_detection_detect_roots)(std::vector<flowstar::Interval>  &, std::function<flowstar::Interval(const flowstar::Interval &)>, std::function<flowstar::Interval(const flowstar::Interval &)>, flowstar::Interval &, struct __pyx_opt_args_8flowstar_14root_detection_detect_roots *__pyx_optional_args); /*proto*/

/* Module declarations from 'flowstar.observable' */
static void (*__pyx_f_8flowstar_10observable_observable)(std::function<flowstar::Interval(const flowstar::Interval &)> &, std::function<flowstar::Interval(const flowstar::Interval &)> &, flowstar::Polynomial &, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  &, int, flowstar::Interval &); /*proto*/

/* Module declarations from 'flowstar.observers' */
static PyTypeObject *__pyx_ptype_8flowstar_9observers_PolyObserver = 0;
static PyTypeObject *__pyx_ptype_8flowstar_9observers_RestrictedObserver = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "flowstar.observers"
extern int __pyx_module_is_main_flowstar__observers;
int __pyx_module_is_main_flowstar__observers = 0;

/* Implementation of 'flowstar.observers' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_print;
static const char __pyx_k_f[] = "f";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_t[] = "t";
static const char __pyx_k__4[] = "===";
static const char __pyx_k_t0[] = "t0 =";
static const char __pyx_k_RIF[] = "RIF";
static const char __pyx_k__18[] = "*";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_res[] = "res = {}";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_sage[] = "sage";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_Reach[] = "Reach";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_reach[] = "reach";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_local_t[] = "local_t";
static const char __pyx_k_prepare[] = "prepare";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_new_root[] = "new root:\n[{}..{}]";
static const char __pyx_k_sage_all[] = "sage.all";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_verbosity[] = "verbosity";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_using_mask[] = "using mask!";
static const char __pyx_k_PolyObserver[] = "PolyObserver";
static const char __pyx_k_mask_overlap[] = "mask_overlap =";
static const char __pyx_k_outside_mask[] = "outside mask!";
static const char __pyx_k_space_domain[] = "space_domain";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_not_using_mask[] = "not using mask!";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_init_stored_data[] = "_init_stored_data";
static const char __pyx_k_merging_intervals[] = "merging intervals:\n[{}..{}]\n[{}..{}]";
static const char __pyx_k_RestrictedObserver[] = "RestrictedObserver";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_flowstar_successful[] = "flowstar_successful";
static const char __pyx_k_symbolic_composition[] = "symbolic_composition";
static const char __pyx_k_flowstar_reachability[] = "flowstar.reachability";
static const char __pyx_k_reached_detect_roots_t[] = "reached detect roots t={} + {}";
static const char __pyx_k_reached_interval_eval_t[] = "reached interval eval t={} + {}";
static const char __pyx_k_skipping_given_cached_bool[] = "skipping given cached bool!";
static const char __pyx_k_retrieving_f_and_fprime_polys[] = "retrieving f and fprime polys";
static const char __pyx_k_skipping_given_consistent_value[] = "skipping given consistent value over domain";
static const char __pyx_k_self_bools_self_masked_regions_s[] = "self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling";
static const char __pyx_k_self_bools_self_masked_regions_s_2[] = "self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_PolyObserver;
static PyObject *__pyx_n_s_RIF;
static PyObject *__pyx_n_s_Reach;
static PyObject *__pyx_n_s_RestrictedObserver;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s__18;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_flowstar_reachability;
static PyObject *__pyx_n_s_flowstar_successful;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init_stored_data;
static PyObject *__pyx_n_b_local_t;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mask;
static PyObject *__pyx_kp_s_mask_overlap;
static PyObject *__pyx_kp_s_merging_intervals;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_new_root;
static PyObject *__pyx_kp_s_not_using_mask;
static PyObject *__pyx_kp_s_outside_mask;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_reach;
static PyObject *__pyx_kp_s_reached_detect_roots_t;
static PyObject *__pyx_kp_s_reached_interval_eval_t;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_kp_s_res;
static PyObject *__pyx_kp_s_retrieving_f_and_fprime_polys;
static PyObject *__pyx_n_s_sage;
static PyObject *__pyx_n_s_sage_all;
static PyObject *__pyx_kp_s_self_bools_self_masked_regions_s;
static PyObject *__pyx_kp_s_self_bools_self_masked_regions_s_2;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_kp_s_skipping_given_cached_bool;
static PyObject *__pyx_kp_s_skipping_given_consistent_value;
static PyObject *__pyx_n_s_space_domain;
static PyObject *__pyx_n_s_symbolic_composition;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_kp_s_t0;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_kp_s_using_mask;
static PyObject *__pyx_n_s_verbosity;
static int __pyx_pf_8flowstar_9observers_18RestrictedObserver___init__(struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self, struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_p, PyObject *__pyx_v_space_domain); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_18RestrictedObserver_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_18RestrictedObserver_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8flowstar_9observers_12PolyObserver___init__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, PyObject *__pyx_v_f, struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_reach, int __pyx_v_symbolic_composition, PyObject *__pyx_v_mask); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_2_init_stored_data(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_19flowstar_successful___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_4time___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_4roots(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_space_domain, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_verbosity); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_6__call__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_verbosity); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_8check(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, PyObject *__pyx_v_t, CYTHON_UNUSED PyObject *__pyx_v_space_domain); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_1f___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_6fprime___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_4mask___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8flowstar_9observers_PolyObserver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8flowstar_9observers_RestrictedObserver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_00001;
static PyObject *__pyx_int_0;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
/* Late includes */

/* "flowstar/observers.pyx":28
 * # noinspection PyUnreachableCode
 * cdef class RestrictedObserver(PolyObserver):
 *     def __init__(RestrictedObserver self, PolyObserver p,             # <<<<<<<<<<<<<<
 *                  list space_domain not None):
 *         self.f = p.f
 */

/* Python wrapper */
static int __pyx_pw_8flowstar_9observers_18RestrictedObserver_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8flowstar_9observers_18RestrictedObserver_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_p = 0;
  PyObject *__pyx_v_space_domain = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,&__pyx_n_s_space_domain,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_space_domain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(1, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 28, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_p = ((struct __pyx_obj_8flowstar_9observers_PolyObserver *)values[0]);
    __pyx_v_space_domain = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.observers.RestrictedObserver.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_8flowstar_9observers_PolyObserver, 1, "p", 0))) __PYX_ERR(1, 28, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_space_domain), (&PyList_Type), 0, "space_domain", 1))) __PYX_ERR(1, 29, __pyx_L1_error)
  __pyx_r = __pyx_pf_8flowstar_9observers_18RestrictedObserver___init__(((struct __pyx_obj_8flowstar_9observers_RestrictedObserver *)__pyx_v_self), __pyx_v_p, __pyx_v_space_domain);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_9observers_18RestrictedObserver___init__(struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self, struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_p, PyObject *__pyx_v_space_domain) {
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_c_space_domain;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> >  __pyx_t_2;
  std::vector<std::optional<int> >  __pyx_t_3;
  int __pyx_t_4;
  std::vector<flowstar::Interval>  __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::optional<std::vector<flowstar::Interval> >  __pyx_t_11;
  struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain __pyx_t_12;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "flowstar/observers.pyx":30
 *     def __init__(RestrictedObserver self, PolyObserver p,
 *                  list space_domain not None):
 *         self.f = p.f             # <<<<<<<<<<<<<<
 *         self.fprime = p.fprime
 *         self.poly_f_fns = p.poly_f_fns
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_p->f);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.f);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.f));
  __pyx_v_self->__pyx_base.f = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/observers.pyx":31
 *                  list space_domain not None):
 *         self.f = p.f
 *         self.fprime = p.fprime             # <<<<<<<<<<<<<<
 *         self.poly_f_fns = p.poly_f_fns
 *         self.poly_fprime_fns = p.poly_fprime_fns
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_p->fprime);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.fprime);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.fprime));
  __pyx_v_self->__pyx_base.fprime = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/observers.pyx":32
 *         self.f = p.f
 *         self.fprime = p.fprime
 *         self.poly_f_fns = p.poly_f_fns             # <<<<<<<<<<<<<<
 *         self.poly_fprime_fns = p.poly_fprime_fns
 *         self.bools = p.bools
 */
  __pyx_t_2 = __pyx_v_p->poly_f_fns;
  __pyx_v_self->__pyx_base.poly_f_fns = __pyx_t_2;

  /* "flowstar/observers.pyx":33
 *         self.fprime = p.fprime
 *         self.poly_f_fns = p.poly_f_fns
 *         self.poly_fprime_fns = p.poly_fprime_fns             # <<<<<<<<<<<<<<
 *         self.bools = p.bools
 *         self.symbolic_composition = p.symbolic_composition
 */
  __pyx_t_2 = __pyx_v_p->poly_fprime_fns;
  __pyx_v_self->__pyx_base.poly_fprime_fns = __pyx_t_2;

  /* "flowstar/observers.pyx":34
 *         self.poly_f_fns = p.poly_f_fns
 *         self.poly_fprime_fns = p.poly_fprime_fns
 *         self.bools = p.bools             # <<<<<<<<<<<<<<
 *         self.symbolic_composition = p.symbolic_composition
 *         self.reach = p.reach
 */
  __pyx_t_3 = __pyx_v_p->bools;
  __pyx_v_self->__pyx_base.bools = __pyx_t_3;

  /* "flowstar/observers.pyx":35
 *         self.poly_fprime_fns = p.poly_fprime_fns
 *         self.bools = p.bools
 *         self.symbolic_composition = p.symbolic_composition             # <<<<<<<<<<<<<<
 *         self.reach = p.reach
 *         self.mask = p.mask
 */
  __pyx_t_4 = __pyx_v_p->symbolic_composition;
  __pyx_v_self->__pyx_base.symbolic_composition = __pyx_t_4;

  /* "flowstar/observers.pyx":36
 *         self.bools = p.bools
 *         self.symbolic_composition = p.symbolic_composition
 *         self.reach = p.reach             # <<<<<<<<<<<<<<
 *         self.mask = p.mask
 *         self.masked_regions = p.masked_regions
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_p->reach);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.reach);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.reach));
  __pyx_v_self->__pyx_base.reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/observers.pyx":37
 *         self.symbolic_composition = p.symbolic_composition
 *         self.reach = p.reach
 *         self.mask = p.mask             # <<<<<<<<<<<<<<
 *         self.masked_regions = p.masked_regions
 *         cdef optional[vector[Interval]] c_space_domain
 */
  __pyx_t_1 = __pyx_v_p->mask;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.mask);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.mask);
  __pyx_v_self->__pyx_base.mask = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "flowstar/observers.pyx":38
 *         self.reach = p.reach
 *         self.mask = p.mask
 *         self.masked_regions = p.masked_regions             # <<<<<<<<<<<<<<
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:
 */
  __pyx_t_5 = __pyx_v_p->masked_regions;
  __pyx_v_self->__pyx_base.masked_regions = __pyx_t_5;

  /* "flowstar/observers.pyx":40
 *         self.masked_regions = p.masked_regions
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:             # <<<<<<<<<<<<<<
 *             if not self.flowstar_successful:
 *                 self.reach = Reach(self.reach, space_domain)
 */
  __pyx_t_4 = (((PyObject *)__pyx_v_self->__pyx_base.reach) != Py_None);
  __pyx_t_6 = (__pyx_t_4 != 0);
  if (__pyx_t_6) {

    /* "flowstar/observers.pyx":41
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:
 *             if not self.flowstar_successful:             # <<<<<<<<<<<<<<
 *                 self.reach = Reach(self.reach, space_domain)
 *                 self._init_stored_data()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flowstar_successful); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = ((!__pyx_t_6) != 0);
    if (__pyx_t_4) {

      /* "flowstar/observers.pyx":42
 *         if self.reach is not None:
 *             if not self.flowstar_successful:
 *                 self.reach = Reach(self.reach, space_domain)             # <<<<<<<<<<<<<<
 *                 self._init_stored_data()
 * 
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_Reach); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->__pyx_base.reach), __pyx_v_space_domain};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, ((PyObject *)__pyx_v_self->__pyx_base.reach), __pyx_v_space_domain};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 42, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.reach));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.reach));
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, ((PyObject *)__pyx_v_self->__pyx_base.reach));
        __Pyx_INCREF(__pyx_v_space_domain);
        __Pyx_GIVEREF(__pyx_v_space_domain);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_space_domain);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8flowstar_12reachability_CReach))))) __PYX_ERR(1, 42, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->__pyx_base.reach);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.reach));
      __pyx_v_self->__pyx_base.reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "flowstar/observers.pyx":43
 *             if not self.flowstar_successful:
 *                 self.reach = Reach(self.reach, space_domain)
 *                 self._init_stored_data()             # <<<<<<<<<<<<<<
 * 
 *             c_space_domain = self.reach._convert_space_domain(space_domain)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_stored_data); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (__pyx_t_10) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "flowstar/observers.pyx":41
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:
 *             if not self.flowstar_successful:             # <<<<<<<<<<<<<<
 *                 self.reach = Reach(self.reach, space_domain)
 *                 self._init_stored_data()
 */
    }

    /* "flowstar/observers.pyx":45
 *                 self._init_stored_data()
 * 
 *             c_space_domain = self.reach._convert_space_domain(space_domain)             # <<<<<<<<<<<<<<
 *             assert c_space_domain.has_value()
 *             self.space_domain = c_space_domain.value()
 */
    __pyx_t_12.__pyx_n = 1;
    __pyx_t_12.space_domain = __pyx_v_space_domain;
    __pyx_t_11 = ((struct __pyx_vtabstruct_8flowstar_12reachability_CReach *)__pyx_v_self->__pyx_base.reach->__pyx_vtab)->_convert_space_domain(__pyx_v_self->__pyx_base.reach, &__pyx_t_12); 
    __pyx_v_c_space_domain = __pyx_t_11;

    /* "flowstar/observers.pyx":46
 * 
 *             c_space_domain = self.reach._convert_space_domain(space_domain)
 *             assert c_space_domain.has_value()             # <<<<<<<<<<<<<<
 *             self.space_domain = c_space_domain.value()
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(__pyx_v_c_space_domain.has_value() != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(1, 46, __pyx_L1_error)
      }
    }
    #endif

    /* "flowstar/observers.pyx":47
 *             c_space_domain = self.reach._convert_space_domain(space_domain)
 *             assert c_space_domain.has_value()
 *             self.space_domain = c_space_domain.value()             # <<<<<<<<<<<<<<
 * 
 *         # Invalidate any composed polynomials for indeterminate intervals
 */
    __pyx_v_self->space_domain = __pyx_v_c_space_domain.value();

    /* "flowstar/observers.pyx":40
 *         self.masked_regions = p.masked_regions
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:             # <<<<<<<<<<<<<<
 *             if not self.flowstar_successful:
 *                 self.reach = Reach(self.reach, space_domain)
 */
  }

  /* "flowstar/observers.pyx":50
 * 
 *         # Invalidate any composed polynomials for indeterminate intervals
 *         if p.flowstar_successful:             # <<<<<<<<<<<<<<
 *             self._invalidate_indeterminate_polys()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_p), __pyx_n_s_flowstar_successful); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "flowstar/observers.pyx":51
 *         # Invalidate any composed polynomials for indeterminate intervals
 *         if p.flowstar_successful:
 *             self._invalidate_indeterminate_polys()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((struct __pyx_vtabstruct_8flowstar_9observers_RestrictedObserver *)__pyx_v_self->__pyx_base.__pyx_vtab)->_invalidate_indeterminate_polys(__pyx_v_self);

    /* "flowstar/observers.pyx":50
 * 
 *         # Invalidate any composed polynomials for indeterminate intervals
 *         if p.flowstar_successful:             # <<<<<<<<<<<<<<
 *             self._invalidate_indeterminate_polys()
 * 
 */
  }

  /* "flowstar/observers.pyx":28
 * # noinspection PyUnreachableCode
 * cdef class RestrictedObserver(PolyObserver):
 *     def __init__(RestrictedObserver self, PolyObserver p,             # <<<<<<<<<<<<<<
 *                  list space_domain not None):
 *         self.f = p.f
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("flowstar.observers.RestrictedObserver.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":54
 * 
 * 
 *     cdef void _invalidate_indeterminate_polys(RestrictedObserver self):             # <<<<<<<<<<<<<<
 *         """If we restrict a PolyObserver, any cached composed polynomials
 *         for subdomains become invalid.
 */

static void __pyx_f_8flowstar_9observers_18RestrictedObserver__invalidate_indeterminate_polys(struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self) {
  std::vector<std::optional<int> > ::iterator __pyx_v_b;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_f;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_fprime;
  std::vector<std::optional<int> > ::iterator __pyx_v_b_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_f_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_fprime_end;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_invalidate_indeterminate_polys", 0);

  /* "flowstar/observers.pyx":63
 *         """
 *         cdef:
 *             vector[optional[bint]].iterator b = self.bools.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator f = \
 *                 self.poly_f_fns.begin()
 */
  __pyx_v_b = __pyx_v_self->__pyx_base.bools.begin();

  /* "flowstar/observers.pyx":65
 *             vector[optional[bint]].iterator b = self.bools.begin()
 *             vector[optional[interval_time_fn]].iterator f = \
 *                 self.poly_f_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator fprime = \
 *                 self.poly_fprime_fns.begin()
 */
  __pyx_v_f = __pyx_v_self->__pyx_base.poly_f_fns.begin();

  /* "flowstar/observers.pyx":67
 *                 self.poly_f_fns.begin()
 *             vector[optional[interval_time_fn]].iterator fprime = \
 *                 self.poly_fprime_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[bint]].iterator b_end = self.bools.end()
 *             vector[optional[interval_time_fn]].iterator f_end = \
 */
  __pyx_v_fprime = __pyx_v_self->__pyx_base.poly_fprime_fns.begin();

  /* "flowstar/observers.pyx":68
 *             vector[optional[interval_time_fn]].iterator fprime = \
 *                 self.poly_fprime_fns.begin()
 *             vector[optional[bint]].iterator b_end = self.bools.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator f_end = \
 *                 self.poly_f_fns.end()
 */
  __pyx_v_b_end = __pyx_v_self->__pyx_base.bools.end();

  /* "flowstar/observers.pyx":70
 *             vector[optional[bint]].iterator b_end = self.bools.end()
 *             vector[optional[interval_time_fn]].iterator f_end = \
 *                 self.poly_f_fns.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator fprime_end = \
 *                 self.poly_fprime_fns.end()
 */
  __pyx_v_f_end = __pyx_v_self->__pyx_base.poly_f_fns.end();

  /* "flowstar/observers.pyx":72
 *                 self.poly_f_fns.end()
 *             vector[optional[interval_time_fn]].iterator fprime_end = \
 *                 self.poly_fprime_fns.end()             # <<<<<<<<<<<<<<
 * 
 *         while b != b_end and f != f_end and fprime != fprime_end:
 */
  __pyx_v_fprime_end = __pyx_v_self->__pyx_base.poly_fprime_fns.end();

  /* "flowstar/observers.pyx":74
 *                 self.poly_fprime_fns.end()
 * 
 *         while b != b_end and f != f_end and fprime != fprime_end:             # <<<<<<<<<<<<<<
 *             if not deref(b).has_value():
 *                 (&deref(f))[0] = optional[interval_time_fn]()
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_b != __pyx_v_b_end) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_f != __pyx_v_f_end) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_fprime != __pyx_v_fprime_end) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "flowstar/observers.pyx":75
 * 
 *         while b != b_end and f != f_end and fprime != fprime_end:
 *             if not deref(b).has_value():             # <<<<<<<<<<<<<<
 *                 (&deref(f))[0] = optional[interval_time_fn]()
 *                 (&deref(fprime))[0] = optional[interval_time_fn]()
 */
    __pyx_t_1 = ((!((*__pyx_v_b).has_value() != 0)) != 0);
    if (__pyx_t_1) {

      /* "flowstar/observers.pyx":76
 *         while b != b_end and f != f_end and fprime != fprime_end:
 *             if not deref(b).has_value():
 *                 (&deref(f))[0] = optional[interval_time_fn]()             # <<<<<<<<<<<<<<
 *                 (&deref(fprime))[0] = optional[interval_time_fn]()
 * 
 */
      ((&(*__pyx_v_f))[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> ();

      /* "flowstar/observers.pyx":77
 *             if not deref(b).has_value():
 *                 (&deref(f))[0] = optional[interval_time_fn]()
 *                 (&deref(fprime))[0] = optional[interval_time_fn]()             # <<<<<<<<<<<<<<
 * 
 *             inc(b)
 */
      ((&(*__pyx_v_fprime))[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> ();

      /* "flowstar/observers.pyx":75
 * 
 *         while b != b_end and f != f_end and fprime != fprime_end:
 *             if not deref(b).has_value():             # <<<<<<<<<<<<<<
 *                 (&deref(f))[0] = optional[interval_time_fn]()
 *                 (&deref(fprime))[0] = optional[interval_time_fn]()
 */
    }

    /* "flowstar/observers.pyx":79
 *                 (&deref(fprime))[0] = optional[interval_time_fn]()
 * 
 *             inc(b)             # <<<<<<<<<<<<<<
 *             inc(f)
 *             inc(fprime)
 */
    (void)((++__pyx_v_b));

    /* "flowstar/observers.pyx":80
 * 
 *             inc(b)
 *             inc(f)             # <<<<<<<<<<<<<<
 *             inc(fprime)
 * 
 */
    (void)((++__pyx_v_f));

    /* "flowstar/observers.pyx":81
 *             inc(b)
 *             inc(f)
 *             inc(fprime)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (void)((++__pyx_v_fprime));
  }

  /* "flowstar/observers.pyx":54
 * 
 * 
 *     cdef void _invalidate_indeterminate_polys(RestrictedObserver self):             # <<<<<<<<<<<<<<
 *         """If we restrict a PolyObserver, any cached composed polynomials
 *         for subdomains become invalid.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "flowstar/observers.pyx":84
 * 
 * 
 *     cdef optional[vector[Interval]] _global_domain(self):             # <<<<<<<<<<<<<<
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain
 *         domain.insert(domain.begin(), Interval(-1, 1))
 */

static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_9observers_18RestrictedObserver__global_domain(struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self) {
  std::vector<flowstar::Interval>  __pyx_v_domain;
  std::optional<std::vector<flowstar::Interval> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<flowstar::Interval>  __pyx_t_1;
  __Pyx_RefNannySetupContext("_global_domain", 0);

  /* "flowstar/observers.pyx":85
 * 
 *     cdef optional[vector[Interval]] _global_domain(self):
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain             # <<<<<<<<<<<<<<
 *         domain.insert(domain.begin(), Interval(-1, 1))
 *         return optional[vector[Interval]](domain)
 */
  __pyx_t_1 = __pyx_v_self->space_domain;
  __pyx_v_domain = __pyx_t_1;

  /* "flowstar/observers.pyx":86
 *     cdef optional[vector[Interval]] _global_domain(self):
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain
 *         domain.insert(domain.begin(), Interval(-1, 1))             # <<<<<<<<<<<<<<
 *         return optional[vector[Interval]](domain)
 * 
 */
  try {
    __pyx_v_domain.insert(__pyx_v_domain.begin(), flowstar::Interval(-1.0, 1.0));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 86, __pyx_L1_error)
  }

  /* "flowstar/observers.pyx":87
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain
 *         domain.insert(domain.begin(), Interval(-1, 1))
 *         return optional[vector[Interval]](domain)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::optional<std::vector<flowstar::Interval> > (__pyx_v_domain);
  goto __pyx_L0;

  /* "flowstar/observers.pyx":84
 * 
 * 
 *     cdef optional[vector[Interval]] _global_domain(self):             # <<<<<<<<<<<<<<
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain
 *         domain.insert(domain.begin(), Interval(-1, 1))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.observers.RestrictedObserver._global_domain", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_18RestrictedObserver_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_18RestrictedObserver_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_18RestrictedObserver_2__reduce_cython__(((struct __pyx_obj_8flowstar_9observers_RestrictedObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_18RestrictedObserver_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.observers.RestrictedObserver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_18RestrictedObserver_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_18RestrictedObserver_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_18RestrictedObserver_4__setstate_cython__(((struct __pyx_obj_8flowstar_9observers_RestrictedObserver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_18RestrictedObserver_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_RestrictedObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.observers.RestrictedObserver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":91
 * 
 * cdef class PolyObserver:
 *     def __init__(PolyObserver self, f, CReach reach,             # <<<<<<<<<<<<<<
 *                  bint symbolic_composition,
 *                  object mask=None):
 */

/* Python wrapper */
static int __pyx_pw_8flowstar_9observers_12PolyObserver_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8flowstar_9observers_12PolyObserver_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f = 0;
  struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_reach = 0;
  int __pyx_v_symbolic_composition;
  PyObject *__pyx_v_mask = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,&__pyx_n_s_reach,&__pyx_n_s_symbolic_composition,&__pyx_n_s_mask,0};
    PyObject* values[4] = {0,0,0,0};

    /* "flowstar/observers.pyx":93
 *     def __init__(PolyObserver self, f, CReach reach,
 *                  bint symbolic_composition,
 *                  object mask=None):             # <<<<<<<<<<<<<<
 *         self.f = Poly(f)
 *         self.reach = reach
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reach)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(1, 91, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_symbolic_composition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(1, 91, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mask);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 91, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_f = values[0];
    __pyx_v_reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)values[1]);
    __pyx_v_symbolic_composition = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_symbolic_composition == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 92, __pyx_L3_error)
    __pyx_v_mask = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 91, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reach), __pyx_ptype_8flowstar_12reachability_CReach, 1, "reach", 0))) __PYX_ERR(1, 91, __pyx_L1_error)
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver___init__(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self), __pyx_v_f, __pyx_v_reach, __pyx_v_symbolic_composition, __pyx_v_mask);

  /* "flowstar/observers.pyx":91
 * 
 * cdef class PolyObserver:
 *     def __init__(PolyObserver self, f, CReach reach,             # <<<<<<<<<<<<<<
 *                  bint symbolic_composition,
 *                  object mask=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_9observers_12PolyObserver___init__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, PyObject *__pyx_v_f, struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_reach, int __pyx_v_symbolic_composition, PyObject *__pyx_v_mask) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "flowstar/observers.pyx":94
 *                  bint symbolic_composition,
 *                  object mask=None):
 *         self.f = Poly(f)             # <<<<<<<<<<<<<<
 *         self.reach = reach
 *         self.fprime = self._fprime_given_f()
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8flowstar_4poly_Poly), __pyx_v_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->f);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->f));
  __pyx_v_self->f = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/observers.pyx":95
 *                  object mask=None):
 *         self.f = Poly(f)
 *         self.reach = reach             # <<<<<<<<<<<<<<
 *         self.fprime = self._fprime_given_f()
 *         self.symbolic_composition = symbolic_composition
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_reach));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_reach));
  __Pyx_GOTREF(__pyx_v_self->reach);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->reach));
  __pyx_v_self->reach = __pyx_v_reach;

  /* "flowstar/observers.pyx":96
 *         self.f = Poly(f)
 *         self.reach = reach
 *         self.fprime = self._fprime_given_f()             # <<<<<<<<<<<<<<
 *         self.symbolic_composition = symbolic_composition
 *         self.mask = mask
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_fprime_given_f(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fprime);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fprime));
  __pyx_v_self->fprime = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/observers.pyx":97
 *         self.reach = reach
 *         self.fprime = self._fprime_given_f()
 *         self.symbolic_composition = symbolic_composition             # <<<<<<<<<<<<<<
 *         self.mask = mask
 *         self._init_stored_data()
 */
  __pyx_v_self->symbolic_composition = __pyx_v_symbolic_composition;

  /* "flowstar/observers.pyx":98
 *         self.fprime = self._fprime_given_f()
 *         self.symbolic_composition = symbolic_composition
 *         self.mask = mask             # <<<<<<<<<<<<<<
 *         self._init_stored_data()
 * 
 */
  __Pyx_INCREF(__pyx_v_mask);
  __Pyx_GIVEREF(__pyx_v_mask);
  __Pyx_GOTREF(__pyx_v_self->mask);
  __Pyx_DECREF(__pyx_v_self->mask);
  __pyx_v_self->mask = __pyx_v_mask;

  /* "flowstar/observers.pyx":99
 *         self.symbolic_composition = symbolic_composition
 *         self.mask = mask
 *         self._init_stored_data()             # <<<<<<<<<<<<<<
 * 
 *     def _init_stored_data(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_stored_data); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/observers.pyx":91
 * 
 * cdef class PolyObserver:
 *     def __init__(PolyObserver self, f, CReach reach,             # <<<<<<<<<<<<<<
 *                  bint symbolic_composition,
 *                  object mask=None):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":101
 *         self._init_stored_data()
 * 
 *     def _init_stored_data(self):             # <<<<<<<<<<<<<<
 *         if self.reach is not None and self.flowstar_successful:
 *             self.reach.prepare()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_3_init_stored_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_3_init_stored_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_stored_data (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_2_init_stored_data(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_2_init_stored_data(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_v_I = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::vector<std::optional<int> >  __pyx_t_7;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> >  __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  __Pyx_RefNannySetupContext("_init_stored_data", 0);

  /* "flowstar/observers.pyx":102
 * 
 *     def _init_stored_data(self):
 *         if self.reach is not None and self.flowstar_successful:             # <<<<<<<<<<<<<<
 *             self.reach.prepare()
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_self->reach) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flowstar_successful); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flowstar/observers.pyx":103
 *     def _init_stored_data(self):
 *         if self.reach is not None and self.flowstar_successful:
 *             self.reach.prepare()             # <<<<<<<<<<<<<<
 * 
 *             # Initialise optional arrays
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->reach), __pyx_n_s_prepare); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 103, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 103, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "flowstar/observers.pyx":106
 * 
 *             # Initialise optional arrays
 *             self.bools = vector[optional[bint]](             # <<<<<<<<<<<<<<
 *                 self.reach.c_reach.flowpipesCompo.size(), optional[bint]())
 *             self.poly_f_fns = vector[optional[interval_time_fn]](
 */
    try {
      __pyx_t_7 = std::vector<std::optional<int> > (__pyx_v_self->reach->c_reach.flowpipesCompo.size(), std::optional<int> ());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 106, __pyx_L1_error)
    }
    __pyx_v_self->bools = __pyx_t_7;

    /* "flowstar/observers.pyx":108
 *             self.bools = vector[optional[bint]](
 *                 self.reach.c_reach.flowpipesCompo.size(), optional[bint]())
 *             self.poly_f_fns = vector[optional[interval_time_fn]](             # <<<<<<<<<<<<<<
 *                 self.reach.c_reach.flowpipesCompo.size(),
 *                 optional[interval_time_fn]())
 */
    try {
      __pyx_t_8 = std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > (__pyx_v_self->reach->c_reach.flowpipesCompo.size(), std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> ());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 108, __pyx_L1_error)
    }
    __pyx_v_self->poly_f_fns = __pyx_t_8;

    /* "flowstar/observers.pyx":111
 *                 self.reach.c_reach.flowpipesCompo.size(),
 *                 optional[interval_time_fn]())
 *             self.poly_fprime_fns = vector[optional[interval_time_fn]](             # <<<<<<<<<<<<<<
 *                 self.reach.c_reach.flowpipesCompo.size(),
 *                 optional[interval_time_fn]())
 */
    try {
      __pyx_t_8 = std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > (__pyx_v_self->reach->c_reach.flowpipesCompo.size(), std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> ());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 111, __pyx_L1_error)
    }
    __pyx_v_self->poly_fprime_fns = __pyx_t_8;

    /* "flowstar/observers.pyx":102
 * 
 *     def _init_stored_data(self):
 *         if self.reach is not None and self.flowstar_successful:             # <<<<<<<<<<<<<<
 *             self.reach.prepare()
 * 
 */
  }

  /* "flowstar/observers.pyx":116
 * 
 *         # Translate mask into a vector
 *         if self.mask is not None:             # <<<<<<<<<<<<<<
 *             for I in self.mask.pos:
 *                 self.masked_regions.push_back(make_interval(I))
 */
  __pyx_t_1 = (__pyx_v_self->mask != Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "flowstar/observers.pyx":117
 *         # Translate mask into a vector
 *         if self.mask is not None:
 *             for I in self.mask.pos:             # <<<<<<<<<<<<<<
 *                 self.masked_regions.push_back(make_interval(I))
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->mask, __pyx_n_s_pos); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 117, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 117, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 117, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 117, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 117, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 117, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_10(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 117, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_I, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "flowstar/observers.pyx":118
 *         if self.mask is not None:
 *             for I in self.mask.pos:
 *                 self.masked_regions.push_back(make_interval(I))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
      try {
        __pyx_v_self->masked_regions.push_back(__pyx_f_8flowstar_8interval_make_interval(__pyx_v_I));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 118, __pyx_L1_error)
      }

      /* "flowstar/observers.pyx":117
 *         # Translate mask into a vector
 *         if self.mask is not None:
 *             for I in self.mask.pos:             # <<<<<<<<<<<<<<
 *                 self.masked_regions.push_back(make_interval(I))
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "flowstar/observers.pyx":116
 * 
 *         # Translate mask into a vector
 *         if self.mask is not None:             # <<<<<<<<<<<<<<
 *             for I in self.mask.pos:
 *                 self.masked_regions.push_back(make_interval(I))
 */
  }

  /* "flowstar/observers.pyx":101
 *         self._init_stored_data()
 * 
 *     def _init_stored_data(self):             # <<<<<<<<<<<<<<
 *         if self.reach is not None and self.flowstar_successful:
 *             self.reach.prepare()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver._init_stored_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_I);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":121
 * 
 *     @property
 *     def flowstar_successful(self):             # <<<<<<<<<<<<<<
 *         return self.reach.ran and self.reach.result <= 3
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_19flowstar_successful_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_19flowstar_successful_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_19flowstar_successful___get__(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_19flowstar_successful___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "flowstar/observers.pyx":122
 *     @property
 *     def flowstar_successful(self):
 *         return self.reach.ran and self.reach.result <= 3             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  if (__pyx_v_self->reach->ran) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->reach->ran); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_self->reach->result <= 3);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/observers.pyx":121
 * 
 *     @property
 *     def flowstar_successful(self):             # <<<<<<<<<<<<<<
 *         return self.reach.ran and self.reach.result <= 3
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.flowstar_successful.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":125
 * 
 *     @property
 *     def time(self):             # <<<<<<<<<<<<<<
 *         if self.reach is not None:
 *             return self.reach.time
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_4time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_4time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_4time___get__(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_4time___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "flowstar/observers.pyx":126
 *     @property
 *     def time(self):
 *         if self.reach is not None:             # <<<<<<<<<<<<<<
 *             return self.reach.time
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->reach) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "flowstar/observers.pyx":127
 *     def time(self):
 *         if self.reach is not None:
 *             return self.reach.time             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->reach), __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "flowstar/observers.pyx":126
 *     @property
 *     def time(self):
 *         if self.reach is not None:             # <<<<<<<<<<<<<<
 *             return self.reach.time
 *         else:
 */
  }

  /* "flowstar/observers.pyx":129
 *             return self.reach.time
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     cdef optional[vector[Interval]] _global_domain(PolyObserver self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "flowstar/observers.pyx":125
 * 
 *     @property
 *     def time(self):             # <<<<<<<<<<<<<<
 *         if self.reach is not None:
 *             return self.reach.time
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":131
 *             return None
 * 
 *     cdef optional[vector[Interval]] _global_domain(PolyObserver self):             # <<<<<<<<<<<<<<
 *         return optional[vector[Interval]]()
 * 
 */

static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_9observers_12PolyObserver__global_domain(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self) {
  std::optional<std::vector<flowstar::Interval> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_global_domain", 0);

  /* "flowstar/observers.pyx":132
 * 
 *     cdef optional[vector[Interval]] _global_domain(PolyObserver self):
 *         return optional[vector[Interval]]()             # <<<<<<<<<<<<<<
 * 
 *     def roots(PolyObserver self, space_domain=None,
 */
  __pyx_r = std::optional<std::vector<flowstar::Interval> > ();
  goto __pyx_L0;

  /* "flowstar/observers.pyx":131
 *             return None
 * 
 *     cdef optional[vector[Interval]] _global_domain(PolyObserver self):             # <<<<<<<<<<<<<<
 *         return optional[vector[Interval]]()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":134
 *         return optional[vector[Interval]]()
 * 
 *     def roots(PolyObserver self, space_domain=None,             # <<<<<<<<<<<<<<
 *               epsilon=0.00001, verbosity=0):
 *         # if not self.flowstar_successful:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_5roots(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_5roots(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_space_domain = 0;
  PyObject *__pyx_v_epsilon = 0;
  PyObject *__pyx_v_verbosity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("roots (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_space_domain,&__pyx_n_s_epsilon,&__pyx_n_s_verbosity,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_float_0_00001);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_space_domain);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbosity);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "roots") < 0)) __PYX_ERR(1, 134, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_space_domain = values[0];
    __pyx_v_epsilon = values[1];
    __pyx_v_verbosity = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("roots", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 134, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_4roots(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self), __pyx_v_space_domain, __pyx_v_epsilon, __pyx_v_verbosity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_4roots(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_space_domain, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_verbosity) {
  std::vector<flowstar::Interval>  __pyx_v_c_res;
  flowstar::Interval __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  int __pyx_t_11;
  std::vector<flowstar::Interval>  __pyx_t_12;
  struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_c_roots __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  std::vector<flowstar::Interval> ::iterator __pyx_t_16;
  flowstar::Interval __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("roots", 0);

  /* "flowstar/observers.pyx":141
 *         cdef vector[Interval] c_res
 * 
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->reach) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "flowstar/observers.pyx":142
 * 
 *         if self.reach is None:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         with self.reach.global_manager:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "flowstar/observers.pyx":141
 *         cdef vector[Interval] c_res
 * 
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "flowstar/observers.pyx":144
 *             return None
 * 
 *         with self.reach.global_manager:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)
 * 
 */
  /*with:*/ {
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 144, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 144, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 144, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "flowstar/observers.pyx":145
 * 
 *         with self.reach.global_manager:
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)             # <<<<<<<<<<<<<<
 * 
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 */
          __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_epsilon); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 145, __pyx_L8_error)
          __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_verbosity); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 145, __pyx_L8_error)
          __pyx_t_13.__pyx_n = 2;
          __pyx_t_13.epsilon = __pyx_t_10;
          __pyx_t_13.verbosity = __pyx_t_11;
          __pyx_t_12 = ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->c_roots(__pyx_v_self, &__pyx_t_13); 
          __pyx_v_c_res = __pyx_t_12;

          /* "flowstar/observers.pyx":144
 *             return None
 * 
 *         with self.reach.global_manager:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("flowstar.observers.PolyObserver.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(1, 144, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_14 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 144, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 144, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (__pyx_t_2 < 0) __PYX_ERR(1, 144, __pyx_L10_except_error)
          __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_5, __pyx_t_6);
            __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(1, 144, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_3) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__3, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 144, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L17;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "flowstar/observers.pyx":147
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)
 * 
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Interval] c_roots(PolyObserver self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_16 = __pyx_v_c_res.begin();
  for (;;) {
    if (!(__pyx_t_16 != __pyx_v_c_res.end())) break;
    __pyx_t_17 = *__pyx_t_16;
    ++__pyx_t_16;
    __pyx_v_r = __pyx_t_17;
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sage); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_RIF); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_r.inf()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_18 = PyFloat_FromDouble(__pyx_v_r.sup()); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_19 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_t_4, __pyx_t_18};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 147, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_t_4, __pyx_t_18};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 147, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    {
      __pyx_t_20 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__pyx_t_19) {
        __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_19); __pyx_t_19 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_11, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_11, __pyx_t_18);
      __pyx_t_4 = 0;
      __pyx_t_18 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "flowstar/observers.pyx":134
 *         return optional[vector[Interval]]()
 * 
 *     def roots(PolyObserver self, space_domain=None,             # <<<<<<<<<<<<<<
 *               epsilon=0.00001, verbosity=0):
 *         # if not self.flowstar_successful:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":149
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 *     cdef vector[Interval] c_roots(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                   double epsilon=0.00001, int verbosity=0):
 *         cdef:
 */

static std::vector<flowstar::Interval>  __pyx_f_8flowstar_9observers_12PolyObserver_c_roots(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_c_roots *__pyx_optional_args) {
  double __pyx_v_epsilon = ((double)0.00001);
  int __pyx_v_verbosity = ((int)0);
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::vector<std::optional<int> > ::iterator __pyx_v_cached_bool;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn;
  std::vector<flowstar::Interval>  __pyx_v_roots;
  std::vector<flowstar::Interval>  __pyx_v_new_roots;
  CYTHON_UNUSED std::vector<flowstar::Interval> ::iterator __pyx_v_root_iter;
  flowstar::Interval __pyx_v_t0;
  flowstar::Interval __pyx_v_t00;
  flowstar::Interval __pyx_v_t;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_f_fn;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_fprime_fn;
  flowstar::Interval __pyx_v_f_domain;
  int __pyx_v_i;
  std::vector<flowstar::Interval>  *__pyx_v_loop_domain;
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_global_domain;
  std::vector<flowstar::Interval>  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  struct __pyx_opt_args_8flowstar_14root_detection_detect_roots __pyx_t_11;
  struct __pyx_opt_args_8flowstar_9observers_12PolyObserver__amalgamate_roots __pyx_t_12;
  __Pyx_RefNannySetupContext("c_roots", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_epsilon = __pyx_optional_args->epsilon;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_verbosity = __pyx_optional_args->verbosity;
      }
    }
  }

  /* "flowstar/observers.pyx":153
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv =\
 *                 self.reach.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain =\
 *                 self.reach.c_reach.domains.begin()
 */
  __pyx_v_tmv = __pyx_v_self->reach->c_reach.flowpipesCompo.begin();

  /* "flowstar/observers.pyx":155
 *                 self.reach.c_reach.flowpipesCompo.begin()
 *             clist[vector[Interval]].iterator domain =\
 *                 self.reach.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[interval_time_fn]].iterator\
 */
  __pyx_v_domain = __pyx_v_self->reach->c_reach.domains.begin();

  /* "flowstar/observers.pyx":156
 *             clist[vector[Interval]].iterator domain =\
 *                 self.reach.c_reach.domains.begin()
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn = self.poly_f_fns.begin()
 */
  __pyx_v_cached_bool = __pyx_v_self->bools.begin();

  /* "flowstar/observers.pyx":158
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn = self.poly_f_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()
 */
  __pyx_v_poly_f_fn = __pyx_v_self->poly_f_fns.begin();

  /* "flowstar/observers.pyx":160
 *                 poly_f_fn = self.poly_f_fns.begin()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 */
  __pyx_v_poly_fprime_fn = __pyx_v_self->poly_fprime_fns.begin();

  /* "flowstar/observers.pyx":163
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 *             vector[Interval].iterator root_iter = roots.begin()             # <<<<<<<<<<<<<<
 *             Interval t0, t00
 *             # The current time should be an interval, to take into account
 */
  __pyx_v_root_iter = __pyx_v_roots.begin();

  /* "flowstar/observers.pyx":171
 *             Interval f_domain
 *             vector[Interval] tmv_domain
 *             int i = 0             # <<<<<<<<<<<<<<
 *             vector[Interval]* loop_domain
 * 
 */
  __pyx_v_i = 0;

  /* "flowstar/observers.pyx":174
 *             vector[Interval]* loop_domain
 * 
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()             # <<<<<<<<<<<<<<
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 */
  __pyx_v_global_domain = ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_global_domain(__pyx_v_self);

  /* "flowstar/observers.pyx":176
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0             # <<<<<<<<<<<<<<
 * 
 *         while self._tm_segment_loop(i, loop_domain, global_domain,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 176, __pyx_L1_error)
    if (unlikely(!(((__pyx_v_self->reach->c_reach.tmVarTab[__pyx_t_1]) == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 176, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/observers.pyx":178
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 * 
 *         while self._tm_segment_loop(i, loop_domain, global_domain,             # <<<<<<<<<<<<<<
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, t, t0, t00):
 */
  while (1) {

    /* "flowstar/observers.pyx":180
 *         while self._tm_segment_loop(i, loop_domain, global_domain,
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, t, t0, t00):             # <<<<<<<<<<<<<<
 *             t00 = t0
 *             if verbosity >= 2:
 */
    __pyx_t_2 = (((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_tm_segment_loop(__pyx_v_self, __pyx_v_i, __pyx_v_loop_domain, __pyx_v_global_domain, __pyx_v_tmv, __pyx_v_domain, __pyx_v_cached_bool, __pyx_v_poly_f_fn, __pyx_v_poly_fprime_fn, __pyx_v_t, __pyx_v_t0, __pyx_v_t00) != 0);
    if (!__pyx_t_2) break;

    /* "flowstar/observers.pyx":181
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, t, t0, t00):
 *             t00 = t0             # <<<<<<<<<<<<<<
 *             if verbosity >= 2:
 *                 print("===")
 */
    __pyx_v_t00 = __pyx_v_t0;

    /* "flowstar/observers.pyx":182
 *                                     poly_f_fn, poly_fprime_fn, t, t0, t00):
 *             t00 = t0
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(
 */
    __pyx_t_2 = ((__pyx_v_verbosity >= 2) != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":183
 *             t00 = t0
 *             if verbosity >= 2:
 *                 print("===")             # <<<<<<<<<<<<<<
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(t),
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 183, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "flowstar/observers.pyx":184
 *             if verbosity >= 2:
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(t),
 *                     interval.as_str(deref(domain)[0])))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_reached_detect_roots_t, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "flowstar/observers.pyx":185
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(t),             # <<<<<<<<<<<<<<
 *                     interval.as_str(deref(domain)[0])))
 * 
 */
      __pyx_t_5 = __pyx_f_8flowstar_8interval_as_str(__pyx_v_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "flowstar/observers.pyx":186
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(t),
 *                     interval.as_str(deref(domain)[0])))             # <<<<<<<<<<<<<<
 * 
 *             ### Isolate roots for current timestep
 */
      __pyx_t_6 = __pyx_f_8flowstar_8interval_as_str(((*__pyx_v_domain)[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 184, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 184, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flowstar/observers.pyx":184
 *             if verbosity >= 2:
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(t),
 *                     interval.as_str(deref(domain)[0])))
 */
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flowstar/observers.pyx":182
 *                                     poly_f_fn, poly_fprime_fn, t, t0, t00):
 *             t00 = t0
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(
 */
    }

    /* "flowstar/observers.pyx":192
 *             ### If there is a definitive boolean value, there can be no roots
 *             ### here
 *             if deref(cached_bool).has_value():             # <<<<<<<<<<<<<<
 *                 if verbosity >= 3:
 *                     print("skipping given cached bool!")
 */
    __pyx_t_2 = ((*__pyx_v_cached_bool).has_value() != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":193
 *             ### here
 *             if deref(cached_bool).has_value():
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("skipping given cached bool!")
 *                 continue
 */
      __pyx_t_2 = ((__pyx_v_verbosity >= 3) != 0);
      if (__pyx_t_2) {

        /* "flowstar/observers.pyx":194
 *             if deref(cached_bool).has_value():
 *                 if verbosity >= 3:
 *                     print("skipping given cached bool!")             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 194, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "flowstar/observers.pyx":193
 *             ### here
 *             if deref(cached_bool).has_value():
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("skipping given cached bool!")
 *                 continue
 */
      }

      /* "flowstar/observers.pyx":195
 *                 if verbosity >= 3:
 *                     print("skipping given cached bool!")
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             ### Use mask to determine what region is compatible with the mask
 */
      goto __pyx_L3_continue;

      /* "flowstar/observers.pyx":192
 *             ### If there is a definitive boolean value, there can be no roots
 *             ### here
 *             if deref(cached_bool).has_value():             # <<<<<<<<<<<<<<
 *                 if verbosity >= 3:
 *                     print("skipping given cached bool!")
 */
    }

    /* "flowstar/observers.pyx":198
 * 
 *             ### Use mask to determine what region is compatible with the mask
 *             if not self._mask_intersect_check(t, t0, verbosity):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_2 = ((!(((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_mask_intersect_check(__pyx_v_self, __pyx_v_t, __pyx_v_t0, __pyx_v_verbosity) != 0)) != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":199
 *             ### Use mask to determine what region is compatible with the mask
 *             if not self._mask_intersect_check(t, t0, verbosity):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             ### Retrieve cached symbolically composed functions, or perform
 */
      goto __pyx_L3_continue;

      /* "flowstar/observers.pyx":198
 * 
 *             ### Use mask to determine what region is compatible with the mask
 *             if not self._mask_intersect_check(t, t0, verbosity):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "flowstar/observers.pyx":203
 *             ### Retrieve cached symbolically composed functions, or perform
 *             ### functional composition.
 *             self._pre_retrieve_f(f_fn, fprime_fn,             # <<<<<<<<<<<<<<
 *                                  deref(poly_f_fn), deref(poly_fprime_fn),
 *                                  deref(tmv), loop_domain)
 */
    ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_pre_retrieve_f(__pyx_v_self, __pyx_v_f_fn, __pyx_v_fprime_fn, (*__pyx_v_poly_f_fn), (*__pyx_v_poly_fprime_fn), (*__pyx_v_tmv), __pyx_v_loop_domain);

    /* "flowstar/observers.pyx":208
 * 
 *             # Evaluate f over the whole domain
 *             f_domain = f_fn.call(t0)             # <<<<<<<<<<<<<<
 * 
 *             # Only do anything if there is a chance of a root
 */
    __pyx_v_f_domain = __pyx_v_f_fn.operator()(__pyx_v_t0);

    /* "flowstar/observers.pyx":211
 * 
 *             # Only do anything if there is a chance of a root
 *             if not (f_domain.inf() <= 0 <= f_domain.sup()):             # <<<<<<<<<<<<<<
 *                 if verbosity >= 3:
 *                     print("skipping given consistent value over domain")
 */
    __pyx_t_2 = (__pyx_v_f_domain.inf() <= 0.0);
    if (__pyx_t_2) {
      __pyx_t_2 = (0.0 <= __pyx_v_f_domain.sup());
    }
    __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_10) {

      /* "flowstar/observers.pyx":212
 *             # Only do anything if there is a chance of a root
 *             if not (f_domain.inf() <= 0 <= f_domain.sup()):
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("skipping given consistent value over domain")
 *                 # Annoying code to make Cython allow assignment to a r-value
 */
      __pyx_t_10 = ((__pyx_v_verbosity >= 3) != 0);
      if (__pyx_t_10) {

        /* "flowstar/observers.pyx":213
 *             if not (f_domain.inf() <= 0 <= f_domain.sup()):
 *                 if verbosity >= 3:
 *                     print("skipping given consistent value over domain")             # <<<<<<<<<<<<<<
 *                 # Annoying code to make Cython allow assignment to a r-value
 *                 (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "flowstar/observers.pyx":212
 *             # Only do anything if there is a chance of a root
 *             if not (f_domain.inf() <= 0 <= f_domain.sup()):
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("skipping given consistent value over domain")
 *                 # Annoying code to make Cython allow assignment to a r-value
 */
      }

      /* "flowstar/observers.pyx":215
 *                     print("skipping given consistent value over domain")
 *                 # Annoying code to make Cython allow assignment to a r-value
 *                 (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      ((&(*__pyx_v_cached_bool))[0]) = std::optional<int> ((__pyx_v_f_domain.inf() > 0.0));

      /* "flowstar/observers.pyx":216
 *                 # Annoying code to make Cython allow assignment to a r-value
 *                 (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             ### Perform symbolic or functional composition.
 */
      goto __pyx_L3_continue;

      /* "flowstar/observers.pyx":211
 * 
 *             # Only do anything if there is a chance of a root
 *             if not (f_domain.inf() <= 0 <= f_domain.sup()):             # <<<<<<<<<<<<<<
 *                 if verbosity >= 3:
 *                     print("skipping given consistent value over domain")
 */
    }

    /* "flowstar/observers.pyx":219
 * 
 *             ### Perform symbolic or functional composition.
 *             self._post_retrieve_f(f_fn, fprime_fn,             # <<<<<<<<<<<<<<
 *                                   deref(poly_f_fn), deref(poly_fprime_fn),
 *                                   deref(tmv), loop_domain)
 */
    ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_post_retrieve_f(__pyx_v_self, __pyx_v_f_fn, __pyx_v_fprime_fn, (*__pyx_v_poly_f_fn), (*__pyx_v_poly_fprime_fn), (*__pyx_v_tmv), __pyx_v_loop_domain);

    /* "flowstar/observers.pyx":224
 * 
 *             ### Perform root detection
 *             root_detection.detect_roots(new_roots, f_fn, fprime_fn, t0,             # <<<<<<<<<<<<<<
 *                                         epsilon=epsilon,
 *                                         verbosity=verbosity)
 */
    __pyx_t_11.__pyx_n = 2;
    __pyx_t_11.epsilon = __pyx_v_epsilon;
    __pyx_t_11.verbosity = __pyx_v_verbosity;
    __pyx_f_8flowstar_14root_detection_detect_roots(__pyx_v_new_roots, __pyx_v_f_fn, __pyx_v_fprime_fn, __pyx_v_t0, &__pyx_t_11); 

    /* "flowstar/observers.pyx":230
 *             ### Amalgamate new and existing roots, shifting new roots by
 *             ### current time, and merging adjacent roots
 *             self._amalgamate_roots(roots, new_roots, t, verbosity=verbosity)             # <<<<<<<<<<<<<<
 *             new_roots.clear()
 * 
 */
    __pyx_t_12.__pyx_n = 1;
    __pyx_t_12.verbosity = __pyx_v_verbosity;
    ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_amalgamate_roots(__pyx_v_self, __pyx_v_roots, __pyx_v_new_roots, __pyx_v_t, &__pyx_t_12); 

    /* "flowstar/observers.pyx":231
 *             ### current time, and merging adjacent roots
 *             self._amalgamate_roots(roots, new_roots, t, verbosity=verbosity)
 *             new_roots.clear()             # <<<<<<<<<<<<<<
 * 
 *         return roots
 */
    __pyx_v_new_roots.clear();
    __pyx_L3_continue:;
  }

  /* "flowstar/observers.pyx":233
 *             new_roots.clear()
 * 
 *         return roots             # <<<<<<<<<<<<<<
 * 
 *     cdef Interval eval_interval(PolyObserver self, Interval & x,
 */
  __pyx_r = __pyx_v_roots;
  goto __pyx_L0;

  /* "flowstar/observers.pyx":149
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 *     cdef vector[Interval] c_roots(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                   double epsilon=0.00001, int verbosity=0):
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("flowstar.observers.PolyObserver.c_roots", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":235
 *         return roots
 * 
 *     cdef Interval eval_interval(PolyObserver self, Interval & x,             # <<<<<<<<<<<<<<
 *                                 int verbosity=0):
 *         cdef:
 */

static flowstar::Interval __pyx_f_8flowstar_9observers_12PolyObserver_eval_interval(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_x, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_interval *__pyx_optional_args) {
  int __pyx_v_verbosity = ((int)0);
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::vector<std::optional<int> > ::iterator __pyx_v_cached_bool;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn;
  std::vector<flowstar::Interval>  __pyx_v_roots;
  CYTHON_UNUSED std::vector<flowstar::Interval> ::iterator __pyx_v_root_iter;
  flowstar::Interval __pyx_v_t0;
  flowstar::Interval __pyx_v_t00;
  flowstar::Interval __pyx_v_t;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_f_fn;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_fprime_fn;
  int __pyx_v_i;
  std::vector<flowstar::Interval>  *__pyx_v_loop_domain;
  std::optional<flowstar::Interval>  __pyx_v_final_res;
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_global_domain;
  flowstar::Interval __pyx_v_y;
  flowstar::Interval __pyx_v_res;
  flowstar::Interval __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("eval_interval", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_verbosity = __pyx_optional_args->verbosity;
    }
  }

  /* "flowstar/observers.pyx":239
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv =\
 *                 self.reach.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain =\
 *                 self.reach.c_reach.domains.begin()
 */
  __pyx_v_tmv = __pyx_v_self->reach->c_reach.flowpipesCompo.begin();

  /* "flowstar/observers.pyx":241
 *                 self.reach.c_reach.flowpipesCompo.begin()
 *             clist[vector[Interval]].iterator domain =\
 *                 self.reach.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[interval_time_fn]].iterator \
 */
  __pyx_v_domain = __pyx_v_self->reach->c_reach.domains.begin();

  /* "flowstar/observers.pyx":242
 *             clist[vector[Interval]].iterator domain =\
 *                 self.reach.c_reach.domains.begin()
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_f_fn = self.poly_f_fns.begin()
 */
  __pyx_v_cached_bool = __pyx_v_self->bools.begin();

  /* "flowstar/observers.pyx":244
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_f_fn = self.poly_f_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()
 */
  __pyx_v_poly_f_fn = __pyx_v_self->poly_f_fns.begin();

  /* "flowstar/observers.pyx":246
 *                 poly_f_fn = self.poly_f_fns.begin()
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 */
  __pyx_v_poly_fprime_fn = __pyx_v_self->poly_fprime_fns.begin();

  /* "flowstar/observers.pyx":249
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 *             vector[Interval].iterator root_iter = roots.begin()             # <<<<<<<<<<<<<<
 *             Interval t0, t00
 *             # The current time should be an interval, to take into account
 */
  __pyx_v_root_iter = __pyx_v_roots.begin();

  /* "flowstar/observers.pyx":257
 *             Interval f_domain
 *             vector[Interval] tmv_domain
 *             int i = 0             # <<<<<<<<<<<<<<
 *             vector[Interval]* loop_domain
 *             optional[Interval] final_res
 */
  __pyx_v_i = 0;

  /* "flowstar/observers.pyx":261
 *             optional[Interval] final_res
 * 
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()             # <<<<<<<<<<<<<<
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 */
  __pyx_v_global_domain = ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_global_domain(__pyx_v_self);

  /* "flowstar/observers.pyx":263
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0             # <<<<<<<<<<<<<<
 * 
 *         while (self._tm_segment_loop(i, loop_domain, global_domain,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 263, __pyx_L1_error)
    if (unlikely(!(((__pyx_v_self->reach->c_reach.tmVarTab[__pyx_t_1]) == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 263, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/observers.pyx":265
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 * 
 *         while (self._tm_segment_loop(i, loop_domain, global_domain,             # <<<<<<<<<<<<<<
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, t, t0, t00)\
 */
  while (1) {

    /* "flowstar/observers.pyx":267
 *         while (self._tm_segment_loop(i, loop_domain, global_domain,
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, t, t0, t00)\             # <<<<<<<<<<<<<<
 *                and t.inf() <= x.sup()):
 *             t00 = t0
 */
    __pyx_t_3 = (((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_tm_segment_loop(__pyx_v_self, __pyx_v_i, __pyx_v_loop_domain, __pyx_v_global_domain, __pyx_v_tmv, __pyx_v_domain, __pyx_v_cached_bool, __pyx_v_poly_f_fn, __pyx_v_poly_fprime_fn, __pyx_v_t, __pyx_v_t0, __pyx_v_t00) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/observers.pyx":268
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, t, t0, t00)\
 *                and t.inf() <= x.sup()):             # <<<<<<<<<<<<<<
 *             t00 = t0
 *             if verbosity >= 2:
 */
    __pyx_t_3 = ((__pyx_v_t.inf() <= __pyx_v_x.sup()) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_2) break;

    /* "flowstar/observers.pyx":269
 *                                     poly_f_fn, poly_fprime_fn, t, t0, t00)\
 *                and t.inf() <= x.sup()):
 *             t00 = t0             # <<<<<<<<<<<<<<
 *             if verbosity >= 2:
 *                 print("===")
 */
    __pyx_v_t00 = __pyx_v_t0;

    /* "flowstar/observers.pyx":270
 *                and t.inf() <= x.sup()):
 *             t00 = t0
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(
 */
    __pyx_t_2 = ((__pyx_v_verbosity >= 2) != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":271
 *             t00 = t0
 *             if verbosity >= 2:
 *                 print("===")             # <<<<<<<<<<<<<<
 *                 print("reached interval eval t={} + {}".format(
 *                     interval.as_str(t),
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flowstar/observers.pyx":272
 *             if verbosity >= 2:
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(t),
 *                     interval.as_str(deref(domain)[0])))
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_reached_interval_eval_t, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "flowstar/observers.pyx":273
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(
 *                     interval.as_str(t),             # <<<<<<<<<<<<<<
 *                     interval.as_str(deref(domain)[0])))
 * 
 */
      __pyx_t_6 = __pyx_f_8flowstar_8interval_as_str(__pyx_v_t); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 273, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "flowstar/observers.pyx":274
 *                 print("reached interval eval t={} + {}".format(
 *                     interval.as_str(t),
 *                     interval.as_str(deref(domain)[0])))             # <<<<<<<<<<<<<<
 * 
 *             ### Perform mask intersection
 */
      __pyx_t_7 = __pyx_f_8flowstar_8interval_as_str(((*__pyx_v_domain)[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 272, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 272, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 272, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 272, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "flowstar/observers.pyx":272
 *             if verbosity >= 2:
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(t),
 *                     interval.as_str(deref(domain)[0])))
 */
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "flowstar/observers.pyx":270
 *                and t.inf() <= x.sup()):
 *             t00 = t0
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(
 */
    }

    /* "flowstar/observers.pyx":283
 * 
 *             ### Absolute time domain for current interval
 *             y = t0             # <<<<<<<<<<<<<<
 *             y.add_assign(t)
 * 
 */
    __pyx_v_y = __pyx_v_t0;

    /* "flowstar/observers.pyx":284
 *             ### Absolute time domain for current interval
 *             y = t0
 *             y.add_assign(t)             # <<<<<<<<<<<<<<
 * 
 *             ### Skip if there is no overlap
 */
    (void)(__pyx_v_y.operator+=(__pyx_v_t));

    /* "flowstar/observers.pyx":287
 * 
 *             ### Skip if there is no overlap
 *             if not interval.overlaps(x, y):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_2 = ((!(__pyx_f_8flowstar_8interval_overlaps(__pyx_v_x, __pyx_v_y) != 0)) != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":288
 *             ### Skip if there is no overlap
 *             if not interval.overlaps(x, y):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             ### Intersect and shift back to relative reference
 */
      goto __pyx_L3_continue;

      /* "flowstar/observers.pyx":287
 * 
 *             ### Skip if there is no overlap
 *             if not interval.overlaps(x, y):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "flowstar/observers.pyx":291
 * 
 *             ### Intersect and shift back to relative reference
 *             y.intersect_assign(x)             # <<<<<<<<<<<<<<
 *             y.sub_assign(t)
 *             y.intersect_assign(t0)
 */
    __pyx_v_y.intersect_assign(__pyx_v_x);

    /* "flowstar/observers.pyx":292
 *             ### Intersect and shift back to relative reference
 *             y.intersect_assign(x)
 *             y.sub_assign(t)             # <<<<<<<<<<<<<<
 *             y.intersect_assign(t0)
 * 
 */
    (void)(__pyx_v_y.operator-=(__pyx_v_t));

    /* "flowstar/observers.pyx":293
 *             y.intersect_assign(x)
 *             y.sub_assign(t)
 *             y.intersect_assign(t0)             # <<<<<<<<<<<<<<
 * 
 *             ### Retrieve cached symbolically composed functions, or perform
 */
    __pyx_v_y.intersect_assign(__pyx_v_t0);

    /* "flowstar/observers.pyx":297
 *             ### Retrieve cached symbolically composed functions, or perform
 *             ### functional composition.
 *             self._pre_retrieve_f(f_fn, fprime_fn,             # <<<<<<<<<<<<<<
 *                                  deref(poly_f_fn), deref(poly_fprime_fn),
 *                                  deref(tmv), loop_domain)
 */
    ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_pre_retrieve_f(__pyx_v_self, __pyx_v_f_fn, __pyx_v_fprime_fn, (*__pyx_v_poly_f_fn), (*__pyx_v_poly_fprime_fn), (*__pyx_v_tmv), __pyx_v_loop_domain);

    /* "flowstar/observers.pyx":300
 *                                  deref(poly_f_fn), deref(poly_fprime_fn),
 *                                  deref(tmv), loop_domain)
 *             self._post_retrieve_f(f_fn, fprime_fn,             # <<<<<<<<<<<<<<
 *                                   deref(poly_f_fn), deref(poly_fprime_fn),
 *                                   deref(tmv), loop_domain)
 */
    ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_post_retrieve_f(__pyx_v_self, __pyx_v_f_fn, __pyx_v_fprime_fn, (*__pyx_v_poly_f_fn), (*__pyx_v_poly_fprime_fn), (*__pyx_v_tmv), __pyx_v_loop_domain);

    /* "flowstar/observers.pyx":305
 * 
 *             ### Interval evaluation over domain
 *             res = f_fn.call(y)             # <<<<<<<<<<<<<<
 *             if verbosity >= 3:
 *                 print("res = {}".format(interval.as_str(res)))
 */
    __pyx_v_res = __pyx_v_f_fn.operator()(__pyx_v_y);

    /* "flowstar/observers.pyx":306
 *             ### Interval evaluation over domain
 *             res = f_fn.call(y)
 *             if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                 print("res = {}".format(interval.as_str(res)))
 * 
 */
    __pyx_t_2 = ((__pyx_v_verbosity >= 3) != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":307
 *             res = f_fn.call(y)
 *             if verbosity >= 3:
 *                 print("res = {}".format(interval.as_str(res)))             # <<<<<<<<<<<<<<
 * 
 *             ### Amalgamate result
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_res, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __pyx_f_8flowstar_8interval_as_str(__pyx_v_res); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 307, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_10};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 307, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_10};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 307, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 307, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 307, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flowstar/observers.pyx":306
 *             ### Interval evaluation over domain
 *             res = f_fn.call(y)
 *             if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                 print("res = {}".format(interval.as_str(res)))
 * 
 */
    }

    /* "flowstar/observers.pyx":310
 * 
 *             ### Amalgamate result
 *             if final_res.has_value():             # <<<<<<<<<<<<<<
 *                 interval.interval_union(final_res.value(), res)
 *             else:
 */
    __pyx_t_2 = (__pyx_v_final_res.has_value() != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":311
 *             ### Amalgamate result
 *             if final_res.has_value():
 *                 interval.interval_union(final_res.value(), res)             # <<<<<<<<<<<<<<
 *             else:
 *                 final_res = optional[Interval](res)
 */
      __pyx_f_8flowstar_8interval_interval_union(__pyx_v_final_res.value(), __pyx_v_res);

      /* "flowstar/observers.pyx":310
 * 
 *             ### Amalgamate result
 *             if final_res.has_value():             # <<<<<<<<<<<<<<
 *                 interval.interval_union(final_res.value(), res)
 *             else:
 */
      goto __pyx_L10;
    }

    /* "flowstar/observers.pyx":313
 *                 interval.interval_union(final_res.value(), res)
 *             else:
 *                 final_res = optional[Interval](res)             # <<<<<<<<<<<<<<
 * 
 *         assert final_res.has_value()
 */
    /*else*/ {
      __pyx_v_final_res = std::optional<flowstar::Interval> (__pyx_v_res);
    }
    __pyx_L10:;
    __pyx_L3_continue:;
  }

  /* "flowstar/observers.pyx":315
 *                 final_res = optional[Interval](res)
 * 
 *         assert final_res.has_value()             # <<<<<<<<<<<<<<
 *         return final_res.value()
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(__pyx_v_final_res.has_value() != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 315, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/observers.pyx":316
 * 
 *         assert final_res.has_value()
 *         return final_res.value()             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, t, verbosity=0):
 */
  __pyx_r = __pyx_v_final_res.value();
  goto __pyx_L0;

  /* "flowstar/observers.pyx":235
 *         return roots
 * 
 *     cdef Interval eval_interval(PolyObserver self, Interval & x,             # <<<<<<<<<<<<<<
 *                                 int verbosity=0):
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("flowstar.observers.PolyObserver.eval_interval", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":318
 *         return final_res.value()
 * 
 *     def __call__(self, t, verbosity=0):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_7__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_7__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_verbosity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_verbosity,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbosity);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(1, 318, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = values[0];
    __pyx_v_verbosity = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 318, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_6__call__(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self), __pyx_v_t, __pyx_v_verbosity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_6__call__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_verbosity) {
  PyObject *__pyx_v_RIF = NULL;
  flowstar::Interval __pyx_v_res;
  flowstar::Interval __pyx_v_I;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  flowstar::Interval __pyx_t_11;
  struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_interval __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "flowstar/observers.pyx":319
 * 
 *     def __call__(self, t, verbosity=0):
 *         from sage.all import RIF             # <<<<<<<<<<<<<<
 * 
 *         if self.reach is None:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_RIF);
  __Pyx_GIVEREF(__pyx_n_s_RIF);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_RIF);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_RIF); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_RIF = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/observers.pyx":321
 *         from sage.all import RIF
 * 
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_self->reach) == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "flowstar/observers.pyx":322
 * 
 *         if self.reach is None:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         self.reach.prepare()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "flowstar/observers.pyx":321
 *         from sage.all import RIF
 * 
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "flowstar/observers.pyx":324
 *             return None
 * 
 *         self.reach.prepare()             # <<<<<<<<<<<<<<
 * 
 *         # Convert python interval to flow* interval
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->reach), __pyx_n_s_prepare); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 324, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 324, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/observers.pyx":329
 *         cdef:
 *             Interval res
 *             Interval I = interval.make_interval(t)             # <<<<<<<<<<<<<<
 * 
 *         with self.reach.global_manager: #  Use captured globals
 */
  __pyx_v_I = __pyx_f_8flowstar_8interval_make_interval(__pyx_v_t);

  /* "flowstar/observers.pyx":331
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I, verbosity=verbosity)
 * 
 */
  /*with:*/ {
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 331, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 331, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "flowstar/observers.pyx":332
 * 
 *         with self.reach.global_manager: #  Use captured globals
 *             res = self.eval_interval(I, verbosity=verbosity)             # <<<<<<<<<<<<<<
 * 
 *         return RIF(res.inf(), res.sup())
 */
          __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_verbosity); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 332, __pyx_L8_error)
          __pyx_t_12.__pyx_n = 1;
          __pyx_t_12.verbosity = __pyx_t_10;
          __pyx_t_11 = ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->eval_interval(__pyx_v_self, __pyx_v_I, &__pyx_t_12); 
          __pyx_v_res = __pyx_t_11;

          /* "flowstar/observers.pyx":331
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I, verbosity=verbosity)
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("flowstar.observers.PolyObserver.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_5) < 0) __PYX_ERR(1, 331, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_13 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 331, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 331, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__pyx_t_4 < 0) __PYX_ERR(1, 331, __pyx_L10_except_error)
          __pyx_t_3 = ((!(__pyx_t_4 != 0)) != 0);
          if (__pyx_t_3) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_5);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_1, __pyx_t_5);
            __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_5 = 0; 
            __PYX_ERR(1, 331, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__9, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 331, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L17;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "flowstar/observers.pyx":334
 *             res = self.eval_interval(I, verbosity=verbosity)
 * 
 *         return RIF(res.inf(), res.sup())             # <<<<<<<<<<<<<<
 * 
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & x,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_res.inf()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_res.sup()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_RIF);
  __pyx_t_13 = __pyx_v_RIF; __pyx_t_15 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_1, __pyx_t_2};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 334, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_1, __pyx_t_2};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 334, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_16 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if (__pyx_t_15) {
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_10, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_10, __pyx_t_2);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "flowstar/observers.pyx":318
 *         return final_res.value()
 * 
 *     def __call__(self, t, verbosity=0):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_RIF);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":336
 *         return RIF(res.inf(), res.sup())
 * 
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & x,             # <<<<<<<<<<<<<<
 *                                     int verbosity=0):
 *         cdef:
 */

static boost::logic::tribool __pyx_f_8flowstar_9observers_12PolyObserver_eval_bool_interval(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_x, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_bool_interval *__pyx_optional_args) {
  int __pyx_v_verbosity = ((int)0);
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::vector<std::optional<int> > ::iterator __pyx_v_cached_bool;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn;
  std::vector<flowstar::Interval>  __pyx_v_roots;
  CYTHON_UNUSED std::vector<flowstar::Interval> ::iterator __pyx_v_root_iter;
  flowstar::Interval __pyx_v_t0;
  flowstar::Interval __pyx_v_t00;
  flowstar::Interval __pyx_v_t;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_f_fn;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_fprime_fn;
  flowstar::Interval __pyx_v_f_domain;
  flowstar::Interval __pyx_v_f_y;
  int __pyx_v_i;
  std::vector<flowstar::Interval>  *__pyx_v_loop_domain;
  boost::logic::tribool __pyx_v_final_res;
  boost::logic::tribool __pyx_v_res;
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_global_domain;
  flowstar::Interval __pyx_v_y;
  boost::logic::tribool __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("eval_bool_interval", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_verbosity = __pyx_optional_args->verbosity;
    }
  }

  /* "flowstar/observers.pyx":340
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv =\
 *                 self.reach.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain =\
 *                 self.reach.c_reach.domains.begin()
 */
  __pyx_v_tmv = __pyx_v_self->reach->c_reach.flowpipesCompo.begin();

  /* "flowstar/observers.pyx":342
 *                 self.reach.c_reach.flowpipesCompo.begin()
 *             clist[vector[Interval]].iterator domain =\
 *                 self.reach.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[interval_time_fn]].iterator \
 */
  __pyx_v_domain = __pyx_v_self->reach->c_reach.domains.begin();

  /* "flowstar/observers.pyx":343
 *             clist[vector[Interval]].iterator domain =\
 *                 self.reach.c_reach.domains.begin()
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_f_fn = self.poly_f_fns.begin()
 */
  __pyx_v_cached_bool = __pyx_v_self->bools.begin();

  /* "flowstar/observers.pyx":345
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_f_fn = self.poly_f_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()
 */
  __pyx_v_poly_f_fn = __pyx_v_self->poly_f_fns.begin();

  /* "flowstar/observers.pyx":347
 *                 poly_f_fn = self.poly_f_fns.begin()
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 */
  __pyx_v_poly_fprime_fn = __pyx_v_self->poly_fprime_fns.begin();

  /* "flowstar/observers.pyx":350
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 *             vector[Interval].iterator root_iter = roots.begin()             # <<<<<<<<<<<<<<
 *             Interval t0, t00
 *             # The current time should be an interval, to take into account
 */
  __pyx_v_root_iter = __pyx_v_roots.begin();

  /* "flowstar/observers.pyx":358
 *             Interval f_domain, f_y
 *             vector[Interval] tmv_domain
 *             int i = 0             # <<<<<<<<<<<<<<
 *             vector[Interval]* loop_domain
 *             tribool final_res = <tribool>True
 */
  __pyx_v_i = 0;

  /* "flowstar/observers.pyx":360
 *             int i = 0
 *             vector[Interval]* loop_domain
 *             tribool final_res = <tribool>True             # <<<<<<<<<<<<<<
 *             tribool res
 * 
 */
  __pyx_v_final_res = ((boost::logic::tribool)1);

  /* "flowstar/observers.pyx":363
 *             tribool res
 * 
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()             # <<<<<<<<<<<<<<
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 */
  __pyx_v_global_domain = ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_global_domain(__pyx_v_self);

  /* "flowstar/observers.pyx":365
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0             # <<<<<<<<<<<<<<
 * 
 *         while (self._tm_segment_loop(i, loop_domain, global_domain,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 365, __pyx_L1_error)
    if (unlikely(!(((__pyx_v_self->reach->c_reach.tmVarTab[__pyx_t_1]) == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 365, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/observers.pyx":367
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 * 
 *         while (self._tm_segment_loop(i, loop_domain, global_domain,             # <<<<<<<<<<<<<<
 *                                      tmv, domain, cached_bool,
 *                                      poly_f_fn, poly_fprime_fn, t, t0, t00) \
 */
  while (1) {

    /* "flowstar/observers.pyx":369
 *         while (self._tm_segment_loop(i, loop_domain, global_domain,
 *                                      tmv, domain, cached_bool,
 *                                      poly_f_fn, poly_fprime_fn, t, t0, t00) \             # <<<<<<<<<<<<<<
 *                and t.inf() <= x.sup()
 *                and <cbool>(final_res != <cbool>False)):
 */
    __pyx_t_3 = (((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_tm_segment_loop(__pyx_v_self, __pyx_v_i, __pyx_v_loop_domain, __pyx_v_global_domain, __pyx_v_tmv, __pyx_v_domain, __pyx_v_cached_bool, __pyx_v_poly_f_fn, __pyx_v_poly_fprime_fn, __pyx_v_t, __pyx_v_t0, __pyx_v_t00) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/observers.pyx":370
 *                                      tmv, domain, cached_bool,
 *                                      poly_f_fn, poly_fprime_fn, t, t0, t00) \
 *                and t.inf() <= x.sup()             # <<<<<<<<<<<<<<
 *                and <cbool>(final_res != <cbool>False)):
 *             t00 = t0
 */
    __pyx_t_3 = ((__pyx_v_t.inf() <= __pyx_v_x.sup()) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/observers.pyx":371
 *                                      poly_f_fn, poly_fprime_fn, t, t0, t00) \
 *                and t.inf() <= x.sup()
 *                and <cbool>(final_res != <cbool>False)):             # <<<<<<<<<<<<<<
 *             t00 = t0
 *             if verbosity >= 2:
 */
    __pyx_t_3 = (((bool)(__pyx_v_final_res != ((bool)0))) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_2) break;

    /* "flowstar/observers.pyx":372
 *                and t.inf() <= x.sup()
 *                and <cbool>(final_res != <cbool>False)):
 *             t00 = t0             # <<<<<<<<<<<<<<
 *             if verbosity >= 2:
 *                 print("===")
 */
    __pyx_v_t00 = __pyx_v_t0;

    /* "flowstar/observers.pyx":373
 *                and <cbool>(final_res != <cbool>False)):
 *             t00 = t0
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(
 */
    __pyx_t_2 = ((__pyx_v_verbosity >= 2) != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":374
 *             t00 = t0
 *             if verbosity >= 2:
 *                 print("===")             # <<<<<<<<<<<<<<
 *                 print("reached interval eval t={} + {}".format(
 *                     interval.as_str(t),
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flowstar/observers.pyx":375
 *             if verbosity >= 2:
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(t),
 *                     interval.as_str(deref(domain)[0])))
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_reached_interval_eval_t, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "flowstar/observers.pyx":376
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(
 *                     interval.as_str(t),             # <<<<<<<<<<<<<<
 *                     interval.as_str(deref(domain)[0])))
 * 
 */
      __pyx_t_6 = __pyx_f_8flowstar_8interval_as_str(__pyx_v_t); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "flowstar/observers.pyx":377
 *                 print("reached interval eval t={} + {}".format(
 *                     interval.as_str(t),
 *                     interval.as_str(deref(domain)[0])))             # <<<<<<<<<<<<<<
 * 
 *             ### Perform mask intersection
 */
      __pyx_t_7 = __pyx_f_8flowstar_8interval_as_str(((*__pyx_v_domain)[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 375, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "flowstar/observers.pyx":375
 *             if verbosity >= 2:
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(t),
 *                     interval.as_str(deref(domain)[0])))
 */
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "flowstar/observers.pyx":373
 *                and <cbool>(final_res != <cbool>False)):
 *             t00 = t0
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("===")
 *                 print("reached interval eval t={} + {}".format(
 */
    }

    /* "flowstar/observers.pyx":386
 * 
 *             ### Absolute time domain for current interval
 *             y = t0             # <<<<<<<<<<<<<<
 *             y.add_assign(t)
 * 
 */
    __pyx_v_y = __pyx_v_t0;

    /* "flowstar/observers.pyx":387
 *             ### Absolute time domain for current interval
 *             y = t0
 *             y.add_assign(t)             # <<<<<<<<<<<<<<
 * 
 *             ### Skip if there is no overlap
 */
    (void)(__pyx_v_y.operator+=(__pyx_v_t));

    /* "flowstar/observers.pyx":390
 * 
 *             ### Skip if there is no overlap
 *             if not interval.overlaps(x, y):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_2 = ((!(__pyx_f_8flowstar_8interval_overlaps(__pyx_v_x, __pyx_v_y) != 0)) != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":391
 *             ### Skip if there is no overlap
 *             if not interval.overlaps(x, y):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             ### If there is a cached result, use it!
 */
      goto __pyx_L3_continue;

      /* "flowstar/observers.pyx":390
 * 
 *             ### Skip if there is no overlap
 *             if not interval.overlaps(x, y):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "flowstar/observers.pyx":394
 * 
 *             ### If there is a cached result, use it!
 *             if deref(cached_bool).has_value():             # <<<<<<<<<<<<<<
 *                 res = tribool(deref(cached_bool).value())
 *             else:
 */
    __pyx_t_2 = ((*__pyx_v_cached_bool).has_value() != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":395
 *             ### If there is a cached result, use it!
 *             if deref(cached_bool).has_value():
 *                 res = tribool(deref(cached_bool).value())             # <<<<<<<<<<<<<<
 *             else:
 *                 ### Intersect and shift back to relative reference
 */
      __pyx_v_res = boost::logic::tribool((*__pyx_v_cached_bool).value());

      /* "flowstar/observers.pyx":394
 * 
 *             ### If there is a cached result, use it!
 *             if deref(cached_bool).has_value():             # <<<<<<<<<<<<<<
 *                 res = tribool(deref(cached_bool).value())
 *             else:
 */
      goto __pyx_L10;
    }

    /* "flowstar/observers.pyx":398
 *             else:
 *                 ### Intersect and shift back to relative reference
 *                 y.intersect_assign(x)             # <<<<<<<<<<<<<<
 *                 y.sub_assign(t)
 *                 y.intersect_assign(t0)
 */
    /*else*/ {
      __pyx_v_y.intersect_assign(__pyx_v_x);

      /* "flowstar/observers.pyx":399
 *                 ### Intersect and shift back to relative reference
 *                 y.intersect_assign(x)
 *                 y.sub_assign(t)             # <<<<<<<<<<<<<<
 *                 y.intersect_assign(t0)
 * 
 */
      (void)(__pyx_v_y.operator-=(__pyx_v_t));

      /* "flowstar/observers.pyx":400
 *                 y.intersect_assign(x)
 *                 y.sub_assign(t)
 *                 y.intersect_assign(t0)             # <<<<<<<<<<<<<<
 * 
 *                 ### Retrieve cached symbolically composed functions, or perform
 */
      __pyx_v_y.intersect_assign(__pyx_v_t0);

      /* "flowstar/observers.pyx":404
 *                 ### Retrieve cached symbolically composed functions, or perform
 *                 ### functional composition.
 *                 if self.symbolic_composition and deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                     assert deref(poly_fprime_fn).has_value()
 *                     # Retrieve cached composed functions
 */
      __pyx_t_3 = (__pyx_v_self->symbolic_composition != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_3 = ((*__pyx_v_poly_f_fn).has_value() != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_2) {

        /* "flowstar/observers.pyx":405
 *                 ### functional composition.
 *                 if self.symbolic_composition and deref(poly_f_fn).has_value():
 *                     assert deref(poly_fprime_fn).has_value()             # <<<<<<<<<<<<<<
 *                     # Retrieve cached composed functions
 *                     f_fn = deref(poly_f_fn).value()
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!((*__pyx_v_poly_fprime_fn).has_value() != 0))) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(1, 405, __pyx_L1_error)
          }
        }
        #endif

        /* "flowstar/observers.pyx":407
 *                     assert deref(poly_fprime_fn).has_value()
 *                     # Retrieve cached composed functions
 *                     f_fn = deref(poly_f_fn).value()             # <<<<<<<<<<<<<<
 *                     fprime_fn = deref(poly_fprime_fn).value()
 *                 else:
 */
        __pyx_v_f_fn = (*__pyx_v_poly_f_fn).value();

        /* "flowstar/observers.pyx":408
 *                     # Retrieve cached composed functions
 *                     f_fn = deref(poly_f_fn).value()
 *                     fprime_fn = deref(poly_fprime_fn).value()             # <<<<<<<<<<<<<<
 *                 else:
 *                     # Functional composition for polynomial
 */
        __pyx_v_fprime_fn = (*__pyx_v_poly_fprime_fn).value();

        /* "flowstar/observers.pyx":404
 *                 ### Retrieve cached symbolically composed functions, or perform
 *                 ### functional composition.
 *                 if self.symbolic_composition and deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                     assert deref(poly_fprime_fn).has_value()
 *                     # Retrieve cached composed functions
 */
        goto __pyx_L11;
      }

      /* "flowstar/observers.pyx":411
 *                 else:
 *                     # Functional composition for polynomial
 *                     f_fn = interval.compose_interval_fn(poly_fn(self.f.c_poly),             # <<<<<<<<<<<<<<
 *                                                         deref(tmv),
 *                                                         deref(loop_domain))
 */
      /*else*/ {

        /* "flowstar/observers.pyx":413
 *                     f_fn = interval.compose_interval_fn(poly_fn(self.f.c_poly),
 *                                                         deref(tmv),
 *                                                         deref(loop_domain))             # <<<<<<<<<<<<<<
 * 
 *                 # Evaluate f over the whole domain
 */
        __pyx_v_f_fn = compose_interval_fn(poly_fn(__pyx_v_self->f->c_poly), (*__pyx_v_tmv), (*__pyx_v_loop_domain));
      }
      __pyx_L11:;

      /* "flowstar/observers.pyx":416
 * 
 *                 # Evaluate f over the whole domain
 *                 f_domain = f_fn.call(t0)             # <<<<<<<<<<<<<<
 * 
 *                 # Only do anything if there is a chance of a root
 */
      __pyx_v_f_domain = __pyx_v_f_fn.operator()(__pyx_v_t0);

      /* "flowstar/observers.pyx":419
 * 
 *                 # Only do anything if there is a chance of a root
 *                 if not (f_domain.inf() <= 0 <= f_domain.sup()):             # <<<<<<<<<<<<<<
 *                     # Annoying code to make Cython allow assignment to a r-value
 *                     (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 */
      __pyx_t_2 = (__pyx_v_f_domain.inf() <= 0.0);
      if (__pyx_t_2) {
        __pyx_t_2 = (0.0 <= __pyx_v_f_domain.sup());
      }
      __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_3) {

        /* "flowstar/observers.pyx":421
 *                 if not (f_domain.inf() <= 0 <= f_domain.sup()):
 *                     # Annoying code to make Cython allow assignment to a r-value
 *                     (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)             # <<<<<<<<<<<<<<
 *                 else:
 *                     self._post_retrieve_f(f_fn, fprime_fn,
 */
        ((&(*__pyx_v_cached_bool))[0]) = std::optional<int> ((__pyx_v_f_domain.inf() > 0.0));

        /* "flowstar/observers.pyx":419
 * 
 *                 # Only do anything if there is a chance of a root
 *                 if not (f_domain.inf() <= 0 <= f_domain.sup()):             # <<<<<<<<<<<<<<
 *                     # Annoying code to make Cython allow assignment to a r-value
 *                     (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 */
        goto __pyx_L14;
      }

      /* "flowstar/observers.pyx":423
 *                     (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 *                 else:
 *                     self._post_retrieve_f(f_fn, fprime_fn,             # <<<<<<<<<<<<<<
 *                                           deref(poly_f_fn),
 *                                           deref(poly_fprime_fn),
 */
      /*else*/ {

        /* "flowstar/observers.pyx":426
 *                                           deref(poly_f_fn),
 *                                           deref(poly_fprime_fn),
 *                                           deref(tmv), loop_domain)             # <<<<<<<<<<<<<<
 * 
 *                 ### Interval evaluation over domain
 */
        ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_post_retrieve_f(__pyx_v_self, __pyx_v_f_fn, __pyx_v_fprime_fn, (*__pyx_v_poly_f_fn), (*__pyx_v_poly_fprime_fn), (*__pyx_v_tmv), __pyx_v_loop_domain);
      }
      __pyx_L14:;

      /* "flowstar/observers.pyx":429
 * 
 *                 ### Interval evaluation over domain
 *                 f_y = f_fn.call(y)             # <<<<<<<<<<<<<<
 *                 # print("f_y =", interval.as_str(f_y))
 *                 if f_y.inf() > 0:
 */
      __pyx_v_f_y = __pyx_v_f_fn.operator()(__pyx_v_y);

      /* "flowstar/observers.pyx":431
 *                 f_y = f_fn.call(y)
 *                 # print("f_y =", interval.as_str(f_y))
 *                 if f_y.inf() > 0:             # <<<<<<<<<<<<<<
 *                     # print("res =", True)
 *                     res = tribool(<cbool>True)
 */
      __pyx_t_3 = ((__pyx_v_f_y.inf() > 0.0) != 0);
      if (__pyx_t_3) {

        /* "flowstar/observers.pyx":433
 *                 if f_y.inf() > 0:
 *                     # print("res =", True)
 *                     res = tribool(<cbool>True)             # <<<<<<<<<<<<<<
 *                 elif f_y.sup() < 0:
 *                     # print("res =", False)
 */
        __pyx_v_res = boost::logic::tribool(((bool)1));

        /* "flowstar/observers.pyx":431
 *                 f_y = f_fn.call(y)
 *                 # print("f_y =", interval.as_str(f_y))
 *                 if f_y.inf() > 0:             # <<<<<<<<<<<<<<
 *                     # print("res =", True)
 *                     res = tribool(<cbool>True)
 */
        goto __pyx_L15;
      }

      /* "flowstar/observers.pyx":434
 *                     # print("res =", True)
 *                     res = tribool(<cbool>True)
 *                 elif f_y.sup() < 0:             # <<<<<<<<<<<<<<
 *                     # print("res =", False)
 *                     res = tribool(<cbool>False)
 */
      __pyx_t_3 = ((__pyx_v_f_y.sup() < 0.0) != 0);
      if (__pyx_t_3) {

        /* "flowstar/observers.pyx":436
 *                 elif f_y.sup() < 0:
 *                     # print("res =", False)
 *                     res = tribool(<cbool>False)             # <<<<<<<<<<<<<<
 *                 else:
 *                     # print("res =", None)
 */
        __pyx_v_res = boost::logic::tribool(((bool)0));

        /* "flowstar/observers.pyx":434
 *                     # print("res =", True)
 *                     res = tribool(<cbool>True)
 *                 elif f_y.sup() < 0:             # <<<<<<<<<<<<<<
 *                     # print("res =", False)
 *                     res = tribool(<cbool>False)
 */
        goto __pyx_L15;
      }

      /* "flowstar/observers.pyx":439
 *                 else:
 *                     # print("res =", None)
 *                     res = tribool(unknown)             # <<<<<<<<<<<<<<
 * 
 *             final_res =  tri_and(final_res, res)
 */
      /*else*/ {
        __pyx_v_res = boost::logic::tribool(boost::logic::indeterminate);
      }
      __pyx_L15:;
    }
    __pyx_L10:;

    /* "flowstar/observers.pyx":441
 *                     res = tribool(unknown)
 * 
 *             final_res =  tri_and(final_res, res)             # <<<<<<<<<<<<<<
 * 
 *         return final_res
 */
    __pyx_v_final_res = operator&&(__pyx_v_final_res, __pyx_v_res);
    __pyx_L3_continue:;
  }

  /* "flowstar/observers.pyx":443
 *             final_res =  tri_and(final_res, res)
 * 
 *         return final_res             # <<<<<<<<<<<<<<
 * 
 *     def check(self, t, space_domain=None):
 */
  __pyx_r = __pyx_v_final_res;
  goto __pyx_L0;

  /* "flowstar/observers.pyx":336
 *         return RIF(res.inf(), res.sup())
 * 
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & x,             # <<<<<<<<<<<<<<
 *                                     int verbosity=0):
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("flowstar.observers.PolyObserver.eval_bool_interval", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":445
 *         return final_res
 * 
 *     def check(self, t, space_domain=None):             # <<<<<<<<<<<<<<
 *         if self.reach is None:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_9check(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_9check(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t = 0;
  CYTHON_UNUSED PyObject *__pyx_v_space_domain = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_space_domain,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_space_domain);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check") < 0)) __PYX_ERR(1, 445, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = values[0];
    __pyx_v_space_domain = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 445, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_8check(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self), __pyx_v_t, __pyx_v_space_domain);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_8check(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, PyObject *__pyx_v_t, CYTHON_UNUSED PyObject *__pyx_v_space_domain) {
  boost::logic::tribool __pyx_v_res;
  flowstar::Interval __pyx_v_I;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("check", 0);

  /* "flowstar/observers.pyx":446
 * 
 *     def check(self, t, space_domain=None):
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->reach) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "flowstar/observers.pyx":447
 *     def check(self, t, space_domain=None):
 *         if self.reach is None:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         self.reach.prepare()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "flowstar/observers.pyx":446
 * 
 *     def check(self, t, space_domain=None):
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "flowstar/observers.pyx":449
 *             return None
 * 
 *         self.reach.prepare()             # <<<<<<<<<<<<<<
 * 
 *         # Convert python interval to flow* interval
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->reach), __pyx_n_s_prepare); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flowstar/observers.pyx":454
 *         cdef:
 *             tribool res
 *             Interval I = interval.make_interval(t)             # <<<<<<<<<<<<<<
 * 
 *         with self.reach.global_manager: #  Use captured globals
 */
  __pyx_v_I = __pyx_f_8flowstar_8interval_make_interval(__pyx_v_t);

  /* "flowstar/observers.pyx":456
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_bool_interval(I)
 * 
 */
  /*with:*/ {
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 456, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 456, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 456, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        (void)__pyx_t_7; (void)__pyx_t_8; (void)__pyx_t_9; /* mark used */
        /*try:*/ {

          /* "flowstar/observers.pyx":457
 * 
 *         with self.reach.global_manager: #  Use captured globals
 *             res = self.eval_bool_interval(I)             # <<<<<<<<<<<<<<
 * 
 *         if <cbool>res:
 */
          __pyx_v_res = ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->eval_bool_interval(__pyx_v_self, __pyx_v_I, NULL);

          /* "flowstar/observers.pyx":456
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_bool_interval(I)
 * 
 */
        }
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__11, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 456, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L14;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L14:;
  }

  /* "flowstar/observers.pyx":459
 *             res = self.eval_bool_interval(I)
 * 
 *         if <cbool>res:             # <<<<<<<<<<<<<<
 *             return True
 *         elif <cbool>(not res):
 */
  __pyx_t_2 = (((bool)__pyx_v_res) != 0);
  if (__pyx_t_2) {

    /* "flowstar/observers.pyx":460
 * 
 *         if <cbool>res:
 *             return True             # <<<<<<<<<<<<<<
 *         elif <cbool>(not res):
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "flowstar/observers.pyx":459
 *             res = self.eval_bool_interval(I)
 * 
 *         if <cbool>res:             # <<<<<<<<<<<<<<
 *             return True
 *         elif <cbool>(not res):
 */
  }

  /* "flowstar/observers.pyx":461
 *         if <cbool>res:
 *             return True
 *         elif <cbool>(not res):             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  __pyx_t_2 = (((bool)(!__pyx_v_res)) != 0);
  if (__pyx_t_2) {

    /* "flowstar/observers.pyx":462
 *             return True
 *         elif <cbool>(not res):
 *             return False             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "flowstar/observers.pyx":461
 *         if <cbool>res:
 *             return True
 *         elif <cbool>(not res):             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  }

  /* "flowstar/observers.pyx":464
 *             return False
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     ### Helper methods
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "flowstar/observers.pyx":445
 *         return final_res
 * 
 *     def check(self, t, space_domain=None):             # <<<<<<<<<<<<<<
 *         if self.reach is None:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":468
 *     ### Helper methods
 * 
 *     cdef bint _tm_segment_loop(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                int & i,
 *                                vector[Interval]* & loop_domain,
 */

static int __pyx_f_8flowstar_9observers_12PolyObserver__tm_segment_loop(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, int &__pyx_v_i, std::vector<flowstar::Interval>  *&__pyx_v_loop_domain, std::optional<std::vector<flowstar::Interval> >  &__pyx_v_global_domain, std::list<flowstar::TaylorModelVec> ::iterator &__pyx_v_tmv, std::list<std::vector<flowstar::Interval> > ::iterator &__pyx_v_domain, std::vector<std::optional<int> > ::iterator &__pyx_v_cached_bool, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &__pyx_v_poly_f_fn, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &__pyx_v_poly_fprime_fn, flowstar::Interval &__pyx_v_t, flowstar::Interval &__pyx_v_t0, flowstar::Interval const &__pyx_v_t00) {
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv_end;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain_end;
  std::vector<std::optional<int> > ::iterator __pyx_v_cached_bool_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn_end;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<flowstar::Interval>  *__pyx_t_3;
  __Pyx_FakeReference<flowstar::Interval> __pyx_t_4;
  __Pyx_RefNannySetupContext("_tm_segment_loop", 0);

  /* "flowstar/observers.pyx":484
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv_end\
 *                 = self.reach.c_reach.flowpipesCompo.end()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain_end\
 *                 = self.reach.c_reach.domains.end()
 */
  __pyx_v_tmv_end = __pyx_v_self->reach->c_reach.flowpipesCompo.end();

  /* "flowstar/observers.pyx":486
 *                 = self.reach.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain_end\
 *                 = self.reach.c_reach.domains.end()             # <<<<<<<<<<<<<<
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()
 *             vector[optional[interval_time_fn]].iterator \
 */
  __pyx_v_domain_end = __pyx_v_self->reach->c_reach.domains.end();

  /* "flowstar/observers.pyx":487
 *             clist[vector[Interval]].iterator domain_end\
 *                 = self.reach.c_reach.domains.end()
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_f_fn_end = self.poly_f_fns.end()
 */
  __pyx_v_cached_bool_end = __pyx_v_self->bools.end();

  /* "flowstar/observers.pyx":489
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_f_fn_end = self.poly_f_fns.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_fprime_fn_end = self.poly_fprime_fns.end()
 */
  __pyx_v_poly_f_fn_end = __pyx_v_self->poly_f_fns.end();

  /* "flowstar/observers.pyx":491
 *                 poly_f_fn_end = self.poly_f_fns.end()
 *             vector[optional[interval_time_fn]].iterator \
 *                 poly_fprime_fn_end = self.poly_fprime_fns.end()             # <<<<<<<<<<<<<<
 * 
 *         ### Increment time and loop iters
 */
  __pyx_v_poly_fprime_fn_end = __pyx_v_self->poly_fprime_fns.end();

  /* "flowstar/observers.pyx":494
 * 
 *         ### Increment time and loop iters
 *         if i > 0:             # <<<<<<<<<<<<<<
 *             # We should reset by absolute interval width, disregarding any
 *             # mask effects, since this is the effect of iterating along
 */
  __pyx_t_1 = ((__pyx_v_i > 0) != 0);
  if (__pyx_t_1) {

    /* "flowstar/observers.pyx":498
 *             # mask effects, since this is the effect of iterating along
 *             # the taylor model segments
 *             (&t)[0] += t00.sup()             # <<<<<<<<<<<<<<
 *             # Pad lower endpoint to take into account numerical error in
 *             # endpoints
 */
    ((&__pyx_v_t)[0]) += __pyx_v_t00.sup();

    /* "flowstar/observers.pyx":501
 *             # Pad lower endpoint to take into account numerical error in
 *             # endpoints
 *             (&t)[0] += Interval(-1e-53, 0)             # <<<<<<<<<<<<<<
 *             inc(tmv)
 *             inc(domain)
 */
    ((&__pyx_v_t)[0]) += flowstar::Interval(-1e-53, 0.0);

    /* "flowstar/observers.pyx":502
 *             # endpoints
 *             (&t)[0] += Interval(-1e-53, 0)
 *             inc(tmv)             # <<<<<<<<<<<<<<
 *             inc(domain)
 *             inc(poly_f_fn)
 */
    (void)((++__pyx_v_tmv));

    /* "flowstar/observers.pyx":503
 *             (&t)[0] += Interval(-1e-53, 0)
 *             inc(tmv)
 *             inc(domain)             # <<<<<<<<<<<<<<
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)
 */
    (void)((++__pyx_v_domain));

    /* "flowstar/observers.pyx":504
 *             inc(tmv)
 *             inc(domain)
 *             inc(poly_f_fn)             # <<<<<<<<<<<<<<
 *             inc(poly_fprime_fn)
 *             inc(cached_bool)
 */
    (void)((++__pyx_v_poly_f_fn));

    /* "flowstar/observers.pyx":505
 *             inc(domain)
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)             # <<<<<<<<<<<<<<
 *             inc(cached_bool)
 *             # Restore loop domains
 */
    (void)((++__pyx_v_poly_fprime_fn));

    /* "flowstar/observers.pyx":506
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)
 *             inc(cached_bool)             # <<<<<<<<<<<<<<
 *             # Restore loop domains
 *             deref(loop_domain)[0] = (&t0)[0] = t00
 */
    (void)((++__pyx_v_cached_bool));

    /* "flowstar/observers.pyx":508
 *             inc(cached_bool)
 *             # Restore loop domains
 *             deref(loop_domain)[0] = (&t0)[0] = t00             # <<<<<<<<<<<<<<
 *         inc(i)
 * 
 */
    ((*__pyx_v_loop_domain)[0]) = __pyx_v_t00;
    ((&__pyx_v_t0)[0]) = __pyx_v_t00;

    /* "flowstar/observers.pyx":494
 * 
 *         ### Increment time and loop iters
 *         if i > 0:             # <<<<<<<<<<<<<<
 *             # We should reset by absolute interval width, disregarding any
 *             # mask effects, since this is the effect of iterating along
 */
  }

  /* "flowstar/observers.pyx":509
 *             # Restore loop domains
 *             deref(loop_domain)[0] = (&t0)[0] = t00
 *         inc(i)             # <<<<<<<<<<<<<<
 * 
 *         # Check stopping condition
 */
  (void)((++__pyx_v_i));

  /* "flowstar/observers.pyx":512
 * 
 *         # Check stopping condition
 *         if (       tmv            == tmv_end             # <<<<<<<<<<<<<<
 *                 or domain         == domain_end
 *                 or cached_bool    == cached_bool_end
 */
  __pyx_t_2 = ((__pyx_v_tmv == __pyx_v_tmv_end) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }

  /* "flowstar/observers.pyx":513
 *         # Check stopping condition
 *         if (       tmv            == tmv_end
 *                 or domain         == domain_end             # <<<<<<<<<<<<<<
 *                 or cached_bool    == cached_bool_end
 *                 or poly_f_fn      == poly_f_fn_end
 */
  __pyx_t_2 = ((__pyx_v_domain == __pyx_v_domain_end) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }

  /* "flowstar/observers.pyx":514
 *         if (       tmv            == tmv_end
 *                 or domain         == domain_end
 *                 or cached_bool    == cached_bool_end             # <<<<<<<<<<<<<<
 *                 or poly_f_fn      == poly_f_fn_end
 *                 or poly_fprime_fn == poly_fprime_fn_end):
 */
  __pyx_t_2 = ((__pyx_v_cached_bool == __pyx_v_cached_bool_end) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }

  /* "flowstar/observers.pyx":515
 *                 or domain         == domain_end
 *                 or cached_bool    == cached_bool_end
 *                 or poly_f_fn      == poly_f_fn_end             # <<<<<<<<<<<<<<
 *                 or poly_fprime_fn == poly_fprime_fn_end):
 *             return False
 */
  __pyx_t_2 = ((__pyx_v_poly_f_fn == __pyx_v_poly_f_fn_end) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }

  /* "flowstar/observers.pyx":516
 *                 or cached_bool    == cached_bool_end
 *                 or poly_f_fn      == poly_f_fn_end
 *                 or poly_fprime_fn == poly_fprime_fn_end):             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_poly_fprime_fn == __pyx_v_poly_fprime_fn_end) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;

  /* "flowstar/observers.pyx":512
 * 
 *         # Check stopping condition
 *         if (       tmv            == tmv_end             # <<<<<<<<<<<<<<
 *                 or domain         == domain_end
 *                 or cached_bool    == cached_bool_end
 */
  if (__pyx_t_1) {

    /* "flowstar/observers.pyx":517
 *                 or poly_f_fn      == poly_f_fn_end
 *                 or poly_fprime_fn == poly_fprime_fn_end):
 *             return False             # <<<<<<<<<<<<<<
 *         else:
 *             # TM domain
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "flowstar/observers.pyx":512
 * 
 *         # Check stopping condition
 *         if (       tmv            == tmv_end             # <<<<<<<<<<<<<<
 *                 or domain         == domain_end
 *                 or cached_bool    == cached_bool_end
 */
  }

  /* "flowstar/observers.pyx":520
 *         else:
 *             # TM domain
 *             (&loop_domain)[0] = (&global_domain.value()             # <<<<<<<<<<<<<<
 *                                  if global_domain.has_value()
 *                                  else &deref(domain))
 */
  /*else*/ {

    /* "flowstar/observers.pyx":521
 *             # TM domain
 *             (&loop_domain)[0] = (&global_domain.value()
 *                                  if global_domain.has_value()             # <<<<<<<<<<<<<<
 *                                  else &deref(domain))
 * 
 */
    if ((__pyx_v_global_domain.has_value() != 0)) {

      /* "flowstar/observers.pyx":520
 *         else:
 *             # TM domain
 *             (&loop_domain)[0] = (&global_domain.value()             # <<<<<<<<<<<<<<
 *                                  if global_domain.has_value()
 *                                  else &deref(domain))
 */
      __pyx_t_3 = (&__pyx_v_global_domain.value());
    } else {

      /* "flowstar/observers.pyx":522
 *             (&loop_domain)[0] = (&global_domain.value()
 *                                  if global_domain.has_value()
 *                                  else &deref(domain))             # <<<<<<<<<<<<<<
 * 
 *             # Absolute time domain for current interval
 */
      __pyx_t_3 = (&(*__pyx_v_domain));
    }

    /* "flowstar/observers.pyx":520
 *         else:
 *             # TM domain
 *             (&loop_domain)[0] = (&global_domain.value()             # <<<<<<<<<<<<<<
 *                                  if global_domain.has_value()
 *                                  else &deref(domain))
 */
    ((&__pyx_v_loop_domain)[0]) = __pyx_t_3;

    /* "flowstar/observers.pyx":525
 * 
 *             # Absolute time domain for current interval
 *             (&t0)[0] = loop_domain[0][0] = deref(domain).at(0)             # <<<<<<<<<<<<<<
 * 
 *             return True
 */
    try {
      __pyx_t_4 = (*__pyx_v_domain).at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 525, __pyx_L1_error)
    }
    ((&__pyx_v_t0)[0]) = __pyx_t_4;
    ((__pyx_v_loop_domain[0])[0]) = __pyx_t_4;

    /* "flowstar/observers.pyx":527
 *             (&t0)[0] = loop_domain[0][0] = deref(domain).at(0)
 * 
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     cdef bint _mask_intersect_check(PolyObserver self, Interval & t,
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "flowstar/observers.pyx":468
 *     ### Helper methods
 * 
 *     cdef bint _tm_segment_loop(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                int & i,
 *                                vector[Interval]* & loop_domain,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.observers.PolyObserver._tm_segment_loop", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":529
 *             return True
 * 
 *     cdef bint _mask_intersect_check(PolyObserver self, Interval & t,             # <<<<<<<<<<<<<<
 *                                     Interval & t0, int verbosity):
 *         """Check there is a mask intersection and, if so, set t0 to the
 */

static int __pyx_f_8flowstar_9observers_12PolyObserver__mask_intersect_check(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_t, flowstar::Interval &__pyx_v_t0, int __pyx_v_verbosity) {
  std::optional<flowstar::Interval>  __pyx_v_mask_overlap;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_mask_intersect_check", 0);

  /* "flowstar/observers.pyx":533
 *         """Check there is a mask intersection and, if so, set t0 to the
 *         overlap interval."""
 *         if self.mask is not None:             # <<<<<<<<<<<<<<
 *             if verbosity >= 4:
 *                 print("using mask!")
 */
  __pyx_t_1 = (__pyx_v_self->mask != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "flowstar/observers.pyx":534
 *         overlap interval."""
 *         if self.mask is not None:
 *             if verbosity >= 4:             # <<<<<<<<<<<<<<
 *                 print("using mask!")
 *             mask_overlap = self._mask_overlap(t + t0)
 */
    __pyx_t_2 = ((__pyx_v_verbosity >= 4) != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":535
 *         if self.mask is not None:
 *             if verbosity >= 4:
 *                 print("using mask!")             # <<<<<<<<<<<<<<
 *             mask_overlap = self._mask_overlap(t + t0)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "flowstar/observers.pyx":534
 *         overlap interval."""
 *         if self.mask is not None:
 *             if verbosity >= 4:             # <<<<<<<<<<<<<<
 *                 print("using mask!")
 *             mask_overlap = self._mask_overlap(t + t0)
 */
    }

    /* "flowstar/observers.pyx":536
 *             if verbosity >= 4:
 *                 print("using mask!")
 *             mask_overlap = self._mask_overlap(t + t0)             # <<<<<<<<<<<<<<
 * 
 *             if mask_overlap.has_value():
 */
    __pyx_v_mask_overlap = ((struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver *)__pyx_v_self->__pyx_vtab)->_mask_overlap(__pyx_v_self, (__pyx_v_t + __pyx_v_t0));

    /* "flowstar/observers.pyx":538
 *             mask_overlap = self._mask_overlap(t + t0)
 * 
 *             if mask_overlap.has_value():             # <<<<<<<<<<<<<<
 *                 if verbosity >= 3:
 *                     print("mask_overlap =",
 */
    __pyx_t_2 = (__pyx_v_mask_overlap.has_value() != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":539
 * 
 *             if mask_overlap.has_value():
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("mask_overlap =",
 *                           interval.as_str(mask_overlap.value()))
 */
      __pyx_t_2 = ((__pyx_v_verbosity >= 3) != 0);
      if (__pyx_t_2) {

        /* "flowstar/observers.pyx":541
 *                 if verbosity >= 3:
 *                     print("mask_overlap =",
 *                           interval.as_str(mask_overlap.value()))             # <<<<<<<<<<<<<<
 *                 mask_overlap.value().sub_assign(t)
 *                 if verbosity >= 3:
 */
        __pyx_t_3 = __pyx_f_8flowstar_8interval_as_str(__pyx_v_mask_overlap.value()); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 541, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "flowstar/observers.pyx":540
 *             if mask_overlap.has_value():
 *                 if verbosity >= 3:
 *                     print("mask_overlap =",             # <<<<<<<<<<<<<<
 *                           interval.as_str(mask_overlap.value()))
 *                 mask_overlap.value().sub_assign(t)
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 540, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_kp_s_mask_overlap);
        __Pyx_GIVEREF(__pyx_kp_s_mask_overlap);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_mask_overlap);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 540, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "flowstar/observers.pyx":539
 * 
 *             if mask_overlap.has_value():
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("mask_overlap =",
 *                           interval.as_str(mask_overlap.value()))
 */
      }

      /* "flowstar/observers.pyx":542
 *                     print("mask_overlap =",
 *                           interval.as_str(mask_overlap.value()))
 *                 mask_overlap.value().sub_assign(t)             # <<<<<<<<<<<<<<
 *                 if verbosity >= 3:
 *                     print("mask_overlap =",
 */
      (void)(__pyx_v_mask_overlap.value().operator-=(__pyx_v_t));

      /* "flowstar/observers.pyx":543
 *                           interval.as_str(mask_overlap.value()))
 *                 mask_overlap.value().sub_assign(t)
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("mask_overlap =",
 *                           interval.as_str(mask_overlap.value()))
 */
      __pyx_t_2 = ((__pyx_v_verbosity >= 3) != 0);
      if (__pyx_t_2) {

        /* "flowstar/observers.pyx":545
 *                 if verbosity >= 3:
 *                     print("mask_overlap =",
 *                           interval.as_str(mask_overlap.value()))             # <<<<<<<<<<<<<<
 *                 mask_overlap.value().intersect_assign(t0)
 *                 (&t0)[0] = mask_overlap.value()
 */
        __pyx_t_3 = __pyx_f_8flowstar_8interval_as_str(__pyx_v_mask_overlap.value()); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 545, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "flowstar/observers.pyx":544
 *                 mask_overlap.value().sub_assign(t)
 *                 if verbosity >= 3:
 *                     print("mask_overlap =",             # <<<<<<<<<<<<<<
 *                           interval.as_str(mask_overlap.value()))
 *                 mask_overlap.value().intersect_assign(t0)
 */
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_kp_s_mask_overlap);
        __Pyx_GIVEREF(__pyx_kp_s_mask_overlap);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_mask_overlap);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 544, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "flowstar/observers.pyx":543
 *                           interval.as_str(mask_overlap.value()))
 *                 mask_overlap.value().sub_assign(t)
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("mask_overlap =",
 *                           interval.as_str(mask_overlap.value()))
 */
      }

      /* "flowstar/observers.pyx":546
 *                     print("mask_overlap =",
 *                           interval.as_str(mask_overlap.value()))
 *                 mask_overlap.value().intersect_assign(t0)             # <<<<<<<<<<<<<<
 *                 (&t0)[0] = mask_overlap.value()
 *                 if verbosity >= 2:
 */
      __pyx_v_mask_overlap.value().intersect_assign(__pyx_v_t0);

      /* "flowstar/observers.pyx":547
 *                           interval.as_str(mask_overlap.value()))
 *                 mask_overlap.value().intersect_assign(t0)
 *                 (&t0)[0] = mask_overlap.value()             # <<<<<<<<<<<<<<
 *                 if verbosity >= 2:
 *                     print("t0 =", interval.as_str(t0))
 */
      ((&__pyx_v_t0)[0]) = __pyx_v_mask_overlap.value();

      /* "flowstar/observers.pyx":548
 *                 mask_overlap.value().intersect_assign(t0)
 *                 (&t0)[0] = mask_overlap.value()
 *                 if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                     print("t0 =", interval.as_str(t0))
 * 
 */
      __pyx_t_2 = ((__pyx_v_verbosity >= 2) != 0);
      if (__pyx_t_2) {

        /* "flowstar/observers.pyx":549
 *                 (&t0)[0] = mask_overlap.value()
 *                 if verbosity >= 2:
 *                     print("t0 =", interval.as_str(t0))             # <<<<<<<<<<<<<<
 * 
 *                 return True
 */
        __pyx_t_3 = __pyx_f_8flowstar_8interval_as_str(__pyx_v_t0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 549, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 549, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_kp_s_t0);
        __Pyx_GIVEREF(__pyx_kp_s_t0);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_t0);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 549, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "flowstar/observers.pyx":548
 *                 mask_overlap.value().intersect_assign(t0)
 *                 (&t0)[0] = mask_overlap.value()
 *                 if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                     print("t0 =", interval.as_str(t0))
 * 
 */
      }

      /* "flowstar/observers.pyx":551
 *                     print("t0 =", interval.as_str(t0))
 * 
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 if verbosity >= 2:
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "flowstar/observers.pyx":538
 *             mask_overlap = self._mask_overlap(t + t0)
 * 
 *             if mask_overlap.has_value():             # <<<<<<<<<<<<<<
 *                 if verbosity >= 3:
 *                     print("mask_overlap =",
 */
    }

    /* "flowstar/observers.pyx":553
 *                 return True
 *             else:
 *                 if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                     print("outside mask!")
 *                     # print('t + t0 =', interval.as_str(t + t0))
 */
    /*else*/ {
      __pyx_t_2 = ((__pyx_v_verbosity >= 2) != 0);
      if (__pyx_t_2) {

        /* "flowstar/observers.pyx":554
 *             else:
 *                 if verbosity >= 2:
 *                     print("outside mask!")             # <<<<<<<<<<<<<<
 *                     # print('t + t0 =', interval.as_str(t + t0))
 *                     # print('mask =', self.mask)
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 554, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "flowstar/observers.pyx":553
 *                 return True
 *             else:
 *                 if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                     print("outside mask!")
 *                     # print('t + t0 =', interval.as_str(t + t0))
 */
      }

      /* "flowstar/observers.pyx":558
 *                     # print('mask =', self.mask)
 * 
 *                 return False             # <<<<<<<<<<<<<<
 *         else:
 *             if verbosity >= 4:
 */
      __pyx_r = 0;
      goto __pyx_L0;
    }

    /* "flowstar/observers.pyx":533
 *         """Check there is a mask intersection and, if so, set t0 to the
 *         overlap interval."""
 *         if self.mask is not None:             # <<<<<<<<<<<<<<
 *             if verbosity >= 4:
 *                 print("using mask!")
 */
  }

  /* "flowstar/observers.pyx":560
 *                 return False
 *         else:
 *             if verbosity >= 4:             # <<<<<<<<<<<<<<
 *                 print("not using mask!")
 * 
 */
  /*else*/ {
    __pyx_t_2 = ((__pyx_v_verbosity >= 4) != 0);
    if (__pyx_t_2) {

      /* "flowstar/observers.pyx":561
 *         else:
 *             if verbosity >= 4:
 *                 print("not using mask!")             # <<<<<<<<<<<<<<
 * 
 *             return True
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 561, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "flowstar/observers.pyx":560
 *                 return False
 *         else:
 *             if verbosity >= 4:             # <<<<<<<<<<<<<<
 *                 print("not using mask!")
 * 
 */
    }

    /* "flowstar/observers.pyx":563
 *                 print("not using mask!")
 * 
 *             return True             # <<<<<<<<<<<<<<
 * 
 *     cdef void _pre_retrieve_f(PolyObserver self,
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "flowstar/observers.pyx":529
 *             return True
 * 
 *     cdef bint _mask_intersect_check(PolyObserver self, Interval & t,             # <<<<<<<<<<<<<<
 *                                     Interval & t0, int verbosity):
 *         """Check there is a mask intersection and, if so, set t0 to the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("flowstar.observers.PolyObserver._mask_intersect_check", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pyx":565
 *             return True
 * 
 *     cdef void _pre_retrieve_f(PolyObserver self,             # <<<<<<<<<<<<<<
 *                               interval_time_fn & f_fn,
 *                               interval_time_fn & fprime_fn,
 */

static void __pyx_f_8flowstar_9observers_12PolyObserver__pre_retrieve_f(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, std::function<flowstar::Interval(const flowstar::Interval &)> &__pyx_v_f_fn, std::function<flowstar::Interval(const flowstar::Interval &)> &__pyx_v_fprime_fn, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &__pyx_v_poly_f_fn, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &__pyx_v_poly_fprime_fn, flowstar::TaylorModelVec &__pyx_v_tmv, std::vector<flowstar::Interval>  *__pyx_v_loop_domain) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_pre_retrieve_f", 0);

  /* "flowstar/observers.pyx":578
 *         functional composition.
 *         """
 *         if self.symbolic_composition and poly_f_fn.has_value():             # <<<<<<<<<<<<<<
 *             assert poly_fprime_fn.has_value()
 *             # Retrieve cached composed functions
 */
  __pyx_t_2 = (__pyx_v_self->symbolic_composition != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_poly_f_fn.has_value() != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flowstar/observers.pyx":579
 *         """
 *         if self.symbolic_composition and poly_f_fn.has_value():
 *             assert poly_fprime_fn.has_value()             # <<<<<<<<<<<<<<
 *             # Retrieve cached composed functions
 *             print("retrieving f and fprime polys")
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(__pyx_v_poly_fprime_fn.has_value() != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(1, 579, __pyx_L1_error)
      }
    }
    #endif

    /* "flowstar/observers.pyx":581
 *             assert poly_fprime_fn.has_value()
 *             # Retrieve cached composed functions
 *             print("retrieving f and fprime polys")             # <<<<<<<<<<<<<<
 *             (&f_fn)[0] = poly_f_fn.value()
 *             (&fprime_fn)[0] = poly_fprime_fn.value()
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "flowstar/observers.pyx":582
 *             # Retrieve cached composed functions
 *             print("retrieving f and fprime polys")
 *             (&f_fn)[0] = poly_f_fn.value()             # <<<<<<<<<<<<<<
 *             (&fprime_fn)[0] = poly_fprime_fn.value()
 *         else:
 */
    ((&__pyx_v_f_fn)[0]) = __pyx_v_poly_f_fn.value();

    /* "flowstar/observers.pyx":583
 *             print("retrieving f and fprime polys")
 *             (&f_fn)[0] = poly_f_fn.value()
 *             (&fprime_fn)[0] = poly_fprime_fn.value()             # <<<<<<<<<<<<<<
 *         else:
 *             # Functional composition for polynomial
 */
    ((&__pyx_v_fprime_fn)[0]) = __pyx_v_poly_fprime_fn.value();

    /* "flowstar/observers.pyx":578
 *         functional composition.
 *         """
 *         if self.symbolic_composition and poly_f_fn.has_value():             # <<<<<<<<<<<<<<
 *             assert poly_fprime_fn.has_value()
 *             # Retrieve cached composed functions
 */
    goto __pyx_L3;
  }

  /* "flowstar/observers.pyx":586
 *         else:
 *             # Functional composition for polynomial
 *             (&f_fn)[0] = interval.compose_interval_fn(poly_fn(self.f.c_poly),             # <<<<<<<<<<<<<<
 *                                                       tmv,
 *                                                       deref(loop_domain))
 */
  /*else*/ {

    /* "flowstar/observers.pyx":588
 *             (&f_fn)[0] = interval.compose_interval_fn(poly_fn(self.f.c_poly),
 *                                                       tmv,
 *                                                       deref(loop_domain))             # <<<<<<<<<<<<<<
 * 
 *     cdef void _post_retrieve_f(PolyObserver self,
 */
    ((&__pyx_v_f_fn)[0]) = compose_interval_fn(poly_fn(__pyx_v_self->f->c_poly), __pyx_v_tmv, (*__pyx_v_loop_domain));
  }
  __pyx_L3:;

  /* "flowstar/observers.pyx":565
 *             return True
 * 
 *     cdef void _pre_retrieve_f(PolyObserver self,             # <<<<<<<<<<<<<<
 *                               interval_time_fn & f_fn,
 *                               interval_time_fn & fprime_fn,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("flowstar.observers.PolyObserver._pre_retrieve_f", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "flowstar/observers.pyx":590
 *                                                       deref(loop_domain))
 * 
 *     cdef void _post_retrieve_f(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                interval_time_fn & f_fn,
 *                                interval_time_fn & fprime_fn,
 */

static void __pyx_f_8flowstar_9observers_12PolyObserver__post_retrieve_f(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, std::function<flowstar::Interval(const flowstar::Interval &)> &__pyx_v_f_fn, std::function<flowstar::Interval(const flowstar::Interval &)> &__pyx_v_fprime_fn, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &__pyx_v_poly_f_fn, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &__pyx_v_poly_fprime_fn, flowstar::TaylorModelVec &__pyx_v_tmv, std::vector<flowstar::Interval>  *__pyx_v_loop_domain) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_post_retrieve_f", 0);

  /* "flowstar/observers.pyx":601
 *         Retrieve f and fprime, performing symbolic composition if desired.
 *         """
 *         if self.symbolic_composition and not poly_f_fn.has_value():             # <<<<<<<<<<<<<<
 *             # Define f and fprime by symbolically composing polynomials
 *             observable(
 */
  __pyx_t_2 = (__pyx_v_self->symbolic_composition != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_poly_f_fn.has_value() != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flowstar/observers.pyx":603
 *         if self.symbolic_composition and not poly_f_fn.has_value():
 *             # Define f and fprime by symbolically composing polynomials
 *             observable(             # <<<<<<<<<<<<<<
 *                 f_fn, fprime_fn,
 *                 self.f.c_poly, tmv, deref(loop_domain),
 */
    __pyx_f_8flowstar_10observable_observable(__pyx_v_f_fn, __pyx_v_fprime_fn, __pyx_v_self->f->c_poly, __pyx_v_tmv, (*__pyx_v_loop_domain), __pyx_v_self->reach->c_reach.globalMaxOrder, __pyx_v_self->reach->c_reach.cutoff_threshold);

    /* "flowstar/observers.pyx":613
 *             # variables and so are invalidated when the space domain is
 *             # restricted
 *             (&poly_f_fn)[0] = optional[interval_time_fn](f_fn)             # <<<<<<<<<<<<<<
 *             (&poly_fprime_fn)[0] = optional[interval_time_fn](fprime_fn)
 *             assert poly_f_fn.has_value()
 */
    ((&__pyx_v_poly_f_fn)[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> (__pyx_v_f_fn);

    /* "flowstar/observers.pyx":614
 *             # restricted
 *             (&poly_f_fn)[0] = optional[interval_time_fn](f_fn)
 *             (&poly_fprime_fn)[0] = optional[interval_time_fn](fprime_fn)             # <<<<<<<<<<<<<<
 *             assert poly_f_fn.has_value()
 *         elif not self.symbolic_composition:
 */
    ((&__pyx_v_poly_fprime_fn)[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> (__pyx_v_fprime_fn);

    /* "flowstar/observers.pyx":615
 *             (&poly_f_fn)[0] = optional[interval_time_fn](f_fn)
 *             (&poly_fprime_fn)[0] = optional[interval_time_fn](fprime_fn)
 *             assert poly_f_fn.has_value()             # <<<<<<<<<<<<<<
 *         elif not self.symbolic_composition:
 *             # Define fprime as a functional composition, and use f as
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(__pyx_v_poly_f_fn.has_value() != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(1, 615, __pyx_L1_error)
      }
    }
    #endif

    /* "flowstar/observers.pyx":601
 *         Retrieve f and fprime, performing symbolic composition if desired.
 *         """
 *         if self.symbolic_composition and not poly_f_fn.has_value():             # <<<<<<<<<<<<<<
 *             # Define f and fprime by symbolically composing polynomials
 *             observable(
 */
    goto __pyx_L3;
  }

  /* "flowstar/observers.pyx":616
 *             (&poly_fprime_fn)[0] = optional[interval_time_fn](fprime_fn)
 *             assert poly_f_fn.has_value()
 *         elif not self.symbolic_composition:             # <<<<<<<<<<<<<<
 *             # Define fprime as a functional composition, and use f as
 *             # defined similarly above
 */
  __pyx_t_1 = ((!(__pyx_v_self->symbolic_composition != 0)) != 0);
  if (__pyx_t_1) {

    /* "flowstar/observers.pyx":619
 *             # Define fprime as a functional composition, and use f as
 *             # defined similarly above
 *             (&fprime_fn)[0] = interval.compose_interval_fn(             # <<<<<<<<<<<<<<
 *                 poly_fn(self.fprime.c_poly),
 *                 tmv,
 */
    ((&__pyx_v_fprime_fn)[0]) = compose_interval_fn(poly_fn(__pyx_v_self->fprime->c_poly), __pyx_v_tmv, (*__pyx_v_loop_domain));

    /* "flowstar/observers.pyx":616
 *             (&poly_fprime_fn)[0] = optional[interval_time_fn](fprime_fn)
 *             assert poly_f_fn.has_value()
 *         elif not self.symbolic_composition:             # <<<<<<<<<<<<<<
 *             # Define fprime as a functional composition, and use f as
 *             # defined similarly above
 */
  }
  __pyx_L3:;

  /* "flowstar/observers.pyx":590
 *                                                       deref(loop_domain))
 * 
 *     cdef void _post_retrieve_f(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                interval_time_fn & f_fn,
 *                                interval_time_fn & fprime_fn,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.observers.PolyObserver._post_retrieve_f", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "flowstar/observers.pyx":627
 *         # has already been retrieved.
 * 
 *     cdef optional[Interval] _mask_overlap(self, const Interval & x) nogil:             # <<<<<<<<<<<<<<
 *         cdef optional[Interval] overlap
 *         cdef Interval intersection
 */

static std::optional<flowstar::Interval>  __pyx_f_8flowstar_9observers_12PolyObserver__mask_overlap(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, flowstar::Interval const &__pyx_v_x) {
  std::optional<flowstar::Interval>  __pyx_v_overlap;
  flowstar::Interval __pyx_v_y;
  std::optional<flowstar::Interval>  __pyx_r;
  std::vector<flowstar::Interval> ::iterator __pyx_t_1;
  std::vector<flowstar::Interval>  *__pyx_t_2;
  flowstar::Interval __pyx_t_3;
  int __pyx_t_4;

  /* "flowstar/observers.pyx":631
 *         cdef Interval intersection
 * 
 *         for y in self.masked_regions:             # <<<<<<<<<<<<<<
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():
 */
  __pyx_t_2 = &__pyx_v_self->masked_regions;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_y = __pyx_t_3;

    /* "flowstar/observers.pyx":632
 * 
 *         for y in self.masked_regions:
 *             if interval.overlaps(x, y):             # <<<<<<<<<<<<<<
 *                 if overlap.has_value():
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 */
    __pyx_t_4 = (__pyx_f_8flowstar_8interval_overlaps(__pyx_v_x, __pyx_v_y) != 0);
    if (__pyx_t_4) {

      /* "flowstar/observers.pyx":633
 *         for y in self.masked_regions:
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():             # <<<<<<<<<<<<<<
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 *                 else:
 */
      __pyx_t_4 = (__pyx_v_overlap.has_value() != 0);
      if (__pyx_t_4) {

        /* "flowstar/observers.pyx":634
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():
 *                     interval.interval_union(overlap.value(), x.intersect(y))             # <<<<<<<<<<<<<<
 *                 else:
 *                     overlap = optional[Interval](x.intersect(y))
 */
        __pyx_f_8flowstar_8interval_interval_union(__pyx_v_overlap.value(), __pyx_v_x.intersect(__pyx_v_y));

        /* "flowstar/observers.pyx":633
 *         for y in self.masked_regions:
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():             # <<<<<<<<<<<<<<
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 *                 else:
 */
        goto __pyx_L6;
      }

      /* "flowstar/observers.pyx":636
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 *                 else:
 *                     overlap = optional[Interval](x.intersect(y))             # <<<<<<<<<<<<<<
 * 
 *         return overlap
 */
      /*else*/ {
        __pyx_v_overlap = std::optional<flowstar::Interval> (__pyx_v_x.intersect(__pyx_v_y));
      }
      __pyx_L6:;

      /* "flowstar/observers.pyx":632
 * 
 *         for y in self.masked_regions:
 *             if interval.overlaps(x, y):             # <<<<<<<<<<<<<<
 *                 if overlap.has_value():
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 */
    }

    /* "flowstar/observers.pyx":631
 *         cdef Interval intersection
 * 
 *         for y in self.masked_regions:             # <<<<<<<<<<<<<<
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():
 */
  }

  /* "flowstar/observers.pyx":638
 *                     overlap = optional[Interval](x.intersect(y))
 * 
 *         return overlap             # <<<<<<<<<<<<<<
 * 
 *     cdef void _amalgamate_roots(PolyObserver self, vector[Interval] & roots,
 */
  __pyx_r = __pyx_v_overlap;
  goto __pyx_L0;

  /* "flowstar/observers.pyx":627
 *         # has already been retrieved.
 * 
 *     cdef optional[Interval] _mask_overlap(self, const Interval & x) nogil:             # <<<<<<<<<<<<<<
 *         cdef optional[Interval] overlap
 *         cdef Interval intersection
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "flowstar/observers.pyx":640
 *         return overlap
 * 
 *     cdef void _amalgamate_roots(PolyObserver self, vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                                 vector[Interval] & new_roots,
 *                                 Interval & t, int verbosity=0):
 */

static void __pyx_f_8flowstar_9observers_12PolyObserver__amalgamate_roots(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, std::vector<flowstar::Interval>  &__pyx_v_roots, std::vector<flowstar::Interval>  &__pyx_v_new_roots, flowstar::Interval &__pyx_v_t, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver__amalgamate_roots *__pyx_optional_args) {
  int __pyx_v_verbosity = ((int)0);
  flowstar::Interval __pyx_v_root;
  __Pyx_RefNannyDeclarations
  std::vector<flowstar::Interval> ::iterator __pyx_t_1;
  flowstar::Interval __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("_amalgamate_roots", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_verbosity = __pyx_optional_args->verbosity;
    }
  }

  /* "flowstar/observers.pyx":645
 *         """Add new_roots to roots, whilst amalgamating adjacent overlapping
 *         roots."""
 *         for root in new_roots:             # <<<<<<<<<<<<<<
 *             root.add_assign(t)
 *             if (not roots.empty()
 */
  __pyx_t_1 = __pyx_v_new_roots.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_v_new_roots.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_root = __pyx_t_2;

    /* "flowstar/observers.pyx":646
 *         roots."""
 *         for root in new_roots:
 *             root.add_assign(t)             # <<<<<<<<<<<<<<
 *             if (not roots.empty()
 *                     and interval.int_min_dist(root, roots.back()) < 1e-9):
 */
    (void)(__pyx_v_root.operator+=(__pyx_v_t));

    /* "flowstar/observers.pyx":647
 *         for root in new_roots:
 *             root.add_assign(t)
 *             if (not roots.empty()             # <<<<<<<<<<<<<<
 *                     and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 */
    __pyx_t_4 = ((!(__pyx_v_roots.empty() != 0)) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }

    /* "flowstar/observers.pyx":648
 *             root.add_assign(t)
 *             if (not roots.empty()
 *                     and interval.int_min_dist(root, roots.back()) < 1e-9):             # <<<<<<<<<<<<<<
 *                 if verbosity >= 3:
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 */
    __pyx_t_4 = ((__pyx_f_8flowstar_8interval_int_min_dist(__pyx_v_root, __pyx_v_roots.back()) < 1e-9) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;

    /* "flowstar/observers.pyx":647
 *         for root in new_roots:
 *             root.add_assign(t)
 *             if (not roots.empty()             # <<<<<<<<<<<<<<
 *                     and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 */
    if (__pyx_t_3) {

      /* "flowstar/observers.pyx":649
 *             if (not roots.empty()
 *                     and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                         roots.back().inf(), roots.back().sup(),
 */
      __pyx_t_3 = ((__pyx_v_verbosity >= 3) != 0);
      if (__pyx_t_3) {

        /* "flowstar/observers.pyx":650
 *                     and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(             # <<<<<<<<<<<<<<
 *                         roots.back().inf(), roots.back().sup(),
 *                         root.inf(), root.sup()))
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_merging_intervals, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 650, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "flowstar/observers.pyx":651
 *                 if verbosity >= 3:
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                         roots.back().inf(), roots.back().sup(),             # <<<<<<<<<<<<<<
 *                         root.inf(), root.sup()))
 *                 interval.interval_union(roots.back(), root)
 */
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_roots.back().inf()); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 651, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_roots.back().sup()); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 651, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);

        /* "flowstar/observers.pyx":652
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                         roots.back().inf(), roots.back().sup(),
 *                         root.inf(), root.sup()))             # <<<<<<<<<<<<<<
 *                 interval.interval_union(roots.back(), root)
 *             else:
 */
        __pyx_t_9 = PyFloat_FromDouble(__pyx_v_root.inf()); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 652, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyFloat_FromDouble(__pyx_v_root.sup()); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 652, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_12 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[5] = {__pyx_t_11, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 4+__pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 650, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[5] = {__pyx_t_11, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 4+__pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 650, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_13 = PyTuple_New(4+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 650, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_12, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_12, __pyx_t_10);
          __pyx_t_7 = 0;
          __pyx_t_8 = 0;
          __pyx_t_9 = 0;
          __pyx_t_10 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 650, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "flowstar/observers.pyx":650
 *                     and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(             # <<<<<<<<<<<<<<
 *                         roots.back().inf(), roots.back().sup(),
 *                         root.inf(), root.sup()))
 */
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 650, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "flowstar/observers.pyx":649
 *             if (not roots.empty()
 *                     and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                         roots.back().inf(), roots.back().sup(),
 */
      }

      /* "flowstar/observers.pyx":653
 *                         roots.back().inf(), roots.back().sup(),
 *                         root.inf(), root.sup()))
 *                 interval.interval_union(roots.back(), root)             # <<<<<<<<<<<<<<
 *             else:
 *                 if verbosity >= 3:
 */
      __pyx_f_8flowstar_8interval_interval_union(__pyx_v_roots.back(), __pyx_v_root);

      /* "flowstar/observers.pyx":647
 *         for root in new_roots:
 *             root.add_assign(t)
 *             if (not roots.empty()             # <<<<<<<<<<<<<<
 *                     and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 */
      goto __pyx_L5;
    }

    /* "flowstar/observers.pyx":655
 *                 interval.interval_union(roots.back(), root)
 *             else:
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("new root:\n[{}..{}]".format(root.inf(), root.sup()))
 *                 roots.push_back(root)
 */
    /*else*/ {
      __pyx_t_3 = ((__pyx_v_verbosity >= 3) != 0);
      if (__pyx_t_3) {

        /* "flowstar/observers.pyx":656
 *             else:
 *                 if verbosity >= 3:
 *                     print("new root:\n[{}..{}]".format(root.inf(), root.sup()))             # <<<<<<<<<<<<<<
 *                 roots.push_back(root)
 * 
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_new_root, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 656, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_13 = PyFloat_FromDouble(__pyx_v_root.inf()); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 656, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_10 = PyFloat_FromDouble(__pyx_v_root.sup()); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 656, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_12 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_13, __pyx_t_10};
          __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 656, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_13, __pyx_t_10};
          __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 656, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_9) {
            __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_12, __pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_12, __pyx_t_10);
          __pyx_t_13 = 0;
          __pyx_t_10 = 0;
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 656, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "flowstar/observers.pyx":655
 *                 interval.interval_union(roots.back(), root)
 *             else:
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("new root:\n[{}..{}]".format(root.inf(), root.sup()))
 *                 roots.push_back(root)
 */
      }

      /* "flowstar/observers.pyx":657
 *                 if verbosity >= 3:
 *                     print("new root:\n[{}..{}]".format(root.inf(), root.sup()))
 *                 roots.push_back(root)             # <<<<<<<<<<<<<<
 * 
 *     cdef Poly _fprime_given_f(PolyObserver self):
 */
      try {
        __pyx_v_roots.push_back(__pyx_v_root);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 657, __pyx_L1_error)
      }
    }
    __pyx_L5:;

    /* "flowstar/observers.pyx":645
 *         """Add new_roots to roots, whilst amalgamating adjacent overlapping
 *         roots."""
 *         for root in new_roots:             # <<<<<<<<<<<<<<
 *             root.add_assign(t)
 *             if (not roots.empty()
 */
  }

  /* "flowstar/observers.pyx":640
 *         return overlap
 * 
 *     cdef void _amalgamate_roots(PolyObserver self, vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                                 vector[Interval] & new_roots,
 *                                 Interval & t, int verbosity=0):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_WriteUnraisable("flowstar.observers.PolyObserver._amalgamate_roots", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "flowstar/observers.pyx":659
 *                 roots.push_back(root)
 * 
 *     cdef Poly _fprime_given_f(PolyObserver self):             # <<<<<<<<<<<<<<
 *         """Find the derivative of f by taking the LieDerivative given odes."""
 *         cdef Polynomial fprime
 */

static struct __pyx_obj_8flowstar_4poly_Poly *__pyx_f_8flowstar_9observers_12PolyObserver__fprime_given_f(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self) {
  flowstar::Polynomial __pyx_v_fprime;
  struct __pyx_obj_8flowstar_4poly_Poly *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_fprime_given_f", 0);

  /* "flowstar/observers.pyx":663
 *         cdef Polynomial fprime
 * 
 *         self.f.c_poly.LieDerivative(fprime, (<CReach?>self.reach).odes)             # <<<<<<<<<<<<<<
 * 
 *         return Poly.from_polynomial(fprime, self.f.vars)
 */
  if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_self->reach), __pyx_ptype_8flowstar_12reachability_CReach)))) __PYX_ERR(1, 663, __pyx_L1_error)
  __pyx_v_self->f->c_poly.LieDerivative(__pyx_v_fprime, __pyx_v_self->reach->odes);

  /* "flowstar/observers.pyx":665
 *         self.f.c_poly.LieDerivative(fprime, (<CReach?>self.reach).odes)
 * 
 *         return Poly.from_polynomial(fprime, self.f.vars)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __pyx_v_self->f->vars;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_8flowstar_4poly_Poly->from_polynomial(__pyx_v_fprime, __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "flowstar/observers.pyx":659
 *                 roots.push_back(root)
 * 
 *     cdef Poly _fprime_given_f(PolyObserver self):             # <<<<<<<<<<<<<<
 *         """Find the derivative of f by taking the LieDerivative given odes."""
 *         cdef Polynomial fprime
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver._fprime_given_f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pxd":15
 * cdef class PolyObserver:
 *     cdef CReach reach
 *     cdef readonly Poly f             # <<<<<<<<<<<<<<
 *     cdef readonly Poly fprime
 *     cdef vector[optional[interval_time_fn]] poly_f_fns
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_1f_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_1f_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_1f___get__(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_1f___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->f));
  __pyx_r = ((PyObject *)__pyx_v_self->f);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pxd":16
 *     cdef CReach reach
 *     cdef readonly Poly f
 *     cdef readonly Poly fprime             # <<<<<<<<<<<<<<
 *     cdef vector[optional[interval_time_fn]] poly_f_fns
 *     cdef vector[optional[interval_time_fn]] poly_fprime_fns
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_6fprime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_6fprime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_6fprime___get__(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_6fprime___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->fprime));
  __pyx_r = ((PyObject *)__pyx_v_self->fprime);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/observers.pxd":21
 *     cdef vector[optional[bint]] bools
 *     cdef bint symbolic_composition
 *     cdef readonly object mask  # Mask             # <<<<<<<<<<<<<<
 *     cdef vector[Interval] masked_regions
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_4mask_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_4mask_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_4mask___get__(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_4mask___get__(struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->mask);
  __pyx_r = __pyx_v_self->mask;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_10__reduce_cython__(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8flowstar_9observers_12PolyObserver_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_9observers_12PolyObserver_12__setstate_cython__(((struct __pyx_obj_8flowstar_9observers_PolyObserver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_9observers_12PolyObserver_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_9observers_PolyObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.observers.PolyObserver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver __pyx_vtable_8flowstar_9observers_PolyObserver;

static PyObject *__pyx_tp_new_8flowstar_9observers_PolyObserver(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8flowstar_9observers_PolyObserver *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8flowstar_9observers_PolyObserver *)o);
  p->__pyx_vtab = __pyx_vtabptr_8flowstar_9observers_PolyObserver;
  new((void*)&(p->poly_f_fns)) std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ();
  new((void*)&(p->poly_fprime_fns)) std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ();
  new((void*)&(p->bools)) std::vector<std::optional<int> > ();
  new((void*)&(p->masked_regions)) std::vector<flowstar::Interval> ();
  p->reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)Py_None); Py_INCREF(Py_None);
  p->f = ((struct __pyx_obj_8flowstar_4poly_Poly *)Py_None); Py_INCREF(Py_None);
  p->fprime = ((struct __pyx_obj_8flowstar_4poly_Poly *)Py_None); Py_INCREF(Py_None);
  p->mask = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8flowstar_9observers_PolyObserver(PyObject *o) {
  struct __pyx_obj_8flowstar_9observers_PolyObserver *p = (struct __pyx_obj_8flowstar_9observers_PolyObserver *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->poly_f_fns);
  __Pyx_call_destructor(p->poly_fprime_fns);
  __Pyx_call_destructor(p->bools);
  __Pyx_call_destructor(p->masked_regions);
  Py_CLEAR(p->reach);
  Py_CLEAR(p->f);
  Py_CLEAR(p->fprime);
  Py_CLEAR(p->mask);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8flowstar_9observers_PolyObserver(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8flowstar_9observers_PolyObserver *p = (struct __pyx_obj_8flowstar_9observers_PolyObserver *)o;
  if (p->reach) {
    e = (*v)(((PyObject *)p->reach), a); if (e) return e;
  }
  if (p->f) {
    e = (*v)(((PyObject *)p->f), a); if (e) return e;
  }
  if (p->fprime) {
    e = (*v)(((PyObject *)p->fprime), a); if (e) return e;
  }
  if (p->mask) {
    e = (*v)(p->mask, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8flowstar_9observers_PolyObserver(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8flowstar_9observers_PolyObserver *p = (struct __pyx_obj_8flowstar_9observers_PolyObserver *)o;
  tmp = ((PyObject*)p->reach);
  p->reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->f);
  p->f = ((struct __pyx_obj_8flowstar_4poly_Poly *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fprime);
  p->fprime = ((struct __pyx_obj_8flowstar_4poly_Poly *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->mask);
  p->mask = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8flowstar_9observers_12PolyObserver_flowstar_successful(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_9observers_12PolyObserver_19flowstar_successful_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_9observers_12PolyObserver_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_9observers_12PolyObserver_4time_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_9observers_12PolyObserver_f(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_9observers_12PolyObserver_1f_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_9observers_12PolyObserver_fprime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_9observers_12PolyObserver_6fprime_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_9observers_12PolyObserver_mask(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_9observers_12PolyObserver_4mask_1__get__(o);
}

static PyMethodDef __pyx_methods_8flowstar_9observers_PolyObserver[] = {
  {"_init_stored_data", (PyCFunction)__pyx_pw_8flowstar_9observers_12PolyObserver_3_init_stored_data, METH_NOARGS, 0},
  {"roots", (PyCFunction)__pyx_pw_8flowstar_9observers_12PolyObserver_5roots, METH_VARARGS|METH_KEYWORDS, 0},
  {"check", (PyCFunction)__pyx_pw_8flowstar_9observers_12PolyObserver_9check, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8flowstar_9observers_12PolyObserver_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8flowstar_9observers_12PolyObserver_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8flowstar_9observers_PolyObserver[] = {
  {(char *)"flowstar_successful", __pyx_getprop_8flowstar_9observers_12PolyObserver_flowstar_successful, 0, (char *)0, 0},
  {(char *)"time", __pyx_getprop_8flowstar_9observers_12PolyObserver_time, 0, (char *)0, 0},
  {(char *)"f", __pyx_getprop_8flowstar_9observers_12PolyObserver_f, 0, (char *)0, 0},
  {(char *)"fprime", __pyx_getprop_8flowstar_9observers_12PolyObserver_fprime, 0, (char *)0, 0},
  {(char *)"mask", __pyx_getprop_8flowstar_9observers_12PolyObserver_mask, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8flowstar_9observers_PolyObserver = {
  PyVarObject_HEAD_INIT(0, 0)
  "flowstar.observers.PolyObserver", /*tp_name*/
  sizeof(struct __pyx_obj_8flowstar_9observers_PolyObserver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8flowstar_9observers_PolyObserver, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_8flowstar_9observers_12PolyObserver_7__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8flowstar_9observers_PolyObserver, /*tp_traverse*/
  __pyx_tp_clear_8flowstar_9observers_PolyObserver, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8flowstar_9observers_PolyObserver, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8flowstar_9observers_PolyObserver, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8flowstar_9observers_12PolyObserver_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8flowstar_9observers_PolyObserver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8flowstar_9observers_RestrictedObserver __pyx_vtable_8flowstar_9observers_RestrictedObserver;

static PyObject *__pyx_tp_new_8flowstar_9observers_RestrictedObserver(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8flowstar_9observers_RestrictedObserver *p;
  PyObject *o = __pyx_tp_new_8flowstar_9observers_PolyObserver(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8flowstar_9observers_RestrictedObserver *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8flowstar_9observers_PolyObserver*)__pyx_vtabptr_8flowstar_9observers_RestrictedObserver;
  new((void*)&(p->space_domain)) std::vector<flowstar::Interval> ();
  return o;
}

static void __pyx_tp_dealloc_8flowstar_9observers_RestrictedObserver(PyObject *o) {
  struct __pyx_obj_8flowstar_9observers_RestrictedObserver *p = (struct __pyx_obj_8flowstar_9observers_RestrictedObserver *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->space_domain);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8flowstar_9observers_PolyObserver(o);
}

static PyMethodDef __pyx_methods_8flowstar_9observers_RestrictedObserver[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8flowstar_9observers_18RestrictedObserver_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8flowstar_9observers_18RestrictedObserver_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8flowstar_9observers_RestrictedObserver = {
  PyVarObject_HEAD_INIT(0, 0)
  "flowstar.observers.RestrictedObserver", /*tp_name*/
  sizeof(struct __pyx_obj_8flowstar_9observers_RestrictedObserver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8flowstar_9observers_RestrictedObserver, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8flowstar_9observers_12PolyObserver_7__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8flowstar_9observers_PolyObserver, /*tp_traverse*/
  __pyx_tp_clear_8flowstar_9observers_PolyObserver, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8flowstar_9observers_RestrictedObserver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8flowstar_9observers_18RestrictedObserver_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8flowstar_9observers_RestrictedObserver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_observers(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_observers},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "observers",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_PolyObserver, __pyx_k_PolyObserver, sizeof(__pyx_k_PolyObserver), 0, 0, 1, 1},
  {&__pyx_n_s_RIF, __pyx_k_RIF, sizeof(__pyx_k_RIF), 0, 0, 1, 1},
  {&__pyx_n_s_Reach, __pyx_k_Reach, sizeof(__pyx_k_Reach), 0, 0, 1, 1},
  {&__pyx_n_s_RestrictedObserver, __pyx_k_RestrictedObserver, sizeof(__pyx_k_RestrictedObserver), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 1},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_flowstar_reachability, __pyx_k_flowstar_reachability, sizeof(__pyx_k_flowstar_reachability), 0, 0, 1, 1},
  {&__pyx_n_s_flowstar_successful, __pyx_k_flowstar_successful, sizeof(__pyx_k_flowstar_successful), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init_stored_data, __pyx_k_init_stored_data, sizeof(__pyx_k_init_stored_data), 0, 0, 1, 1},
  {&__pyx_n_b_local_t, __pyx_k_local_t, sizeof(__pyx_k_local_t), 0, 0, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 0, 1, 1},
  {&__pyx_kp_s_mask_overlap, __pyx_k_mask_overlap, sizeof(__pyx_k_mask_overlap), 0, 0, 1, 0},
  {&__pyx_kp_s_merging_intervals, __pyx_k_merging_intervals, sizeof(__pyx_k_merging_intervals), 0, 0, 1, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_new_root, __pyx_k_new_root, sizeof(__pyx_k_new_root), 0, 0, 1, 0},
  {&__pyx_kp_s_not_using_mask, __pyx_k_not_using_mask, sizeof(__pyx_k_not_using_mask), 0, 0, 1, 0},
  {&__pyx_kp_s_outside_mask, __pyx_k_outside_mask, sizeof(__pyx_k_outside_mask), 0, 0, 1, 0},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_reach, __pyx_k_reach, sizeof(__pyx_k_reach), 0, 0, 1, 1},
  {&__pyx_kp_s_reached_detect_roots_t, __pyx_k_reached_detect_roots_t, sizeof(__pyx_k_reached_detect_roots_t), 0, 0, 1, 0},
  {&__pyx_kp_s_reached_interval_eval_t, __pyx_k_reached_interval_eval_t, sizeof(__pyx_k_reached_interval_eval_t), 0, 0, 1, 0},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_kp_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 0},
  {&__pyx_kp_s_retrieving_f_and_fprime_polys, __pyx_k_retrieving_f_and_fprime_polys, sizeof(__pyx_k_retrieving_f_and_fprime_polys), 0, 0, 1, 0},
  {&__pyx_n_s_sage, __pyx_k_sage, sizeof(__pyx_k_sage), 0, 0, 1, 1},
  {&__pyx_n_s_sage_all, __pyx_k_sage_all, sizeof(__pyx_k_sage_all), 0, 0, 1, 1},
  {&__pyx_kp_s_self_bools_self_masked_regions_s, __pyx_k_self_bools_self_masked_regions_s, sizeof(__pyx_k_self_bools_self_masked_regions_s), 0, 0, 1, 0},
  {&__pyx_kp_s_self_bools_self_masked_regions_s_2, __pyx_k_self_bools_self_masked_regions_s_2, sizeof(__pyx_k_self_bools_self_masked_regions_s_2), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_s_skipping_given_cached_bool, __pyx_k_skipping_given_cached_bool, sizeof(__pyx_k_skipping_given_cached_bool), 0, 0, 1, 0},
  {&__pyx_kp_s_skipping_given_consistent_value, __pyx_k_skipping_given_consistent_value, sizeof(__pyx_k_skipping_given_consistent_value), 0, 0, 1, 0},
  {&__pyx_n_s_space_domain, __pyx_k_space_domain, sizeof(__pyx_k_space_domain), 0, 0, 1, 1},
  {&__pyx_n_s_symbolic_composition, __pyx_k_symbolic_composition, sizeof(__pyx_k_symbolic_composition), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_kp_s_t0, __pyx_k_t0, sizeof(__pyx_k_t0), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_kp_s_using_mask, __pyx_k_using_mask, sizeof(__pyx_k_using_mask), 0, 0, 1, 0},
  {&__pyx_n_s_verbosity, __pyx_k_verbosity, sizeof(__pyx_k_verbosity), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(1, 183, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_bools_self_masked_regions_s); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_bools_self_masked_regions_s); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "flowstar/observers.pyx":144
 *             return None
 * 
 *         with self.reach.global_manager:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "flowstar/observers.pyx":183
 *             t00 = t0
 *             if verbosity >= 2:
 *                 print("===")             # <<<<<<<<<<<<<<
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(t),
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s__4); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "flowstar/observers.pyx":194
 *             if deref(cached_bool).has_value():
 *                 if verbosity >= 3:
 *                     print("skipping given cached bool!")             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_skipping_given_cached_bool); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "flowstar/observers.pyx":213
 *             if not (f_domain.inf() <= 0 <= f_domain.sup()):
 *                 if verbosity >= 3:
 *                     print("skipping given consistent value over domain")             # <<<<<<<<<<<<<<
 *                 # Annoying code to make Cython allow assignment to a r-value
 *                 (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_skipping_given_consistent_value); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "flowstar/observers.pyx":271
 *             t00 = t0
 *             if verbosity >= 2:
 *                 print("===")             # <<<<<<<<<<<<<<
 *                 print("reached interval eval t={} + {}".format(
 *                     interval.as_str(t),
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s__4); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "flowstar/observers.pyx":331
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I, verbosity=verbosity)
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "flowstar/observers.pyx":374
 *             t00 = t0
 *             if verbosity >= 2:
 *                 print("===")             # <<<<<<<<<<<<<<
 *                 print("reached interval eval t={} + {}".format(
 *                     interval.as_str(t),
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s__4); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "flowstar/observers.pyx":456
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_bool_interval(I)
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "flowstar/observers.pyx":535
 *         if self.mask is not None:
 *             if verbosity >= 4:
 *                 print("using mask!")             # <<<<<<<<<<<<<<
 *             mask_overlap = self._mask_overlap(t + t0)
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_using_mask); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "flowstar/observers.pyx":554
 *             else:
 *                 if verbosity >= 2:
 *                     print("outside mask!")             # <<<<<<<<<<<<<<
 *                     # print('t + t0 =', interval.as_str(t + t0))
 *                     # print('mask =', self.mask)
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_outside_mask); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "flowstar/observers.pyx":561
 *         else:
 *             if verbosity >= 4:
 *                 print("not using mask!")             # <<<<<<<<<<<<<<
 * 
 *             return True
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_not_using_mask); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "flowstar/observers.pyx":581
 *             assert poly_fprime_fn.has_value()
 *             # Retrieve cached composed functions
 *             print("retrieving f and fprime polys")             # <<<<<<<<<<<<<<
 *             (&f_fn)[0] = poly_f_fn.value()
 *             (&fprime_fn)[0] = poly_fprime_fn.value()
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_retrieving_f_and_fprime_polys); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self_bools_self_masked_regions_s_2); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self_bools_self_masked_regions_s_2); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "flowstar/observers.pyx":23
 * 
 * 
 * __all__ = ('RestrictedObserver', 'PolyObserver')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_RestrictedObserver, __pyx_n_s_PolyObserver); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_0_00001 = PyFloat_FromDouble(0.00001); if (unlikely(!__pyx_float_0_00001)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_8flowstar_9observers_PolyObserver = &__pyx_vtable_8flowstar_9observers_PolyObserver;
  __pyx_vtable_8flowstar_9observers_PolyObserver.c_roots = (std::vector<flowstar::Interval>  (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_c_roots *__pyx_optional_args))__pyx_f_8flowstar_9observers_12PolyObserver_c_roots;
  __pyx_vtable_8flowstar_9observers_PolyObserver.eval_interval = (flowstar::Interval (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, flowstar::Interval &, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_interval *__pyx_optional_args))__pyx_f_8flowstar_9observers_12PolyObserver_eval_interval;
  __pyx_vtable_8flowstar_9observers_PolyObserver.eval_bool_interval = (boost::logic::tribool (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, flowstar::Interval &, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver_eval_bool_interval *__pyx_optional_args))__pyx_f_8flowstar_9observers_12PolyObserver_eval_bool_interval;
  __pyx_vtable_8flowstar_9observers_PolyObserver._tm_segment_loop = (int (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, int &, std::vector<flowstar::Interval>  *&, std::optional<std::vector<flowstar::Interval> >  &, std::list<flowstar::TaylorModelVec> ::iterator &, std::list<std::vector<flowstar::Interval> > ::iterator &, std::vector<std::optional<int> > ::iterator &, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &, flowstar::Interval &, flowstar::Interval &, flowstar::Interval const &))__pyx_f_8flowstar_9observers_12PolyObserver__tm_segment_loop;
  __pyx_vtable_8flowstar_9observers_PolyObserver._mask_overlap = (std::optional<flowstar::Interval>  (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, flowstar::Interval const &))__pyx_f_8flowstar_9observers_12PolyObserver__mask_overlap;
  __pyx_vtable_8flowstar_9observers_PolyObserver._amalgamate_roots = (void (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, std::vector<flowstar::Interval>  &, std::vector<flowstar::Interval>  &, flowstar::Interval &, struct __pyx_opt_args_8flowstar_9observers_12PolyObserver__amalgamate_roots *__pyx_optional_args))__pyx_f_8flowstar_9observers_12PolyObserver__amalgamate_roots;
  __pyx_vtable_8flowstar_9observers_PolyObserver._mask_intersect_check = (int (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, flowstar::Interval &, flowstar::Interval &, int))__pyx_f_8flowstar_9observers_12PolyObserver__mask_intersect_check;
  __pyx_vtable_8flowstar_9observers_PolyObserver._pre_retrieve_f = (void (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, std::function<flowstar::Interval(const flowstar::Interval &)> &, std::function<flowstar::Interval(const flowstar::Interval &)> &, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  *))__pyx_f_8flowstar_9observers_12PolyObserver__pre_retrieve_f;
  __pyx_vtable_8flowstar_9observers_PolyObserver._post_retrieve_f = (void (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *, std::function<flowstar::Interval(const flowstar::Interval &)> &, std::function<flowstar::Interval(const flowstar::Interval &)> &, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &, std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>>  &, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  *))__pyx_f_8flowstar_9observers_12PolyObserver__post_retrieve_f;
  __pyx_vtable_8flowstar_9observers_PolyObserver._global_domain = (std::optional<std::vector<flowstar::Interval> >  (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *))__pyx_f_8flowstar_9observers_12PolyObserver__global_domain;
  __pyx_vtable_8flowstar_9observers_PolyObserver._fprime_given_f = (struct __pyx_obj_8flowstar_4poly_Poly *(*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *))__pyx_f_8flowstar_9observers_12PolyObserver__fprime_given_f;
  if (PyType_Ready(&__pyx_type_8flowstar_9observers_PolyObserver) < 0) __PYX_ERR(1, 90, __pyx_L1_error)
  __pyx_type_8flowstar_9observers_PolyObserver.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8flowstar_9observers_PolyObserver.tp_dictoffset && __pyx_type_8flowstar_9observers_PolyObserver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8flowstar_9observers_PolyObserver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8flowstar_9observers_PolyObserver.tp_dict, __pyx_vtabptr_8flowstar_9observers_PolyObserver) < 0) __PYX_ERR(1, 90, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "PolyObserver", (PyObject *)&__pyx_type_8flowstar_9observers_PolyObserver) < 0) __PYX_ERR(1, 90, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8flowstar_9observers_PolyObserver) < 0) __PYX_ERR(1, 90, __pyx_L1_error)
  __pyx_ptype_8flowstar_9observers_PolyObserver = &__pyx_type_8flowstar_9observers_PolyObserver;
  __pyx_vtabptr_8flowstar_9observers_RestrictedObserver = &__pyx_vtable_8flowstar_9observers_RestrictedObserver;
  __pyx_vtable_8flowstar_9observers_RestrictedObserver.__pyx_base = *__pyx_vtabptr_8flowstar_9observers_PolyObserver;
  __pyx_vtable_8flowstar_9observers_RestrictedObserver.__pyx_base._global_domain = (std::optional<std::vector<flowstar::Interval> >  (*)(struct __pyx_obj_8flowstar_9observers_PolyObserver *))__pyx_f_8flowstar_9observers_18RestrictedObserver__global_domain;
  __pyx_vtable_8flowstar_9observers_RestrictedObserver._invalidate_indeterminate_polys = (void (*)(struct __pyx_obj_8flowstar_9observers_RestrictedObserver *))__pyx_f_8flowstar_9observers_18RestrictedObserver__invalidate_indeterminate_polys;
  __pyx_type_8flowstar_9observers_RestrictedObserver.tp_base = __pyx_ptype_8flowstar_9observers_PolyObserver;
  if (PyType_Ready(&__pyx_type_8flowstar_9observers_RestrictedObserver) < 0) __PYX_ERR(1, 27, __pyx_L1_error)
  __pyx_type_8flowstar_9observers_RestrictedObserver.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8flowstar_9observers_RestrictedObserver.tp_dictoffset && __pyx_type_8flowstar_9observers_RestrictedObserver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8flowstar_9observers_RestrictedObserver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8flowstar_9observers_RestrictedObserver.tp_dict, __pyx_vtabptr_8flowstar_9observers_RestrictedObserver) < 0) __PYX_ERR(1, 27, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "RestrictedObserver", (PyObject *)&__pyx_type_8flowstar_9observers_RestrictedObserver) < 0) __PYX_ERR(1, 27, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8flowstar_9observers_RestrictedObserver) < 0) __PYX_ERR(1, 27, __pyx_L1_error)
  __pyx_ptype_8flowstar_9observers_RestrictedObserver = &__pyx_type_8flowstar_9observers_RestrictedObserver;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_8flowstar_4poly_Poly = __Pyx_ImportType("flowstar.poly", "Poly", sizeof(struct __pyx_obj_8flowstar_4poly_Poly), 1); if (unlikely(!__pyx_ptype_8flowstar_4poly_Poly)) __PYX_ERR(2, 61, __pyx_L1_error)
  __pyx_vtabptr_8flowstar_4poly_Poly = (struct __pyx_vtabstruct_8flowstar_4poly_Poly*)__Pyx_GetVtable(__pyx_ptype_8flowstar_4poly_Poly->tp_dict); if (unlikely(!__pyx_vtabptr_8flowstar_4poly_Poly)) __PYX_ERR(2, 61, __pyx_L1_error)
  __pyx_ptype_8flowstar_12reachability_CReach = __Pyx_ImportType("flowstar.reachability", "CReach", sizeof(struct __pyx_obj_8flowstar_12reachability_CReach), 1); if (unlikely(!__pyx_ptype_8flowstar_12reachability_CReach)) __PYX_ERR(3, 10, __pyx_L1_error)
  __pyx_vtabptr_8flowstar_12reachability_CReach = (struct __pyx_vtabstruct_8flowstar_12reachability_CReach*)__Pyx_GetVtable(__pyx_ptype_8flowstar_12reachability_CReach->tp_dict); if (unlikely(!__pyx_vtabptr_8flowstar_12reachability_CReach)) __PYX_ERR(3, 10, __pyx_L1_error)
  __pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager = __Pyx_ImportType("flowstar.reachability", "FlowstarGlobalManager", sizeof(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager), 1); if (unlikely(!__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager)) __PYX_ERR(3, 28, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("flowstar.interval"); if (!__pyx_t_1) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "as_str", (void (**)(void))&__pyx_f_8flowstar_8interval_as_str, "PyObject *(flowstar::Interval const &)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "make_interval", (void (**)(void))&__pyx_f_8flowstar_8interval_make_interval, "flowstar::Interval (PyObject *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "overlaps", (void (**)(void))&__pyx_f_8flowstar_8interval_overlaps, "bool (flowstar::Interval const &, flowstar::Interval const &)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "interval_union", (void (**)(void))&__pyx_f_8flowstar_8interval_interval_union, "void (flowstar::Interval &, flowstar::Interval const &)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "int_min_dist", (void (**)(void))&__pyx_f_8flowstar_8interval_int_min_dist, "double (flowstar::Interval const &, flowstar::Interval const &)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("flowstar.poly"); if (!__pyx_t_2) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "compose", (void (**)(void))&__pyx_f_8flowstar_4poly_compose, "flowstar::TaylorModel (flowstar::Polynomial const &, flowstar::TaylorModelVec const , std::vector<flowstar::Interval>  const &, int const , flowstar::Interval const , struct __pyx_opt_args_8flowstar_4poly_compose *__pyx_optional_args)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_ImportModule("flowstar.root_detection"); if (!__pyx_t_3) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_3, "detect_roots", (void (**)(void))&__pyx_f_8flowstar_14root_detection_detect_roots, "void (std::vector<flowstar::Interval>  &, std::function<flowstar::Interval(const flowstar::Interval &)>, std::function<flowstar::Interval(const flowstar::Interval &)>, flowstar::Interval &, struct __pyx_opt_args_8flowstar_14root_detection_detect_roots *__pyx_optional_args)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_ImportModule("flowstar.observable"); if (!__pyx_t_4) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "observable", (void (**)(void))&__pyx_f_8flowstar_10observable_observable, "void (std::function<flowstar::Interval(const flowstar::Interval &)> &, std::function<flowstar::Interval(const flowstar::Interval &)> &, flowstar::Polynomial &, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  &, int, flowstar::Interval &)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initobservers(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initobservers(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_observers(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_observers(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_observers(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_observers(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("observers", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_flowstar__observers) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "flowstar.observers")) {
      if (unlikely(PyDict_SetItemString(modules, "flowstar.observers", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "flowstar/observers.pyx":9
 * from libcpp cimport bool as cbool
 * 
 * import sage.all as sage             # <<<<<<<<<<<<<<
 * 
 * cimport flowstar.root_detection as root_detection
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__18);
  __Pyx_GIVEREF(__pyx_n_s__18);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__18);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sage, __pyx_t_2) < 0) __PYX_ERR(1, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/observers.pyx":19
 * from flowstar.tribool cimport tribool, unknown
 * from flowstar.tribool cimport and_ as tri_and
 * from flowstar.reachability import Reach             # <<<<<<<<<<<<<<
 * from flowstar.observable cimport observable
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Reach);
  __Pyx_GIVEREF(__pyx_n_s_Reach);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Reach);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_flowstar_reachability, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Reach); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Reach, __pyx_t_2) < 0) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/observers.pyx":23
 * 
 * 
 * __all__ = ('RestrictedObserver', 'PolyObserver')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_tuple__19) < 0) __PYX_ERR(1, 23, __pyx_L1_error)

  /* "flowstar/observers.pyx":1
 * from __future__ import print_function, division, absolute_import             # <<<<<<<<<<<<<<
 * 
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init flowstar.observers", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init flowstar.observers");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
      static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A3
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
        static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyObject_GenericGetAttrNoDict */
        #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
        #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
        static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
        static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetVTable */
        static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CLineInTraceback */
        #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
        #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
        #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
        #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FunctionImport */
        #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
