/* Generated by Cython 0.28.5 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/usr/lib64/python2.7/site-packages/cysignals/macros.h", 
            "/usr/lib64/python2.7/site-packages/cysignals/struct_signals.h", 
            "flowstar/flowstar-2.1.0/Continuous.h", 
            "flowstar/flowstar-2.1.0/Interval.h", 
            "flowstar/flowstar-2.1.0/Monomial.h", 
            "flowstar/flowstar-2.1.0/Polynomial.h", 
            "flowstar/flowstar-2.1.0/TaylorModel.h", 
            "flowstar/flowstar-2.1.0/include.h"
        ], 
        "extra_compile_args": [
            "-O3", 
            "-std=c++17", 
            "-Wno-register", 
            "-march=native"
        ], 
        "extra_link_args": [
            "-lpari", 
            "-std=c++17"
        ], 
        "include_dirs": [
            "/usr/lib64/python2.7/site-packages/cysignals", 
            ".", 
            "./flowstar/", 
            "./ulbc/", 
            "./flowstar/flowstar-2.1.0", 
            "/usr/include/boost"
        ], 
        "language": "c++", 
        "libraries": [
            "flowstar", 
            "mpfr", 
            "gmp", 
            "gsl", 
            "gslcblas", 
            "m", 
            "glpk"
        ], 
        "library_dirs": [
            ".", 
            "./flowstar/", 
            "./ulbc/", 
            "./flowstar/flowstar-2.1.0", 
            "/usr/include/boost"
        ], 
        "name": "flowstar.reachability", 
        "sources": [
            "flowstar/reachability.pyx"
        ]
    }, 
    "module_name": "flowstar.reachability"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_5"
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__flowstar__reachability
#define __PYX_HAVE_API__flowstar__reachability
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <list>
#include <string.h>
#include <string>
#include "mpfr.h"
#include "Interval.h"
#include "Monomial.h"

    class MonoWrap: public flowstar::Monomial {
        public:
            flowstar::Interval getCoefficient() {
                return this->coefficient;
            }

            std::vector<int> getDegrees() {
                return this->degrees;
            }
    };
    
#include "Polynomial.h"

    class PolyWrap: public flowstar::Polynomial {
        /*
        PolyWrap(flowstar::Polynomial & P) {
            this->monomials = P.monomials;
        }
        */

        public:
            std::list<flowstar::Monomial> getMonomials() {
                return this->monomials;
            }
    };
    
#include "TaylorModel.h"
#include <functional>

    std::function<flowstar::Interval(const flowstar::Interval &)>
    compose_interval_fn(
    std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> f, flowstar::TaylorModelVec& tmv,
    std::vector<flowstar::Interval>& domain
    ) {
        return [f, &tmv, &domain](const flowstar::Interval & t) -> flowstar::Interval {
            std::vector<flowstar::Interval> I;
            domain[0] = t;
            tmv.intEval(I, domain);
            I.insert(I.begin(), t);
            return f(I);
        };
    }
    
#include "include.h"
#include <utility>
#include <map>
#include "Continuous.h"

    std::function<flowstar::Interval(std::vector<flowstar::Interval>&)>
    poly_fn(const flowstar::Polynomial & p) {
        // flowstar::HornerForm hf;
        // Convert p to HornerForm to increase accuracy
        // of interval evaluation
        // p.toHornerForm(hf);

        return [p](auto & v) {
            flowstar::Interval res;
            p.intEval(res, v);
            return res;
        };
    }

    std::function<flowstar::Interval(const flowstar::Interval&)>
    poly_time_fn(const flowstar::Polynomial & p) {
        return [p](const flowstar::Interval & t) -> flowstar::Interval {
            flowstar::Interval res;
            std::vector<flowstar::Interval> v;
            v.push_back(t);
            // v.push_back(t);
            p.intEval(res, v);
            return res;
        };
    }

    std::function<flowstar::Interval(const flowstar::Interval &)>
    poly_domain_time_fn(
    const flowstar::Polynomial & f,
    std::vector<flowstar::Interval>& domain
    ) {
        return [f, &domain](const flowstar::Interval & t) -> flowstar::Interval {
            flowstar::Interval I;
            domain[0] = t;
            f.intEval(I, domain);
            return I;
        };
    }
    
#include <boost/logic/tribool.hpp>
#include <optional>
#include <memory>
#include <algorithm>
#include <signal.h>
#include "struct_signals.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "flowstar/reachability.pyx",
  "stringsource",
  "flowstar/reachability.pxd",
  "signals.pxd",
  "flowstar/poly.pxd",
  "flowstar/plotting.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/*--- Type declarations ---*/
struct __pyx_obj_8flowstar_4poly_Poly;
struct __pyx_obj_8flowstar_8plotting_FlowstarPlotMixin;
struct __pyx_obj_8flowstar_8plotting_SagePlotMixin;
struct __pyx_obj_8flowstar_8plotting_SageTubePlotMixin;
struct __pyx_obj_8flowstar_12reachability_PolyObserver;
struct __pyx_obj_8flowstar_12reachability_RestrictedObserver;
struct __pyx_obj_8flowstar_12reachability_CReach;
struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager;
struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args;
struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr;
struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr;

/* "flowstar/Monomial.pxd":74
 *         vector[int] getDegrees()
 * 
 * ctypedef MonoWrap* MonoWrapPtr             # <<<<<<<<<<<<<<
 * ctypedef Monomial* MonomialPtr
 */
typedef MonoWrap *__pyx_t_8flowstar_8Monomial_MonoWrapPtr;

/* "flowstar/Monomial.pxd":75
 * 
 * ctypedef MonoWrap* MonoWrapPtr
 * ctypedef Monomial* MonomialPtr             # <<<<<<<<<<<<<<
 */
typedef flowstar::Monomial *__pyx_t_8flowstar_8Monomial_MonomialPtr;

/* "flowstar/Polynomial.pxd":62
 *         clist[Monomial] & getMonomials()
 * 
 * ctypedef PolyWrap* PolyWrapPtr             # <<<<<<<<<<<<<<
 * ctypedef Polynomial* PolynomialPtr
 */
typedef PolyWrap *__pyx_t_8flowstar_10Polynomial_PolyWrapPtr;

/* "flowstar/Polynomial.pxd":63
 * 
 * ctypedef PolyWrap* PolyWrapPtr
 * ctypedef Polynomial* PolynomialPtr             # <<<<<<<<<<<<<<
 */
typedef flowstar::Polynomial *__pyx_t_8flowstar_10Polynomial_PolynomialPtr;
struct __pyx_opt_args_8flowstar_4poly_compose;
struct __pyx_opt_args_8flowstar_4poly_4Poly_from_polynomial;

/* "flowstar/poly.pxd":12
 *     int order, Interval & cutoff_threshold) nogil
 * 
 * cdef TaylorModel compose(const Polynomial & P,             # <<<<<<<<<<<<<<
 *                          const TaylorModelVec tmv,
 *                          const vector[Interval] & domain,
 */
struct __pyx_opt_args_8flowstar_4poly_compose {
  int __pyx_n;
  int verbosity;
};

/* "flowstar/poly.pxd":71
 * 
 *     @staticmethod
 *     cdef Poly from_polynomial(Polynomial & P, vars, explicit_time=?)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_8flowstar_4poly_4Poly_from_polynomial {
  int __pyx_n;
  PyObject *explicit_time;
};
struct __pyx_opt_args_8flowstar_14root_detection_detect_roots;

/* "flowstar/root_detection.pxd":7
 * 
 * 
 * cdef void detect_roots(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                        interval_time_fn f, interval_time_fn fprime,
 *                        Interval & T0,
 */
struct __pyx_opt_args_8flowstar_14root_detection_detect_roots {
  int __pyx_n;
  double epsilon;
  int verbosity;
};

/* "libc/signal.pxd":3
 * # 7.14 Signal handling <signal.h>
 * 
 * ctypedef void (*sighandler_t)(int SIGNUM) nogil             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<signal.h>" nogil:
 */
typedef void (*__pyx_t_4libc_6signal_sighandler_t)(int);
struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver_c_roots;
struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver__amalgamate_roots;
struct __pyx_opt_args_8flowstar_12reachability_6CReach_c_roots;
struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval;
struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain;
struct __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc;
typedef struct __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc;

/* "flowstar/reachability.pxd":61
 *     cdef optional[Interval] mask_overlap(self, Interval & x) nogil
 *     cdef optional[vector[Interval]] _global_domain(self)
 *     cdef vector[Interval] c_roots(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                   double epsilon=?, int verbosity=?)
 *     cdef Interval eval_interval(PolyObserver self, Interval & I)
 */
struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver_c_roots {
  int __pyx_n;
  double epsilon;
  int verbosity;
};

/* "flowstar/reachability.pxd":65
 *     cdef Interval eval_interval(PolyObserver self, Interval & I)
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & I)
 *     cdef void _amalgamate_roots(PolyObserver self, vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                                 vector[Interval] & new_roots,
 *                                 Interval & T, int verbosity=?)
 */
struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver__amalgamate_roots {
  int __pyx_n;
  int verbosity;
};

/* "flowstar/reachability.pxd":102
 *     cdef vector[Interval] initials
 * 
 *     cdef vector[Interval] c_roots(CReach, Polynomial & f, Polynomial & fprime,             # <<<<<<<<<<<<<<
 *             optional[reference_wrapper[vector[Interval]]] space_domain=?,
 *             double epsilon=?, int verbosity=?)
 */
struct __pyx_opt_args_8flowstar_12reachability_6CReach_c_roots {
  int __pyx_n;
  std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  space_domain;
  double epsilon;
  int verbosity;
};

/* "flowstar/reachability.pxd":105
 *             optional[reference_wrapper[vector[Interval]]] space_domain=?,
 *             double epsilon=?, int verbosity=?)
 *     cdef vector[Interval] eval_interval(CReach, Interval,             # <<<<<<<<<<<<<<
 *             optional[reference_wrapper[vector[Interval]]] space_domain=*,
 *             optional[reference_wrapper[Polynomial]] poly=*)
 */
struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval {
  int __pyx_n;
  std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  space_domain;
  std::optional<std::reference_wrapper<flowstar::Polynomial> >  poly;
};

/* "flowstar/reachability.pxd":109
 *             optional[reference_wrapper[Polynomial]] poly=*)
 *     cdef optional[vector[Interval]]\
 *             _convert_space_domain(CReach self, space_domain=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain {
  int __pyx_n;
  PyObject *space_domain;
};

/* "flowstar/reachability.pyx":43
 * # Defined in this module rather than in poly due to Cython bug
 * # https://github.com/cython/cython/issues/1427
 * cdef (interval_time_fn, interval_time_fn) observable(             # <<<<<<<<<<<<<<
 *     Polynomial & f, TaylorModelVec & tmv, vector[Interval] & domain,
 *     int order, Interval & cutoff_threshold) nogil:
 */
struct __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc {
  std::function<flowstar::Interval(const flowstar::Interval &)> f0;
  std::function<flowstar::Interval(const flowstar::Interval &)> f1;
};

/* "flowstar/poly.pxd":65
 *                                                const vector[Interval] & domain)
 * 
 * cdef class Poly:             # <<<<<<<<<<<<<<
 *     cdef Polynomial c_poly
 *     cdef dict vars
 */
struct __pyx_obj_8flowstar_4poly_Poly {
  PyObject_HEAD
  struct __pyx_vtabstruct_8flowstar_4poly_Poly *__pyx_vtab;
  flowstar::Polynomial c_poly;
  PyObject *vars;
  int explicit_time;
};


/* "flowstar/plotting.pxd":1
 * cdef class FlowstarPlotMixin:             # <<<<<<<<<<<<<<
 *     pass
 *     # def plot(self, x, y, bytes filename, int plot_type=?):
 */
struct __pyx_obj_8flowstar_8plotting_FlowstarPlotMixin {
  PyObject_HEAD
};


/* "flowstar/plotting.pxd":6
 *     # def wplot(self, str x, str y, int plot_type=?, bytes filename=?):
 * 
 * cdef class SagePlotMixin:             # <<<<<<<<<<<<<<
 *     pass
 *     # def sage_plot(self, x, duration=None, double step=?):
 */
struct __pyx_obj_8flowstar_8plotting_SagePlotMixin {
  PyObject_HEAD
};


/* "flowstar/plotting.pxd":14
 * 
 * 
 * cdef class SageTubePlotMixin:             # <<<<<<<<<<<<<<
 *     pass
 *     # def sage_time_tube_plot(self, str x, double step=?, joins=?):
 */
struct __pyx_obj_8flowstar_8plotting_SageTubePlotMixin {
  PyObject_HEAD
};


/* "flowstar/reachability.pxd":48
 * 
 * 
 * cdef class PolyObserver:             # <<<<<<<<<<<<<<
 *     cdef CReach reach
 *     cdef Poly f
 */
struct __pyx_obj_8flowstar_12reachability_PolyObserver {
  PyObject_HEAD
  struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *__pyx_vtab;
  struct __pyx_obj_8flowstar_12reachability_CReach *reach;
  struct __pyx_obj_8flowstar_4poly_Poly *f;
  struct __pyx_obj_8flowstar_4poly_Poly *fprime;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> >  poly_f_fns;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> >  poly_fprime_fns;
  std::vector<std::optional<int> >  bools;
  int symbolic_composition;
  PyObject *mask;
  std::vector<flowstar::Interval>  masked_regions;
};


/* "flowstar/reachability.pxd":81
 * 
 * 
 * cdef class RestrictedObserver(PolyObserver):             # <<<<<<<<<<<<<<
 *     cdef vector[Interval] space_domain
 *     # cdef CReach reach
 */
struct __pyx_obj_8flowstar_12reachability_RestrictedObserver {
  struct __pyx_obj_8flowstar_12reachability_PolyObserver __pyx_base;
  std::vector<flowstar::Interval>  space_domain;
};


/* "flowstar/reachability.pxd":92
 * 
 * 
 * cdef class CReach:             # <<<<<<<<<<<<<<
 *     cdef public FlowstarGlobalManager global_manager
 * 
 */
struct __pyx_obj_8flowstar_12reachability_CReach {
  PyObject_HEAD
  struct __pyx_vtabstruct_8flowstar_12reachability_CReach *__pyx_vtab;
  struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *global_manager;
  flowstar::ContinuousReachability c_reach;
  int ran;
  int prepared;
  int result;
  int symbolic_composition;
  std::vector<flowstar::Interval>  initials;
};


/* "flowstar/reachability.pxd":112
 * 
 * 
 * cdef class FlowstarGlobalManager:             # <<<<<<<<<<<<<<
 *     cdef vector[Interval] factorial_rec
 *     cdef vector[Interval] power_4
 */
struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager {
  PyObject_HEAD
  std::vector<flowstar::Interval>  factorial_rec;
  std::vector<flowstar::Interval>  power_4;
  std::vector<flowstar::Interval>  double_factorial;
  std::vector<std::string>  domainVarNames;
};


/* "flowstar/reachability.pyx":695
 *         self.run()
 * 
 *     def _init_args(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */
struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args {
  PyObject_HEAD
  PyObject *__pyx_v_orders;
};


/* "flowstar/reachability.pyx":770
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */
struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *__pyx_outer_scope;
  PyObject *__pyx_v_order;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "flowstar/reachability.pyx":772
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */
struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *__pyx_outer_scope;
  PyObject *__pyx_v_order;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "flowstar/poly.pxd":65
 *                                                const vector[Interval] & domain)
 * 
 * cdef class Poly:             # <<<<<<<<<<<<<<
 *     cdef Polynomial c_poly
 *     cdef dict vars
 */

struct __pyx_vtabstruct_8flowstar_4poly_Poly {
  struct __pyx_obj_8flowstar_4poly_Poly *(*from_polynomial)(flowstar::Polynomial &, PyObject *, struct __pyx_opt_args_8flowstar_4poly_4Poly_from_polynomial *__pyx_optional_args);
};
static struct __pyx_vtabstruct_8flowstar_4poly_Poly *__pyx_vtabptr_8flowstar_4poly_Poly;


/* "flowstar/reachability.pyx":101
 * 
 * 
 * cdef class PolyObserver:             # <<<<<<<<<<<<<<
 *     def __init__(PolyObserver self, f, fprime, CReach reach,
 *                  bint symbolic_composition,
 */

struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver {
  std::optional<flowstar::Interval>  (*mask_overlap)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, flowstar::Interval &);
  std::optional<std::vector<flowstar::Interval> >  (*_global_domain)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *);
  std::vector<flowstar::Interval>  (*c_roots)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver_c_roots *__pyx_optional_args);
  flowstar::Interval (*eval_interval)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, flowstar::Interval &);
  boost::logic::tribool (*eval_bool_interval)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, flowstar::Interval &);
  void (*_amalgamate_roots)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, std::vector<flowstar::Interval>  &, std::vector<flowstar::Interval>  &, flowstar::Interval &, struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver__amalgamate_roots *__pyx_optional_args);
  int (*_tm_segment_loop)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, int &, std::vector<flowstar::Interval>  *&, std::optional<std::vector<flowstar::Interval> >  &, std::list<flowstar::TaylorModelVec> ::iterator &, std::list<std::vector<flowstar::Interval> > ::iterator &, std::vector<std::optional<int> > ::iterator &, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &, flowstar::Interval &, flowstar::Interval &);
};
static struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *__pyx_vtabptr_8flowstar_12reachability_PolyObserver;


/* "flowstar/reachability.pyx":75
 * 
 * 
 * cdef class RestrictedObserver(PolyObserver):             # <<<<<<<<<<<<<<
 *     def __init__(RestrictedObserver self, PolyObserver p,
 *                  list space_domain not None):
 */

struct __pyx_vtabstruct_8flowstar_12reachability_RestrictedObserver {
  struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver __pyx_base;
};
static struct __pyx_vtabstruct_8flowstar_12reachability_RestrictedObserver *__pyx_vtabptr_8flowstar_12reachability_RestrictedObserver;


/* "flowstar/reachability.pyx":634
 * 
 * 
 * cdef class CReach:             # <<<<<<<<<<<<<<
 *     def __cinit__(CReach self, *args, **kwargs):
 *         if len(args) == 1 or len(args) == 2:
 */

struct __pyx_vtabstruct_8flowstar_12reachability_CReach {
  std::vector<flowstar::Interval>  (*c_roots)(struct __pyx_obj_8flowstar_12reachability_CReach *, flowstar::Polynomial &, flowstar::Polynomial &, struct __pyx_opt_args_8flowstar_12reachability_6CReach_c_roots *__pyx_optional_args);
  std::vector<flowstar::Interval>  (*eval_interval)(struct __pyx_obj_8flowstar_12reachability_CReach *, flowstar::Interval, struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval *__pyx_optional_args);
  std::optional<std::vector<flowstar::Interval> >  (*_convert_space_domain)(struct __pyx_obj_8flowstar_12reachability_CReach *, struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain *__pyx_optional_args);
};
static struct __pyx_vtabstruct_8flowstar_12reachability_CReach *__pyx_vtabptr_8flowstar_12reachability_CReach;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->exc_type, &(self)->exc_value, &(self)->exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(self);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->exc_type, (self)->exc_value, (self)->exc_traceback);\
    (self)->exc_type = (self)->exc_value = (self)->exc_traceback = NULL;\
    }
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_12reachability_18RestrictedObserver__global_domain(struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *__pyx_v_self); /* proto*/
static std::optional<flowstar::Interval>  __pyx_f_8flowstar_12reachability_12PolyObserver_mask_overlap(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_x); /* proto*/
static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_12reachability_12PolyObserver__global_domain(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self); /* proto*/
static void __pyx_f_8flowstar_12reachability_12PolyObserver__amalgamate_roots(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, std::vector<flowstar::Interval>  &__pyx_v_roots, std::vector<flowstar::Interval>  &__pyx_v_new_roots, flowstar::Interval &__pyx_v_T, struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver__amalgamate_roots *__pyx_optional_args); /* proto*/
static int __pyx_f_8flowstar_12reachability_12PolyObserver__tm_segment_loop(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, int &__pyx_v_i, std::vector<flowstar::Interval>  *&__pyx_v_loop_domain, std::optional<std::vector<flowstar::Interval> >  &__pyx_v_global_domain, std::list<flowstar::TaylorModelVec> ::iterator &__pyx_v_tmv, std::list<std::vector<flowstar::Interval> > ::iterator &__pyx_v_domain, std::vector<std::optional<int> > ::iterator &__pyx_v_cached_bool, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &__pyx_v_poly_f_fn, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &__pyx_v_poly_fprime_fn, flowstar::Interval &__pyx_v_T, flowstar::Interval &__pyx_v_T0); /* proto*/
static std::vector<flowstar::Interval>  __pyx_f_8flowstar_12reachability_12PolyObserver_c_roots(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver_c_roots *__pyx_optional_args); /* proto*/
static flowstar::Interval __pyx_f_8flowstar_12reachability_12PolyObserver_eval_interval(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_I); /* proto*/
static boost::logic::tribool __pyx_f_8flowstar_12reachability_12PolyObserver_eval_bool_interval(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_I); /* proto*/
static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_12reachability_6CReach__convert_space_domain(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain *__pyx_optional_args); /* proto*/
static std::vector<flowstar::Interval>  __pyx_f_8flowstar_12reachability_6CReach_c_roots(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, flowstar::Polynomial &__pyx_v_f, flowstar::Polynomial &__pyx_v_fprime, struct __pyx_opt_args_8flowstar_12reachability_6CReach_c_roots *__pyx_optional_args); /* proto*/
static std::vector<flowstar::Interval>  __pyx_f_8flowstar_12reachability_6CReach_eval_interval(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, flowstar::Interval &__pyx_v_I, struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval *__pyx_optional_args); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'flowstar.Interval' */

/* Module declarations from 'flowstar.Monomial' */

/* Module declarations from 'flowstar.Polynomial' */

/* Module declarations from 'flowstar.TaylorModel' */

/* Module declarations from 'flowstar.interval' */
static PyObject *(*__pyx_f_8flowstar_8interval_as_str)(flowstar::Interval const &); /*proto*/
static flowstar::Interval (*__pyx_f_8flowstar_8interval_make_interval)(PyObject *); /*proto*/
static bool (*__pyx_f_8flowstar_8interval_overlaps)(flowstar::Interval const &, flowstar::Interval const &); /*proto*/
static void (*__pyx_f_8flowstar_8interval_interval_union)(flowstar::Interval &, flowstar::Interval const &); /*proto*/
static void (*__pyx_f_8flowstar_8interval_interval_vect_union)(std::vector<flowstar::Interval>  &, std::vector<flowstar::Interval>  &); /*proto*/
static PyObject *(*__pyx_f_8flowstar_8interval_intervals_to_list)(std::vector<flowstar::Interval>  &); /*proto*/
static double (*__pyx_f_8flowstar_8interval_int_min_dist)(flowstar::Interval const &, flowstar::Interval const &); /*proto*/

/* Module declarations from 'flowstar.includeh' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'flowstar.Continuous' */

/* Module declarations from 'flowstar.poly' */
static PyTypeObject *__pyx_ptype_8flowstar_4poly_Poly = 0;
static flowstar::TaylorModel (*__pyx_f_8flowstar_4poly_compose)(flowstar::Polynomial const &, flowstar::TaylorModelVec const , std::vector<flowstar::Interval>  const &, int const , flowstar::Interval const , struct __pyx_opt_args_8flowstar_4poly_compose *__pyx_optional_args); /*proto*/

/* Module declarations from 'flowstar.tribool' */

/* Module declarations from 'flowstar.root_detection' */
static void (*__pyx_f_8flowstar_14root_detection_detect_roots)(std::vector<flowstar::Interval>  &, std::function<flowstar::Interval(const flowstar::Interval &)>, std::function<flowstar::Interval(const flowstar::Interval &)>, flowstar::Interval &, struct __pyx_opt_args_8flowstar_14root_detection_detect_roots *__pyx_optional_args); /*proto*/

/* Module declarations from 'flowstar.plotting' */
static PyTypeObject *__pyx_ptype_8flowstar_8plotting_FlowstarPlotMixin = 0;
static PyTypeObject *__pyx_ptype_8flowstar_8plotting_SagePlotMixin = 0;
static PyTypeObject *__pyx_ptype_8flowstar_8plotting_SageTubePlotMixin = 0;

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'libc.signal' */

/* Module declarations from 'cysignals.signals' */
static cysigs_t *__pyx_vp_9cysignals_7signals_cysigs = 0;
#define cysigs (*__pyx_vp_9cysignals_7signals_cysigs)
static void (*_sig_on_interrupt_received)(void); /*proto*/
static void (*_sig_on_recover)(void); /*proto*/
static void (*_sig_off_warning)(char const *, int); /*proto*/
static void (*print_backtrace)(void); /*proto*/

/* Module declarations from 'flowstar.reachability' */
static PyTypeObject *__pyx_ptype_8flowstar_12reachability_PolyObserver = 0;
static PyTypeObject *__pyx_ptype_8flowstar_12reachability_RestrictedObserver = 0;
static PyTypeObject *__pyx_ptype_8flowstar_12reachability_CReach = 0;
static PyTypeObject *__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager = 0;
static PyTypeObject *__pyx_ptype_8flowstar_12reachability___pyx_scope_struct___init_args = 0;
static PyTypeObject *__pyx_ptype_8flowstar_12reachability___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_8flowstar_12reachability___pyx_scope_struct_2_genexpr = 0;
static __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_f_8flowstar_12reachability_observable(flowstar::Polynomial &, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  &, int, flowstar::Interval &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "flowstar.reachability"
extern int __pyx_module_is_main_flowstar__reachability;
int __pyx_module_is_main_flowstar__reachability = 0;

/* Implementation of 'flowstar.reachability' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_min;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_enumerate;
static const char __pyx_k_f[] = "f";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_t[] = "t";
static const char __pyx_k__5[] = "===";
static const char __pyx_k_RIF[] = "RIF";
static const char __pyx_k__21[] = "({}, {})";
static const char __pyx_k__31[] = "*";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_gens[] = "gens";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_odes[] = "odes";
static const char __pyx_k_sage[] = "sage";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_vars[] = "vars";
static const char __pyx_k_Reach[] = "Reach";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_reach[] = "reach";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_Test_1[] = "Test 1!";
static const char __pyx_k_exc_tb[] = "exc_tb";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_fprime[] = "fprime";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_orders[] = "orders";
static const char __pyx_k_parent[] = "parent";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_Not_ran[] = "Not ran!";
static const char __pyx_k_capture[] = "capture";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_exc_val[] = "exc_val";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_local_t[] = "local_t";
static const char __pyx_k_prepare[] = "prepare";
static const char __pyx_k_restore[] = "restore";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_exc_type[] = "exc_type";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_initials[] = "initials";
static const char __pyx_k_operator[] = "operator";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_reduce_2[] = "reduce";
static const char __pyx_k_sage_all[] = "sage.all";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_endpoints[] = "endpoints";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_init_args[] = "_init_args";
static const char __pyx_k_local_var[] = "local_var_{}";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_prepare_2[] = "__prepare__";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_verbosity[] = "verbosity";
static const char __pyx_k_estimation[] = "estimation";
static const char __pyx_k_init_clone[] = "_init_clone";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_Already_ran[] = "Already ran";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_maxNumSteps[] = "maxNumSteps";
static const char __pyx_k_Invalid_case[] = "Invalid case!";
static const char __pyx_k_clear_global[] = "clear_global";
static const char __pyx_k_precondition[] = "precondition";
static const char __pyx_k_space_domain[] = "space_domain";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_num_flowpipes[] = "num_flowpipes";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cutoff_threshold[] = "cutoff_threshold";
static const char __pyx_k_init_stored_data[] = "_init_stored_data";
static const char __pyx_k_integrationScheme[] = "integrationScheme";
static const char __pyx_k_merging_intervals[] = "merging intervals:\n[{}..{}]\n[{}..{}]";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_global_power_4[] = "get_global_power_4";
static const char __pyx_k_flowstar_successful[] = "flowstar_successful";
static const char __pyx_k_max_remainder_queue[] = "max_remainder_queue";
static const char __pyx_k_symbolic_composition[] = "symbolic_composition";
static const char __pyx_k_flowstar_reachability[] = "flowstar.reachability";
static const char __pyx_k_reached_detect_roots_t[] = "reached detect roots t={} + {}";
static const char __pyx_k_FlowstarFailedException[] = "FlowstarFailedException";
static const char __pyx_k_get_global_factorial_rec[] = "get_global_factorial_rec";
static const char __pyx_k_init_args_locals_genexpr[] = "_init_args.<locals>.genexpr";
static const char __pyx_k_flowstar_reachability_pyx[] = "flowstar/reachability.pyx";
static const char __pyx_k_get_global_domain_var_names[] = "get_global_domain_var_names";
static const char __pyx_k_get_global_double_factorial[] = "get_global_double_factorial";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self_bools_self_masked_regions_s[] = "self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling";
static const char __pyx_k_self_double_factorial_self_facto[] = "self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling";
static const char __pyx_k_self_bools_self_masked_regions_s_2[] = "self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling";
static PyObject *__pyx_kp_s_Already_ran;
static PyObject *__pyx_n_s_FlowstarFailedException;
static PyObject *__pyx_kp_s_Invalid_case;
static PyObject *__pyx_kp_s_Not_ran;
static PyObject *__pyx_n_s_RIF;
static PyObject *__pyx_n_s_Reach;
static PyObject *__pyx_kp_s_Test_1;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s__21;
static PyObject *__pyx_n_s__31;
static PyObject *__pyx_kp_s__5;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_capture;
static PyObject *__pyx_n_s_clear_global;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_cutoff_threshold;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_endpoints;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_estimation;
static PyObject *__pyx_n_s_exc_tb;
static PyObject *__pyx_n_s_exc_type;
static PyObject *__pyx_n_s_exc_val;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_flowstar_reachability;
static PyObject *__pyx_kp_s_flowstar_reachability_pyx;
static PyObject *__pyx_n_s_flowstar_successful;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fprime;
static PyObject *__pyx_n_s_functools;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_gens;
static PyObject *__pyx_n_s_get_global_domain_var_names;
static PyObject *__pyx_n_s_get_global_double_factorial;
static PyObject *__pyx_n_s_get_global_factorial_rec;
static PyObject *__pyx_n_s_get_global_power_4;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init_args;
static PyObject *__pyx_n_s_init_args_locals_genexpr;
static PyObject *__pyx_n_s_init_clone;
static PyObject *__pyx_n_s_init_stored_data;
static PyObject *__pyx_n_s_initials;
static PyObject *__pyx_n_s_integrationScheme;
static PyObject *__pyx_n_b_local_t;
static PyObject *__pyx_kp_s_local_var;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mask;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_maxNumSteps;
static PyObject *__pyx_n_s_max_remainder_queue;
static PyObject *__pyx_kp_s_merging_intervals;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_num_flowpipes;
static PyObject *__pyx_n_s_odes;
static PyObject *__pyx_n_s_operator;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_orders;
static PyObject *__pyx_n_s_other;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_parent;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_precondition;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_prepare_2;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reach;
static PyObject *__pyx_kp_s_reached_detect_roots_t;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_2;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_restore;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_n_s_sage;
static PyObject *__pyx_n_s_sage_all;
static PyObject *__pyx_kp_s_self_bools_self_masked_regions_s;
static PyObject *__pyx_kp_s_self_bools_self_masked_regions_s_2;
static PyObject *__pyx_kp_s_self_double_factorial_self_facto;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_space_domain;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_symbolic_composition;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_vars;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_n_s_verbosity;
static int __pyx_pf_8flowstar_12reachability_18RestrictedObserver___init__(struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *__pyx_v_self, struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_p, PyObject *__pyx_v_space_domain); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_18RestrictedObserver_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_18RestrictedObserver_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8flowstar_12reachability_12PolyObserver___init__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, PyObject *__pyx_v_f, PyObject *__pyx_v_fprime, struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_reach, int __pyx_v_symbolic_composition, PyObject *__pyx_v_mask); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_2_init_stored_data(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_19flowstar_successful___get__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_4time___get__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_4roots(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_space_domain, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_verbosity); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_6__call__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_8check(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, PyObject *__pyx_v_t, CYTHON_UNUSED PyObject *__pyx_v_space_domain); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_4mask___get__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8flowstar_12reachability_6CReach___cinit__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_2_init_clone(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_other, PyObject *__pyx_v_initials); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10_init_args_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10_init_args_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_4_init_args(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_odes, PyObject *__pyx_v_initials, PyObject *__pyx_v_time, PyObject *__pyx_v_step, PyObject *__pyx_v_precondition, PyObject *__pyx_v_order, PyObject *__pyx_v_orders, PyObject *__pyx_v_verbose, PyObject *__pyx_v_integrationScheme, PyObject *__pyx_v_cutoff_threshold, PyObject *__pyx_v_estimation, PyObject *__pyx_v_max_remainder_queue, PyObject *__pyx_v_maxNumSteps, PyObject *__pyx_v_vars, PyObject *__pyx_v_run, PyObject *__pyx_v_symbolic_composition, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_6convert_space_domain(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_space_domain); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_8roots(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_f, PyObject *__pyx_v_fprime, PyObject *__pyx_v_space_domain, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_verbosity); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10__call__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_space_domain); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_12eval_poly(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, struct __pyx_obj_8flowstar_4poly_Poly *__pyx_v_p, PyObject *__pyx_v_t, PyObject *__pyx_v_space_domain); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_14prepare(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_16run(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_3res___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_16cutoff_threshold___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10estimation___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_13num_flowpipes___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_14num_state_vars___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10state_vars___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_12num_initials___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_4step___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_4time___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_8ode_strs___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_8num_odes___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_14global_manager___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static int __pyx_pf_8flowstar_12reachability_6CReach_14global_manager_2__set__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_8flowstar_12reachability_6CReach_14global_manager_4__del__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_3ran___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static int __pyx_pf_8flowstar_12reachability_6CReach_3ran_2__set__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_6result___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static int __pyx_pf_8flowstar_12reachability_6CReach_6result_2__set__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_20symbolic_composition___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static int __pyx_pf_8flowstar_12reachability_6CReach_20symbolic_composition_2__set__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_get_global_domain_var_names(void); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_2get_global_factorial_rec(void); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_4get_global_power_4(void); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_6get_global_double_factorial(void); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_8clear_global(void); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_10capture(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_12clear(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_14restore(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_16__enter__(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_18__exit__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8flowstar_12reachability_PolyObserver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8flowstar_12reachability_RestrictedObserver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8flowstar_12reachability_CReach(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8flowstar_12reachability_FlowstarGlobalManager(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8flowstar_12reachability___pyx_scope_struct___init_args(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8flowstar_12reachability___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8flowstar_12reachability___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_01;
static PyObject *__pyx_float_1eneg_3;
static PyObject *__pyx_float_1eneg_7;
static PyObject *__pyx_float_0_00001;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_200;
static PyObject *__pyx_int_neg_1;
static std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  __pyx_k__13;
static std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  __pyx_k__14;
static std::optional<std::reference_wrapper<flowstar::Polynomial> >  __pyx_k__15;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__28;
/* Late includes */
#include "macros.h"

/* "flowstar/reachability.pyx":43
 * # Defined in this module rather than in poly due to Cython bug
 * # https://github.com/cython/cython/issues/1427
 * cdef (interval_time_fn, interval_time_fn) observable(             # <<<<<<<<<<<<<<
 *     Polynomial & f, TaylorModelVec & tmv, vector[Interval] & domain,
 *     int order, Interval & cutoff_threshold) nogil:
 */

static __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_f_8flowstar_12reachability_observable(flowstar::Polynomial &__pyx_v_f, flowstar::TaylorModelVec &__pyx_v_tmv, std::vector<flowstar::Interval>  &__pyx_v_domain, int __pyx_v_order, flowstar::Interval &__pyx_v_cutoff_threshold) {
  flowstar::TaylorModel __pyx_v_f1;
  flowstar::TaylorModel __pyx_v_f2;
  std::vector<flowstar::Interval>  __pyx_v_space_domain;
  std::vector<int>  __pyx_v_varIDs;
  flowstar::Interval __pyx_v_R;
  flowstar::Polynomial __pyx_v_p;
  flowstar::Polynomial __pyx_v_p_deriv;
  std::vector<flowstar::Interval> ::size_type __pyx_v_i;
  __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_r;
  __Pyx_TraceDeclarations
  std::vector<flowstar::Interval> ::size_type __pyx_t_1;
  std::vector<flowstar::Interval> ::size_type __pyx_t_2;
  std::vector<flowstar::Interval> ::size_type __pyx_t_3;
  __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_t_4;
  __Pyx_TraceCall("observable", __pyx_f[0], 43, 1, __PYX_ERR(0, 43, __pyx_L1_error));

  /* "flowstar/reachability.pyx":55
 * 
 *     # Compose
 *     f1 = compose(f, tmv, domain, order + 1, cutoff_threshold)             # <<<<<<<<<<<<<<
 * 
 *     # Separate off space variables from time
 */
  __Pyx_TraceLine(55,1,__PYX_ERR(0, 55, __pyx_L1_error))
  __pyx_v_f1 = __pyx_f_8flowstar_4poly_compose(__pyx_v_f, __pyx_v_tmv, __pyx_v_domain, (__pyx_v_order + 1), __pyx_v_cutoff_threshold, NULL);

  /* "flowstar/reachability.pyx":58
 * 
 *     # Separate off space variables from time
 *     for i in range(1, domain.size()):             # <<<<<<<<<<<<<<
 *         varIDs.push_back(i)
 *         space_domain.push_back(domain[i])
 */
  __Pyx_TraceLine(58,1,__PYX_ERR(0, 58, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_domain.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "flowstar/reachability.pyx":59
 *     # Separate off space variables from time
 *     for i in range(1, domain.size()):
 *         varIDs.push_back(i)             # <<<<<<<<<<<<<<
 *         space_domain.push_back(domain[i])
 * 
 */
    __Pyx_TraceLine(59,1,__PYX_ERR(0, 59, __pyx_L1_error))
    try {
      __pyx_v_varIDs.push_back(__pyx_v_i);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 59, __pyx_L1_error)
    }

    /* "flowstar/reachability.pyx":60
 *     for i in range(1, domain.size()):
 *         varIDs.push_back(i)
 *         space_domain.push_back(domain[i])             # <<<<<<<<<<<<<<
 * 
 *     # Substitute domain variables
 */
    __Pyx_TraceLine(60,1,__PYX_ERR(0, 60, __pyx_L1_error))
    try {
      __pyx_v_space_domain.push_back((__pyx_v_domain[__pyx_v_i]));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 60, __pyx_L1_error)
    }
  }

  /* "flowstar/reachability.pyx":63
 * 
 *     # Substitute domain variables
 *     f1.substitute(f2, varIDs, space_domain)             # <<<<<<<<<<<<<<
 * 
 *     # return poly_domain_time_fn(f1.expansion
 */
  __Pyx_TraceLine(63,1,__PYX_ERR(0, 63, __pyx_L1_error))
  __pyx_v_f1.substitute(__pyx_v_f2, __pyx_v_varIDs, __pyx_v_space_domain);

  /* "flowstar/reachability.pyx":68
 *     #                                + Polynomial(f1.remainder, domain.size()),
 *     #                            domain)
 *     p = f2.expansion + Polynomial(f2.remainder, 1)             # <<<<<<<<<<<<<<
 *     p.derivative(p_deriv, 0)
 *     p.ctrunc(R, domain, order)
 */
  __Pyx_TraceLine(68,1,__PYX_ERR(0, 68, __pyx_L1_error))
  __pyx_v_p = (__pyx_v_f2.expansion + flowstar::Polynomial(__pyx_v_f2.remainder, 1));

  /* "flowstar/reachability.pyx":69
 *     #                            domain)
 *     p = f2.expansion + Polynomial(f2.remainder, 1)
 *     p.derivative(p_deriv, 0)             # <<<<<<<<<<<<<<
 *     p.ctrunc(R, domain, order)
 * 
 */
  __Pyx_TraceLine(69,1,__PYX_ERR(0, 69, __pyx_L1_error))
  __pyx_v_p.derivative(__pyx_v_p_deriv, 0);

  /* "flowstar/reachability.pyx":70
 *     p = f2.expansion + Polynomial(f2.remainder, 1)
 *     p.derivative(p_deriv, 0)
 *     p.ctrunc(R, domain, order)             # <<<<<<<<<<<<<<
 * 
 *     return (poly_time_fn(p + Polynomial(R, 1)), poly_time_fn(p_deriv))
 */
  __Pyx_TraceLine(70,1,__PYX_ERR(0, 70, __pyx_L1_error))
  __pyx_v_p.ctrunc(__pyx_v_R, __pyx_v_domain, __pyx_v_order);

  /* "flowstar/reachability.pyx":72
 *     p.ctrunc(R, domain, order)
 * 
 *     return (poly_time_fn(p + Polynomial(R, 1)), poly_time_fn(p_deriv))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(72,1,__PYX_ERR(0, 72, __pyx_L1_error))
  __pyx_t_4.f0 = poly_time_fn((__pyx_v_p + flowstar::Polynomial(__pyx_v_R, 1)));
  __pyx_t_4.f1 = poly_time_fn(__pyx_v_p_deriv);
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":43
 * # Defined in this module rather than in poly due to Cython bug
 * # https://github.com/cython/cython/issues/1427
 * cdef (interval_time_fn, interval_time_fn) observable(             # <<<<<<<<<<<<<<
 *     Polynomial & f, TaylorModelVec & tmv, vector[Interval] & domain,
 *     int order, Interval & cutoff_threshold) nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.reachability.observable", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "flowstar/reachability.pyx":76
 * 
 * cdef class RestrictedObserver(PolyObserver):
 *     def __init__(RestrictedObserver self, PolyObserver p,             # <<<<<<<<<<<<<<
 *                  list space_domain not None):
 *         self.f = p.f
 */

/* Python wrapper */
static int __pyx_pw_8flowstar_12reachability_18RestrictedObserver_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8flowstar_12reachability_18RestrictedObserver_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_p = 0;
  PyObject *__pyx_v_space_domain = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,&__pyx_n_s_space_domain,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_space_domain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 76, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 76, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_p = ((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)values[0]);
    __pyx_v_space_domain = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 76, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.RestrictedObserver.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_8flowstar_12reachability_PolyObserver, 1, "p", 0))) __PYX_ERR(0, 76, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_space_domain), (&PyList_Type), 0, "space_domain", 1))) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_r = __pyx_pf_8flowstar_12reachability_18RestrictedObserver___init__(((struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *)__pyx_v_self), __pyx_v_p, __pyx_v_space_domain);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_12reachability_18RestrictedObserver___init__(struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *__pyx_v_self, struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_p, PyObject *__pyx_v_space_domain) {
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_c_space_domain;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> >  __pyx_t_2;
  std::vector<std::optional<int> >  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  std::optional<std::vector<flowstar::Interval> >  __pyx_t_10;
  struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain __pyx_t_11;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 76, 0, __PYX_ERR(0, 76, __pyx_L1_error));

  /* "flowstar/reachability.pyx":78
 *     def __init__(RestrictedObserver self, PolyObserver p,
 *                  list space_domain not None):
 *         self.f = p.f             # <<<<<<<<<<<<<<
 *         self.fprime = p.fprime
 *         self.poly_f_fns = p.poly_f_fns
 */
  __Pyx_TraceLine(78,0,__PYX_ERR(0, 78, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_v_p->f);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.f);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.f));
  __pyx_v_self->__pyx_base.f = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":79
 *                  list space_domain not None):
 *         self.f = p.f
 *         self.fprime = p.fprime             # <<<<<<<<<<<<<<
 *         self.poly_f_fns = p.poly_f_fns
 *         self.poly_fprime_fns = p.poly_fprime_fns
 */
  __Pyx_TraceLine(79,0,__PYX_ERR(0, 79, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_v_p->fprime);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.fprime);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.fprime));
  __pyx_v_self->__pyx_base.fprime = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":80
 *         self.f = p.f
 *         self.fprime = p.fprime
 *         self.poly_f_fns = p.poly_f_fns             # <<<<<<<<<<<<<<
 *         self.poly_fprime_fns = p.poly_fprime_fns
 *         self.bools = p.bools
 */
  __Pyx_TraceLine(80,0,__PYX_ERR(0, 80, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_p->poly_f_fns;
  __pyx_v_self->__pyx_base.poly_f_fns = __pyx_t_2;

  /* "flowstar/reachability.pyx":81
 *         self.fprime = p.fprime
 *         self.poly_f_fns = p.poly_f_fns
 *         self.poly_fprime_fns = p.poly_fprime_fns             # <<<<<<<<<<<<<<
 *         self.bools = p.bools
 *         self.symbolic_composition = p.symbolic_composition
 */
  __Pyx_TraceLine(81,0,__PYX_ERR(0, 81, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_p->poly_fprime_fns;
  __pyx_v_self->__pyx_base.poly_fprime_fns = __pyx_t_2;

  /* "flowstar/reachability.pyx":82
 *         self.poly_f_fns = p.poly_f_fns
 *         self.poly_fprime_fns = p.poly_fprime_fns
 *         self.bools = p.bools             # <<<<<<<<<<<<<<
 *         self.symbolic_composition = p.symbolic_composition
 *         self.reach = p.reach
 */
  __Pyx_TraceLine(82,0,__PYX_ERR(0, 82, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_p->bools;
  __pyx_v_self->__pyx_base.bools = __pyx_t_3;

  /* "flowstar/reachability.pyx":83
 *         self.poly_fprime_fns = p.poly_fprime_fns
 *         self.bools = p.bools
 *         self.symbolic_composition = p.symbolic_composition             # <<<<<<<<<<<<<<
 *         self.reach = p.reach
 *         cdef optional[vector[Interval]] c_space_domain
 */
  __Pyx_TraceLine(83,0,__PYX_ERR(0, 83, __pyx_L1_error))
  __pyx_t_4 = __pyx_v_p->symbolic_composition;
  __pyx_v_self->__pyx_base.symbolic_composition = __pyx_t_4;

  /* "flowstar/reachability.pyx":84
 *         self.bools = p.bools
 *         self.symbolic_composition = p.symbolic_composition
 *         self.reach = p.reach             # <<<<<<<<<<<<<<
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:
 */
  __Pyx_TraceLine(84,0,__PYX_ERR(0, 84, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_v_p->reach);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.reach);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.reach));
  __pyx_v_self->__pyx_base.reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":86
 *         self.reach = p.reach
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:             # <<<<<<<<<<<<<<
 *             if not self.flowstar_successful:
 *                 self.reach = Reach(self.reach, space_domain)
 */
  __Pyx_TraceLine(86,0,__PYX_ERR(0, 86, __pyx_L1_error))
  __pyx_t_4 = (((PyObject *)__pyx_v_self->__pyx_base.reach) != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "flowstar/reachability.pyx":87
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:
 *             if not self.flowstar_successful:             # <<<<<<<<<<<<<<
 *                 self.reach = Reach(self.reach, space_domain)
 *                 self._init_stored_data()
 */
    __Pyx_TraceLine(87,0,__PYX_ERR(0, 87, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flowstar_successful); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = ((!__pyx_t_5) != 0);
    if (__pyx_t_4) {

      /* "flowstar/reachability.pyx":88
 *         if self.reach is not None:
 *             if not self.flowstar_successful:
 *                 self.reach = Reach(self.reach, space_domain)             # <<<<<<<<<<<<<<
 *                 self._init_stored_data()
 * 
 */
      __Pyx_TraceLine(88,0,__PYX_ERR(0, 88, __pyx_L1_error))
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_Reach); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, ((PyObject *)__pyx_v_self->__pyx_base.reach), __pyx_v_space_domain};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, ((PyObject *)__pyx_v_self->__pyx_base.reach), __pyx_v_space_domain};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.reach));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.reach));
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_self->__pyx_base.reach));
        __Pyx_INCREF(__pyx_v_space_domain);
        __Pyx_GIVEREF(__pyx_v_space_domain);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_space_domain);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8flowstar_12reachability_CReach))))) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->__pyx_base.reach);
      __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.reach));
      __pyx_v_self->__pyx_base.reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "flowstar/reachability.pyx":89
 *             if not self.flowstar_successful:
 *                 self.reach = Reach(self.reach, space_domain)
 *                 self._init_stored_data()             # <<<<<<<<<<<<<<
 * 
 *             c_space_domain = self.reach._convert_space_domain(space_domain)
 */
      __Pyx_TraceLine(89,0,__PYX_ERR(0, 89, __pyx_L1_error))
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_stored_data); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_9) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "flowstar/reachability.pyx":87
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:
 *             if not self.flowstar_successful:             # <<<<<<<<<<<<<<
 *                 self.reach = Reach(self.reach, space_domain)
 *                 self._init_stored_data()
 */
    }

    /* "flowstar/reachability.pyx":91
 *                 self._init_stored_data()
 * 
 *             c_space_domain = self.reach._convert_space_domain(space_domain)             # <<<<<<<<<<<<<<
 *             assert c_space_domain.has_value()
 *             self.space_domain = c_space_domain.value()
 */
    __Pyx_TraceLine(91,0,__PYX_ERR(0, 91, __pyx_L1_error))
    __pyx_t_11.__pyx_n = 1;
    __pyx_t_11.space_domain = __pyx_v_space_domain;
    __pyx_t_10 = ((struct __pyx_vtabstruct_8flowstar_12reachability_CReach *)__pyx_v_self->__pyx_base.reach->__pyx_vtab)->_convert_space_domain(__pyx_v_self->__pyx_base.reach, &__pyx_t_11); 
    __pyx_v_c_space_domain = __pyx_t_10;

    /* "flowstar/reachability.pyx":92
 * 
 *             c_space_domain = self.reach._convert_space_domain(space_domain)
 *             assert c_space_domain.has_value()             # <<<<<<<<<<<<<<
 *             self.space_domain = c_space_domain.value()
 * 
 */
    __Pyx_TraceLine(92,0,__PYX_ERR(0, 92, __pyx_L1_error))
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(__pyx_v_c_space_domain.has_value() != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 92, __pyx_L1_error)
      }
    }
    #endif

    /* "flowstar/reachability.pyx":93
 *             c_space_domain = self.reach._convert_space_domain(space_domain)
 *             assert c_space_domain.has_value()
 *             self.space_domain = c_space_domain.value()             # <<<<<<<<<<<<<<
 * 
 *     cdef optional[vector[Interval]] _global_domain(self):
 */
    __Pyx_TraceLine(93,0,__PYX_ERR(0, 93, __pyx_L1_error))
    __pyx_v_self->space_domain = __pyx_v_c_space_domain.value();

    /* "flowstar/reachability.pyx":86
 *         self.reach = p.reach
 *         cdef optional[vector[Interval]] c_space_domain
 *         if self.reach is not None:             # <<<<<<<<<<<<<<
 *             if not self.flowstar_successful:
 *                 self.reach = Reach(self.reach, space_domain)
 */
  }

  /* "flowstar/reachability.pyx":76
 * 
 * cdef class RestrictedObserver(PolyObserver):
 *     def __init__(RestrictedObserver self, PolyObserver p,             # <<<<<<<<<<<<<<
 *                  list space_domain not None):
 *         self.f = p.f
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("flowstar.reachability.RestrictedObserver.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":95
 *             self.space_domain = c_space_domain.value()
 * 
 *     cdef optional[vector[Interval]] _global_domain(self):             # <<<<<<<<<<<<<<
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain
 *         domain.insert(domain.begin(), Interval(-1, 1))
 */

static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_12reachability_18RestrictedObserver__global_domain(struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *__pyx_v_self) {
  std::vector<flowstar::Interval>  __pyx_v_domain;
  std::optional<std::vector<flowstar::Interval> >  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::vector<flowstar::Interval>  __pyx_t_1;
  __Pyx_RefNannySetupContext("_global_domain", 0);
  __Pyx_TraceCall("_global_domain", __pyx_f[0], 95, 0, __PYX_ERR(0, 95, __pyx_L1_error));

  /* "flowstar/reachability.pyx":96
 * 
 *     cdef optional[vector[Interval]] _global_domain(self):
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain             # <<<<<<<<<<<<<<
 *         domain.insert(domain.begin(), Interval(-1, 1))
 *         return optional[vector[Interval]](domain)
 */
  __Pyx_TraceLine(96,0,__PYX_ERR(0, 96, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_self->space_domain;
  __pyx_v_domain = __pyx_t_1;

  /* "flowstar/reachability.pyx":97
 *     cdef optional[vector[Interval]] _global_domain(self):
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain
 *         domain.insert(domain.begin(), Interval(-1, 1))             # <<<<<<<<<<<<<<
 *         return optional[vector[Interval]](domain)
 * 
 */
  __Pyx_TraceLine(97,0,__PYX_ERR(0, 97, __pyx_L1_error))
  try {
    __pyx_v_domain.insert(__pyx_v_domain.begin(), flowstar::Interval(-1.0, 1.0));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 97, __pyx_L1_error)
  }

  /* "flowstar/reachability.pyx":98
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain
 *         domain.insert(domain.begin(), Interval(-1, 1))
 *         return optional[vector[Interval]](domain)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(98,0,__PYX_ERR(0, 98, __pyx_L1_error))
  __pyx_r = std::optional<std::vector<flowstar::Interval> > (__pyx_v_domain);
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":95
 *             self.space_domain = c_space_domain.value()
 * 
 *     cdef optional[vector[Interval]] _global_domain(self):             # <<<<<<<<<<<<<<
 *         cdef vector[Interval] domain = (<RestrictedObserver>self).space_domain
 *         domain.insert(domain.begin(), Interval(-1, 1))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.reachability.RestrictedObserver._global_domain", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_18RestrictedObserver_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_18RestrictedObserver_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_18RestrictedObserver_2__reduce_cython__(((struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_18RestrictedObserver_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.RestrictedObserver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_18RestrictedObserver_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_18RestrictedObserver_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_18RestrictedObserver_4__setstate_cython__(((struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_18RestrictedObserver_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.RestrictedObserver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":102
 * 
 * cdef class PolyObserver:
 *     def __init__(PolyObserver self, f, fprime, CReach reach,             # <<<<<<<<<<<<<<
 *                  bint symbolic_composition,
 *                  object mask=None):
 */

/* Python wrapper */
static int __pyx_pw_8flowstar_12reachability_12PolyObserver_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8flowstar_12reachability_12PolyObserver_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f = 0;
  PyObject *__pyx_v_fprime = 0;
  struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_reach = 0;
  int __pyx_v_symbolic_composition;
  PyObject *__pyx_v_mask = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,&__pyx_n_s_fprime,&__pyx_n_s_reach,&__pyx_n_s_symbolic_composition,&__pyx_n_s_mask,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "flowstar/reachability.pyx":104
 *     def __init__(PolyObserver self, f, fprime, CReach reach,
 *                  bint symbolic_composition,
 *                  object mask=None):             # <<<<<<<<<<<<<<
 *         self.f = Poly(f)
 *         self.fprime = Poly(fprime)
 */
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fprime)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 1); __PYX_ERR(0, 102, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reach)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 2); __PYX_ERR(0, 102, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_symbolic_composition)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 3); __PYX_ERR(0, 102, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mask);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 102, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_f = values[0];
    __pyx_v_fprime = values[1];
    __pyx_v_reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)values[2]);
    __pyx_v_symbolic_composition = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_symbolic_composition == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L3_error)
    __pyx_v_mask = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 102, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reach), __pyx_ptype_8flowstar_12reachability_CReach, 1, "reach", 0))) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver___init__(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self), __pyx_v_f, __pyx_v_fprime, __pyx_v_reach, __pyx_v_symbolic_composition, __pyx_v_mask);

  /* "flowstar/reachability.pyx":102
 * 
 * cdef class PolyObserver:
 *     def __init__(PolyObserver self, f, fprime, CReach reach,             # <<<<<<<<<<<<<<
 *                  bint symbolic_composition,
 *                  object mask=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_12reachability_12PolyObserver___init__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, PyObject *__pyx_v_f, PyObject *__pyx_v_fprime, struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_reach, int __pyx_v_symbolic_composition, PyObject *__pyx_v_mask) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[0], 102, 0, __PYX_ERR(0, 102, __pyx_L1_error));

  /* "flowstar/reachability.pyx":105
 *                  bint symbolic_composition,
 *                  object mask=None):
 *         self.f = Poly(f)             # <<<<<<<<<<<<<<
 *         self.fprime = Poly(fprime)
 *         self.reach = reach
 */
  __Pyx_TraceLine(105,0,__PYX_ERR(0, 105, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8flowstar_4poly_Poly), __pyx_v_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->f);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->f));
  __pyx_v_self->f = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":106
 *                  object mask=None):
 *         self.f = Poly(f)
 *         self.fprime = Poly(fprime)             # <<<<<<<<<<<<<<
 *         self.reach = reach
 *         self.symbolic_composition = symbolic_composition
 */
  __Pyx_TraceLine(106,0,__PYX_ERR(0, 106, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8flowstar_4poly_Poly), __pyx_v_fprime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->fprime);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->fprime));
  __pyx_v_self->fprime = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":107
 *         self.f = Poly(f)
 *         self.fprime = Poly(fprime)
 *         self.reach = reach             # <<<<<<<<<<<<<<
 *         self.symbolic_composition = symbolic_composition
 *         self.mask = mask
 */
  __Pyx_TraceLine(107,0,__PYX_ERR(0, 107, __pyx_L1_error))
  __Pyx_INCREF(((PyObject *)__pyx_v_reach));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_reach));
  __Pyx_GOTREF(__pyx_v_self->reach);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->reach));
  __pyx_v_self->reach = __pyx_v_reach;

  /* "flowstar/reachability.pyx":108
 *         self.fprime = Poly(fprime)
 *         self.reach = reach
 *         self.symbolic_composition = symbolic_composition             # <<<<<<<<<<<<<<
 *         self.mask = mask
 *         self._init_stored_data()
 */
  __Pyx_TraceLine(108,0,__PYX_ERR(0, 108, __pyx_L1_error))
  __pyx_v_self->symbolic_composition = __pyx_v_symbolic_composition;

  /* "flowstar/reachability.pyx":109
 *         self.reach = reach
 *         self.symbolic_composition = symbolic_composition
 *         self.mask = mask             # <<<<<<<<<<<<<<
 *         self._init_stored_data()
 * 
 */
  __Pyx_TraceLine(109,0,__PYX_ERR(0, 109, __pyx_L1_error))
  __Pyx_INCREF(__pyx_v_mask);
  __Pyx_GIVEREF(__pyx_v_mask);
  __Pyx_GOTREF(__pyx_v_self->mask);
  __Pyx_DECREF(__pyx_v_self->mask);
  __pyx_v_self->mask = __pyx_v_mask;

  /* "flowstar/reachability.pyx":110
 *         self.symbolic_composition = symbolic_composition
 *         self.mask = mask
 *         self._init_stored_data()             # <<<<<<<<<<<<<<
 * 
 *     def _init_stored_data(self):
 */
  __Pyx_TraceLine(110,0,__PYX_ERR(0, 110, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_stored_data); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":102
 * 
 * cdef class PolyObserver:
 *     def __init__(PolyObserver self, f, fprime, CReach reach,             # <<<<<<<<<<<<<<
 *                  bint symbolic_composition,
 *                  object mask=None):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":112
 *         self._init_stored_data()
 * 
 *     def _init_stored_data(self):             # <<<<<<<<<<<<<<
 *         if self.reach is not None and self.flowstar_successful:
 *             self.reach.prepare()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_3_init_stored_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_3_init_stored_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_stored_data (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver_2_init_stored_data(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_2_init_stored_data(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_v_I = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::vector<std::optional<int> >  __pyx_t_7;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> >  __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  __Pyx_RefNannySetupContext("_init_stored_data", 0);
  __Pyx_TraceCall("_init_stored_data", __pyx_f[0], 112, 0, __PYX_ERR(0, 112, __pyx_L1_error));

  /* "flowstar/reachability.pyx":113
 * 
 *     def _init_stored_data(self):
 *         if self.reach is not None and self.flowstar_successful:             # <<<<<<<<<<<<<<
 *             self.reach.prepare()
 * 
 */
  __Pyx_TraceLine(113,0,__PYX_ERR(0, 113, __pyx_L1_error))
  __pyx_t_2 = (((PyObject *)__pyx_v_self->reach) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flowstar_successful); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":114
 *     def _init_stored_data(self):
 *         if self.reach is not None and self.flowstar_successful:
 *             self.reach.prepare()             # <<<<<<<<<<<<<<
 * 
 *             # Initialise optional arrays
 */
    __Pyx_TraceLine(114,0,__PYX_ERR(0, 114, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->reach), __pyx_n_s_prepare); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "flowstar/reachability.pyx":117
 * 
 *             # Initialise optional arrays
 *             self.bools = vector[optional[bint]](             # <<<<<<<<<<<<<<
 *                 self.reach.c_reach.flowpipesCompo.size(), optional[bint]())
 *             self.poly_f_fns = vector[optional[interval_time_fn]](
 */
    __Pyx_TraceLine(117,0,__PYX_ERR(0, 117, __pyx_L1_error))
    try {
      __pyx_t_7 = std::vector<std::optional<int> > (__pyx_v_self->reach->c_reach.flowpipesCompo.size(), std::optional<int> ());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 117, __pyx_L1_error)
    }
    __pyx_v_self->bools = __pyx_t_7;

    /* "flowstar/reachability.pyx":119
 *             self.bools = vector[optional[bint]](
 *                 self.reach.c_reach.flowpipesCompo.size(), optional[bint]())
 *             self.poly_f_fns = vector[optional[interval_time_fn]](             # <<<<<<<<<<<<<<
 *                 self.reach.c_reach.flowpipesCompo.size(),
 *                 optional[interval_time_fn]())
 */
    __Pyx_TraceLine(119,0,__PYX_ERR(0, 119, __pyx_L1_error))
    try {
      __pyx_t_8 = std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > (__pyx_v_self->reach->c_reach.flowpipesCompo.size(), std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> ());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 119, __pyx_L1_error)
    }
    __pyx_v_self->poly_f_fns = __pyx_t_8;

    /* "flowstar/reachability.pyx":122
 *                 self.reach.c_reach.flowpipesCompo.size(),
 *                 optional[interval_time_fn]())
 *             self.poly_fprime_fns = vector[optional[interval_time_fn]](             # <<<<<<<<<<<<<<
 *                 self.reach.c_reach.flowpipesCompo.size(),
 *                 optional[interval_time_fn]())
 */
    __Pyx_TraceLine(122,0,__PYX_ERR(0, 122, __pyx_L1_error))
    try {
      __pyx_t_8 = std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > (__pyx_v_self->reach->c_reach.flowpipesCompo.size(), std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> ());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 122, __pyx_L1_error)
    }
    __pyx_v_self->poly_fprime_fns = __pyx_t_8;

    /* "flowstar/reachability.pyx":113
 * 
 *     def _init_stored_data(self):
 *         if self.reach is not None and self.flowstar_successful:             # <<<<<<<<<<<<<<
 *             self.reach.prepare()
 * 
 */
  }

  /* "flowstar/reachability.pyx":127
 * 
 *         # Translate mask into a vector
 *         if self.mask is not None:             # <<<<<<<<<<<<<<
 *             for I in self.mask.pos:
 *                 self.masked_regions.push_back(make_interval(I))
 */
  __Pyx_TraceLine(127,0,__PYX_ERR(0, 127, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_self->mask != Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "flowstar/reachability.pyx":128
 *         # Translate mask into a vector
 *         if self.mask is not None:
 *             for I in self.mask.pos:             # <<<<<<<<<<<<<<
 *                 self.masked_regions.push_back(make_interval(I))
 * 
 */
    __Pyx_TraceLine(128,0,__PYX_ERR(0, 128, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->mask, __pyx_n_s_pos); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 128, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_10(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 128, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_I, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "flowstar/reachability.pyx":129
 *         if self.mask is not None:
 *             for I in self.mask.pos:
 *                 self.masked_regions.push_back(make_interval(I))             # <<<<<<<<<<<<<<
 * 
 *     cdef optional[Interval] mask_overlap(self, Interval & x) nogil:
 */
      __Pyx_TraceLine(129,0,__PYX_ERR(0, 129, __pyx_L1_error))
      try {
        __pyx_v_self->masked_regions.push_back(__pyx_f_8flowstar_8interval_make_interval(__pyx_v_I));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 129, __pyx_L1_error)
      }

      /* "flowstar/reachability.pyx":128
 *         # Translate mask into a vector
 *         if self.mask is not None:
 *             for I in self.mask.pos:             # <<<<<<<<<<<<<<
 *                 self.masked_regions.push_back(make_interval(I))
 * 
 */
      __Pyx_TraceLine(128,0,__PYX_ERR(0, 128, __pyx_L1_error))
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "flowstar/reachability.pyx":127
 * 
 *         # Translate mask into a vector
 *         if self.mask is not None:             # <<<<<<<<<<<<<<
 *             for I in self.mask.pos:
 *                 self.masked_regions.push_back(make_interval(I))
 */
  }

  /* "flowstar/reachability.pyx":112
 *         self._init_stored_data()
 * 
 *     def _init_stored_data(self):             # <<<<<<<<<<<<<<
 *         if self.reach is not None and self.flowstar_successful:
 *             self.reach.prepare()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver._init_stored_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_I);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":131
 *                 self.masked_regions.push_back(make_interval(I))
 * 
 *     cdef optional[Interval] mask_overlap(self, Interval & x) nogil:             # <<<<<<<<<<<<<<
 *         cdef optional[Interval] overlap
 *         cdef Interval intersection
 */

static std::optional<flowstar::Interval>  __pyx_f_8flowstar_12reachability_12PolyObserver_mask_overlap(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_x) {
  std::optional<flowstar::Interval>  __pyx_v_overlap;
  flowstar::Interval __pyx_v_y;
  std::optional<flowstar::Interval>  __pyx_r;
  __Pyx_TraceDeclarations
  std::vector<flowstar::Interval> ::iterator __pyx_t_1;
  std::vector<flowstar::Interval>  *__pyx_t_2;
  flowstar::Interval __pyx_t_3;
  int __pyx_t_4;
  __Pyx_TraceCall("mask_overlap", __pyx_f[0], 131, 1, __PYX_ERR(0, 131, __pyx_L1_error));

  /* "flowstar/reachability.pyx":135
 *         cdef Interval intersection
 * 
 *         for y in self.masked_regions:             # <<<<<<<<<<<<<<
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():
 */
  __Pyx_TraceLine(135,1,__PYX_ERR(0, 135, __pyx_L1_error))
  __pyx_t_2 = &__pyx_v_self->masked_regions;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_y = __pyx_t_3;

    /* "flowstar/reachability.pyx":136
 * 
 *         for y in self.masked_regions:
 *             if interval.overlaps(x, y):             # <<<<<<<<<<<<<<
 *                 if overlap.has_value():
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 */
    __Pyx_TraceLine(136,1,__PYX_ERR(0, 136, __pyx_L1_error))
    __pyx_t_4 = (__pyx_f_8flowstar_8interval_overlaps(__pyx_v_x, __pyx_v_y) != 0);
    if (__pyx_t_4) {

      /* "flowstar/reachability.pyx":137
 *         for y in self.masked_regions:
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():             # <<<<<<<<<<<<<<
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 *                 else:
 */
      __Pyx_TraceLine(137,1,__PYX_ERR(0, 137, __pyx_L1_error))
      __pyx_t_4 = (__pyx_v_overlap.has_value() != 0);
      if (__pyx_t_4) {

        /* "flowstar/reachability.pyx":138
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():
 *                     interval.interval_union(overlap.value(), x.intersect(y))             # <<<<<<<<<<<<<<
 *                 else:
 *                     overlap = optional[Interval](x.intersect(y))
 */
        __Pyx_TraceLine(138,1,__PYX_ERR(0, 138, __pyx_L1_error))
        __pyx_f_8flowstar_8interval_interval_union(__pyx_v_overlap.value(), __pyx_v_x.intersect(__pyx_v_y));

        /* "flowstar/reachability.pyx":137
 *         for y in self.masked_regions:
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():             # <<<<<<<<<<<<<<
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 *                 else:
 */
        goto __pyx_L6;
      }

      /* "flowstar/reachability.pyx":140
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 *                 else:
 *                     overlap = optional[Interval](x.intersect(y))             # <<<<<<<<<<<<<<
 * 
 *         return overlap
 */
      __Pyx_TraceLine(140,1,__PYX_ERR(0, 140, __pyx_L1_error))
      /*else*/ {
        __pyx_v_overlap = std::optional<flowstar::Interval> (__pyx_v_x.intersect(__pyx_v_y));
      }
      __pyx_L6:;

      /* "flowstar/reachability.pyx":136
 * 
 *         for y in self.masked_regions:
 *             if interval.overlaps(x, y):             # <<<<<<<<<<<<<<
 *                 if overlap.has_value():
 *                     interval.interval_union(overlap.value(), x.intersect(y))
 */
    }

    /* "flowstar/reachability.pyx":135
 *         cdef Interval intersection
 * 
 *         for y in self.masked_regions:             # <<<<<<<<<<<<<<
 *             if interval.overlaps(x, y):
 *                 if overlap.has_value():
 */
    __Pyx_TraceLine(135,1,__PYX_ERR(0, 135, __pyx_L1_error))
  }

  /* "flowstar/reachability.pyx":142
 *                     overlap = optional[Interval](x.intersect(y))
 * 
 *         return overlap             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(142,1,__PYX_ERR(0, 142, __pyx_L1_error))
  __pyx_r = __pyx_v_overlap;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":131
 *                 self.masked_regions.push_back(make_interval(I))
 * 
 *     cdef optional[Interval] mask_overlap(self, Interval & x) nogil:             # <<<<<<<<<<<<<<
 *         cdef optional[Interval] overlap
 *         cdef Interval intersection
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.reachability.PolyObserver.mask_overlap", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "flowstar/reachability.pyx":145
 * 
 *     @property
 *     def flowstar_successful(self):             # <<<<<<<<<<<<<<
 *         return self.reach.ran and self.reach.result <= 3
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_19flowstar_successful_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_19flowstar_successful_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver_19flowstar_successful___get__(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_19flowstar_successful___get__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 145, 0, __PYX_ERR(0, 145, __pyx_L1_error));

  /* "flowstar/reachability.pyx":146
 *     @property
 *     def flowstar_successful(self):
 *         return self.reach.ran and self.reach.result <= 3             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(146,0,__PYX_ERR(0, 146, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (__pyx_v_self->reach->ran) {
  } else {
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->reach->ran); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_self->reach->result <= 3);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":145
 * 
 *     @property
 *     def flowstar_successful(self):             # <<<<<<<<<<<<<<
 *         return self.reach.ran and self.reach.result <= 3
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.flowstar_successful.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":149
 * 
 *     @property
 *     def time(self):             # <<<<<<<<<<<<<<
 *         if self.reach is not None:
 *             return self.reach.time
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_4time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_4time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver_4time___get__(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_4time___get__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 149, 0, __PYX_ERR(0, 149, __pyx_L1_error));

  /* "flowstar/reachability.pyx":150
 *     @property
 *     def time(self):
 *         if self.reach is not None:             # <<<<<<<<<<<<<<
 *             return self.reach.time
 *         else:
 */
  __Pyx_TraceLine(150,0,__PYX_ERR(0, 150, __pyx_L1_error))
  __pyx_t_1 = (((PyObject *)__pyx_v_self->reach) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "flowstar/reachability.pyx":151
 *     def time(self):
 *         if self.reach is not None:
 *             return self.reach.time             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_TraceLine(151,0,__PYX_ERR(0, 151, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->reach), __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "flowstar/reachability.pyx":150
 *     @property
 *     def time(self):
 *         if self.reach is not None:             # <<<<<<<<<<<<<<
 *             return self.reach.time
 *         else:
 */
  }

  /* "flowstar/reachability.pyx":153
 *             return self.reach.time
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     cdef optional[vector[Interval]] _global_domain(PolyObserver self):
 */
  __Pyx_TraceLine(153,0,__PYX_ERR(0, 153, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "flowstar/reachability.pyx":149
 * 
 *     @property
 *     def time(self):             # <<<<<<<<<<<<<<
 *         if self.reach is not None:
 *             return self.reach.time
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":155
 *             return None
 * 
 *     cdef optional[vector[Interval]] _global_domain(PolyObserver self):             # <<<<<<<<<<<<<<
 *         return optional[vector[Interval]]()
 * 
 */

static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_12reachability_12PolyObserver__global_domain(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self) {
  std::optional<std::vector<flowstar::Interval> >  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_global_domain", 0);
  __Pyx_TraceCall("_global_domain", __pyx_f[0], 155, 0, __PYX_ERR(0, 155, __pyx_L1_error));

  /* "flowstar/reachability.pyx":156
 * 
 *     cdef optional[vector[Interval]] _global_domain(PolyObserver self):
 *         return optional[vector[Interval]]()             # <<<<<<<<<<<<<<
 * 
 *     def roots(PolyObserver self, space_domain=None,
 */
  __Pyx_TraceLine(156,0,__PYX_ERR(0, 156, __pyx_L1_error))
  __pyx_r = std::optional<std::vector<flowstar::Interval> > ();
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":155
 *             return None
 * 
 *     cdef optional[vector[Interval]] _global_domain(PolyObserver self):             # <<<<<<<<<<<<<<
 *         return optional[vector[Interval]]()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.reachability.PolyObserver._global_domain", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":158
 *         return optional[vector[Interval]]()
 * 
 *     def roots(PolyObserver self, space_domain=None,             # <<<<<<<<<<<<<<
 *               epsilon=0.00001, verbosity=0):
 *         # if not self.flowstar_successful:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_5roots(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_5roots(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_space_domain = 0;
  PyObject *__pyx_v_epsilon = 0;
  PyObject *__pyx_v_verbosity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("roots (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_space_domain,&__pyx_n_s_epsilon,&__pyx_n_s_verbosity,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_float_0_00001);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_space_domain);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbosity);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "roots") < 0)) __PYX_ERR(0, 158, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_space_domain = values[0];
    __pyx_v_epsilon = values[1];
    __pyx_v_verbosity = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("roots", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver_4roots(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self), __pyx_v_space_domain, __pyx_v_epsilon, __pyx_v_verbosity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_4roots(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_space_domain, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_verbosity) {
  std::vector<flowstar::Interval>  __pyx_v_c_res;
  flowstar::Interval __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  int __pyx_t_11;
  std::vector<flowstar::Interval>  __pyx_t_12;
  struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver_c_roots __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  std::vector<flowstar::Interval> ::iterator __pyx_t_16;
  flowstar::Interval __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("roots", 0);
  __Pyx_TraceCall("roots", __pyx_f[0], 158, 0, __PYX_ERR(0, 158, __pyx_L1_error));

  /* "flowstar/reachability.pyx":165
 *         cdef vector[Interval] c_res
 * 
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __Pyx_TraceLine(165,0,__PYX_ERR(0, 165, __pyx_L1_error))
  __pyx_t_1 = (((PyObject *)__pyx_v_self->reach) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "flowstar/reachability.pyx":166
 * 
 *         if self.reach is None:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         print("Test 1!")
 */
    __Pyx_TraceLine(166,0,__PYX_ERR(0, 166, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "flowstar/reachability.pyx":165
 *         cdef vector[Interval] c_res
 * 
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "flowstar/reachability.pyx":168
 *             return None
 * 
 *         print("Test 1!")             # <<<<<<<<<<<<<<
 * 
 *         with self.reach.global_manager:
 */
  __Pyx_TraceLine(168,0,__PYX_ERR(0, 168, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flowstar/reachability.pyx":170
 *         print("Test 1!")
 * 
 *         with self.reach.global_manager:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)
 * 
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(0, 170, __pyx_L1_error))
  /*with:*/ {
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "flowstar/reachability.pyx":171
 * 
 *         with self.reach.global_manager:
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)             # <<<<<<<<<<<<<<
 * 
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 */
          __Pyx_TraceLine(171,0,__PYX_ERR(0, 171, __pyx_L8_error))
          __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_epsilon); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L8_error)
          __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_verbosity); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L8_error)
          __pyx_t_13.__pyx_n = 2;
          __pyx_t_13.epsilon = __pyx_t_10;
          __pyx_t_13.verbosity = __pyx_t_11;
          __pyx_t_12 = ((struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *)__pyx_v_self->__pyx_vtab)->c_roots(__pyx_v_self, &__pyx_t_13); 
          __pyx_v_c_res = __pyx_t_12;

          /* "flowstar/reachability.pyx":170
 *         print("Test 1!")
 * 
 *         with self.reach.global_manager:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("flowstar.reachability.PolyObserver.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 170, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_14 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 170, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_14, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 170, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (__pyx_t_2 < 0) __PYX_ERR(0, 170, __pyx_L10_except_error)
          __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_5, __pyx_t_6);
            __pyx_t_3 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(0, 170, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_4) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 170, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L17;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "flowstar/reachability.pyx":173
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)
 * 
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]             # <<<<<<<<<<<<<<
 * 
 *     cdef void _amalgamate_roots(PolyObserver self, vector[Interval] & roots,
 */
  __Pyx_TraceLine(173,0,__PYX_ERR(0, 173, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_16 = __pyx_v_c_res.begin();
  for (;;) {
    if (!(__pyx_t_16 != __pyx_v_c_res.end())) break;
    __pyx_t_17 = *__pyx_t_16;
    ++__pyx_t_16;
    __pyx_v_r = __pyx_t_17;
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sage); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_RIF); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_r.inf()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_18 = PyFloat_FromDouble(__pyx_v_r.sup()); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_19 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_t_3, __pyx_t_18};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_t_3, __pyx_t_18};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    {
      __pyx_t_20 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__pyx_t_19) {
        __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_19); __pyx_t_19 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_11, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_11, __pyx_t_18);
      __pyx_t_3 = 0;
      __pyx_t_18 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":158
 *         return optional[vector[Interval]]()
 * 
 *     def roots(PolyObserver self, space_domain=None,             # <<<<<<<<<<<<<<
 *               epsilon=0.00001, verbosity=0):
 *         # if not self.flowstar_successful:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":175
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 *     cdef void _amalgamate_roots(PolyObserver self, vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                                 vector[Interval] & new_roots,
 *                                 Interval & T, int verbosity=0):
 */

static void __pyx_f_8flowstar_12reachability_12PolyObserver__amalgamate_roots(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, std::vector<flowstar::Interval>  &__pyx_v_roots, std::vector<flowstar::Interval>  &__pyx_v_new_roots, flowstar::Interval &__pyx_v_T, struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver__amalgamate_roots *__pyx_optional_args) {
  int __pyx_v_verbosity = ((int)0);
  flowstar::Interval __pyx_v_root;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::vector<flowstar::Interval> ::iterator __pyx_t_1;
  flowstar::Interval __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("_amalgamate_roots", 0);
  __Pyx_TraceCall("_amalgamate_roots", __pyx_f[0], 175, 0, __PYX_ERR(0, 175, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_verbosity = __pyx_optional_args->verbosity;
    }
  }

  /* "flowstar/reachability.pyx":178
 *                                 vector[Interval] & new_roots,
 *                                 Interval & T, int verbosity=0):
 *         for root in new_roots:             # <<<<<<<<<<<<<<
 *             root.add_assign(T)
 *             if (not roots.empty()
 */
  __Pyx_TraceLine(178,0,__PYX_ERR(0, 178, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_new_roots.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_v_new_roots.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_root = __pyx_t_2;

    /* "flowstar/reachability.pyx":179
 *                                 Interval & T, int verbosity=0):
 *         for root in new_roots:
 *             root.add_assign(T)             # <<<<<<<<<<<<<<
 *             if (not roots.empty()
 *                 and interval.int_min_dist(root, roots.back()) < 1e-9):
 */
    __Pyx_TraceLine(179,0,__PYX_ERR(0, 179, __pyx_L1_error))
    (void)(__pyx_v_root.operator+=(__pyx_v_T));

    /* "flowstar/reachability.pyx":180
 *         for root in new_roots:
 *             root.add_assign(T)
 *             if (not roots.empty()             # <<<<<<<<<<<<<<
 *                 and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 */
    __Pyx_TraceLine(180,0,__PYX_ERR(0, 180, __pyx_L1_error))
    __pyx_t_4 = ((!(__pyx_v_roots.empty() != 0)) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }

    /* "flowstar/reachability.pyx":181
 *             root.add_assign(T)
 *             if (not roots.empty()
 *                 and interval.int_min_dist(root, roots.back()) < 1e-9):             # <<<<<<<<<<<<<<
 *                 if verbosity >= 3:
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 */
    __Pyx_TraceLine(181,0,__PYX_ERR(0, 181, __pyx_L1_error))
    __pyx_t_4 = ((__pyx_f_8flowstar_8interval_int_min_dist(__pyx_v_root, __pyx_v_roots.back()) < 1e-9) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;

    /* "flowstar/reachability.pyx":180
 *         for root in new_roots:
 *             root.add_assign(T)
 *             if (not roots.empty()             # <<<<<<<<<<<<<<
 *                 and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 */
    __Pyx_TraceLine(180,0,__PYX_ERR(0, 180, __pyx_L1_error))
    if (__pyx_t_3) {

      /* "flowstar/reachability.pyx":182
 *             if (not roots.empty()
 *                 and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                         root.inf(), root.sup(),
 */
      __Pyx_TraceLine(182,0,__PYX_ERR(0, 182, __pyx_L1_error))
      __pyx_t_3 = ((__pyx_v_verbosity >= 3) != 0);
      if (__pyx_t_3) {

        /* "flowstar/reachability.pyx":183
 *                 and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(             # <<<<<<<<<<<<<<
 *                         root.inf(), root.sup(),
 *                         roots.back().inf(), roots.back().sup()))
 */
        __Pyx_TraceLine(183,0,__PYX_ERR(0, 183, __pyx_L1_error))
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_merging_intervals, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "flowstar/reachability.pyx":184
 *                 if verbosity >= 3:
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                         root.inf(), root.sup(),             # <<<<<<<<<<<<<<
 *                         roots.back().inf(), roots.back().sup()))
 *                 interval.interval_union(roots.back(), root)
 */
        __Pyx_TraceLine(184,0,__PYX_ERR(0, 184, __pyx_L1_error))
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_root.inf()); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_root.sup()); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);

        /* "flowstar/reachability.pyx":185
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                         root.inf(), root.sup(),
 *                         roots.back().inf(), roots.back().sup()))             # <<<<<<<<<<<<<<
 *                 interval.interval_union(roots.back(), root)
 *             else:
 */
        __Pyx_TraceLine(185,0,__PYX_ERR(0, 185, __pyx_L1_error))
        __pyx_t_9 = PyFloat_FromDouble(__pyx_v_roots.back().inf()); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 185, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyFloat_FromDouble(__pyx_v_roots.back().sup()); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 185, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_12 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[5] = {__pyx_t_11, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 4+__pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[5] = {__pyx_t_11, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_12, 4+__pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_13 = PyTuple_New(4+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 183, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_12, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_12, __pyx_t_10);
          __pyx_t_7 = 0;
          __pyx_t_8 = 0;
          __pyx_t_9 = 0;
          __pyx_t_10 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "flowstar/reachability.pyx":183
 *                 and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(             # <<<<<<<<<<<<<<
 *                         root.inf(), root.sup(),
 *                         roots.back().inf(), roots.back().sup()))
 */
        __Pyx_TraceLine(183,0,__PYX_ERR(0, 183, __pyx_L1_error))
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "flowstar/reachability.pyx":182
 *             if (not roots.empty()
 *                 and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                     print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                         root.inf(), root.sup(),
 */
      }

      /* "flowstar/reachability.pyx":186
 *                         root.inf(), root.sup(),
 *                         roots.back().inf(), roots.back().sup()))
 *                 interval.interval_union(roots.back(), root)             # <<<<<<<<<<<<<<
 *             else:
 *                 roots.push_back(root)
 */
      __Pyx_TraceLine(186,0,__PYX_ERR(0, 186, __pyx_L1_error))
      __pyx_f_8flowstar_8interval_interval_union(__pyx_v_roots.back(), __pyx_v_root);

      /* "flowstar/reachability.pyx":180
 *         for root in new_roots:
 *             root.add_assign(T)
 *             if (not roots.empty()             # <<<<<<<<<<<<<<
 *                 and interval.int_min_dist(root, roots.back()) < 1e-9):
 *                 if verbosity >= 3:
 */
      goto __pyx_L5;
    }

    /* "flowstar/reachability.pyx":188
 *                 interval.interval_union(roots.back(), root)
 *             else:
 *                 roots.push_back(root)             # <<<<<<<<<<<<<<
 * 
 *     cdef bint _tm_segment_loop(PolyObserver self,
 */
    __Pyx_TraceLine(188,0,__PYX_ERR(0, 188, __pyx_L1_error))
    /*else*/ {
      try {
        __pyx_v_roots.push_back(__pyx_v_root);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 188, __pyx_L1_error)
      }
    }
    __pyx_L5:;

    /* "flowstar/reachability.pyx":178
 *                                 vector[Interval] & new_roots,
 *                                 Interval & T, int verbosity=0):
 *         for root in new_roots:             # <<<<<<<<<<<<<<
 *             root.add_assign(T)
 *             if (not roots.empty()
 */
    __Pyx_TraceLine(178,0,__PYX_ERR(0, 178, __pyx_L1_error))
  }

  /* "flowstar/reachability.pyx":175
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 *     cdef void _amalgamate_roots(PolyObserver self, vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                                 vector[Interval] & new_roots,
 *                                 Interval & T, int verbosity=0):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_WriteUnraisable("flowstar.reachability.PolyObserver._amalgamate_roots", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "flowstar/reachability.pyx":190
 *                 roots.push_back(root)
 * 
 *     cdef bint _tm_segment_loop(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                int & i,
 *                                vector[Interval]* & loop_domain,
 */

static int __pyx_f_8flowstar_12reachability_12PolyObserver__tm_segment_loop(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, int &__pyx_v_i, std::vector<flowstar::Interval>  *&__pyx_v_loop_domain, std::optional<std::vector<flowstar::Interval> >  &__pyx_v_global_domain, std::list<flowstar::TaylorModelVec> ::iterator &__pyx_v_tmv, std::list<std::vector<flowstar::Interval> > ::iterator &__pyx_v_domain, std::vector<std::optional<int> > ::iterator &__pyx_v_cached_bool, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &__pyx_v_poly_f_fn, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &__pyx_v_poly_fprime_fn, flowstar::Interval &__pyx_v_T, flowstar::Interval &__pyx_v_T0) {
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv_end;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain_end;
  std::vector<std::optional<int> > ::iterator __pyx_v_cached_bool_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn_end;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<flowstar::Interval>  *__pyx_t_3;
  __Pyx_FakeReference<flowstar::Interval> __pyx_t_4;
  __Pyx_RefNannySetupContext("_tm_segment_loop", 0);
  __Pyx_TraceCall("_tm_segment_loop", __pyx_f[0], 190, 0, __PYX_ERR(0, 190, __pyx_L1_error));

  /* "flowstar/reachability.pyx":202
 *                                Interval & T0):
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()
 */
  __Pyx_TraceLine(202,0,__PYX_ERR(0, 202, __pyx_L1_error))
  __pyx_v_tmv_end = __pyx_v_self->reach->c_reach.flowpipesCompo.end();

  /* "flowstar/reachability.pyx":203
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()             # <<<<<<<<<<<<<<
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()
 *             vector[optional[interval_time_fn]].iterator\
 */
  __Pyx_TraceLine(203,0,__PYX_ERR(0, 203, __pyx_L1_error))
  __pyx_v_domain_end = __pyx_v_self->reach->c_reach.domains.end();

  /* "flowstar/reachability.pyx":204
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn_end = self.poly_f_fns.end()
 */
  __Pyx_TraceLine(204,0,__PYX_ERR(0, 204, __pyx_L1_error))
  __pyx_v_cached_bool_end = __pyx_v_self->bools.end();

  /* "flowstar/reachability.pyx":206
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn_end = self.poly_f_fns.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn_end = self.poly_fprime_fns.end()
 */
  __Pyx_TraceLine(206,0,__PYX_ERR(0, 206, __pyx_L1_error))
  __pyx_v_poly_f_fn_end = __pyx_v_self->poly_f_fns.end();

  /* "flowstar/reachability.pyx":208
 *                 poly_f_fn_end = self.poly_f_fns.end()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn_end = self.poly_fprime_fns.end()             # <<<<<<<<<<<<<<
 * 
 *         ### Increment time and loop iters
 */
  __Pyx_TraceLine(208,0,__PYX_ERR(0, 208, __pyx_L1_error))
  __pyx_v_poly_fprime_fn_end = __pyx_v_self->poly_fprime_fns.end();

  /* "flowstar/reachability.pyx":211
 * 
 *         ### Increment time and loop iters
 *         if i > 0:             # <<<<<<<<<<<<<<
 *             (&T)[0] += T0.sup()
 *             # Pad lower endpoint to take into account numerical error in
 */
  __Pyx_TraceLine(211,0,__PYX_ERR(0, 211, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_i > 0) != 0);
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":212
 *         ### Increment time and loop iters
 *         if i > 0:
 *             (&T)[0] += T0.sup()             # <<<<<<<<<<<<<<
 *             # Pad lower endpoint to take into account numerical error in
 *             # endpoints
 */
    __Pyx_TraceLine(212,0,__PYX_ERR(0, 212, __pyx_L1_error))
    ((&__pyx_v_T)[0]) += __pyx_v_T0.sup();

    /* "flowstar/reachability.pyx":215
 *             # Pad lower endpoint to take into account numerical error in
 *             # endpoints
 *             (&T)[0] += Interval(-1e-53, 0)             # <<<<<<<<<<<<<<
 *             inc(tmv)
 *             inc(domain)
 */
    __Pyx_TraceLine(215,0,__PYX_ERR(0, 215, __pyx_L1_error))
    ((&__pyx_v_T)[0]) += flowstar::Interval(-1e-53, 0.0);

    /* "flowstar/reachability.pyx":216
 *             # endpoints
 *             (&T)[0] += Interval(-1e-53, 0)
 *             inc(tmv)             # <<<<<<<<<<<<<<
 *             inc(domain)
 *             inc(poly_f_fn)
 */
    __Pyx_TraceLine(216,0,__PYX_ERR(0, 216, __pyx_L1_error))
    (void)((++__pyx_v_tmv));

    /* "flowstar/reachability.pyx":217
 *             (&T)[0] += Interval(-1e-53, 0)
 *             inc(tmv)
 *             inc(domain)             # <<<<<<<<<<<<<<
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)
 */
    __Pyx_TraceLine(217,0,__PYX_ERR(0, 217, __pyx_L1_error))
    (void)((++__pyx_v_domain));

    /* "flowstar/reachability.pyx":218
 *             inc(tmv)
 *             inc(domain)
 *             inc(poly_f_fn)             # <<<<<<<<<<<<<<
 *             inc(poly_fprime_fn)
 *             inc(cached_bool)
 */
    __Pyx_TraceLine(218,0,__PYX_ERR(0, 218, __pyx_L1_error))
    (void)((++__pyx_v_poly_f_fn));

    /* "flowstar/reachability.pyx":219
 *             inc(domain)
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)             # <<<<<<<<<<<<<<
 *             inc(cached_bool)
 *         inc(i)
 */
    __Pyx_TraceLine(219,0,__PYX_ERR(0, 219, __pyx_L1_error))
    (void)((++__pyx_v_poly_fprime_fn));

    /* "flowstar/reachability.pyx":220
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)
 *             inc(cached_bool)             # <<<<<<<<<<<<<<
 *         inc(i)
 * 
 */
    __Pyx_TraceLine(220,0,__PYX_ERR(0, 220, __pyx_L1_error))
    (void)((++__pyx_v_cached_bool));

    /* "flowstar/reachability.pyx":211
 * 
 *         ### Increment time and loop iters
 *         if i > 0:             # <<<<<<<<<<<<<<
 *             (&T)[0] += T0.sup()
 *             # Pad lower endpoint to take into account numerical error in
 */
  }

  /* "flowstar/reachability.pyx":221
 *             inc(poly_fprime_fn)
 *             inc(cached_bool)
 *         inc(i)             # <<<<<<<<<<<<<<
 * 
 *         # Check stopping condition
 */
  __Pyx_TraceLine(221,0,__PYX_ERR(0, 221, __pyx_L1_error))
  (void)((++__pyx_v_i));

  /* "flowstar/reachability.pyx":224
 * 
 *         # Check stopping condition
 *         if (   tmv            == tmv_end             # <<<<<<<<<<<<<<
 *             or domain         == domain_end
 *             or cached_bool    == cached_bool_end
 */
  __Pyx_TraceLine(224,0,__PYX_ERR(0, 224, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_tmv == __pyx_v_tmv_end) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }

  /* "flowstar/reachability.pyx":225
 *         # Check stopping condition
 *         if (   tmv            == tmv_end
 *             or domain         == domain_end             # <<<<<<<<<<<<<<
 *             or cached_bool    == cached_bool_end
 *             or poly_f_fn      == poly_f_fn_end
 */
  __Pyx_TraceLine(225,0,__PYX_ERR(0, 225, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_domain == __pyx_v_domain_end) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }

  /* "flowstar/reachability.pyx":226
 *         if (   tmv            == tmv_end
 *             or domain         == domain_end
 *             or cached_bool    == cached_bool_end             # <<<<<<<<<<<<<<
 *             or poly_f_fn      == poly_f_fn_end
 *             or poly_fprime_fn == poly_fprime_fn_end):
 */
  __Pyx_TraceLine(226,0,__PYX_ERR(0, 226, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_cached_bool == __pyx_v_cached_bool_end) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }

  /* "flowstar/reachability.pyx":227
 *             or domain         == domain_end
 *             or cached_bool    == cached_bool_end
 *             or poly_f_fn      == poly_f_fn_end             # <<<<<<<<<<<<<<
 *             or poly_fprime_fn == poly_fprime_fn_end):
 *             return False
 */
  __Pyx_TraceLine(227,0,__PYX_ERR(0, 227, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_poly_f_fn == __pyx_v_poly_f_fn_end) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }

  /* "flowstar/reachability.pyx":228
 *             or cached_bool    == cached_bool_end
 *             or poly_f_fn      == poly_f_fn_end
 *             or poly_fprime_fn == poly_fprime_fn_end):             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  __Pyx_TraceLine(228,0,__PYX_ERR(0, 228, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_poly_fprime_fn == __pyx_v_poly_fprime_fn_end) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;

  /* "flowstar/reachability.pyx":224
 * 
 *         # Check stopping condition
 *         if (   tmv            == tmv_end             # <<<<<<<<<<<<<<
 *             or domain         == domain_end
 *             or cached_bool    == cached_bool_end
 */
  __Pyx_TraceLine(224,0,__PYX_ERR(0, 224, __pyx_L1_error))
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":229
 *             or poly_f_fn      == poly_f_fn_end
 *             or poly_fprime_fn == poly_fprime_fn_end):
 *             return False             # <<<<<<<<<<<<<<
 *         else:
 *             # TM domain
 */
    __Pyx_TraceLine(229,0,__PYX_ERR(0, 229, __pyx_L1_error))
    __pyx_r = 0;
    goto __pyx_L0;

    /* "flowstar/reachability.pyx":224
 * 
 *         # Check stopping condition
 *         if (   tmv            == tmv_end             # <<<<<<<<<<<<<<
 *             or domain         == domain_end
 *             or cached_bool    == cached_bool_end
 */
  }

  /* "flowstar/reachability.pyx":232
 *         else:
 *             # TM domain
 *             (&loop_domain)[0] = (&global_domain.value()             # <<<<<<<<<<<<<<
 *                                  if global_domain.has_value()
 *                                  else &deref(domain))
 */
  __Pyx_TraceLine(232,0,__PYX_ERR(0, 232, __pyx_L1_error))
  /*else*/ {

    /* "flowstar/reachability.pyx":233
 *             # TM domain
 *             (&loop_domain)[0] = (&global_domain.value()
 *                                  if global_domain.has_value()             # <<<<<<<<<<<<<<
 *                                  else &deref(domain))
 * 
 */
    __Pyx_TraceLine(233,0,__PYX_ERR(0, 233, __pyx_L1_error))
    if ((__pyx_v_global_domain.has_value() != 0)) {

      /* "flowstar/reachability.pyx":232
 *         else:
 *             # TM domain
 *             (&loop_domain)[0] = (&global_domain.value()             # <<<<<<<<<<<<<<
 *                                  if global_domain.has_value()
 *                                  else &deref(domain))
 */
      __Pyx_TraceLine(232,0,__PYX_ERR(0, 232, __pyx_L1_error))
      __pyx_t_3 = (&__pyx_v_global_domain.value());
    } else {

      /* "flowstar/reachability.pyx":234
 *             (&loop_domain)[0] = (&global_domain.value()
 *                                  if global_domain.has_value()
 *                                  else &deref(domain))             # <<<<<<<<<<<<<<
 * 
 *             # Absolute time domain for current interval
 */
      __Pyx_TraceLine(234,0,__PYX_ERR(0, 234, __pyx_L1_error))
      __pyx_t_3 = (&(*__pyx_v_domain));
    }

    /* "flowstar/reachability.pyx":232
 *         else:
 *             # TM domain
 *             (&loop_domain)[0] = (&global_domain.value()             # <<<<<<<<<<<<<<
 *                                  if global_domain.has_value()
 *                                  else &deref(domain))
 */
    __Pyx_TraceLine(232,0,__PYX_ERR(0, 232, __pyx_L1_error))
    ((&__pyx_v_loop_domain)[0]) = __pyx_t_3;

    /* "flowstar/reachability.pyx":237
 * 
 *             # Absolute time domain for current interval
 *             (&T0)[0] = loop_domain[0][0] = deref(domain).at(0)             # <<<<<<<<<<<<<<
 * 
 *             return True
 */
    __Pyx_TraceLine(237,0,__PYX_ERR(0, 237, __pyx_L1_error))
    try {
      __pyx_t_4 = (*__pyx_v_domain).at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 237, __pyx_L1_error)
    }
    ((&__pyx_v_T0)[0]) = __pyx_t_4;
    ((__pyx_v_loop_domain[0])[0]) = __pyx_t_4;

    /* "flowstar/reachability.pyx":239
 *             (&T0)[0] = loop_domain[0][0] = deref(domain).at(0)
 * 
 *             return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(239,0,__PYX_ERR(0, 239, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "flowstar/reachability.pyx":190
 *                 roots.push_back(root)
 * 
 *     cdef bint _tm_segment_loop(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                int & i,
 *                                vector[Interval]* & loop_domain,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.reachability.PolyObserver._tm_segment_loop", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":242
 * 
 * 
 *     cdef vector[Interval] c_roots(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                   double epsilon=0.00001, int verbosity=0):
 *         cdef:
 */

static std::vector<flowstar::Interval>  __pyx_f_8flowstar_12reachability_12PolyObserver_c_roots(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver_c_roots *__pyx_optional_args) {
  double __pyx_v_epsilon = ((double)0.00001);
  int __pyx_v_verbosity = ((int)0);
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::vector<std::optional<int> > ::iterator __pyx_v_cached_bool;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn;
  std::vector<flowstar::Interval>  __pyx_v_roots;
  std::vector<flowstar::Interval>  __pyx_v_new_roots;
  CYTHON_UNUSED std::vector<flowstar::Interval> ::iterator __pyx_v_root_iter;
  flowstar::Interval __pyx_v_T0;
  flowstar::Interval __pyx_v_T;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_f_fn;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_fprime_fn;
  flowstar::Interval __pyx_v_f_domain;
  int __pyx_v_i;
  std::vector<flowstar::Interval>  *__pyx_v_loop_domain;
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_global_domain;
  std::vector<flowstar::Interval>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_t_11;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_12;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_13;
  struct __pyx_opt_args_8flowstar_14root_detection_detect_roots __pyx_t_14;
  struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver__amalgamate_roots __pyx_t_15;
  __Pyx_RefNannySetupContext("c_roots", 0);
  __Pyx_TraceCall("c_roots", __pyx_f[0], 242, 0, __PYX_ERR(0, 242, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_epsilon = __pyx_optional_args->epsilon;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_verbosity = __pyx_optional_args->verbosity;
      }
    }
  }

  /* "flowstar/reachability.pyx":245
 *                                   double epsilon=0.00001, int verbosity=0):
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 */
  __Pyx_TraceLine(245,0,__PYX_ERR(0, 245, __pyx_L1_error))
  __pyx_v_tmv = __pyx_v_self->reach->c_reach.flowpipesCompo.begin();

  /* "flowstar/reachability.pyx":246
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[interval_time_fn]].iterator\
 */
  __Pyx_TraceLine(246,0,__PYX_ERR(0, 246, __pyx_L1_error))
  __pyx_v_domain = __pyx_v_self->reach->c_reach.domains.begin();

  /* "flowstar/reachability.pyx":247
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn = self.poly_f_fns.begin()
 */
  __Pyx_TraceLine(247,0,__PYX_ERR(0, 247, __pyx_L1_error))
  __pyx_v_cached_bool = __pyx_v_self->bools.begin();

  /* "flowstar/reachability.pyx":249
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn = self.poly_f_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()
 */
  __Pyx_TraceLine(249,0,__PYX_ERR(0, 249, __pyx_L1_error))
  __pyx_v_poly_f_fn = __pyx_v_self->poly_f_fns.begin();

  /* "flowstar/reachability.pyx":251
 *                 poly_f_fn = self.poly_f_fns.begin()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 */
  __Pyx_TraceLine(251,0,__PYX_ERR(0, 251, __pyx_L1_error))
  __pyx_v_poly_fprime_fn = __pyx_v_self->poly_fprime_fns.begin();

  /* "flowstar/reachability.pyx":254
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 *             vector[Interval].iterator root_iter = roots.begin()             # <<<<<<<<<<<<<<
 *             Interval T0
 *             # The current time should be an interval, to take into account
 */
  __Pyx_TraceLine(254,0,__PYX_ERR(0, 254, __pyx_L1_error))
  __pyx_v_root_iter = __pyx_v_roots.begin();

  /* "flowstar/reachability.pyx":263
 *             vector[Interval] tmv_domain
 *             optional[Interval] mask_overlap
 *             int i = 0             # <<<<<<<<<<<<<<
 *             vector[Interval]* loop_domain
 * 
 */
  __Pyx_TraceLine(263,0,__PYX_ERR(0, 263, __pyx_L1_error))
  __pyx_v_i = 0;

  /* "flowstar/reachability.pyx":266
 *             vector[Interval]* loop_domain
 * 
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()             # <<<<<<<<<<<<<<
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 */
  __Pyx_TraceLine(266,0,__PYX_ERR(0, 266, __pyx_L1_error))
  __pyx_v_global_domain = ((struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *)__pyx_v_self->__pyx_vtab)->_global_domain(__pyx_v_self);

  /* "flowstar/reachability.pyx":268
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0             # <<<<<<<<<<<<<<
 * 
 *         while self._tm_segment_loop(i, loop_domain, global_domain,
 */
  __Pyx_TraceLine(268,0,__PYX_ERR(0, 268, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L1_error)
    if (unlikely(!(((__pyx_v_self->reach->c_reach.tmVarTab[__pyx_t_1]) == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 268, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/reachability.pyx":270
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 * 
 *         while self._tm_segment_loop(i, loop_domain, global_domain,             # <<<<<<<<<<<<<<
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, T, T0):
 */
  __Pyx_TraceLine(270,0,__PYX_ERR(0, 270, __pyx_L1_error))
  while (1) {

    /* "flowstar/reachability.pyx":272
 *         while self._tm_segment_loop(i, loop_domain, global_domain,
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, T, T0):             # <<<<<<<<<<<<<<
 *             if verbosity >= 2:
 *                 print("===")
 */
    __Pyx_TraceLine(272,0,__PYX_ERR(0, 272, __pyx_L1_error))
    __pyx_t_2 = (((struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *)__pyx_v_self->__pyx_vtab)->_tm_segment_loop(__pyx_v_self, __pyx_v_i, __pyx_v_loop_domain, __pyx_v_global_domain, __pyx_v_tmv, __pyx_v_domain, __pyx_v_cached_bool, __pyx_v_poly_f_fn, __pyx_v_poly_fprime_fn, __pyx_v_T, __pyx_v_T0) != 0);
    if (!__pyx_t_2) break;

    /* "flowstar/reachability.pyx":273
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, T, T0):
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(
 */
    __Pyx_TraceLine(273,0,__PYX_ERR(0, 273, __pyx_L1_error))
    __pyx_t_2 = ((__pyx_v_verbosity >= 2) != 0);
    if (__pyx_t_2) {

      /* "flowstar/reachability.pyx":274
 *                                     poly_f_fn, poly_fprime_fn, T, T0):
 *             if verbosity >= 2:
 *                 print("===")             # <<<<<<<<<<<<<<
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(T),
 */
      __Pyx_TraceLine(274,0,__PYX_ERR(0, 274, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "flowstar/reachability.pyx":275
 *             if verbosity >= 2:
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(T),
 *                     interval.as_str(deref(domain)[0])))
 */
      __Pyx_TraceLine(275,0,__PYX_ERR(0, 275, __pyx_L1_error))
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_reached_detect_roots_t, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "flowstar/reachability.pyx":276
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(T),             # <<<<<<<<<<<<<<
 *                     interval.as_str(deref(domain)[0])))
 * 
 */
      __Pyx_TraceLine(276,0,__PYX_ERR(0, 276, __pyx_L1_error))
      __pyx_t_5 = __pyx_f_8flowstar_8interval_as_str(__pyx_v_T); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "flowstar/reachability.pyx":277
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(T),
 *                     interval.as_str(deref(domain)[0])))             # <<<<<<<<<<<<<<
 * 
 *             ### Isolate roots for current timestep
 */
      __Pyx_TraceLine(277,0,__PYX_ERR(0, 277, __pyx_L1_error))
      __pyx_t_6 = __pyx_f_8flowstar_8interval_as_str(((*__pyx_v_domain)[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flowstar/reachability.pyx":275
 *             if verbosity >= 2:
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(T),
 *                     interval.as_str(deref(domain)[0])))
 */
      __Pyx_TraceLine(275,0,__PYX_ERR(0, 275, __pyx_L1_error))
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "flowstar/reachability.pyx":273
 *                                     tmv, domain, cached_bool,
 *                                     poly_f_fn, poly_fprime_fn, T, T0):
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("===")
 *                 print("reached detect roots t={} + {}".format(
 */
    }

    /* "flowstar/reachability.pyx":284
 *             ### If there is a definitive boolean value, there can be no roots
 *             ### here
 *             if deref(cached_bool).has_value():             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __Pyx_TraceLine(284,0,__PYX_ERR(0, 284, __pyx_L1_error))
    __pyx_t_2 = ((*__pyx_v_cached_bool).has_value() != 0);
    if (__pyx_t_2) {

      /* "flowstar/reachability.pyx":285
 *             ### here
 *             if deref(cached_bool).has_value():
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             ### Use mask to determine what region is compatible with the mask
 */
      __Pyx_TraceLine(285,0,__PYX_ERR(0, 285, __pyx_L1_error))
      goto __pyx_L3_continue;

      /* "flowstar/reachability.pyx":284
 *             ### If there is a definitive boolean value, there can be no roots
 *             ### here
 *             if deref(cached_bool).has_value():             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "flowstar/reachability.pyx":299
 *             ### Retrieve cached symbolically composed functions, or perform
 *             ### functional composition.
 *             if self.symbolic_composition and deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                 assert deref(poly_fprime_fn).has_value()
 *                 # Retrieve cached composed functions
 */
    __Pyx_TraceLine(299,0,__PYX_ERR(0, 299, __pyx_L1_error))
    __pyx_t_10 = (__pyx_v_self->symbolic_composition != 0);
    if (__pyx_t_10) {
    } else {
      __pyx_t_2 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_10 = ((*__pyx_v_poly_f_fn).has_value() != 0);
    __pyx_t_2 = __pyx_t_10;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_2) {

      /* "flowstar/reachability.pyx":300
 *             ### functional composition.
 *             if self.symbolic_composition and deref(poly_f_fn).has_value():
 *                 assert deref(poly_fprime_fn).has_value()             # <<<<<<<<<<<<<<
 *                 # Retrieve cached composed functions
 *                 f_fn = deref(poly_f_fn).value()
 */
      __Pyx_TraceLine(300,0,__PYX_ERR(0, 300, __pyx_L1_error))
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        if (unlikely(!((*__pyx_v_poly_fprime_fn).has_value() != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 300, __pyx_L1_error)
        }
      }
      #endif

      /* "flowstar/reachability.pyx":302
 *                 assert deref(poly_fprime_fn).has_value()
 *                 # Retrieve cached composed functions
 *                 f_fn = deref(poly_f_fn).value()             # <<<<<<<<<<<<<<
 *                 fprime_fn = deref(poly_fprime_fn).value()
 *             else:
 */
      __Pyx_TraceLine(302,0,__PYX_ERR(0, 302, __pyx_L1_error))
      __pyx_v_f_fn = (*__pyx_v_poly_f_fn).value();

      /* "flowstar/reachability.pyx":303
 *                 # Retrieve cached composed functions
 *                 f_fn = deref(poly_f_fn).value()
 *                 fprime_fn = deref(poly_fprime_fn).value()             # <<<<<<<<<<<<<<
 *             else:
 *                 # Functional composition for polynomial
 */
      __Pyx_TraceLine(303,0,__PYX_ERR(0, 303, __pyx_L1_error))
      __pyx_v_fprime_fn = (*__pyx_v_poly_fprime_fn).value();

      /* "flowstar/reachability.pyx":299
 *             ### Retrieve cached symbolically composed functions, or perform
 *             ### functional composition.
 *             if self.symbolic_composition and deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                 assert deref(poly_fprime_fn).has_value()
 *                 # Retrieve cached composed functions
 */
      goto __pyx_L7;
    }

    /* "flowstar/reachability.pyx":306
 *             else:
 *                 # Functional composition for polynomial
 *                 f_fn = interval.compose_interval_fn(poly_fn(self.f.c_poly),             # <<<<<<<<<<<<<<
 *                                                     deref(tmv),
 *                                                     deref(loop_domain))
 */
    __Pyx_TraceLine(306,0,__PYX_ERR(0, 306, __pyx_L1_error))
    /*else*/ {

      /* "flowstar/reachability.pyx":308
 *                 f_fn = interval.compose_interval_fn(poly_fn(self.f.c_poly),
 *                                                     deref(tmv),
 *                                                     deref(loop_domain))             # <<<<<<<<<<<<<<
 * 
 *             # Evaluate f over the whole domain
 */
      __Pyx_TraceLine(308,0,__PYX_ERR(0, 308, __pyx_L1_error))
      __pyx_v_f_fn = compose_interval_fn(poly_fn(__pyx_v_self->f->c_poly), (*__pyx_v_tmv), (*__pyx_v_loop_domain));
    }
    __pyx_L7:;

    /* "flowstar/reachability.pyx":311
 * 
 *             # Evaluate f over the whole domain
 *             f_domain = f_fn.call(T0)             # <<<<<<<<<<<<<<
 * 
 *             # Only do anything if there is a chance of a root
 */
    __Pyx_TraceLine(311,0,__PYX_ERR(0, 311, __pyx_L1_error))
    __pyx_v_f_domain = __pyx_v_f_fn.operator()(__pyx_v_T0);

    /* "flowstar/reachability.pyx":314
 * 
 *             # Only do anything if there is a chance of a root
 *             if not (f_domain.inf() <= 0 <= f_domain.sup()):             # <<<<<<<<<<<<<<
 *                 # Annoying code to make Cython allow assignment to a r-value
 *                 (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 */
    __Pyx_TraceLine(314,0,__PYX_ERR(0, 314, __pyx_L1_error))
    __pyx_t_2 = (__pyx_v_f_domain.inf() <= 0.0);
    if (__pyx_t_2) {
      __pyx_t_2 = (0.0 <= __pyx_v_f_domain.sup());
    }
    __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_10) {

      /* "flowstar/reachability.pyx":316
 *             if not (f_domain.inf() <= 0 <= f_domain.sup()):
 *                 # Annoying code to make Cython allow assignment to a r-value
 *                 (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __Pyx_TraceLine(316,0,__PYX_ERR(0, 316, __pyx_L1_error))
      ((&(*__pyx_v_cached_bool))[0]) = std::optional<int> ((__pyx_v_f_domain.inf() > 0.0));

      /* "flowstar/reachability.pyx":317
 *                 # Annoying code to make Cython allow assignment to a r-value
 *                 (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             if self.symbolic_composition and not deref(poly_f_fn).has_value():
 */
      __Pyx_TraceLine(317,0,__PYX_ERR(0, 317, __pyx_L1_error))
      goto __pyx_L3_continue;

      /* "flowstar/reachability.pyx":314
 * 
 *             # Only do anything if there is a chance of a root
 *             if not (f_domain.inf() <= 0 <= f_domain.sup()):             # <<<<<<<<<<<<<<
 *                 # Annoying code to make Cython allow assignment to a r-value
 *                 (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 */
    }

    /* "flowstar/reachability.pyx":319
 *                 continue
 * 
 *             if self.symbolic_composition and not deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                 # Define f and fprime by symbolically composing polynomials
 *                 (f_fn, fprime_fn) = observable(
 */
    __Pyx_TraceLine(319,0,__PYX_ERR(0, 319, __pyx_L1_error))
    __pyx_t_2 = (__pyx_v_self->symbolic_composition != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_10 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = ((!((*__pyx_v_poly_f_fn).has_value() != 0)) != 0);
    __pyx_t_10 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_10) {

      /* "flowstar/reachability.pyx":321
 *             if self.symbolic_composition and not deref(poly_f_fn).has_value():
 *                 # Define f and fprime by symbolically composing polynomials
 *                 (f_fn, fprime_fn) = observable(             # <<<<<<<<<<<<<<
 *                     self.f.c_poly, deref(tmv), deref(loop_domain),
 *                     self.reach.c_reach.globalMaxOrder,
 */
      __Pyx_TraceLine(321,0,__PYX_ERR(0, 321, __pyx_L1_error))
      __pyx_t_11 = __pyx_f_8flowstar_12reachability_observable(__pyx_v_self->f->c_poly, (*__pyx_v_tmv), (*__pyx_v_loop_domain), __pyx_v_self->reach->c_reach.globalMaxOrder, __pyx_v_self->reach->c_reach.cutoff_threshold);
      __pyx_t_12 = __pyx_t_11.f0;
      __pyx_t_13 = __pyx_t_11.f1;
      __pyx_v_f_fn = __pyx_t_12;
      __pyx_v_fprime_fn = __pyx_t_13;

      /* "flowstar/reachability.pyx":326
 *                     self.reach.c_reach.cutoff_threshold,
 *                 )
 *                 (&deref(poly_f_fn))[0] = optional[interval_time_fn](f_fn)             # <<<<<<<<<<<<<<
 *                 (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](
 *                     fprime_fn)
 */
      __Pyx_TraceLine(326,0,__PYX_ERR(0, 326, __pyx_L1_error))
      ((&(*__pyx_v_poly_f_fn))[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> (__pyx_v_f_fn);

      /* "flowstar/reachability.pyx":327
 *                 )
 *                 (&deref(poly_f_fn))[0] = optional[interval_time_fn](f_fn)
 *                 (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](             # <<<<<<<<<<<<<<
 *                     fprime_fn)
 *             elif not self.symbolic_composition:
 */
      __Pyx_TraceLine(327,0,__PYX_ERR(0, 327, __pyx_L1_error))
      ((&(*__pyx_v_poly_fprime_fn))[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> (__pyx_v_fprime_fn);

      /* "flowstar/reachability.pyx":319
 *                 continue
 * 
 *             if self.symbolic_composition and not deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                 # Define f and fprime by symbolically composing polynomials
 *                 (f_fn, fprime_fn) = observable(
 */
      goto __pyx_L11;
    }

    /* "flowstar/reachability.pyx":329
 *                 (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](
 *                     fprime_fn)
 *             elif not self.symbolic_composition:             # <<<<<<<<<<<<<<
 *                 # Define fprime as a functional composition, and use f as
 *                 # defined similarly above
 */
    __Pyx_TraceLine(329,0,__PYX_ERR(0, 329, __pyx_L1_error))
    __pyx_t_10 = ((!(__pyx_v_self->symbolic_composition != 0)) != 0);
    if (likely(__pyx_t_10)) {

      /* "flowstar/reachability.pyx":332
 *                 # Define fprime as a functional composition, and use f as
 *                 # defined similarly above
 *                 fprime_fn = interval.compose_interval_fn(             # <<<<<<<<<<<<<<
 *                     poly_fn(self.fprime.c_poly),
 *                     deref(tmv),
 */
      __Pyx_TraceLine(332,0,__PYX_ERR(0, 332, __pyx_L1_error))
      __pyx_v_fprime_fn = compose_interval_fn(poly_fn(__pyx_v_self->fprime->c_poly), (*__pyx_v_tmv), (*__pyx_v_loop_domain));

      /* "flowstar/reachability.pyx":329
 *                 (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](
 *                     fprime_fn)
 *             elif not self.symbolic_composition:             # <<<<<<<<<<<<<<
 *                 # Define fprime as a functional composition, and use f as
 *                 # defined similarly above
 */
      goto __pyx_L11;
    }

    /* "flowstar/reachability.pyx":338
 *                 )
 *             else:
 *                 raise Exception("Invalid case!")             # <<<<<<<<<<<<<<
 * 
 *             ### Perform root detection
 */
    __Pyx_TraceLine(338,0,__PYX_ERR(0, 338, __pyx_L1_error))
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 338, __pyx_L1_error)
    }
    __pyx_L11:;

    /* "flowstar/reachability.pyx":341
 * 
 *             ### Perform root detection
 *             root_detection.detect_roots(new_roots, f_fn, fprime_fn, T0,             # <<<<<<<<<<<<<<
 *                                         epsilon=epsilon,
 *                                         verbosity=verbosity)
 */
    __Pyx_TraceLine(341,0,__PYX_ERR(0, 341, __pyx_L1_error))
    __pyx_t_14.__pyx_n = 2;
    __pyx_t_14.epsilon = __pyx_v_epsilon;
    __pyx_t_14.verbosity = __pyx_v_verbosity;
    __pyx_f_8flowstar_14root_detection_detect_roots(__pyx_v_new_roots, __pyx_v_f_fn, __pyx_v_fprime_fn, __pyx_v_T0, &__pyx_t_14); 

    /* "flowstar/reachability.pyx":346
 * 
 *             # Restore domain after root detection
 *             deref(loop_domain)[0] = T0             # <<<<<<<<<<<<<<
 * 
 *             ### Amalgamate new and existing roots, shifting new roots by
 */
    __Pyx_TraceLine(346,0,__PYX_ERR(0, 346, __pyx_L1_error))
    ((*__pyx_v_loop_domain)[0]) = __pyx_v_T0;

    /* "flowstar/reachability.pyx":350
 *             ### Amalgamate new and existing roots, shifting new roots by
 *             ### current time, and merging adjacent roots
 *             self._amalgamate_roots(roots, new_roots, T, verbosity=verbosity)             # <<<<<<<<<<<<<<
 *             new_roots.clear()
 * 
 */
    __Pyx_TraceLine(350,0,__PYX_ERR(0, 350, __pyx_L1_error))
    __pyx_t_15.__pyx_n = 1;
    __pyx_t_15.verbosity = __pyx_v_verbosity;
    ((struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *)__pyx_v_self->__pyx_vtab)->_amalgamate_roots(__pyx_v_self, __pyx_v_roots, __pyx_v_new_roots, __pyx_v_T, &__pyx_t_15); 

    /* "flowstar/reachability.pyx":351
 *             ### current time, and merging adjacent roots
 *             self._amalgamate_roots(roots, new_roots, T, verbosity=verbosity)
 *             new_roots.clear()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(351,0,__PYX_ERR(0, 351, __pyx_L1_error))
    __pyx_v_new_roots.clear();
    __pyx_L3_continue:;
  }

  /* "flowstar/reachability.pyx":354
 * 
 * 
 *         return roots             # <<<<<<<<<<<<<<
 * 
 *     cdef Interval eval_interval(PolyObserver self, Interval & I):
 */
  __Pyx_TraceLine(354,0,__PYX_ERR(0, 354, __pyx_L1_error))
  __pyx_r = __pyx_v_roots;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":242
 * 
 * 
 *     cdef vector[Interval] c_roots(PolyObserver self,             # <<<<<<<<<<<<<<
 *                                   double epsilon=0.00001, int verbosity=0):
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("flowstar.reachability.PolyObserver.c_roots", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":356
 *         return roots
 * 
 *     cdef Interval eval_interval(PolyObserver self, Interval & I):             # <<<<<<<<<<<<<<
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 */

static flowstar::Interval __pyx_f_8flowstar_12reachability_12PolyObserver_eval_interval(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_I) {
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv_end;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn_end;
  flowstar::Interval __pyx_v_T0;
  flowstar::Interval __pyx_v_T;
  flowstar::Interval __pyx_v_J;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_f_fn;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_fprime_fn;
  std::optional<flowstar::Interval>  __pyx_v_final_res;
  std::vector<flowstar::Interval>  *__pyx_v_loop_domain;
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_global_domain;
  flowstar::Interval __pyx_v_res;
  flowstar::Interval __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::vector<flowstar::Interval>  *__pyx_t_4;
  __Pyx_FakeReference<flowstar::Interval> __pyx_t_5;
  __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_t_6;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_7;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_8;
  __Pyx_RefNannySetupContext("eval_interval", 0);
  __Pyx_TraceCall("eval_interval", __pyx_f[0], 356, 0, __PYX_ERR(0, 356, __pyx_L1_error));

  /* "flowstar/reachability.pyx":358
 *     cdef Interval eval_interval(PolyObserver self, Interval & I):
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()
 */
  __Pyx_TraceLine(358,0,__PYX_ERR(0, 358, __pyx_L1_error))
  __pyx_v_tmv = __pyx_v_self->reach->c_reach.flowpipesCompo.begin();

  /* "flowstar/reachability.pyx":359
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()
 */
  __Pyx_TraceLine(359,0,__PYX_ERR(0, 359, __pyx_L1_error))
  __pyx_v_tmv_end = __pyx_v_self->reach->c_reach.flowpipesCompo.end();

  /* "flowstar/reachability.pyx":360
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()
 *             vector[optional[interval_time_fn]].iterator\
 */
  __Pyx_TraceLine(360,0,__PYX_ERR(0, 360, __pyx_L1_error))
  __pyx_v_domain = __pyx_v_self->reach->c_reach.domains.begin();

  /* "flowstar/reachability.pyx":361
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn = self.poly_f_fns.begin()
 */
  __Pyx_TraceLine(361,0,__PYX_ERR(0, 361, __pyx_L1_error))
  __pyx_v_domain_end = __pyx_v_self->reach->c_reach.domains.end();

  /* "flowstar/reachability.pyx":363
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn = self.poly_f_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn_end = self.poly_f_fns.end()
 */
  __Pyx_TraceLine(363,0,__PYX_ERR(0, 363, __pyx_L1_error))
  __pyx_v_poly_f_fn = __pyx_v_self->poly_f_fns.begin();

  /* "flowstar/reachability.pyx":365
 *                 poly_f_fn = self.poly_f_fns.begin()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn_end = self.poly_f_fns.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()
 */
  __Pyx_TraceLine(365,0,__PYX_ERR(0, 365, __pyx_L1_error))
  __pyx_v_poly_f_fn_end = __pyx_v_self->poly_f_fns.end();

  /* "flowstar/reachability.pyx":367
 *                 poly_f_fn_end = self.poly_f_fns.end()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn_end = self.poly_fprime_fns.end()
 */
  __Pyx_TraceLine(367,0,__PYX_ERR(0, 367, __pyx_L1_error))
  __pyx_v_poly_fprime_fn = __pyx_v_self->poly_fprime_fns.begin();

  /* "flowstar/reachability.pyx":369
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn_end = self.poly_fprime_fns.end()             # <<<<<<<<<<<<<<
 *             Interval T0
 *             # The current time should be an interval, to take into account
 */
  __Pyx_TraceLine(369,0,__PYX_ERR(0, 369, __pyx_L1_error))
  __pyx_v_poly_fprime_fn_end = __pyx_v_self->poly_fprime_fns.end();

  /* "flowstar/reachability.pyx":381
 *             vector[int] varIDs # state variable ids
 * 
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()             # <<<<<<<<<<<<<<
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 */
  __Pyx_TraceLine(381,0,__PYX_ERR(0, 381, __pyx_L1_error))
  __pyx_v_global_domain = ((struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *)__pyx_v_self->__pyx_vtab)->_global_domain(__pyx_v_self);

  /* "flowstar/reachability.pyx":383
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0             # <<<<<<<<<<<<<<
 * 
 *         while (    tmv            != tmv_end
 */
  __Pyx_TraceLine(383,0,__PYX_ERR(0, 383, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 383, __pyx_L1_error)
    if (unlikely(!(((__pyx_v_self->reach->c_reach.tmVarTab[__pyx_t_1]) == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 383, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/reachability.pyx":385
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 * 
 *         while (    tmv            != tmv_end             # <<<<<<<<<<<<<<
 *                and domain         != domain_end
 *                and poly_f_fn      != poly_f_fn_end
 */
  __Pyx_TraceLine(385,0,__PYX_ERR(0, 385, __pyx_L1_error))
  while (1) {

    /* "flowstar/reachability.pyx":386
 * 
 *         while (    tmv            != tmv_end
 *                and domain         != domain_end             # <<<<<<<<<<<<<<
 *                and poly_f_fn      != poly_f_fn_end
 *                and poly_fprime_fn != poly_fprime_fn_end
 */
    __Pyx_TraceLine(386,0,__PYX_ERR(0, 386, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_tmv != __pyx_v_tmv_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/reachability.pyx":387
 *         while (    tmv            != tmv_end
 *                and domain         != domain_end
 *                and poly_f_fn      != poly_f_fn_end             # <<<<<<<<<<<<<<
 *                and poly_fprime_fn != poly_fprime_fn_end
 *                and T.inf() <= I.sup()):
 */
    __Pyx_TraceLine(387,0,__PYX_ERR(0, 387, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_domain != __pyx_v_domain_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/reachability.pyx":388
 *                and domain         != domain_end
 *                and poly_f_fn      != poly_f_fn_end
 *                and poly_fprime_fn != poly_fprime_fn_end             # <<<<<<<<<<<<<<
 *                and T.inf() <= I.sup()):
 *             # Space domain
 */
    __Pyx_TraceLine(388,0,__PYX_ERR(0, 388, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_poly_f_fn != __pyx_v_poly_f_fn_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/reachability.pyx":389
 *                and poly_f_fn      != poly_f_fn_end
 *                and poly_fprime_fn != poly_fprime_fn_end
 *                and T.inf() <= I.sup()):             # <<<<<<<<<<<<<<
 *             # Space domain
 *             loop_domain = (&global_domain.value()
 */
    __Pyx_TraceLine(389,0,__PYX_ERR(0, 389, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_poly_fprime_fn != __pyx_v_poly_fprime_fn_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_T.inf() <= __pyx_v_I.sup()) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_2) break;

    /* "flowstar/reachability.pyx":392
 *             # Space domain
 *             loop_domain = (&global_domain.value()
 *                            if global_domain.has_value()             # <<<<<<<<<<<<<<
 *                            else &deref(domain))
 * 
 */
    __Pyx_TraceLine(392,0,__PYX_ERR(0, 392, __pyx_L1_error))
    if ((__pyx_v_global_domain.has_value() != 0)) {

      /* "flowstar/reachability.pyx":391
 *                and T.inf() <= I.sup()):
 *             # Space domain
 *             loop_domain = (&global_domain.value()             # <<<<<<<<<<<<<<
 *                            if global_domain.has_value()
 *                            else &deref(domain))
 */
      __Pyx_TraceLine(391,0,__PYX_ERR(0, 391, __pyx_L1_error))
      __pyx_t_4 = (&__pyx_v_global_domain.value());
    } else {

      /* "flowstar/reachability.pyx":393
 *             loop_domain = (&global_domain.value()
 *                            if global_domain.has_value()
 *                            else &deref(domain))             # <<<<<<<<<<<<<<
 * 
 *             # Absolute time domain for current interval
 */
      __Pyx_TraceLine(393,0,__PYX_ERR(0, 393, __pyx_L1_error))
      __pyx_t_4 = (&(*__pyx_v_domain));
    }
    __pyx_v_loop_domain = __pyx_t_4;

    /* "flowstar/reachability.pyx":396
 * 
 *             # Absolute time domain for current interval
 *             T0 = J = loop_domain[0][0] = deref(domain).at(0)             # <<<<<<<<<<<<<<
 *             J.add_assign(T)
 * 
 */
    __Pyx_TraceLine(396,0,__PYX_ERR(0, 396, __pyx_L1_error))
    try {
      __pyx_t_5 = (*__pyx_v_domain).at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 396, __pyx_L1_error)
    }
    __pyx_v_T0 = __pyx_t_5;
    __pyx_v_J = __pyx_t_5;
    ((__pyx_v_loop_domain[0])[0]) = __pyx_t_5;

    /* "flowstar/reachability.pyx":397
 *             # Absolute time domain for current interval
 *             T0 = J = loop_domain[0][0] = deref(domain).at(0)
 *             J.add_assign(T)             # <<<<<<<<<<<<<<
 * 
 *             # print("eval reached t={} + {}".format(
 */
    __Pyx_TraceLine(397,0,__PYX_ERR(0, 397, __pyx_L1_error))
    (void)(__pyx_v_J.operator+=(__pyx_v_T));

    /* "flowstar/reachability.pyx":405
 *             # print("J.sup() = ", J.sup(), ", I.inf() =", I.inf())
 * 
 *             if interval.overlaps(I, J):             # <<<<<<<<<<<<<<
 *                 # print("I overlaps J! (I = {}, J = {})".format(
 *                 #     interval.as_str(I), interval.as_str(J)))
 */
    __Pyx_TraceLine(405,0,__PYX_ERR(0, 405, __pyx_L1_error))
    __pyx_t_2 = (__pyx_f_8flowstar_8interval_overlaps(__pyx_v_I, __pyx_v_J) != 0);
    if (__pyx_t_2) {

      /* "flowstar/reachability.pyx":408
 *                 # print("I overlaps J! (I = {}, J = {})".format(
 *                 #     interval.as_str(I), interval.as_str(J)))
 *                 J.intersect_assign(I)             # <<<<<<<<<<<<<<
 *                 J.sub_assign(T)
 *                 J.intersect_assign(T0)
 */
      __Pyx_TraceLine(408,0,__PYX_ERR(0, 408, __pyx_L1_error))
      __pyx_v_J.intersect_assign(__pyx_v_I);

      /* "flowstar/reachability.pyx":409
 *                 #     interval.as_str(I), interval.as_str(J)))
 *                 J.intersect_assign(I)
 *                 J.sub_assign(T)             # <<<<<<<<<<<<<<
 *                 J.intersect_assign(T0)
 *                 # print("Intersection = {}".format(interval.as_str(
 */
      __Pyx_TraceLine(409,0,__PYX_ERR(0, 409, __pyx_L1_error))
      (void)(__pyx_v_J.operator-=(__pyx_v_T));

      /* "flowstar/reachability.pyx":410
 *                 J.intersect_assign(I)
 *                 J.sub_assign(T)
 *                 J.intersect_assign(T0)             # <<<<<<<<<<<<<<
 *                 # print("Intersection = {}".format(interval.as_str(
 *                 #     J)))
 */
      __Pyx_TraceLine(410,0,__PYX_ERR(0, 410, __pyx_L1_error))
      __pyx_v_J.intersect_assign(__pyx_v_T0);

      /* "flowstar/reachability.pyx":416
 *                 ### Retrieve cached symbolically composed functions, or perform
 *                 ### functional composition.
 *                 if self.symbolic_composition and deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                     assert deref(poly_fprime_fn).has_value()
 *                     # Retrieve cached composed functions
 */
      __Pyx_TraceLine(416,0,__PYX_ERR(0, 416, __pyx_L1_error))
      __pyx_t_3 = (__pyx_v_self->symbolic_composition != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_3 = ((*__pyx_v_poly_f_fn).has_value() != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_2) {

        /* "flowstar/reachability.pyx":417
 *                 ### functional composition.
 *                 if self.symbolic_composition and deref(poly_f_fn).has_value():
 *                     assert deref(poly_fprime_fn).has_value()             # <<<<<<<<<<<<<<
 *                     # Retrieve cached composed functions
 *                     f_fn = deref(poly_f_fn).value()
 */
        __Pyx_TraceLine(417,0,__PYX_ERR(0, 417, __pyx_L1_error))
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          if (unlikely(!((*__pyx_v_poly_fprime_fn).has_value() != 0))) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 417, __pyx_L1_error)
          }
        }
        #endif

        /* "flowstar/reachability.pyx":419
 *                     assert deref(poly_fprime_fn).has_value()
 *                     # Retrieve cached composed functions
 *                     f_fn = deref(poly_f_fn).value()             # <<<<<<<<<<<<<<
 *                 elif self.symbolic_composition and not deref(poly_f_fn).has_value():
 *                     # Define f and fprime by symbolically composing polynomials
 */
        __Pyx_TraceLine(419,0,__PYX_ERR(0, 419, __pyx_L1_error))
        __pyx_v_f_fn = (*__pyx_v_poly_f_fn).value();

        /* "flowstar/reachability.pyx":416
 *                 ### Retrieve cached symbolically composed functions, or perform
 *                 ### functional composition.
 *                 if self.symbolic_composition and deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                     assert deref(poly_fprime_fn).has_value()
 *                     # Retrieve cached composed functions
 */
        goto __pyx_L11;
      }

      /* "flowstar/reachability.pyx":420
 *                     # Retrieve cached composed functions
 *                     f_fn = deref(poly_f_fn).value()
 *                 elif self.symbolic_composition and not deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                     # Define f and fprime by symbolically composing polynomials
 *                     (f_fn, fprime_fn) = observable(
 */
      __Pyx_TraceLine(420,0,__PYX_ERR(0, 420, __pyx_L1_error))
      __pyx_t_3 = (__pyx_v_self->symbolic_composition != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_t_3 = ((!((*__pyx_v_poly_f_fn).has_value() != 0)) != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L14_bool_binop_done:;
      if (__pyx_t_2) {

        /* "flowstar/reachability.pyx":422
 *                 elif self.symbolic_composition and not deref(poly_f_fn).has_value():
 *                     # Define f and fprime by symbolically composing polynomials
 *                     (f_fn, fprime_fn) = observable(             # <<<<<<<<<<<<<<
 *                         self.f.c_poly, deref(tmv), deref(loop_domain),
 *                         self.reach.c_reach.globalMaxOrder,
 */
        __Pyx_TraceLine(422,0,__PYX_ERR(0, 422, __pyx_L1_error))
        __pyx_t_6 = __pyx_f_8flowstar_12reachability_observable(__pyx_v_self->f->c_poly, (*__pyx_v_tmv), (*__pyx_v_loop_domain), __pyx_v_self->reach->c_reach.globalMaxOrder, __pyx_v_self->reach->c_reach.cutoff_threshold);
        __pyx_t_7 = __pyx_t_6.f0;
        __pyx_t_8 = __pyx_t_6.f1;
        __pyx_v_f_fn = __pyx_t_7;
        __pyx_v_fprime_fn = __pyx_t_8;

        /* "flowstar/reachability.pyx":427
 *                         self.reach.c_reach.cutoff_threshold,
 *                     )
 *                     (&deref(poly_f_fn))[0] = optional[interval_time_fn](f_fn)             # <<<<<<<<<<<<<<
 *                     (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](
 *                         fprime_fn)
 */
        __Pyx_TraceLine(427,0,__PYX_ERR(0, 427, __pyx_L1_error))
        ((&(*__pyx_v_poly_f_fn))[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> (__pyx_v_f_fn);

        /* "flowstar/reachability.pyx":428
 *                     )
 *                     (&deref(poly_f_fn))[0] = optional[interval_time_fn](f_fn)
 *                     (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](             # <<<<<<<<<<<<<<
 *                         fprime_fn)
 *                 else:
 */
        __Pyx_TraceLine(428,0,__PYX_ERR(0, 428, __pyx_L1_error))
        ((&(*__pyx_v_poly_fprime_fn))[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> (__pyx_v_fprime_fn);

        /* "flowstar/reachability.pyx":420
 *                     # Retrieve cached composed functions
 *                     f_fn = deref(poly_f_fn).value()
 *                 elif self.symbolic_composition and not deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                     # Define f and fprime by symbolically composing polynomials
 *                     (f_fn, fprime_fn) = observable(
 */
        goto __pyx_L11;
      }

      /* "flowstar/reachability.pyx":434
 *                     # print("f = {}".format(self.f))
 *                     # Functional composition for polynomial
 *                     f_fn = interval.compose_interval_fn(poly_fn(self.f.c_poly),             # <<<<<<<<<<<<<<
 *                                                         deref(tmv),
 *                                                         deref(loop_domain))
 */
      __Pyx_TraceLine(434,0,__PYX_ERR(0, 434, __pyx_L1_error))
      /*else*/ {

        /* "flowstar/reachability.pyx":436
 *                     f_fn = interval.compose_interval_fn(poly_fn(self.f.c_poly),
 *                                                         deref(tmv),
 *                                                         deref(loop_domain))             # <<<<<<<<<<<<<<
 * 
 *                 ### Interval evaluation over domain
 */
        __Pyx_TraceLine(436,0,__PYX_ERR(0, 436, __pyx_L1_error))
        __pyx_v_f_fn = compose_interval_fn(poly_fn(__pyx_v_self->f->c_poly), (*__pyx_v_tmv), (*__pyx_v_loop_domain));
      }
      __pyx_L11:;

      /* "flowstar/reachability.pyx":439
 * 
 *                 ### Interval evaluation over domain
 *                 res = f_fn.call(J)             # <<<<<<<<<<<<<<
 *                 # print("res = {}".format(interval.as_str(res)))
 * 
 */
      __Pyx_TraceLine(439,0,__PYX_ERR(0, 439, __pyx_L1_error))
      __pyx_v_res = __pyx_v_f_fn.operator()(__pyx_v_J);

      /* "flowstar/reachability.pyx":443
 * 
 *                 ### Amalgamate result
 *                 if final_res.has_value():             # <<<<<<<<<<<<<<
 *                     interval.interval_union(final_res.value(), res)
 *                 else:
 */
      __Pyx_TraceLine(443,0,__PYX_ERR(0, 443, __pyx_L1_error))
      __pyx_t_2 = (__pyx_v_final_res.has_value() != 0);
      if (__pyx_t_2) {

        /* "flowstar/reachability.pyx":444
 *                 ### Amalgamate result
 *                 if final_res.has_value():
 *                     interval.interval_union(final_res.value(), res)             # <<<<<<<<<<<<<<
 *                 else:
 *                     final_res = optional[Interval](res)
 */
        __Pyx_TraceLine(444,0,__PYX_ERR(0, 444, __pyx_L1_error))
        __pyx_f_8flowstar_8interval_interval_union(__pyx_v_final_res.value(), __pyx_v_res);

        /* "flowstar/reachability.pyx":443
 * 
 *                 ### Amalgamate result
 *                 if final_res.has_value():             # <<<<<<<<<<<<<<
 *                     interval.interval_union(final_res.value(), res)
 *                 else:
 */
        goto __pyx_L16;
      }

      /* "flowstar/reachability.pyx":446
 *                     interval.interval_union(final_res.value(), res)
 *                 else:
 *                     final_res = optional[Interval](res)             # <<<<<<<<<<<<<<
 * 
 *                 # Restore domain after interval evaluation
 */
      __Pyx_TraceLine(446,0,__PYX_ERR(0, 446, __pyx_L1_error))
      /*else*/ {
        __pyx_v_final_res = std::optional<flowstar::Interval> (__pyx_v_res);
      }
      __pyx_L16:;

      /* "flowstar/reachability.pyx":449
 * 
 *                 # Restore domain after interval evaluation
 *                 deref(loop_domain)[0] = T0             # <<<<<<<<<<<<<<
 * 
 *             ### Increment time and loop iters
 */
      __Pyx_TraceLine(449,0,__PYX_ERR(0, 449, __pyx_L1_error))
      ((*__pyx_v_loop_domain)[0]) = __pyx_v_T0;

      /* "flowstar/reachability.pyx":405
 *             # print("J.sup() = ", J.sup(), ", I.inf() =", I.inf())
 * 
 *             if interval.overlaps(I, J):             # <<<<<<<<<<<<<<
 *                 # print("I overlaps J! (I = {}, J = {})".format(
 *                 #     interval.as_str(I), interval.as_str(J)))
 */
    }

    /* "flowstar/reachability.pyx":452
 * 
 *             ### Increment time and loop iters
 *             T += T0.sup()             # <<<<<<<<<<<<<<
 *             # Pad lower endpoint to take into account numerical error in
 *             # endpoints
 */
    __Pyx_TraceLine(452,0,__PYX_ERR(0, 452, __pyx_L1_error))
    __pyx_v_T += __pyx_v_T0.sup();

    /* "flowstar/reachability.pyx":455
 *             # Pad lower endpoint to take into account numerical error in
 *             # endpoints
 *             T += Interval(-1e-53, 0)             # <<<<<<<<<<<<<<
 *             inc(tmv)
 *             inc(domain)
 */
    __Pyx_TraceLine(455,0,__PYX_ERR(0, 455, __pyx_L1_error))
    __pyx_v_T += flowstar::Interval(-1e-53, 0.0);

    /* "flowstar/reachability.pyx":456
 *             # endpoints
 *             T += Interval(-1e-53, 0)
 *             inc(tmv)             # <<<<<<<<<<<<<<
 *             inc(domain)
 *             inc(poly_f_fn)
 */
    __Pyx_TraceLine(456,0,__PYX_ERR(0, 456, __pyx_L1_error))
    (void)((++__pyx_v_tmv));

    /* "flowstar/reachability.pyx":457
 *             T += Interval(-1e-53, 0)
 *             inc(tmv)
 *             inc(domain)             # <<<<<<<<<<<<<<
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)
 */
    __Pyx_TraceLine(457,0,__PYX_ERR(0, 457, __pyx_L1_error))
    (void)((++__pyx_v_domain));

    /* "flowstar/reachability.pyx":458
 *             inc(tmv)
 *             inc(domain)
 *             inc(poly_f_fn)             # <<<<<<<<<<<<<<
 *             inc(poly_fprime_fn)
 * 
 */
    __Pyx_TraceLine(458,0,__PYX_ERR(0, 458, __pyx_L1_error))
    (void)((++__pyx_v_poly_f_fn));

    /* "flowstar/reachability.pyx":459
 *             inc(domain)
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)             # <<<<<<<<<<<<<<
 * 
 *         assert final_res.has_value()
 */
    __Pyx_TraceLine(459,0,__PYX_ERR(0, 459, __pyx_L1_error))
    (void)((++__pyx_v_poly_fprime_fn));
  }

  /* "flowstar/reachability.pyx":461
 *             inc(poly_fprime_fn)
 * 
 *         assert final_res.has_value()             # <<<<<<<<<<<<<<
 *         return final_res.value()
 * 
 */
  __Pyx_TraceLine(461,0,__PYX_ERR(0, 461, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(__pyx_v_final_res.has_value() != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 461, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/reachability.pyx":462
 * 
 *         assert final_res.has_value()
 *         return final_res.value()             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, t):
 */
  __Pyx_TraceLine(462,0,__PYX_ERR(0, 462, __pyx_L1_error))
  __pyx_r = __pyx_v_final_res.value();
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":356
 *         return roots
 * 
 *     cdef Interval eval_interval(PolyObserver self, Interval & I):             # <<<<<<<<<<<<<<
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.reachability.PolyObserver.eval_interval", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":464
 *         return final_res.value()
 * 
 *     def __call__(self, t):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_7__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_7__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(0, 464, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_t = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 464, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver_6__call__(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_6__call__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_v_RIF = NULL;
  flowstar::Interval __pyx_v_res;
  flowstar::Interval __pyx_v_I;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("__call__", 0);
  __Pyx_TraceCall("__call__", __pyx_f[0], 464, 0, __PYX_ERR(0, 464, __pyx_L1_error));

  /* "flowstar/reachability.pyx":465
 * 
 *     def __call__(self, t):
 *         from sage.all import RIF             # <<<<<<<<<<<<<<
 * 
 *         if self.reach is None:
 */
  __Pyx_TraceLine(465,0,__PYX_ERR(0, 465, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_RIF);
  __Pyx_GIVEREF(__pyx_n_s_RIF);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_RIF);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_RIF); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_RIF = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":467
 *         from sage.all import RIF
 * 
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __Pyx_TraceLine(467,0,__PYX_ERR(0, 467, __pyx_L1_error))
  __pyx_t_3 = (((PyObject *)__pyx_v_self->reach) == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "flowstar/reachability.pyx":468
 * 
 *         if self.reach is None:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         self.reach.prepare()
 */
    __Pyx_TraceLine(468,0,__PYX_ERR(0, 468, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "flowstar/reachability.pyx":467
 *         from sage.all import RIF
 * 
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "flowstar/reachability.pyx":470
 *             return None
 * 
 *         self.reach.prepare()             # <<<<<<<<<<<<<<
 * 
 *         # Convert python interval to flow* interval
 */
  __Pyx_TraceLine(470,0,__PYX_ERR(0, 470, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->reach), __pyx_n_s_prepare); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":475
 *         cdef:
 *             Interval res
 *             Interval I = interval.make_interval(t)             # <<<<<<<<<<<<<<
 * 
 *         with self.reach.global_manager: #  Use captured globals
 */
  __Pyx_TraceLine(475,0,__PYX_ERR(0, 475, __pyx_L1_error))
  __pyx_v_I = __pyx_f_8flowstar_8interval_make_interval(__pyx_v_t);

  /* "flowstar/reachability.pyx":477
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I)
 * 
 */
  __Pyx_TraceLine(477,0,__PYX_ERR(0, 477, __pyx_L1_error))
  /*with:*/ {
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "flowstar/reachability.pyx":478
 * 
 *         with self.reach.global_manager: #  Use captured globals
 *             res = self.eval_interval(I)             # <<<<<<<<<<<<<<
 * 
 *         return RIF(res.inf(), res.sup())
 */
          __Pyx_TraceLine(478,0,__PYX_ERR(0, 478, __pyx_L8_error))
          __pyx_v_res = ((struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *)__pyx_v_self->__pyx_vtab)->eval_interval(__pyx_v_self, __pyx_v_I);

          /* "flowstar/reachability.pyx":477
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I)
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("flowstar.reachability.PolyObserver.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_5) < 0) __PYX_ERR(0, 477, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_10 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 477, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 477, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_4 < 0) __PYX_ERR(0, 477, __pyx_L10_except_error)
          __pyx_t_3 = ((!(__pyx_t_4 != 0)) != 0);
          if (__pyx_t_3) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_5);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_1, __pyx_t_5);
            __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_5 = 0; 
            __PYX_ERR(0, 477, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__8, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 477, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L17;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "flowstar/reachability.pyx":480
 *             res = self.eval_interval(I)
 * 
 *         return RIF(res.inf(), res.sup())             # <<<<<<<<<<<<<<
 * 
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & I):
 */
  __Pyx_TraceLine(480,0,__PYX_ERR(0, 480, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_res.inf()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_res.sup()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_RIF);
  __pyx_t_10 = __pyx_v_RIF; __pyx_t_12 = NULL;
  __pyx_t_13 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_13 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_1, __pyx_t_2};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
    PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_1, __pyx_t_2};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_t_2);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":464
 *         return final_res.value()
 * 
 *     def __call__(self, t):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_RIF);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":482
 *         return RIF(res.inf(), res.sup())
 * 
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & I):             # <<<<<<<<<<<<<<
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 */

static boost::logic::tribool __pyx_f_8flowstar_12reachability_12PolyObserver_eval_bool_interval(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, flowstar::Interval &__pyx_v_I) {
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv_end;
  std::vector<std::optional<int> > ::iterator __pyx_v_cached_bool;
  std::vector<std::optional<int> > ::iterator __pyx_v_cached_bool_end;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_f_fn_end;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn;
  std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator __pyx_v_poly_fprime_fn_end;
  flowstar::Interval __pyx_v_T0;
  flowstar::Interval __pyx_v_T;
  flowstar::Interval __pyx_v_J;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_f_fn;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_fprime_fn;
  flowstar::Interval __pyx_v_f_domain;
  boost::logic::tribool __pyx_v_final_res;
  boost::logic::tribool __pyx_v_res;
  std::vector<flowstar::Interval>  *__pyx_v_loop_domain;
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_global_domain;
  flowstar::Interval __pyx_v_f_J;
  boost::logic::tribool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::vector<flowstar::Interval>  *__pyx_t_4;
  __Pyx_FakeReference<flowstar::Interval> __pyx_t_5;
  __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_t_6;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_7;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_8;
  __Pyx_RefNannySetupContext("eval_bool_interval", 0);
  __Pyx_TraceCall("eval_bool_interval", __pyx_f[0], 482, 0, __PYX_ERR(0, 482, __pyx_L1_error));

  /* "flowstar/reachability.pyx":484
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & I):
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 */
  __Pyx_TraceLine(484,0,__PYX_ERR(0, 484, __pyx_L1_error))
  __pyx_v_tmv = __pyx_v_self->reach->c_reach.flowpipesCompo.begin();

  /* "flowstar/reachability.pyx":485
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()             # <<<<<<<<<<<<<<
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()
 */
  __Pyx_TraceLine(485,0,__PYX_ERR(0, 485, __pyx_L1_error))
  __pyx_v_tmv_end = __pyx_v_self->reach->c_reach.flowpipesCompo.end();

  /* "flowstar/reachability.pyx":486
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()
 */
  __Pyx_TraceLine(486,0,__PYX_ERR(0, 486, __pyx_L1_error))
  __pyx_v_cached_bool = __pyx_v_self->bools.begin();

  /* "flowstar/reachability.pyx":487
 *             clist[TaylorModelVec].iterator tmv_end = self.reach.c_reach.flowpipesCompo.end()
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()
 */
  __Pyx_TraceLine(487,0,__PYX_ERR(0, 487, __pyx_L1_error))
  __pyx_v_cached_bool_end = __pyx_v_self->bools.end();

  /* "flowstar/reachability.pyx":488
 *             vector[optional[bint]].iterator cached_bool = self.bools.begin()
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()
 *             vector[optional[interval_time_fn]].iterator\
 */
  __Pyx_TraceLine(488,0,__PYX_ERR(0, 488, __pyx_L1_error))
  __pyx_v_domain = __pyx_v_self->reach->c_reach.domains.begin();

  /* "flowstar/reachability.pyx":489
 *             vector[optional[bint]].iterator cached_bool_end = self.bools.end()
 *             clist[vector[Interval]].iterator domain = self.reach.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn = self.poly_f_fns.begin()
 */
  __Pyx_TraceLine(489,0,__PYX_ERR(0, 489, __pyx_L1_error))
  __pyx_v_domain_end = __pyx_v_self->reach->c_reach.domains.end();

  /* "flowstar/reachability.pyx":491
 *             clist[vector[Interval]].iterator domain_end = self.reach.c_reach.domains.end()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn = self.poly_f_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn_end = self.poly_f_fns.end()
 */
  __Pyx_TraceLine(491,0,__PYX_ERR(0, 491, __pyx_L1_error))
  __pyx_v_poly_f_fn = __pyx_v_self->poly_f_fns.begin();

  /* "flowstar/reachability.pyx":493
 *                 poly_f_fn = self.poly_f_fns.begin()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_f_fn_end = self.poly_f_fns.end()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()
 */
  __Pyx_TraceLine(493,0,__PYX_ERR(0, 493, __pyx_L1_error))
  __pyx_v_poly_f_fn_end = __pyx_v_self->poly_f_fns.end();

  /* "flowstar/reachability.pyx":495
 *                 poly_f_fn_end = self.poly_f_fns.end()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()             # <<<<<<<<<<<<<<
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn_end = self.poly_fprime_fns.end()
 */
  __Pyx_TraceLine(495,0,__PYX_ERR(0, 495, __pyx_L1_error))
  __pyx_v_poly_fprime_fn = __pyx_v_self->poly_fprime_fns.begin();

  /* "flowstar/reachability.pyx":497
 *                 poly_fprime_fn = self.poly_fprime_fns.begin()
 *             vector[optional[interval_time_fn]].iterator\
 *                 poly_fprime_fn_end = self.poly_fprime_fns.end()             # <<<<<<<<<<<<<<
 *             Interval T0
 *             # The current time should be an interval, to take into account
 */
  __Pyx_TraceLine(497,0,__PYX_ERR(0, 497, __pyx_L1_error))
  __pyx_v_poly_fprime_fn_end = __pyx_v_self->poly_fprime_fns.end();

  /* "flowstar/reachability.pyx":504
 *             interval.interval_time_fn f_fn, fprime_fn, f_fn_compo
 *             Interval f_domain
 *             tribool final_res = tribool(<cbool>True)             # <<<<<<<<<<<<<<
 *             tribool res
 *             vector[Interval] tmv_domain
 */
  __Pyx_TraceLine(504,0,__PYX_ERR(0, 504, __pyx_L1_error))
  __pyx_v_final_res = boost::logic::tribool(((bool)1));

  /* "flowstar/reachability.pyx":509
 *             vector[Interval]* loop_domain
 * 
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()             # <<<<<<<<<<<<<<
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 */
  __Pyx_TraceLine(509,0,__PYX_ERR(0, 509, __pyx_L1_error))
  __pyx_v_global_domain = ((struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *)__pyx_v_self->__pyx_vtab)->_global_domain(__pyx_v_self);

  /* "flowstar/reachability.pyx":511
 *         cdef optional[vector[Interval]] global_domain = self._global_domain()
 * 
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0             # <<<<<<<<<<<<<<
 * 
 *         while (    tmv            != tmv_end
 */
  __Pyx_TraceLine(511,0,__PYX_ERR(0, 511, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L1_error)
    if (unlikely(!(((__pyx_v_self->reach->c_reach.tmVarTab[__pyx_t_1]) == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 511, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/reachability.pyx":513
 *         assert self.reach.c_reach.tmVarTab[b'local_t'] == 0
 * 
 *         while (    tmv            != tmv_end             # <<<<<<<<<<<<<<
 *                and domain         != domain_end
 *                and cached_bool    != cached_bool_end
 */
  __Pyx_TraceLine(513,0,__PYX_ERR(0, 513, __pyx_L1_error))
  while (1) {

    /* "flowstar/reachability.pyx":514
 * 
 *         while (    tmv            != tmv_end
 *                and domain         != domain_end             # <<<<<<<<<<<<<<
 *                and cached_bool    != cached_bool_end
 *                and poly_f_fn      != poly_f_fn_end
 */
    __Pyx_TraceLine(514,0,__PYX_ERR(0, 514, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_tmv != __pyx_v_tmv_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/reachability.pyx":515
 *         while (    tmv            != tmv_end
 *                and domain         != domain_end
 *                and cached_bool    != cached_bool_end             # <<<<<<<<<<<<<<
 *                and poly_f_fn      != poly_f_fn_end
 *                and poly_fprime_fn != poly_fprime_fn_end
 */
    __Pyx_TraceLine(515,0,__PYX_ERR(0, 515, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_domain != __pyx_v_domain_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/reachability.pyx":516
 *                and domain         != domain_end
 *                and cached_bool    != cached_bool_end
 *                and poly_f_fn      != poly_f_fn_end             # <<<<<<<<<<<<<<
 *                and poly_fprime_fn != poly_fprime_fn_end
 *                and T.inf() <= I.sup()
 */
    __Pyx_TraceLine(516,0,__PYX_ERR(0, 516, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_cached_bool != __pyx_v_cached_bool_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/reachability.pyx":517
 *                and cached_bool    != cached_bool_end
 *                and poly_f_fn      != poly_f_fn_end
 *                and poly_fprime_fn != poly_fprime_fn_end             # <<<<<<<<<<<<<<
 *                and T.inf() <= I.sup()
 *                and <cbool>(final_res != <cbool>False)):
 */
    __Pyx_TraceLine(517,0,__PYX_ERR(0, 517, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_poly_f_fn != __pyx_v_poly_f_fn_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/reachability.pyx":518
 *                and poly_f_fn      != poly_f_fn_end
 *                and poly_fprime_fn != poly_fprime_fn_end
 *                and T.inf() <= I.sup()             # <<<<<<<<<<<<<<
 *                and <cbool>(final_res != <cbool>False)):
 *             # Space domain
 */
    __Pyx_TraceLine(518,0,__PYX_ERR(0, 518, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_poly_fprime_fn != __pyx_v_poly_fprime_fn_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }

    /* "flowstar/reachability.pyx":519
 *                and poly_fprime_fn != poly_fprime_fn_end
 *                and T.inf() <= I.sup()
 *                and <cbool>(final_res != <cbool>False)):             # <<<<<<<<<<<<<<
 *             # Space domain
 *             loop_domain = (&global_domain.value()
 */
    __Pyx_TraceLine(519,0,__PYX_ERR(0, 519, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_T.inf() <= __pyx_v_I.sup()) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (((bool)(__pyx_v_final_res != ((bool)0))) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_2) break;

    /* "flowstar/reachability.pyx":522
 *             # Space domain
 *             loop_domain = (&global_domain.value()
 *                            if global_domain.has_value()             # <<<<<<<<<<<<<<
 *                            else &deref(domain))
 * 
 */
    __Pyx_TraceLine(522,0,__PYX_ERR(0, 522, __pyx_L1_error))
    if ((__pyx_v_global_domain.has_value() != 0)) {

      /* "flowstar/reachability.pyx":521
 *                and <cbool>(final_res != <cbool>False)):
 *             # Space domain
 *             loop_domain = (&global_domain.value()             # <<<<<<<<<<<<<<
 *                            if global_domain.has_value()
 *                            else &deref(domain))
 */
      __Pyx_TraceLine(521,0,__PYX_ERR(0, 521, __pyx_L1_error))
      __pyx_t_4 = (&__pyx_v_global_domain.value());
    } else {

      /* "flowstar/reachability.pyx":523
 *             loop_domain = (&global_domain.value()
 *                            if global_domain.has_value()
 *                            else &deref(domain))             # <<<<<<<<<<<<<<
 * 
 *             # Absolute time domain for current interval
 */
      __Pyx_TraceLine(523,0,__PYX_ERR(0, 523, __pyx_L1_error))
      __pyx_t_4 = (&(*__pyx_v_domain));
    }
    __pyx_v_loop_domain = __pyx_t_4;

    /* "flowstar/reachability.pyx":526
 * 
 *             # Absolute time domain for current interval
 *             T0 = J = loop_domain[0][0] = deref(domain).at(0)             # <<<<<<<<<<<<<<
 *             J.add_assign(T)
 * 
 */
    __Pyx_TraceLine(526,0,__PYX_ERR(0, 526, __pyx_L1_error))
    try {
      __pyx_t_5 = (*__pyx_v_domain).at(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 526, __pyx_L1_error)
    }
    __pyx_v_T0 = __pyx_t_5;
    __pyx_v_J = __pyx_t_5;
    ((__pyx_v_loop_domain[0])[0]) = __pyx_t_5;

    /* "flowstar/reachability.pyx":527
 *             # Absolute time domain for current interval
 *             T0 = J = loop_domain[0][0] = deref(domain).at(0)
 *             J.add_assign(T)             # <<<<<<<<<<<<<<
 * 
 *             if interval.overlaps(I, J):
 */
    __Pyx_TraceLine(527,0,__PYX_ERR(0, 527, __pyx_L1_error))
    (void)(__pyx_v_J.operator+=(__pyx_v_T));

    /* "flowstar/reachability.pyx":529
 *             J.add_assign(T)
 * 
 *             if interval.overlaps(I, J):             # <<<<<<<<<<<<<<
 *                 if deref(cached_bool).has_value():
 *                     ### Used cached boolean if it exists
 */
    __Pyx_TraceLine(529,0,__PYX_ERR(0, 529, __pyx_L1_error))
    __pyx_t_2 = (__pyx_f_8flowstar_8interval_overlaps(__pyx_v_I, __pyx_v_J) != 0);
    if (__pyx_t_2) {

      /* "flowstar/reachability.pyx":530
 * 
 *             if interval.overlaps(I, J):
 *                 if deref(cached_bool).has_value():             # <<<<<<<<<<<<<<
 *                     ### Used cached boolean if it exists
 *                     res = tribool(deref(cached_bool).value())
 */
      __Pyx_TraceLine(530,0,__PYX_ERR(0, 530, __pyx_L1_error))
      __pyx_t_2 = ((*__pyx_v_cached_bool).has_value() != 0);
      if (__pyx_t_2) {

        /* "flowstar/reachability.pyx":532
 *                 if deref(cached_bool).has_value():
 *                     ### Used cached boolean if it exists
 *                     res = tribool(deref(cached_bool).value())             # <<<<<<<<<<<<<<
 *                 else:
 *                     J.intersect_assign(I) # No bounds checking!
 */
        __Pyx_TraceLine(532,0,__PYX_ERR(0, 532, __pyx_L1_error))
        __pyx_v_res = boost::logic::tribool((*__pyx_v_cached_bool).value());

        /* "flowstar/reachability.pyx":530
 * 
 *             if interval.overlaps(I, J):
 *                 if deref(cached_bool).has_value():             # <<<<<<<<<<<<<<
 *                     ### Used cached boolean if it exists
 *                     res = tribool(deref(cached_bool).value())
 */
        goto __pyx_L13;
      }

      /* "flowstar/reachability.pyx":534
 *                     res = tribool(deref(cached_bool).value())
 *                 else:
 *                     J.intersect_assign(I) # No bounds checking!             # <<<<<<<<<<<<<<
 *                     J.sub_assign(T)
 *                     J.intersect_assign(T0)
 */
      __Pyx_TraceLine(534,0,__PYX_ERR(0, 534, __pyx_L1_error))
      /*else*/ {
        __pyx_v_J.intersect_assign(__pyx_v_I);

        /* "flowstar/reachability.pyx":535
 *                 else:
 *                     J.intersect_assign(I) # No bounds checking!
 *                     J.sub_assign(T)             # <<<<<<<<<<<<<<
 *                     J.intersect_assign(T0)
 * 
 */
        __Pyx_TraceLine(535,0,__PYX_ERR(0, 535, __pyx_L1_error))
        (void)(__pyx_v_J.operator-=(__pyx_v_T));

        /* "flowstar/reachability.pyx":536
 *                     J.intersect_assign(I) # No bounds checking!
 *                     J.sub_assign(T)
 *                     J.intersect_assign(T0)             # <<<<<<<<<<<<<<
 * 
 *                     ### Retrieve cached symbolically composed functions, or perform
 */
        __Pyx_TraceLine(536,0,__PYX_ERR(0, 536, __pyx_L1_error))
        __pyx_v_J.intersect_assign(__pyx_v_T0);

        /* "flowstar/reachability.pyx":540
 *                     ### Retrieve cached symbolically composed functions, or perform
 *                     ### functional composition.
 *                     if self.symbolic_composition and deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                         assert deref(poly_fprime_fn).has_value()
 *                         # Retrieve cached composed functions
 */
        __Pyx_TraceLine(540,0,__PYX_ERR(0, 540, __pyx_L1_error))
        __pyx_t_3 = (__pyx_v_self->symbolic_composition != 0);
        if (__pyx_t_3) {
        } else {
          __pyx_t_2 = __pyx_t_3;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_3 = ((*__pyx_v_poly_f_fn).has_value() != 0);
        __pyx_t_2 = __pyx_t_3;
        __pyx_L15_bool_binop_done:;
        if (__pyx_t_2) {

          /* "flowstar/reachability.pyx":541
 *                     ### functional composition.
 *                     if self.symbolic_composition and deref(poly_f_fn).has_value():
 *                         assert deref(poly_fprime_fn).has_value()             # <<<<<<<<<<<<<<
 *                         # Retrieve cached composed functions
 *                         f_fn = deref(poly_f_fn).value()
 */
          __Pyx_TraceLine(541,0,__PYX_ERR(0, 541, __pyx_L1_error))
          #ifndef CYTHON_WITHOUT_ASSERTIONS
          if (unlikely(!Py_OptimizeFlag)) {
            if (unlikely(!((*__pyx_v_poly_fprime_fn).has_value() != 0))) {
              PyErr_SetNone(PyExc_AssertionError);
              __PYX_ERR(0, 541, __pyx_L1_error)
            }
          }
          #endif

          /* "flowstar/reachability.pyx":543
 *                         assert deref(poly_fprime_fn).has_value()
 *                         # Retrieve cached composed functions
 *                         f_fn = deref(poly_f_fn).value()             # <<<<<<<<<<<<<<
 *                         fprime_fn = deref(poly_fprime_fn).value()
 *                     else:
 */
          __Pyx_TraceLine(543,0,__PYX_ERR(0, 543, __pyx_L1_error))
          __pyx_v_f_fn = (*__pyx_v_poly_f_fn).value();

          /* "flowstar/reachability.pyx":544
 *                         # Retrieve cached composed functions
 *                         f_fn = deref(poly_f_fn).value()
 *                         fprime_fn = deref(poly_fprime_fn).value()             # <<<<<<<<<<<<<<
 *                     else:
 *                         # Functional composition for polynomial
 */
          __Pyx_TraceLine(544,0,__PYX_ERR(0, 544, __pyx_L1_error))
          __pyx_v_fprime_fn = (*__pyx_v_poly_fprime_fn).value();

          /* "flowstar/reachability.pyx":540
 *                     ### Retrieve cached symbolically composed functions, or perform
 *                     ### functional composition.
 *                     if self.symbolic_composition and deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                         assert deref(poly_fprime_fn).has_value()
 *                         # Retrieve cached composed functions
 */
          goto __pyx_L14;
        }

        /* "flowstar/reachability.pyx":547
 *                     else:
 *                         # Functional composition for polynomial
 *                         f_fn = interval.compose_interval_fn(poly_fn(self.f.c_poly),             # <<<<<<<<<<<<<<
 *                                                             deref(tmv),
 *                                                             deref(loop_domain))
 */
        __Pyx_TraceLine(547,0,__PYX_ERR(0, 547, __pyx_L1_error))
        /*else*/ {

          /* "flowstar/reachability.pyx":549
 *                         f_fn = interval.compose_interval_fn(poly_fn(self.f.c_poly),
 *                                                             deref(tmv),
 *                                                             deref(loop_domain))             # <<<<<<<<<<<<<<
 * 
 *                     # Evaluate f over the whole domain
 */
          __Pyx_TraceLine(549,0,__PYX_ERR(0, 549, __pyx_L1_error))
          __pyx_v_f_fn = compose_interval_fn(poly_fn(__pyx_v_self->f->c_poly), (*__pyx_v_tmv), (*__pyx_v_loop_domain));
        }
        __pyx_L14:;

        /* "flowstar/reachability.pyx":552
 * 
 *                     # Evaluate f over the whole domain
 *                     f_domain = f_fn.call(T0)             # <<<<<<<<<<<<<<
 * 
 *                     # Only do anything if there is a chance of a root
 */
        __Pyx_TraceLine(552,0,__PYX_ERR(0, 552, __pyx_L1_error))
        __pyx_v_f_domain = __pyx_v_f_fn.operator()(__pyx_v_T0);

        /* "flowstar/reachability.pyx":555
 * 
 *                     # Only do anything if there is a chance of a root
 *                     if not (f_domain.inf() <= 0 <= f_domain.sup()):             # <<<<<<<<<<<<<<
 *                         # Annoying code to make Cython allow assignment to a r-value
 *                         (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 */
        __Pyx_TraceLine(555,0,__PYX_ERR(0, 555, __pyx_L1_error))
        __pyx_t_2 = (__pyx_v_f_domain.inf() <= 0.0);
        if (__pyx_t_2) {
          __pyx_t_2 = (0.0 <= __pyx_v_f_domain.sup());
        }
        __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
        if (__pyx_t_3) {

          /* "flowstar/reachability.pyx":557
 *                     if not (f_domain.inf() <= 0 <= f_domain.sup()):
 *                         # Annoying code to make Cython allow assignment to a r-value
 *                         (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)             # <<<<<<<<<<<<<<
 *                     else:
 *                         if self.symbolic_composition and not deref(poly_f_fn).has_value():
 */
          __Pyx_TraceLine(557,0,__PYX_ERR(0, 557, __pyx_L1_error))
          ((&(*__pyx_v_cached_bool))[0]) = std::optional<int> ((__pyx_v_f_domain.inf() > 0.0));

          /* "flowstar/reachability.pyx":555
 * 
 *                     # Only do anything if there is a chance of a root
 *                     if not (f_domain.inf() <= 0 <= f_domain.sup()):             # <<<<<<<<<<<<<<
 *                         # Annoying code to make Cython allow assignment to a r-value
 *                         (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 */
          goto __pyx_L17;
        }

        /* "flowstar/reachability.pyx":559
 *                         (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 *                     else:
 *                         if self.symbolic_composition and not deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                             # Define f and fprime by symbolically composing polynomials
 *                             (f_fn, fprime_fn) = observable(
 */
        __Pyx_TraceLine(559,0,__PYX_ERR(0, 559, __pyx_L1_error))
        /*else*/ {
          __pyx_t_2 = (__pyx_v_self->symbolic_composition != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_3 = __pyx_t_2;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_2 = ((!((*__pyx_v_poly_f_fn).has_value() != 0)) != 0);
          __pyx_t_3 = __pyx_t_2;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_3) {

            /* "flowstar/reachability.pyx":561
 *                         if self.symbolic_composition and not deref(poly_f_fn).has_value():
 *                             # Define f and fprime by symbolically composing polynomials
 *                             (f_fn, fprime_fn) = observable(             # <<<<<<<<<<<<<<
 *                                 self.f.c_poly, deref(tmv), deref(loop_domain),
 *                                 self.reach.c_reach.globalMaxOrder,
 */
            __Pyx_TraceLine(561,0,__PYX_ERR(0, 561, __pyx_L1_error))
            __pyx_t_6 = __pyx_f_8flowstar_12reachability_observable(__pyx_v_self->f->c_poly, (*__pyx_v_tmv), (*__pyx_v_loop_domain), __pyx_v_self->reach->c_reach.globalMaxOrder, __pyx_v_self->reach->c_reach.cutoff_threshold);
            __pyx_t_7 = __pyx_t_6.f0;
            __pyx_t_8 = __pyx_t_6.f1;
            __pyx_v_f_fn = __pyx_t_7;
            __pyx_v_fprime_fn = __pyx_t_8;

            /* "flowstar/reachability.pyx":566
 *                                 self.reach.c_reach.cutoff_threshold,
 *                             )
 *                             (&deref(poly_f_fn))[0] = optional[interval_time_fn](f_fn)             # <<<<<<<<<<<<<<
 *                             (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](
 *                                 fprime_fn)
 */
            __Pyx_TraceLine(566,0,__PYX_ERR(0, 566, __pyx_L1_error))
            ((&(*__pyx_v_poly_f_fn))[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> (__pyx_v_f_fn);

            /* "flowstar/reachability.pyx":567
 *                             )
 *                             (&deref(poly_f_fn))[0] = optional[interval_time_fn](f_fn)
 *                             (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](             # <<<<<<<<<<<<<<
 *                                 fprime_fn)
 *                         elif not self.symbolic_composition:
 */
            __Pyx_TraceLine(567,0,__PYX_ERR(0, 567, __pyx_L1_error))
            ((&(*__pyx_v_poly_fprime_fn))[0]) = std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> (__pyx_v_fprime_fn);

            /* "flowstar/reachability.pyx":559
 *                         (&deref(cached_bool))[0] = optional[bint](f_domain.inf() > 0)
 *                     else:
 *                         if self.symbolic_composition and not deref(poly_f_fn).has_value():             # <<<<<<<<<<<<<<
 *                             # Define f and fprime by symbolically composing polynomials
 *                             (f_fn, fprime_fn) = observable(
 */
            goto __pyx_L18;
          }

          /* "flowstar/reachability.pyx":569
 *                             (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](
 *                                 fprime_fn)
 *                         elif not self.symbolic_composition:             # <<<<<<<<<<<<<<
 *                             # Define fprime as a functional composition, and use f as
 *                             # defined similarly above
 */
          __Pyx_TraceLine(569,0,__PYX_ERR(0, 569, __pyx_L1_error))
          __pyx_t_3 = ((!(__pyx_v_self->symbolic_composition != 0)) != 0);
          if (__pyx_t_3) {

            /* "flowstar/reachability.pyx":572
 *                             # Define fprime as a functional composition, and use f as
 *                             # defined similarly above
 *                             fprime_fn = interval.compose_interval_fn(             # <<<<<<<<<<<<<<
 *                                 poly_fn(self.fprime.c_poly),
 *                                 deref(tmv),
 */
            __Pyx_TraceLine(572,0,__PYX_ERR(0, 572, __pyx_L1_error))
            __pyx_v_fprime_fn = compose_interval_fn(poly_fn(__pyx_v_self->fprime->c_poly), (*__pyx_v_tmv), (*__pyx_v_loop_domain));

            /* "flowstar/reachability.pyx":569
 *                             (&deref(poly_fprime_fn))[0] = optional[interval_time_fn](
 *                                 fprime_fn)
 *                         elif not self.symbolic_composition:             # <<<<<<<<<<<<<<
 *                             # Define fprime as a functional composition, and use f as
 *                             # defined similarly above
 */
          }
          __pyx_L18:;
        }
        __pyx_L17:;

        /* "flowstar/reachability.pyx":581
 * 
 *                     ### Interval evaluation over domain
 *                     f_J = f_fn.call(J)             # <<<<<<<<<<<<<<
 *                     # print("f_J =", interval.as_str(f_J))
 *                     if f_J.inf() > 0:
 */
        __Pyx_TraceLine(581,0,__PYX_ERR(0, 581, __pyx_L1_error))
        __pyx_v_f_J = __pyx_v_f_fn.operator()(__pyx_v_J);

        /* "flowstar/reachability.pyx":583
 *                     f_J = f_fn.call(J)
 *                     # print("f_J =", interval.as_str(f_J))
 *                     if f_J.inf() > 0:             # <<<<<<<<<<<<<<
 *                         # print("res =", True)
 *                         res = tribool(<cbool>True)
 */
        __Pyx_TraceLine(583,0,__PYX_ERR(0, 583, __pyx_L1_error))
        __pyx_t_3 = ((__pyx_v_f_J.inf() > 0.0) != 0);
        if (__pyx_t_3) {

          /* "flowstar/reachability.pyx":585
 *                     if f_J.inf() > 0:
 *                         # print("res =", True)
 *                         res = tribool(<cbool>True)             # <<<<<<<<<<<<<<
 *                     elif f_J.sup() < 0:
 *                         # print("res =", False)
 */
          __Pyx_TraceLine(585,0,__PYX_ERR(0, 585, __pyx_L1_error))
          __pyx_v_res = boost::logic::tribool(((bool)1));

          /* "flowstar/reachability.pyx":583
 *                     f_J = f_fn.call(J)
 *                     # print("f_J =", interval.as_str(f_J))
 *                     if f_J.inf() > 0:             # <<<<<<<<<<<<<<
 *                         # print("res =", True)
 *                         res = tribool(<cbool>True)
 */
          goto __pyx_L21;
        }

        /* "flowstar/reachability.pyx":586
 *                         # print("res =", True)
 *                         res = tribool(<cbool>True)
 *                     elif f_J.sup() < 0:             # <<<<<<<<<<<<<<
 *                         # print("res =", False)
 *                         res = tribool(<cbool>False)
 */
        __Pyx_TraceLine(586,0,__PYX_ERR(0, 586, __pyx_L1_error))
        __pyx_t_3 = ((__pyx_v_f_J.sup() < 0.0) != 0);
        if (__pyx_t_3) {

          /* "flowstar/reachability.pyx":588
 *                     elif f_J.sup() < 0:
 *                         # print("res =", False)
 *                         res = tribool(<cbool>False)             # <<<<<<<<<<<<<<
 *                     else:
 *                         # print("res =", None)
 */
          __Pyx_TraceLine(588,0,__PYX_ERR(0, 588, __pyx_L1_error))
          __pyx_v_res = boost::logic::tribool(((bool)0));

          /* "flowstar/reachability.pyx":586
 *                         # print("res =", True)
 *                         res = tribool(<cbool>True)
 *                     elif f_J.sup() < 0:             # <<<<<<<<<<<<<<
 *                         # print("res =", False)
 *                         res = tribool(<cbool>False)
 */
          goto __pyx_L21;
        }

        /* "flowstar/reachability.pyx":591
 *                     else:
 *                         # print("res =", None)
 *                         res = tribool(unknown)             # <<<<<<<<<<<<<<
 * 
 *                 ### Amalgamate result
 */
        __Pyx_TraceLine(591,0,__PYX_ERR(0, 591, __pyx_L1_error))
        /*else*/ {
          __pyx_v_res = boost::logic::tribool(boost::logic::indeterminate);
        }
        __pyx_L21:;
      }
      __pyx_L13:;

      /* "flowstar/reachability.pyx":594
 * 
 *                 ### Amalgamate result
 *                 final_res = tri_and(final_res, res)             # <<<<<<<<<<<<<<
 * 
 *                 # Restore domain after evaluation
 */
      __Pyx_TraceLine(594,0,__PYX_ERR(0, 594, __pyx_L1_error))
      __pyx_v_final_res = operator&&(__pyx_v_final_res, __pyx_v_res);

      /* "flowstar/reachability.pyx":597
 * 
 *                 # Restore domain after evaluation
 *                 deref(loop_domain)[0] = T0             # <<<<<<<<<<<<<<
 * 
 *             ### Increment time and loop iters
 */
      __Pyx_TraceLine(597,0,__PYX_ERR(0, 597, __pyx_L1_error))
      ((*__pyx_v_loop_domain)[0]) = __pyx_v_T0;

      /* "flowstar/reachability.pyx":529
 *             J.add_assign(T)
 * 
 *             if interval.overlaps(I, J):             # <<<<<<<<<<<<<<
 *                 if deref(cached_bool).has_value():
 *                     ### Used cached boolean if it exists
 */
    }

    /* "flowstar/reachability.pyx":600
 * 
 *             ### Increment time and loop iters
 *             T += T0.sup()             # <<<<<<<<<<<<<<
 *             # Pad lower endpoint to take into account numerical error in
 *             # endpoints
 */
    __Pyx_TraceLine(600,0,__PYX_ERR(0, 600, __pyx_L1_error))
    __pyx_v_T += __pyx_v_T0.sup();

    /* "flowstar/reachability.pyx":603
 *             # Pad lower endpoint to take into account numerical error in
 *             # endpoints
 *             T += Interval(-1e-53, 0)             # <<<<<<<<<<<<<<
 *             inc(tmv)
 *             inc(domain)
 */
    __Pyx_TraceLine(603,0,__PYX_ERR(0, 603, __pyx_L1_error))
    __pyx_v_T += flowstar::Interval(-1e-53, 0.0);

    /* "flowstar/reachability.pyx":604
 *             # endpoints
 *             T += Interval(-1e-53, 0)
 *             inc(tmv)             # <<<<<<<<<<<<<<
 *             inc(domain)
 *             inc(cached_bool)
 */
    __Pyx_TraceLine(604,0,__PYX_ERR(0, 604, __pyx_L1_error))
    (void)((++__pyx_v_tmv));

    /* "flowstar/reachability.pyx":605
 *             T += Interval(-1e-53, 0)
 *             inc(tmv)
 *             inc(domain)             # <<<<<<<<<<<<<<
 *             inc(cached_bool)
 *             inc(poly_f_fn)
 */
    __Pyx_TraceLine(605,0,__PYX_ERR(0, 605, __pyx_L1_error))
    (void)((++__pyx_v_domain));

    /* "flowstar/reachability.pyx":606
 *             inc(tmv)
 *             inc(domain)
 *             inc(cached_bool)             # <<<<<<<<<<<<<<
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)
 */
    __Pyx_TraceLine(606,0,__PYX_ERR(0, 606, __pyx_L1_error))
    (void)((++__pyx_v_cached_bool));

    /* "flowstar/reachability.pyx":607
 *             inc(domain)
 *             inc(cached_bool)
 *             inc(poly_f_fn)             # <<<<<<<<<<<<<<
 *             inc(poly_fprime_fn)
 * 
 */
    __Pyx_TraceLine(607,0,__PYX_ERR(0, 607, __pyx_L1_error))
    (void)((++__pyx_v_poly_f_fn));

    /* "flowstar/reachability.pyx":608
 *             inc(cached_bool)
 *             inc(poly_f_fn)
 *             inc(poly_fprime_fn)             # <<<<<<<<<<<<<<
 * 
 *         return final_res
 */
    __Pyx_TraceLine(608,0,__PYX_ERR(0, 608, __pyx_L1_error))
    (void)((++__pyx_v_poly_fprime_fn));
  }

  /* "flowstar/reachability.pyx":610
 *             inc(poly_fprime_fn)
 * 
 *         return final_res             # <<<<<<<<<<<<<<
 * 
 *     def check(self, t, space_domain=None):
 */
  __Pyx_TraceLine(610,0,__PYX_ERR(0, 610, __pyx_L1_error))
  __pyx_r = __pyx_v_final_res;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":482
 *         return RIF(res.inf(), res.sup())
 * 
 *     cdef tribool eval_bool_interval(PolyObserver self, Interval & I):             # <<<<<<<<<<<<<<
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.reach.c_reach.flowpipesCompo.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.reachability.PolyObserver.eval_bool_interval", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":612
 *         return final_res
 * 
 *     def check(self, t, space_domain=None):             # <<<<<<<<<<<<<<
 *         if self.reach is None:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_9check(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_9check(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t = 0;
  CYTHON_UNUSED PyObject *__pyx_v_space_domain = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_space_domain,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_space_domain);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check") < 0)) __PYX_ERR(0, 612, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = values[0];
    __pyx_v_space_domain = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 612, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver_8check(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self), __pyx_v_t, __pyx_v_space_domain);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_8check(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, PyObject *__pyx_v_t, CYTHON_UNUSED PyObject *__pyx_v_space_domain) {
  boost::logic::tribool __pyx_v_res;
  flowstar::Interval __pyx_v_I;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("check", 0);
  __Pyx_TraceCall("check", __pyx_f[0], 612, 0, __PYX_ERR(0, 612, __pyx_L1_error));

  /* "flowstar/reachability.pyx":613
 * 
 *     def check(self, t, space_domain=None):
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __Pyx_TraceLine(613,0,__PYX_ERR(0, 613, __pyx_L1_error))
  __pyx_t_1 = (((PyObject *)__pyx_v_self->reach) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "flowstar/reachability.pyx":614
 *     def check(self, t, space_domain=None):
 *         if self.reach is None:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         self.reach.prepare()
 */
    __Pyx_TraceLine(614,0,__PYX_ERR(0, 614, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "flowstar/reachability.pyx":613
 * 
 *     def check(self, t, space_domain=None):
 *         if self.reach is None:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "flowstar/reachability.pyx":616
 *             return None
 * 
 *         self.reach.prepare()             # <<<<<<<<<<<<<<
 * 
 *         # Convert python interval to flow* interval
 */
  __Pyx_TraceLine(616,0,__PYX_ERR(0, 616, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->reach), __pyx_n_s_prepare); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "flowstar/reachability.pyx":621
 *         cdef:
 *             tribool res
 *             Interval I = interval.make_interval(t)             # <<<<<<<<<<<<<<
 * 
 *         with self.reach.global_manager: #  Use captured globals
 */
  __Pyx_TraceLine(621,0,__PYX_ERR(0, 621, __pyx_L1_error))
  __pyx_v_I = __pyx_f_8flowstar_8interval_make_interval(__pyx_v_t);

  /* "flowstar/reachability.pyx":623
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_bool_interval(I)
 * 
 */
  __Pyx_TraceLine(623,0,__PYX_ERR(0, 623, __pyx_L1_error))
  /*with:*/ {
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->reach->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 623, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "flowstar/reachability.pyx":624
 * 
 *         with self.reach.global_manager: #  Use captured globals
 *             res = self.eval_bool_interval(I)             # <<<<<<<<<<<<<<
 * 
 *         if <cbool>res:
 */
          __Pyx_TraceLine(624,0,__PYX_ERR(0, 624, __pyx_L8_error))
          __pyx_v_res = ((struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver *)__pyx_v_self->__pyx_vtab)->eval_bool_interval(__pyx_v_self, __pyx_v_I);

          /* "flowstar/reachability.pyx":623
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_bool_interval(I)
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("flowstar.reachability.PolyObserver.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 623, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_10 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 623, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 623, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_2 < 0) __PYX_ERR(0, 623, __pyx_L10_except_error)
          __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
          if (__pyx_t_1) {
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_XGIVEREF(__pyx_t_5);
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_4, __pyx_t_5);
            __pyx_t_3 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0; 
            __PYX_ERR(0, 623, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__9, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 623, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L17;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "flowstar/reachability.pyx":626
 *             res = self.eval_bool_interval(I)
 * 
 *         if <cbool>res:             # <<<<<<<<<<<<<<
 *             return True
 *         elif <cbool>(not res):
 */
  __Pyx_TraceLine(626,0,__PYX_ERR(0, 626, __pyx_L1_error))
  __pyx_t_1 = (((bool)__pyx_v_res) != 0);
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":627
 * 
 *         if <cbool>res:
 *             return True             # <<<<<<<<<<<<<<
 *         elif <cbool>(not res):
 *             return False
 */
    __Pyx_TraceLine(627,0,__PYX_ERR(0, 627, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "flowstar/reachability.pyx":626
 *             res = self.eval_bool_interval(I)
 * 
 *         if <cbool>res:             # <<<<<<<<<<<<<<
 *             return True
 *         elif <cbool>(not res):
 */
  }

  /* "flowstar/reachability.pyx":628
 *         if <cbool>res:
 *             return True
 *         elif <cbool>(not res):             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  __Pyx_TraceLine(628,0,__PYX_ERR(0, 628, __pyx_L1_error))
  __pyx_t_1 = (((bool)(!__pyx_v_res)) != 0);
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":629
 *             return True
 *         elif <cbool>(not res):
 *             return False             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_TraceLine(629,0,__PYX_ERR(0, 629, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "flowstar/reachability.pyx":628
 *         if <cbool>res:
 *             return True
 *         elif <cbool>(not res):             # <<<<<<<<<<<<<<
 *             return False
 *         else:
 */
  }

  /* "flowstar/reachability.pyx":631
 *             return False
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(631,0,__PYX_ERR(0, 631, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "flowstar/reachability.pyx":612
 *         return final_res
 * 
 *     def check(self, t, space_domain=None):             # <<<<<<<<<<<<<<
 *         if self.reach is None:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pxd":56
 *     cdef vector[optional[bint]] bools
 *     cdef bint symbolic_composition
 *     cdef readonly object mask  # Mask             # <<<<<<<<<<<<<<
 *     cdef vector[Interval] masked_regions
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_4mask_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_4mask_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver_4mask___get__(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_4mask___get__(struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 56, 0, __PYX_ERR(2, 56, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->mask);
  __pyx_r = __pyx_v_self->mask;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.mask.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver_10__reduce_cython__(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_12PolyObserver_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_12PolyObserver_12__setstate_cython__(((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_12PolyObserver_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_PolyObserver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.PolyObserver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":635
 * 
 * cdef class CReach:
 *     def __cinit__(CReach self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if len(args) == 1 or len(args) == 2:
 *             ## Copy constructor
 */

/* Python wrapper */
static int __pyx_pw_8flowstar_12reachability_6CReach_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8flowstar_12reachability_6CReach_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach___cinit__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_12reachability_6CReach___cinit__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 635, 0, __PYX_ERR(0, 635, __pyx_L1_error));

  /* "flowstar/reachability.pyx":636
 * cdef class CReach:
 *     def __cinit__(CReach self, *args, **kwargs):
 *         if len(args) == 1 or len(args) == 2:             # <<<<<<<<<<<<<<
 *             ## Copy constructor
 *             self._init_clone(*args)
 */
  __Pyx_TraceLine(636,0,__PYX_ERR(0, 636, __pyx_L1_error))
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 == 2) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":638
 *         if len(args) == 1 or len(args) == 2:
 *             ## Copy constructor
 *             self._init_clone(*args)             # <<<<<<<<<<<<<<
 *         else:
 *             ## Construct from arguments
 */
    __Pyx_TraceLine(638,0,__PYX_ERR(0, 638, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_clone); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "flowstar/reachability.pyx":636
 * cdef class CReach:
 *     def __cinit__(CReach self, *args, **kwargs):
 *         if len(args) == 1 or len(args) == 2:             # <<<<<<<<<<<<<<
 *             ## Copy constructor
 *             self._init_clone(*args)
 */
    goto __pyx_L3;
  }

  /* "flowstar/reachability.pyx":641
 *         else:
 *             ## Construct from arguments
 *             self._init_args(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def _init_clone(CReach self, CReach other, initials=None):
 */
  __Pyx_TraceLine(641,0,__PYX_ERR(0, 641, __pyx_L1_error))
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_args); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "flowstar/reachability.pyx":635
 * 
 * cdef class CReach:
 *     def __cinit__(CReach self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if len(args) == 1 or len(args) == 2:
 *             ## Copy constructor
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("flowstar.reachability.CReach.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":643
 *             self._init_args(*args, **kwargs)
 * 
 *     def _init_clone(CReach self, CReach other, initials=None):             # <<<<<<<<<<<<<<
 *         cdef Interval zero_int
 *         cdef vector[Flowpipe] initials_fpvect
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_3_init_clone(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_3_init_clone(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_other = 0;
  PyObject *__pyx_v_initials = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_clone (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_initials,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initials);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_clone") < 0)) __PYX_ERR(0, 643, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = ((struct __pyx_obj_8flowstar_12reachability_CReach *)values[0]);
    __pyx_v_initials = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_clone", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 643, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach._init_clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8flowstar_12reachability_CReach, 1, "other", 0))) __PYX_ERR(0, 643, __pyx_L1_error)
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_2_init_clone(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), __pyx_v_other, __pyx_v_initials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_2_init_clone(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_other, PyObject *__pyx_v_initials) {
  flowstar::Interval __pyx_v_zero_int;
  std::vector<flowstar::Flowpipe>  __pyx_v_initials_fpvect;
  PyObject *__pyx_v_initial = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  std::vector<flowstar::Interval>  __pyx_t_4;
  flowstar::ContinuousSystem __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  bool __pyx_t_9;
  double __pyx_t_10;
  int __pyx_t_11;
  std::vector<int>  __pyx_t_12;
  flowstar::Interval __pyx_t_13;
  std::map<std::string,int>  __pyx_t_14;
  std::vector<std::string>  __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("_init_clone", 0);
  __Pyx_TraceCall("_init_clone", __pyx_f[0], 643, 0, __PYX_ERR(0, 643, __pyx_L1_error));

  /* "flowstar/reachability.pyx":647
 *         cdef vector[Flowpipe] initials_fpvect
 * 
 *         self.ran = False             # <<<<<<<<<<<<<<
 *         self.prepared = False
 *         self.result = 0
 */
  __Pyx_TraceLine(647,0,__PYX_ERR(0, 647, __pyx_L1_error))
  __pyx_v_self->ran = 0;

  /* "flowstar/reachability.pyx":648
 * 
 *         self.ran = False
 *         self.prepared = False             # <<<<<<<<<<<<<<
 *         self.result = 0
 *         self.symbolic_composition = other.symbolic_composition
 */
  __Pyx_TraceLine(648,0,__PYX_ERR(0, 648, __pyx_L1_error))
  __pyx_v_self->prepared = 0;

  /* "flowstar/reachability.pyx":649
 *         self.ran = False
 *         self.prepared = False
 *         self.result = 0             # <<<<<<<<<<<<<<
 *         self.symbolic_composition = other.symbolic_composition
 *         self.global_manager = FlowstarGlobalManager()
 */
  __Pyx_TraceLine(649,0,__PYX_ERR(0, 649, __pyx_L1_error))
  __pyx_v_self->result = 0;

  /* "flowstar/reachability.pyx":650
 *         self.prepared = False
 *         self.result = 0
 *         self.symbolic_composition = other.symbolic_composition             # <<<<<<<<<<<<<<
 *         self.global_manager = FlowstarGlobalManager()
 *         if initials is None:
 */
  __Pyx_TraceLine(650,0,__PYX_ERR(0, 650, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_other->symbolic_composition;
  __pyx_v_self->symbolic_composition = __pyx_t_1;

  /* "flowstar/reachability.pyx":651
 *         self.result = 0
 *         self.symbolic_composition = other.symbolic_composition
 *         self.global_manager = FlowstarGlobalManager()             # <<<<<<<<<<<<<<
 *         if initials is None:
 *             self.initials = other.initials
 */
  __Pyx_TraceLine(651,0,__PYX_ERR(0, 651, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->global_manager);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->global_manager));
  __pyx_v_self->global_manager = ((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":652
 *         self.symbolic_composition = other.symbolic_composition
 *         self.global_manager = FlowstarGlobalManager()
 *         if initials is None:             # <<<<<<<<<<<<<<
 *             self.initials = other.initials
 *             self.c_reach.system = other.c_reach.system
 */
  __Pyx_TraceLine(652,0,__PYX_ERR(0, 652, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_initials == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "flowstar/reachability.pyx":653
 *         self.global_manager = FlowstarGlobalManager()
 *         if initials is None:
 *             self.initials = other.initials             # <<<<<<<<<<<<<<
 *             self.c_reach.system = other.c_reach.system
 *         else:
 */
    __Pyx_TraceLine(653,0,__PYX_ERR(0, 653, __pyx_L1_error))
    __pyx_t_4 = __pyx_v_other->initials;
    __pyx_v_self->initials = __pyx_t_4;

    /* "flowstar/reachability.pyx":654
 *         if initials is None:
 *             self.initials = other.initials
 *             self.c_reach.system = other.c_reach.system             # <<<<<<<<<<<<<<
 *         else:
 *             for initial in initials:
 */
    __Pyx_TraceLine(654,0,__PYX_ERR(0, 654, __pyx_L1_error))
    __pyx_t_5 = __pyx_v_other->c_reach.system;
    __pyx_v_self->c_reach.system = __pyx_t_5;

    /* "flowstar/reachability.pyx":652
 *         self.symbolic_composition = other.symbolic_composition
 *         self.global_manager = FlowstarGlobalManager()
 *         if initials is None:             # <<<<<<<<<<<<<<
 *             self.initials = other.initials
 *             self.c_reach.system = other.c_reach.system
 */
    goto __pyx_L3;
  }

  /* "flowstar/reachability.pyx":656
 *             self.c_reach.system = other.c_reach.system
 *         else:
 *             for initial in initials:             # <<<<<<<<<<<<<<
 *                 self.initials.push_back(interval.make_interval(initial))
 *             initials_fpvect.push_back(Flowpipe(self.initials, zero_int))
 */
  __Pyx_TraceLine(656,0,__PYX_ERR(0, 656, __pyx_L1_error))
  /*else*/ {
    if (likely(PyList_CheckExact(__pyx_v_initials)) || PyTuple_CheckExact(__pyx_v_initials)) {
      __pyx_t_2 = __pyx_v_initials; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_initials); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 656, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 656, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        }
      } else {
        __pyx_t_8 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_8)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 656, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_XDECREF_SET(__pyx_v_initial, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "flowstar/reachability.pyx":657
 *         else:
 *             for initial in initials:
 *                 self.initials.push_back(interval.make_interval(initial))             # <<<<<<<<<<<<<<
 *             initials_fpvect.push_back(Flowpipe(self.initials, zero_int))
 *             self.c_reach.system = ContinuousSystem(other.c_reach.system.tmvOde,
 */
      __Pyx_TraceLine(657,0,__PYX_ERR(0, 657, __pyx_L1_error))
      try {
        __pyx_v_self->initials.push_back(__pyx_f_8flowstar_8interval_make_interval(__pyx_v_initial));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 657, __pyx_L1_error)
      }

      /* "flowstar/reachability.pyx":656
 *             self.c_reach.system = other.c_reach.system
 *         else:
 *             for initial in initials:             # <<<<<<<<<<<<<<
 *                 self.initials.push_back(interval.make_interval(initial))
 *             initials_fpvect.push_back(Flowpipe(self.initials, zero_int))
 */
      __Pyx_TraceLine(656,0,__PYX_ERR(0, 656, __pyx_L1_error))
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "flowstar/reachability.pyx":658
 *             for initial in initials:
 *                 self.initials.push_back(interval.make_interval(initial))
 *             initials_fpvect.push_back(Flowpipe(self.initials, zero_int))             # <<<<<<<<<<<<<<
 *             self.c_reach.system = ContinuousSystem(other.c_reach.system.tmvOde,
 *                                                    initials_fpvect)
 */
    __Pyx_TraceLine(658,0,__PYX_ERR(0, 658, __pyx_L1_error))
    try {
      __pyx_v_initials_fpvect.push_back(flowstar::Flowpipe(__pyx_v_self->initials, __pyx_v_zero_int));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 658, __pyx_L1_error)
    }

    /* "flowstar/reachability.pyx":659
 *                 self.initials.push_back(interval.make_interval(initial))
 *             initials_fpvect.push_back(Flowpipe(self.initials, zero_int))
 *             self.c_reach.system = ContinuousSystem(other.c_reach.system.tmvOde,             # <<<<<<<<<<<<<<
 *                                                    initials_fpvect)
 * 
 */
    __Pyx_TraceLine(659,0,__PYX_ERR(0, 659, __pyx_L1_error))
    __pyx_v_self->c_reach.system = flowstar::ContinuousSystem(__pyx_v_other->c_reach.system.tmvOde, __pyx_v_initials_fpvect);
  }
  __pyx_L3:;

  /* "flowstar/reachability.pyx":662
 *                                                    initials_fpvect)
 * 
 *         self.c_reach.bAdaptiveOrders = other.c_reach.bAdaptiveOrders             # <<<<<<<<<<<<<<
 *         self.c_reach.miniStep = other.c_reach.miniStep
 *         self.c_reach.step = other.c_reach.step
 */
  __Pyx_TraceLine(662,0,__PYX_ERR(0, 662, __pyx_L1_error))
  __pyx_t_9 = __pyx_v_other->c_reach.bAdaptiveOrders;
  __pyx_v_self->c_reach.bAdaptiveOrders = __pyx_t_9;

  /* "flowstar/reachability.pyx":663
 * 
 *         self.c_reach.bAdaptiveOrders = other.c_reach.bAdaptiveOrders
 *         self.c_reach.miniStep = other.c_reach.miniStep             # <<<<<<<<<<<<<<
 *         self.c_reach.step = other.c_reach.step
 *         self.c_reach.orderType = other.c_reach.orderType
 */
  __Pyx_TraceLine(663,0,__PYX_ERR(0, 663, __pyx_L1_error))
  __pyx_t_10 = __pyx_v_other->c_reach.miniStep;
  __pyx_v_self->c_reach.miniStep = __pyx_t_10;

  /* "flowstar/reachability.pyx":664
 *         self.c_reach.bAdaptiveOrders = other.c_reach.bAdaptiveOrders
 *         self.c_reach.miniStep = other.c_reach.miniStep
 *         self.c_reach.step = other.c_reach.step             # <<<<<<<<<<<<<<
 *         self.c_reach.orderType = other.c_reach.orderType
 *         self.c_reach.bAdaptiveSteps = other.c_reach.bAdaptiveSteps
 */
  __Pyx_TraceLine(664,0,__PYX_ERR(0, 664, __pyx_L1_error))
  __pyx_t_10 = __pyx_v_other->c_reach.step;
  __pyx_v_self->c_reach.step = __pyx_t_10;

  /* "flowstar/reachability.pyx":665
 *         self.c_reach.miniStep = other.c_reach.miniStep
 *         self.c_reach.step = other.c_reach.step
 *         self.c_reach.orderType = other.c_reach.orderType             # <<<<<<<<<<<<<<
 *         self.c_reach.bAdaptiveSteps = other.c_reach.bAdaptiveSteps
 *         self.c_reach.orders = other.c_reach.orders
 */
  __Pyx_TraceLine(665,0,__PYX_ERR(0, 665, __pyx_L1_error))
  __pyx_t_11 = __pyx_v_other->c_reach.orderType;
  __pyx_v_self->c_reach.orderType = __pyx_t_11;

  /* "flowstar/reachability.pyx":666
 *         self.c_reach.step = other.c_reach.step
 *         self.c_reach.orderType = other.c_reach.orderType
 *         self.c_reach.bAdaptiveSteps = other.c_reach.bAdaptiveSteps             # <<<<<<<<<<<<<<
 *         self.c_reach.orders = other.c_reach.orders
 *         self.c_reach.maxOrders = other.c_reach.maxOrders
 */
  __Pyx_TraceLine(666,0,__PYX_ERR(0, 666, __pyx_L1_error))
  __pyx_t_9 = __pyx_v_other->c_reach.bAdaptiveSteps;
  __pyx_v_self->c_reach.bAdaptiveSteps = __pyx_t_9;

  /* "flowstar/reachability.pyx":667
 *         self.c_reach.orderType = other.c_reach.orderType
 *         self.c_reach.bAdaptiveSteps = other.c_reach.bAdaptiveSteps
 *         self.c_reach.orders = other.c_reach.orders             # <<<<<<<<<<<<<<
 *         self.c_reach.maxOrders = other.c_reach.maxOrders
 *         self.c_reach.globalMaxOrder = other.c_reach.globalMaxOrder
 */
  __Pyx_TraceLine(667,0,__PYX_ERR(0, 667, __pyx_L1_error))
  __pyx_t_12 = __pyx_v_other->c_reach.orders;
  __pyx_v_self->c_reach.orders = __pyx_t_12;

  /* "flowstar/reachability.pyx":668
 *         self.c_reach.bAdaptiveSteps = other.c_reach.bAdaptiveSteps
 *         self.c_reach.orders = other.c_reach.orders
 *         self.c_reach.maxOrders = other.c_reach.maxOrders             # <<<<<<<<<<<<<<
 *         self.c_reach.globalMaxOrder = other.c_reach.globalMaxOrder
 *         self.c_reach.time = other.c_reach.time
 */
  __Pyx_TraceLine(668,0,__PYX_ERR(0, 668, __pyx_L1_error))
  __pyx_t_12 = __pyx_v_other->c_reach.maxOrders;
  __pyx_v_self->c_reach.maxOrders = __pyx_t_12;

  /* "flowstar/reachability.pyx":669
 *         self.c_reach.orders = other.c_reach.orders
 *         self.c_reach.maxOrders = other.c_reach.maxOrders
 *         self.c_reach.globalMaxOrder = other.c_reach.globalMaxOrder             # <<<<<<<<<<<<<<
 *         self.c_reach.time = other.c_reach.time
 *         self.c_reach.precondition = other.c_reach.precondition
 */
  __Pyx_TraceLine(669,0,__PYX_ERR(0, 669, __pyx_L1_error))
  __pyx_t_11 = __pyx_v_other->c_reach.globalMaxOrder;
  __pyx_v_self->c_reach.globalMaxOrder = __pyx_t_11;

  /* "flowstar/reachability.pyx":670
 *         self.c_reach.maxOrders = other.c_reach.maxOrders
 *         self.c_reach.globalMaxOrder = other.c_reach.globalMaxOrder
 *         self.c_reach.time = other.c_reach.time             # <<<<<<<<<<<<<<
 *         self.c_reach.precondition = other.c_reach.precondition
 *         self.c_reach.plotSetting = other.c_reach.plotSetting
 */
  __Pyx_TraceLine(670,0,__PYX_ERR(0, 670, __pyx_L1_error))
  __pyx_t_10 = __pyx_v_other->c_reach.time;
  __pyx_v_self->c_reach.time = __pyx_t_10;

  /* "flowstar/reachability.pyx":671
 *         self.c_reach.globalMaxOrder = other.c_reach.globalMaxOrder
 *         self.c_reach.time = other.c_reach.time
 *         self.c_reach.precondition = other.c_reach.precondition             # <<<<<<<<<<<<<<
 *         self.c_reach.plotSetting = other.c_reach.plotSetting
 *         self.c_reach.bPrint = other.c_reach.bPrint
 */
  __Pyx_TraceLine(671,0,__PYX_ERR(0, 671, __pyx_L1_error))
  __pyx_t_11 = __pyx_v_other->c_reach.precondition;
  __pyx_v_self->c_reach.precondition = __pyx_t_11;

  /* "flowstar/reachability.pyx":672
 *         self.c_reach.time = other.c_reach.time
 *         self.c_reach.precondition = other.c_reach.precondition
 *         self.c_reach.plotSetting = other.c_reach.plotSetting             # <<<<<<<<<<<<<<
 *         self.c_reach.bPrint = other.c_reach.bPrint
 *         self.c_reach.bSafetyChecking = other.c_reach.bSafetyChecking
 */
  __Pyx_TraceLine(672,0,__PYX_ERR(0, 672, __pyx_L1_error))
  __pyx_t_11 = __pyx_v_other->c_reach.plotSetting;
  __pyx_v_self->c_reach.plotSetting = __pyx_t_11;

  /* "flowstar/reachability.pyx":673
 *         self.c_reach.precondition = other.c_reach.precondition
 *         self.c_reach.plotSetting = other.c_reach.plotSetting
 *         self.c_reach.bPrint = other.c_reach.bPrint             # <<<<<<<<<<<<<<
 *         self.c_reach.bSafetyChecking = other.c_reach.bSafetyChecking
 *         self.c_reach.bPlot = other.c_reach.bPlot
 */
  __Pyx_TraceLine(673,0,__PYX_ERR(0, 673, __pyx_L1_error))
  __pyx_t_9 = __pyx_v_other->c_reach.bPrint;
  __pyx_v_self->c_reach.bPrint = __pyx_t_9;

  /* "flowstar/reachability.pyx":674
 *         self.c_reach.plotSetting = other.c_reach.plotSetting
 *         self.c_reach.bPrint = other.c_reach.bPrint
 *         self.c_reach.bSafetyChecking = other.c_reach.bSafetyChecking             # <<<<<<<<<<<<<<
 *         self.c_reach.bPlot = other.c_reach.bPlot
 *         self.c_reach.bDump = other.c_reach.bDump
 */
  __Pyx_TraceLine(674,0,__PYX_ERR(0, 674, __pyx_L1_error))
  __pyx_t_9 = __pyx_v_other->c_reach.bSafetyChecking;
  __pyx_v_self->c_reach.bSafetyChecking = __pyx_t_9;

  /* "flowstar/reachability.pyx":675
 *         self.c_reach.bPrint = other.c_reach.bPrint
 *         self.c_reach.bSafetyChecking = other.c_reach.bSafetyChecking
 *         self.c_reach.bPlot = other.c_reach.bPlot             # <<<<<<<<<<<<<<
 *         self.c_reach.bDump = other.c_reach.bDump
 *         self.c_reach.integrationScheme = other.c_reach.integrationScheme
 */
  __Pyx_TraceLine(675,0,__PYX_ERR(0, 675, __pyx_L1_error))
  __pyx_t_9 = __pyx_v_other->c_reach.bPlot;
  __pyx_v_self->c_reach.bPlot = __pyx_t_9;

  /* "flowstar/reachability.pyx":676
 *         self.c_reach.bSafetyChecking = other.c_reach.bSafetyChecking
 *         self.c_reach.bPlot = other.c_reach.bPlot
 *         self.c_reach.bDump = other.c_reach.bDump             # <<<<<<<<<<<<<<
 *         self.c_reach.integrationScheme = other.c_reach.integrationScheme
 *         self.c_reach.cutoff_threshold = other.c_reach.cutoff_threshold
 */
  __Pyx_TraceLine(676,0,__PYX_ERR(0, 676, __pyx_L1_error))
  __pyx_t_9 = __pyx_v_other->c_reach.bDump;
  __pyx_v_self->c_reach.bDump = __pyx_t_9;

  /* "flowstar/reachability.pyx":677
 *         self.c_reach.bPlot = other.c_reach.bPlot
 *         self.c_reach.bDump = other.c_reach.bDump
 *         self.c_reach.integrationScheme = other.c_reach.integrationScheme             # <<<<<<<<<<<<<<
 *         self.c_reach.cutoff_threshold = other.c_reach.cutoff_threshold
 *         self.c_reach.estimation = other.c_reach.estimation
 */
  __Pyx_TraceLine(677,0,__PYX_ERR(0, 677, __pyx_L1_error))
  __pyx_t_11 = __pyx_v_other->c_reach.integrationScheme;
  __pyx_v_self->c_reach.integrationScheme = __pyx_t_11;

  /* "flowstar/reachability.pyx":678
 *         self.c_reach.bDump = other.c_reach.bDump
 *         self.c_reach.integrationScheme = other.c_reach.integrationScheme
 *         self.c_reach.cutoff_threshold = other.c_reach.cutoff_threshold             # <<<<<<<<<<<<<<
 *         self.c_reach.estimation = other.c_reach.estimation
 *         self.c_reach.maxNumSteps = other.c_reach.maxNumSteps
 */
  __Pyx_TraceLine(678,0,__PYX_ERR(0, 678, __pyx_L1_error))
  __pyx_t_13 = __pyx_v_other->c_reach.cutoff_threshold;
  __pyx_v_self->c_reach.cutoff_threshold = __pyx_t_13;

  /* "flowstar/reachability.pyx":679
 *         self.c_reach.integrationScheme = other.c_reach.integrationScheme
 *         self.c_reach.cutoff_threshold = other.c_reach.cutoff_threshold
 *         self.c_reach.estimation = other.c_reach.estimation             # <<<<<<<<<<<<<<
 *         self.c_reach.maxNumSteps = other.c_reach.maxNumSteps
 *         self.c_reach.max_remainder_queue = other.c_reach.max_remainder_queue
 */
  __Pyx_TraceLine(679,0,__PYX_ERR(0, 679, __pyx_L1_error))
  __pyx_t_4 = __pyx_v_other->c_reach.estimation;
  __pyx_v_self->c_reach.estimation = __pyx_t_4;

  /* "flowstar/reachability.pyx":680
 *         self.c_reach.cutoff_threshold = other.c_reach.cutoff_threshold
 *         self.c_reach.estimation = other.c_reach.estimation
 *         self.c_reach.maxNumSteps = other.c_reach.maxNumSteps             # <<<<<<<<<<<<<<
 *         self.c_reach.max_remainder_queue = other.c_reach.max_remainder_queue
 *         self.c_reach.stateVarTab = other.c_reach.stateVarTab
 */
  __Pyx_TraceLine(680,0,__PYX_ERR(0, 680, __pyx_L1_error))
  __pyx_t_11 = __pyx_v_other->c_reach.maxNumSteps;
  __pyx_v_self->c_reach.maxNumSteps = __pyx_t_11;

  /* "flowstar/reachability.pyx":681
 *         self.c_reach.estimation = other.c_reach.estimation
 *         self.c_reach.maxNumSteps = other.c_reach.maxNumSteps
 *         self.c_reach.max_remainder_queue = other.c_reach.max_remainder_queue             # <<<<<<<<<<<<<<
 *         self.c_reach.stateVarTab = other.c_reach.stateVarTab
 *         self.c_reach.stateVarNames = other.c_reach.stateVarNames
 */
  __Pyx_TraceLine(681,0,__PYX_ERR(0, 681, __pyx_L1_error))
  __pyx_t_11 = __pyx_v_other->c_reach.max_remainder_queue;
  __pyx_v_self->c_reach.max_remainder_queue = __pyx_t_11;

  /* "flowstar/reachability.pyx":682
 *         self.c_reach.maxNumSteps = other.c_reach.maxNumSteps
 *         self.c_reach.max_remainder_queue = other.c_reach.max_remainder_queue
 *         self.c_reach.stateVarTab = other.c_reach.stateVarTab             # <<<<<<<<<<<<<<
 *         self.c_reach.stateVarNames = other.c_reach.stateVarNames
 *         self.c_reach.tmVarTab = other.c_reach.tmVarTab
 */
  __Pyx_TraceLine(682,0,__PYX_ERR(0, 682, __pyx_L1_error))
  __pyx_t_14 = __pyx_v_other->c_reach.stateVarTab;
  __pyx_v_self->c_reach.stateVarTab = __pyx_t_14;

  /* "flowstar/reachability.pyx":683
 *         self.c_reach.max_remainder_queue = other.c_reach.max_remainder_queue
 *         self.c_reach.stateVarTab = other.c_reach.stateVarTab
 *         self.c_reach.stateVarNames = other.c_reach.stateVarNames             # <<<<<<<<<<<<<<
 *         self.c_reach.tmVarTab = other.c_reach.tmVarTab
 *         self.c_reach.parTab = other.c_reach.parTab
 */
  __Pyx_TraceLine(683,0,__PYX_ERR(0, 683, __pyx_L1_error))
  __pyx_t_15 = __pyx_v_other->c_reach.stateVarNames;
  __pyx_v_self->c_reach.stateVarNames = __pyx_t_15;

  /* "flowstar/reachability.pyx":684
 *         self.c_reach.stateVarTab = other.c_reach.stateVarTab
 *         self.c_reach.stateVarNames = other.c_reach.stateVarNames
 *         self.c_reach.tmVarTab = other.c_reach.tmVarTab             # <<<<<<<<<<<<<<
 *         self.c_reach.parTab = other.c_reach.parTab
 *         self.c_reach.parNames = other.c_reach.parNames
 */
  __Pyx_TraceLine(684,0,__PYX_ERR(0, 684, __pyx_L1_error))
  __pyx_t_14 = __pyx_v_other->c_reach.tmVarTab;
  __pyx_v_self->c_reach.tmVarTab = __pyx_t_14;

  /* "flowstar/reachability.pyx":685
 *         self.c_reach.stateVarNames = other.c_reach.stateVarNames
 *         self.c_reach.tmVarTab = other.c_reach.tmVarTab
 *         self.c_reach.parTab = other.c_reach.parTab             # <<<<<<<<<<<<<<
 *         self.c_reach.parNames = other.c_reach.parNames
 *         self.c_reach.parRanges = other.c_reach.parRanges
 */
  __Pyx_TraceLine(685,0,__PYX_ERR(0, 685, __pyx_L1_error))
  __pyx_t_14 = __pyx_v_other->c_reach.parTab;
  __pyx_v_self->c_reach.parTab = __pyx_t_14;

  /* "flowstar/reachability.pyx":686
 *         self.c_reach.tmVarTab = other.c_reach.tmVarTab
 *         self.c_reach.parTab = other.c_reach.parTab
 *         self.c_reach.parNames = other.c_reach.parNames             # <<<<<<<<<<<<<<
 *         self.c_reach.parRanges = other.c_reach.parRanges
 *         self.c_reach.TI_Par_Tab = other.c_reach.TI_Par_Tab
 */
  __Pyx_TraceLine(686,0,__PYX_ERR(0, 686, __pyx_L1_error))
  __pyx_t_15 = __pyx_v_other->c_reach.parNames;
  __pyx_v_self->c_reach.parNames = __pyx_t_15;

  /* "flowstar/reachability.pyx":687
 *         self.c_reach.parTab = other.c_reach.parTab
 *         self.c_reach.parNames = other.c_reach.parNames
 *         self.c_reach.parRanges = other.c_reach.parRanges             # <<<<<<<<<<<<<<
 *         self.c_reach.TI_Par_Tab = other.c_reach.TI_Par_Tab
 *         self.c_reach.TI_Par_Names = other.c_reach.TI_Par_Names
 */
  __Pyx_TraceLine(687,0,__PYX_ERR(0, 687, __pyx_L1_error))
  __pyx_t_4 = __pyx_v_other->c_reach.parRanges;
  __pyx_v_self->c_reach.parRanges = __pyx_t_4;

  /* "flowstar/reachability.pyx":688
 *         self.c_reach.parNames = other.c_reach.parNames
 *         self.c_reach.parRanges = other.c_reach.parRanges
 *         self.c_reach.TI_Par_Tab = other.c_reach.TI_Par_Tab             # <<<<<<<<<<<<<<
 *         self.c_reach.TI_Par_Names = other.c_reach.TI_Par_Names
 *         self.c_reach.TV_Par_Tab = other.c_reach.TV_Par_Tab
 */
  __Pyx_TraceLine(688,0,__PYX_ERR(0, 688, __pyx_L1_error))
  __pyx_t_14 = __pyx_v_other->c_reach.TI_Par_Tab;
  __pyx_v_self->c_reach.TI_Par_Tab = __pyx_t_14;

  /* "flowstar/reachability.pyx":689
 *         self.c_reach.parRanges = other.c_reach.parRanges
 *         self.c_reach.TI_Par_Tab = other.c_reach.TI_Par_Tab
 *         self.c_reach.TI_Par_Names = other.c_reach.TI_Par_Names             # <<<<<<<<<<<<<<
 *         self.c_reach.TV_Par_Tab = other.c_reach.TV_Par_Tab
 *         self.c_reach.TV_Par_Names = other.c_reach.TV_Par_Names
 */
  __Pyx_TraceLine(689,0,__PYX_ERR(0, 689, __pyx_L1_error))
  __pyx_t_15 = __pyx_v_other->c_reach.TI_Par_Names;
  __pyx_v_self->c_reach.TI_Par_Names = __pyx_t_15;

  /* "flowstar/reachability.pyx":690
 *         self.c_reach.TI_Par_Tab = other.c_reach.TI_Par_Tab
 *         self.c_reach.TI_Par_Names = other.c_reach.TI_Par_Names
 *         self.c_reach.TV_Par_Tab = other.c_reach.TV_Par_Tab             # <<<<<<<<<<<<<<
 *         self.c_reach.TV_Par_Names = other.c_reach.TV_Par_Names
 *         # Run immediately? Do we need a flag for this?
 */
  __Pyx_TraceLine(690,0,__PYX_ERR(0, 690, __pyx_L1_error))
  __pyx_t_14 = __pyx_v_other->c_reach.TV_Par_Tab;
  __pyx_v_self->c_reach.TV_Par_Tab = __pyx_t_14;

  /* "flowstar/reachability.pyx":691
 *         self.c_reach.TI_Par_Names = other.c_reach.TI_Par_Names
 *         self.c_reach.TV_Par_Tab = other.c_reach.TV_Par_Tab
 *         self.c_reach.TV_Par_Names = other.c_reach.TV_Par_Names             # <<<<<<<<<<<<<<
 *         # Run immediately? Do we need a flag for this?
 *         self.run()
 */
  __Pyx_TraceLine(691,0,__PYX_ERR(0, 691, __pyx_L1_error))
  __pyx_t_15 = __pyx_v_other->c_reach.TV_Par_Names;
  __pyx_v_self->c_reach.TV_Par_Names = __pyx_t_15;

  /* "flowstar/reachability.pyx":693
 *         self.c_reach.TV_Par_Names = other.c_reach.TV_Par_Names
 *         # Run immediately? Do we need a flag for this?
 *         self.run()             # <<<<<<<<<<<<<<
 * 
 *     def _init_args(
 */
  __Pyx_TraceLine(693,0,__PYX_ERR(0, 693, __pyx_L1_error))
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_run); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_16 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (__pyx_t_16) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 693, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":643
 *             self._init_args(*args, **kwargs)
 * 
 *     def _init_clone(CReach self, CReach other, initials=None):             # <<<<<<<<<<<<<<
 *         cdef Interval zero_int
 *         cdef vector[Flowpipe] initials_fpvect
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("flowstar.reachability.CReach._init_clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_initial);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":695
 *         self.run()
 * 
 *     def _init_args(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_5_init_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_5_init_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_odes = 0;
  PyObject *__pyx_v_initials = 0;
  PyObject *__pyx_v_time = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_precondition = 0;
  PyObject *__pyx_v_order = 0;
  PyObject *__pyx_v_orders = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_integrationScheme = 0;
  PyObject *__pyx_v_cutoff_threshold = 0;
  PyObject *__pyx_v_estimation = 0;
  PyObject *__pyx_v_max_remainder_queue = 0;
  PyObject *__pyx_v_maxNumSteps = 0;
  PyObject *__pyx_v_vars = 0;
  PyObject *__pyx_v_run = 0;
  PyObject *__pyx_v_symbolic_composition = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_args (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_odes,&__pyx_n_s_initials,&__pyx_n_s_time,&__pyx_n_s_step,&__pyx_n_s_precondition,&__pyx_n_s_order,&__pyx_n_s_orders,&__pyx_n_s_verbose,&__pyx_n_s_integrationScheme,&__pyx_n_s_cutoff_threshold,&__pyx_n_s_estimation,&__pyx_n_s_max_remainder_queue,&__pyx_n_s_maxNumSteps,&__pyx_n_s_vars,&__pyx_n_s_run,&__pyx_n_s_symbolic_composition,0};
    PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_float_0_01);
    values[4] = ((PyObject *)__pyx_int_0);
    values[5] = ((PyObject *)__pyx_int_2);

    /* "flowstar/reachability.pyx":703
 *         precondition=0,
 *         order=2,
 *         orders=None,             # <<<<<<<<<<<<<<
 *         verbose=True,
 *         integrationScheme=2,
 */
    values[6] = ((PyObject *)Py_None);

    /* "flowstar/reachability.pyx":704
 *         order=2,
 *         orders=None,
 *         verbose=True,             # <<<<<<<<<<<<<<
 *         integrationScheme=2,
 *         cutoff_threshold=1e-7,
 */
    values[7] = ((PyObject *)Py_True);
    values[8] = ((PyObject *)__pyx_int_2);
    values[9] = ((PyObject *)__pyx_float_1eneg_7);
    values[10] = ((PyObject *)__pyx_float_1eneg_3);
    values[11] = ((PyObject *)__pyx_int_200);
    values[12] = ((PyObject *)__pyx_int_100);

    /* "flowstar/reachability.pyx":710
 *         max_remainder_queue=200,
 *         maxNumSteps=100,
 *         vars=None,             # <<<<<<<<<<<<<<
 *         run=True,
 *         symbolic_composition=False,
 */
    values[13] = ((PyObject *)Py_None);

    /* "flowstar/reachability.pyx":711
 *         maxNumSteps=100,
 *         vars=None,
 *         run=True,             # <<<<<<<<<<<<<<
 *         symbolic_composition=False,
 *         **kwargs):
 */
    values[14] = ((PyObject *)Py_True);

    /* "flowstar/reachability.pyx":712
 *         vars=None,
 *         run=True,
 *         symbolic_composition=False,             # <<<<<<<<<<<<<<
 *         **kwargs):
 *         cdef ContinuousReachability * C = &self.c_reach
 */
    values[15] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_odes)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_args", 0, 3, 16, 1); __PYX_ERR(0, 695, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_args", 0, 3, 16, 2); __PYX_ERR(0, 695, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_precondition);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orders);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_integrationScheme);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cutoff_threshold);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_estimation);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_remainder_queue);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxNumSteps);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vars);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_run);
          if (value) { values[14] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_symbolic_composition);
          if (value) { values[15] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "_init_args") < 0)) __PYX_ERR(0, 695, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_odes = values[0];
    __pyx_v_initials = values[1];
    __pyx_v_time = values[2];
    __pyx_v_step = values[3];
    __pyx_v_precondition = values[4];
    __pyx_v_order = values[5];
    __pyx_v_orders = values[6];
    __pyx_v_verbose = values[7];
    __pyx_v_integrationScheme = values[8];
    __pyx_v_cutoff_threshold = values[9];
    __pyx_v_estimation = values[10];
    __pyx_v_max_remainder_queue = values[11];
    __pyx_v_maxNumSteps = values[12];
    __pyx_v_vars = values[13];
    __pyx_v_run = values[14];
    __pyx_v_symbolic_composition = values[15];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_args", 0, 3, 16, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 695, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("flowstar.reachability.CReach._init_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_4_init_args(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), __pyx_v_odes, __pyx_v_initials, __pyx_v_time, __pyx_v_step, __pyx_v_precondition, __pyx_v_order, __pyx_v_orders, __pyx_v_verbose, __pyx_v_integrationScheme, __pyx_v_cutoff_threshold, __pyx_v_estimation, __pyx_v_max_remainder_queue, __pyx_v_maxNumSteps, __pyx_v_vars, __pyx_v_run, __pyx_v_symbolic_composition, __pyx_v_kwargs);

  /* "flowstar/reachability.pyx":695
 *         self.run()
 * 
 *     def _init_args(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8flowstar_12reachability_6CReach_10_init_args_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "flowstar/reachability.pyx":770
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10_init_args_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *)__pyx_tp_new_8flowstar_12reachability___pyx_scope_struct_1_genexpr(__pyx_ptype_8flowstar_12reachability___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 770, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8flowstar_12reachability_6CReach_10_init_args_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init_args_locals_genexpr, __pyx_n_s_flowstar_reachability); if (unlikely(!gen)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach._init_args.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8flowstar_12reachability_6CReach_10_init_args_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 770, 0, __PYX_ERR(0, 770, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 770, __pyx_L1_error)

  /* "flowstar/reachability.pyx":771
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)             # <<<<<<<<<<<<<<
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)
 */
  __Pyx_TraceLine(771,0,__PYX_ERR(0, 771, __pyx_L1_error))
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) { __Pyx_RaiseClosureNameError("orders"); __PYX_ERR(0, 771, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 771, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 771, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 771, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 771, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 771, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 771, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "flowstar/reachability.pyx":770
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */
    __Pyx_TraceLine(770,0,__PYX_ERR(0, 770, __pyx_L1_error))
    __pyx_t_5 = PyTuple_Check(__pyx_cur_scope->__pyx_v_order); 
    if ((__pyx_t_5 != 0)) {
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_order, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order);
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_order;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 770, __pyx_L1_error)

    /* "flowstar/reachability.pyx":771
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)             # <<<<<<<<<<<<<<
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)
 */
    __Pyx_TraceLine(771,0,__PYX_ERR(0, 771, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "flowstar/reachability.pyx":770
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8flowstar_12reachability_6CReach_10_init_args_5generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "flowstar/reachability.pyx":772
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10_init_args_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *)__pyx_tp_new_8flowstar_12reachability___pyx_scope_struct_2_genexpr(__pyx_ptype_8flowstar_12reachability___pyx_scope_struct_2_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 772, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8flowstar_12reachability_6CReach_10_init_args_5generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init_args_locals_genexpr, __pyx_n_s_flowstar_reachability); if (unlikely(!gen)) __PYX_ERR(0, 772, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach._init_args.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8flowstar_12reachability_6CReach_10_init_args_5generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 772, 0, __PYX_ERR(0, 772, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 772, __pyx_L1_error)

  /* "flowstar/reachability.pyx":773
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)             # <<<<<<<<<<<<<<
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 */
  __Pyx_TraceLine(773,0,__PYX_ERR(0, 773, __pyx_L1_error))
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) { __Pyx_RaiseClosureNameError("orders"); __PYX_ERR(0, 773, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 773, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 773, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 773, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 773, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 773, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "flowstar/reachability.pyx":772
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */
    __Pyx_TraceLine(772,0,__PYX_ERR(0, 772, __pyx_L1_error))
    __pyx_t_5 = PyTuple_Check(__pyx_cur_scope->__pyx_v_order); 
    if ((__pyx_t_5 != 0)) {
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_order, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order);
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_order;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 772, __pyx_L1_error)

    /* "flowstar/reachability.pyx":773
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)             # <<<<<<<<<<<<<<
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 */
    __Pyx_TraceLine(773,0,__PYX_ERR(0, 773, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "flowstar/reachability.pyx":772
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":695
 *         self.run()
 * 
 *     def _init_args(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_4_init_args(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_odes, PyObject *__pyx_v_initials, PyObject *__pyx_v_time, PyObject *__pyx_v_step, PyObject *__pyx_v_precondition, PyObject *__pyx_v_order, PyObject *__pyx_v_orders, PyObject *__pyx_v_verbose, PyObject *__pyx_v_integrationScheme, PyObject *__pyx_v_cutoff_threshold, PyObject *__pyx_v_estimation, PyObject *__pyx_v_max_remainder_queue, PyObject *__pyx_v_maxNumSteps, PyObject *__pyx_v_vars, PyObject *__pyx_v_run, PyObject *__pyx_v_symbolic_composition, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *__pyx_cur_scope;
  flowstar::ContinuousReachability *__pyx_v_C;
  std::vector<flowstar::TaylorModel>  __pyx_v_odes_tms;
  PyObject *__pyx_v_ode = NULL;
  flowstar::TaylorModelVec __pyx_v_odes_tmv;
  PyObject *__pyx_v_initial = NULL;
  flowstar::Interval __pyx_v_zero_int;
  std::vector<flowstar::Flowpipe>  __pyx_v_initials_fpvect;
  PyObject *__pyx_v_step_lo = NULL;
  PyObject *__pyx_v_step_hi = NULL;
  PyObject *__pyx_v_order_lo = NULL;
  PyObject *__pyx_v_order_hi = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  double __pyx_t_15;
  bool __pyx_t_16;
  int __pyx_t_17;
  double __pyx_t_18;
  std::string __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("_init_args", 0);
  __pyx_cur_scope = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *)__pyx_tp_new_8flowstar_12reachability___pyx_scope_struct___init_args(__pyx_ptype_8flowstar_12reachability___pyx_scope_struct___init_args, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 695, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("_init_args", __pyx_f[0], 695, 0, __PYX_ERR(0, 695, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_orders = __pyx_v_orders;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_orders);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_orders);
  __Pyx_INCREF(__pyx_v_order);
  __Pyx_INCREF(__pyx_v_vars);

  /* "flowstar/reachability.pyx":714
 *         symbolic_composition=False,
 *         **kwargs):
 *         cdef ContinuousReachability * C = &self.c_reach             # <<<<<<<<<<<<<<
 *         self.ran = False
 *         self.prepared = False
 */
  __Pyx_TraceLine(714,0,__PYX_ERR(0, 714, __pyx_L1_error))
  __pyx_v_C = (&__pyx_v_self->c_reach);

  /* "flowstar/reachability.pyx":715
 *         **kwargs):
 *         cdef ContinuousReachability * C = &self.c_reach
 *         self.ran = False             # <<<<<<<<<<<<<<
 *         self.prepared = False
 *         self.result = 0
 */
  __Pyx_TraceLine(715,0,__PYX_ERR(0, 715, __pyx_L1_error))
  __pyx_v_self->ran = 0;

  /* "flowstar/reachability.pyx":716
 *         cdef ContinuousReachability * C = &self.c_reach
 *         self.ran = False
 *         self.prepared = False             # <<<<<<<<<<<<<<
 *         self.result = 0
 *         self.symbolic_composition = symbolic_composition
 */
  __Pyx_TraceLine(716,0,__PYX_ERR(0, 716, __pyx_L1_error))
  __pyx_v_self->prepared = 0;

  /* "flowstar/reachability.pyx":717
 *         self.ran = False
 *         self.prepared = False
 *         self.result = 0             # <<<<<<<<<<<<<<
 *         self.symbolic_composition = symbolic_composition
 * 
 */
  __Pyx_TraceLine(717,0,__PYX_ERR(0, 717, __pyx_L1_error))
  __pyx_v_self->result = 0;

  /* "flowstar/reachability.pyx":718
 *         self.prepared = False
 *         self.result = 0
 *         self.symbolic_composition = symbolic_composition             # <<<<<<<<<<<<<<
 * 
 *         # Create global variable manager
 */
  __Pyx_TraceLine(718,0,__PYX_ERR(0, 718, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_symbolic_composition); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 718, __pyx_L1_error)
  __pyx_v_self->symbolic_composition = __pyx_t_1;

  /* "flowstar/reachability.pyx":721
 * 
 *         # Create global variable manager
 *         self.global_manager = FlowstarGlobalManager()             # <<<<<<<<<<<<<<
 * 
 *         # --- Creating the continuous system ---
 */
  __Pyx_TraceLine(721,0,__PYX_ERR(0, 721, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->global_manager);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->global_manager));
  __pyx_v_self->global_manager = ((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":724
 * 
 *         # --- Creating the continuous system ---
 *         assert len(odes) == len(initials)             # <<<<<<<<<<<<<<
 *         assert len(odes) > 0
 * 
 */
  __Pyx_TraceLine(724,0,__PYX_ERR(0, 724, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = PyObject_Length(__pyx_v_odes); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 724, __pyx_L1_error)
    __pyx_t_4 = PyObject_Length(__pyx_v_initials); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 724, __pyx_L1_error)
    if (unlikely(!((__pyx_t_3 == __pyx_t_4) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 724, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/reachability.pyx":725
 *         # --- Creating the continuous system ---
 *         assert len(odes) == len(initials)
 *         assert len(odes) > 0             # <<<<<<<<<<<<<<
 * 
 *         if vars is None:
 */
  __Pyx_TraceLine(725,0,__PYX_ERR(0, 725, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = PyObject_Length(__pyx_v_odes); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 725, __pyx_L1_error)
    if (unlikely(!((__pyx_t_4 > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 725, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/reachability.pyx":727
 *         assert len(odes) > 0
 * 
 *         if vars is None:             # <<<<<<<<<<<<<<
 *             vars = [str(x) for x in odes[0].parent().gens()]
 * 
 */
  __Pyx_TraceLine(727,0,__PYX_ERR(0, 727, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_vars == Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "flowstar/reachability.pyx":728
 * 
 *         if vars is None:
 *             vars = [str(x) for x in odes[0].parent().gens()]             # <<<<<<<<<<<<<<
 * 
 *         assert len(vars) == len(odes)
 */
    __Pyx_TraceLine(728,0,__PYX_ERR(0, 728, __pyx_L1_error))
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_odes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_parent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 728, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_gens); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 728, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_9 = __pyx_t_6; __Pyx_INCREF(__pyx_t_9); __pyx_t_4 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 728, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 728, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_9, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 728, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 728, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_9, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 728, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_10(__pyx_t_9);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 728, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_vars, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "flowstar/reachability.pyx":727
 *         assert len(odes) > 0
 * 
 *         if vars is None:             # <<<<<<<<<<<<<<
 *             vars = [str(x) for x in odes[0].parent().gens()]
 * 
 */
  }

  /* "flowstar/reachability.pyx":730
 *             vars = [str(x) for x in odes[0].parent().gens()]
 * 
 *         assert len(vars) == len(odes)             # <<<<<<<<<<<<<<
 * 
 *         # Create Taylor Models for polynomials
 */
  __Pyx_TraceLine(730,0,__PYX_ERR(0, 730, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = PyObject_Length(__pyx_v_vars); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 730, __pyx_L1_error)
    __pyx_t_3 = PyObject_Length(__pyx_v_odes); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 730, __pyx_L1_error)
    if (unlikely(!((__pyx_t_4 == __pyx_t_3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 730, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/reachability.pyx":734
 *         # Create Taylor Models for polynomials
 *         cdef vector[TaylorModel] odes_tms
 *         for ode in odes:             # <<<<<<<<<<<<<<
 *             odes_tms.push_back(TaylorModel(Poly(ode).c_poly))
 * 
 */
  __Pyx_TraceLine(734,0,__PYX_ERR(0, 734, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_odes)) || PyTuple_CheckExact(__pyx_v_odes)) {
    __pyx_t_2 = __pyx_v_odes; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_odes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 734, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_9); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 734, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 734, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_9); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 734, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 734, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_10(__pyx_t_2);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 734, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_ode, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "flowstar/reachability.pyx":735
 *         cdef vector[TaylorModel] odes_tms
 *         for ode in odes:
 *             odes_tms.push_back(TaylorModel(Poly(ode).c_poly))             # <<<<<<<<<<<<<<
 * 
 *         cdef TaylorModelVec odes_tmv = TaylorModelVec(odes_tms)
 */
    __Pyx_TraceLine(735,0,__PYX_ERR(0, 735, __pyx_L1_error))
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8flowstar_4poly_Poly), __pyx_v_ode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    try {
      __pyx_v_odes_tms.push_back(flowstar::TaylorModel(((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_9)->c_poly));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 735, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "flowstar/reachability.pyx":734
 *         # Create Taylor Models for polynomials
 *         cdef vector[TaylorModel] odes_tms
 *         for ode in odes:             # <<<<<<<<<<<<<<
 *             odes_tms.push_back(TaylorModel(Poly(ode).c_poly))
 * 
 */
    __Pyx_TraceLine(734,0,__PYX_ERR(0, 734, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":737
 *             odes_tms.push_back(TaylorModel(Poly(ode).c_poly))
 * 
 *         cdef TaylorModelVec odes_tmv = TaylorModelVec(odes_tms)             # <<<<<<<<<<<<<<
 * 
 *         # Create initial conditions
 */
  __Pyx_TraceLine(737,0,__PYX_ERR(0, 737, __pyx_L1_error))
  __pyx_v_odes_tmv = flowstar::TaylorModelVec(__pyx_v_odes_tms);

  /* "flowstar/reachability.pyx":741
 *         # Create initial conditions
 *         # cdef vector[Interval] initials_vect
 *         for initial in initials:             # <<<<<<<<<<<<<<
 *             self.initials.push_back(interval.make_interval(initial))
 * 
 */
  __Pyx_TraceLine(741,0,__PYX_ERR(0, 741, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_initials)) || PyTuple_CheckExact(__pyx_v_initials)) {
    __pyx_t_2 = __pyx_v_initials; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_initials); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 741, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_9); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 741, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_9); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 741, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_10(__pyx_t_2);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 741, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_initial, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "flowstar/reachability.pyx":742
 *         # cdef vector[Interval] initials_vect
 *         for initial in initials:
 *             self.initials.push_back(interval.make_interval(initial))             # <<<<<<<<<<<<<<
 * 
 *         cdef Interval zero_int
 */
    __Pyx_TraceLine(742,0,__PYX_ERR(0, 742, __pyx_L1_error))
    try {
      __pyx_v_self->initials.push_back(__pyx_f_8flowstar_8interval_make_interval(__pyx_v_initial));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 742, __pyx_L1_error)
    }

    /* "flowstar/reachability.pyx":741
 *         # Create initial conditions
 *         # cdef vector[Interval] initials_vect
 *         for initial in initials:             # <<<<<<<<<<<<<<
 *             self.initials.push_back(interval.make_interval(initial))
 * 
 */
    __Pyx_TraceLine(741,0,__PYX_ERR(0, 741, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":746
 *         cdef Interval zero_int
 *         cdef vector[Flowpipe] initials_fpvect
 *         initials_fpvect.push_back(Flowpipe(self.initials, zero_int))             # <<<<<<<<<<<<<<
 * 
 *         # Create system object
 */
  __Pyx_TraceLine(746,0,__PYX_ERR(0, 746, __pyx_L1_error))
  try {
    __pyx_v_initials_fpvect.push_back(flowstar::Flowpipe(__pyx_v_self->initials, __pyx_v_zero_int));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 746, __pyx_L1_error)
  }

  /* "flowstar/reachability.pyx":749
 * 
 *         # Create system object
 *         C.system = ContinuousSystem(odes_tmv, initials_fpvect)             # <<<<<<<<<<<<<<
 * 
 *         # === Set properties ===
 */
  __Pyx_TraceLine(749,0,__PYX_ERR(0, 749, __pyx_L1_error))
  __pyx_v_C->system = flowstar::ContinuousSystem(__pyx_v_odes_tmv, __pyx_v_initials_fpvect);

  /* "flowstar/reachability.pyx":754
 * 
 *         # --- Steps
 *         try:             # <<<<<<<<<<<<<<
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True
 */
  __Pyx_TraceLine(754,0,__PYX_ERR(0, 754, __pyx_L10_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_13);
    /*try:*/ {

      /* "flowstar/reachability.pyx":755
 *         # --- Steps
 *         try:
 *             (step_lo, step_hi) = step             # <<<<<<<<<<<<<<
 *             C.bAdaptiveSteps = True
 *         except:
 */
      __Pyx_TraceLine(755,0,__PYX_ERR(0, 755, __pyx_L10_error))
      if ((likely(PyTuple_CheckExact(__pyx_v_step))) || (PyList_CheckExact(__pyx_v_step))) {
        PyObject* sequence = __pyx_v_step;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 755, __pyx_L10_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 755, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_v_step); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 755, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_14 = Py_TYPE(__pyx_t_6)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_14(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L16_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_9 = __pyx_t_14(__pyx_t_6); if (unlikely(!__pyx_t_9)) goto __pyx_L16_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_6), 2) < 0) __PYX_ERR(0, 755, __pyx_L10_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L17_unpacking_done;
        __pyx_L16_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 755, __pyx_L10_error)
        __pyx_L17_unpacking_done:;
      }
      __pyx_v_step_lo = __pyx_t_2;
      __pyx_t_2 = 0;
      __pyx_v_step_hi = __pyx_t_9;
      __pyx_t_9 = 0;

      /* "flowstar/reachability.pyx":756
 *         try:
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True             # <<<<<<<<<<<<<<
 *         except:
 *             step_lo = step_hi = step
 */
      __Pyx_TraceLine(756,0,__PYX_ERR(0, 756, __pyx_L10_error))
      __pyx_v_C->bAdaptiveSteps = 1;

      /* "flowstar/reachability.pyx":754
 * 
 *         # --- Steps
 *         try:             # <<<<<<<<<<<<<<
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True
 */
    }
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    goto __pyx_L15_try_end;
    __pyx_L10_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "flowstar/reachability.pyx":757
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True
 *         except:             # <<<<<<<<<<<<<<
 *             step_lo = step_hi = step
 *             C.bAdaptiveSteps = False
 */
    __Pyx_TraceLine(757,0,__PYX_ERR(0, 757, __pyx_L12_except_error))
    /*except:*/ {
      __Pyx_AddTraceback("flowstar.reachability.CReach._init_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_2, &__pyx_t_6) < 0) __PYX_ERR(0, 757, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_6);

      /* "flowstar/reachability.pyx":758
 *             C.bAdaptiveSteps = True
 *         except:
 *             step_lo = step_hi = step             # <<<<<<<<<<<<<<
 *             C.bAdaptiveSteps = False
 *         C.miniStep = <double>step_lo
 */
      __Pyx_TraceLine(758,0,__PYX_ERR(0, 758, __pyx_L12_except_error))
      __Pyx_INCREF(__pyx_v_step);
      __Pyx_XDECREF_SET(__pyx_v_step_lo, __pyx_v_step);
      __Pyx_INCREF(__pyx_v_step);
      __Pyx_XDECREF_SET(__pyx_v_step_hi, __pyx_v_step);

      /* "flowstar/reachability.pyx":759
 *         except:
 *             step_lo = step_hi = step
 *             C.bAdaptiveSteps = False             # <<<<<<<<<<<<<<
 *         C.miniStep = <double>step_lo
 *         C.step = <double>step_hi
 */
      __Pyx_TraceLine(759,0,__PYX_ERR(0, 759, __pyx_L12_except_error))
      __pyx_v_C->bAdaptiveSteps = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L11_exception_handled;
    }
    __pyx_L12_except_error:;

    /* "flowstar/reachability.pyx":754
 * 
 *         # --- Steps
 *         try:             # <<<<<<<<<<<<<<
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True
 */
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    goto __pyx_L1_error;
    __pyx_L11_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    __pyx_L15_try_end:;
  }

  /* "flowstar/reachability.pyx":760
 *             step_lo = step_hi = step
 *             C.bAdaptiveSteps = False
 *         C.miniStep = <double>step_lo             # <<<<<<<<<<<<<<
 *         C.step = <double>step_hi
 * 
 */
  __Pyx_TraceLine(760,0,__PYX_ERR(0, 760, __pyx_L1_error))
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_step_lo); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L1_error)
  __pyx_v_C->miniStep = ((double)__pyx_t_15);

  /* "flowstar/reachability.pyx":761
 *             C.bAdaptiveSteps = False
 *         C.miniStep = <double>step_lo
 *         C.step = <double>step_hi             # <<<<<<<<<<<<<<
 * 
 *         # --- Orders
 */
  __Pyx_TraceLine(761,0,__PYX_ERR(0, 761, __pyx_L1_error))
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_step_hi); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L1_error)
  __pyx_v_C->step = ((double)__pyx_t_15);

  /* "flowstar/reachability.pyx":765
 *         # --- Orders
 *         # The orders and order kwargs are mutually exclusive
 *         if orders is None:             # <<<<<<<<<<<<<<
 *             orders = [order if isinstance(order, tuple) else (order, order)]
 *             C.orderType = 0
 */
  __Pyx_TraceLine(765,0,__PYX_ERR(0, 765, __pyx_L1_error))
  __pyx_t_5 = (__pyx_cur_scope->__pyx_v_orders == Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":766
 *         # The orders and order kwargs are mutually exclusive
 *         if orders is None:
 *             orders = [order if isinstance(order, tuple) else (order, order)]             # <<<<<<<<<<<<<<
 *             C.orderType = 0
 *         else:
 */
    __Pyx_TraceLine(766,0,__PYX_ERR(0, 766, __pyx_L1_error))
    __pyx_t_1 = PyTuple_Check(__pyx_v_order); 
    if ((__pyx_t_1 != 0)) {
      __Pyx_INCREF(__pyx_v_order);
      __pyx_t_6 = __pyx_v_order;
    } else {
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_order);
      __Pyx_GIVEREF(__pyx_v_order);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_order);
      __Pyx_INCREF(__pyx_v_order);
      __Pyx_GIVEREF(__pyx_v_order);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_order);
      __pyx_t_6 = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_orders);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_orders, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "flowstar/reachability.pyx":767
 *         if orders is None:
 *             orders = [order if isinstance(order, tuple) else (order, order)]
 *             C.orderType = 0             # <<<<<<<<<<<<<<
 *         else:
 *             C.orderType = 1
 */
    __Pyx_TraceLine(767,0,__PYX_ERR(0, 767, __pyx_L1_error))
    __pyx_v_C->orderType = 0;

    /* "flowstar/reachability.pyx":765
 *         # --- Orders
 *         # The orders and order kwargs are mutually exclusive
 *         if orders is None:             # <<<<<<<<<<<<<<
 *             orders = [order if isinstance(order, tuple) else (order, order)]
 *             C.orderType = 0
 */
    goto __pyx_L20;
  }

  /* "flowstar/reachability.pyx":769
 *             C.orderType = 0
 *         else:
 *             C.orderType = 1             # <<<<<<<<<<<<<<
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 */
  __Pyx_TraceLine(769,0,__PYX_ERR(0, 769, __pyx_L1_error))
  /*else*/ {
    __pyx_v_C->orderType = 1;
  }
  __pyx_L20:;

  /* "flowstar/reachability.pyx":770
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */
  __Pyx_TraceLine(770,0,__PYX_ERR(0, 770, __pyx_L1_error))
  __pyx_t_2 = __pyx_pf_8flowstar_12reachability_6CReach_10_init_args_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_order_lo = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "flowstar/reachability.pyx":772
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */
  __Pyx_TraceLine(772,0,__PYX_ERR(0, 772, __pyx_L1_error))
  __pyx_t_6 = __pyx_pf_8flowstar_12reachability_6CReach_10_init_args_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_order_hi = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":774
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi             # <<<<<<<<<<<<<<
 *         for order in orders:
 *             try:
 */
  __Pyx_TraceLine(774,0,__PYX_ERR(0, 774, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_order_lo, __pyx_v_order_hi, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_16 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 774, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_C->bAdaptiveOrders = __pyx_t_16;

  /* "flowstar/reachability.pyx":775
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:             # <<<<<<<<<<<<<<
 *             try:
 *                 (order_lo, order_hi) = order
 */
  __Pyx_TraceLine(775,0,__PYX_ERR(0, 775, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_orders)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 775, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 775, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 775, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_10(__pyx_t_2);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 775, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_DECREF_SET(__pyx_v_order, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "flowstar/reachability.pyx":776
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 *             try:             # <<<<<<<<<<<<<<
 *                 (order_lo, order_hi) = order
 *             except:
 */
    __Pyx_TraceLine(776,0,__PYX_ERR(0, 776, __pyx_L23_error))
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "flowstar/reachability.pyx":777
 *         for order in orders:
 *             try:
 *                 (order_lo, order_hi) = order             # <<<<<<<<<<<<<<
 *             except:
 *                 order_lo = order_hi = order
 */
        __Pyx_TraceLine(777,0,__PYX_ERR(0, 777, __pyx_L23_error))
        if ((likely(PyTuple_CheckExact(__pyx_v_order))) || (PyList_CheckExact(__pyx_v_order))) {
          PyObject* sequence = __pyx_v_order;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 777, __pyx_L23_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          #else
          __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 777, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 777, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          Py_ssize_t index = -1;
          __pyx_t_7 = PyObject_GetIter(__pyx_v_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 777, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_14 = Py_TYPE(__pyx_t_7)->tp_iternext;
          index = 0; __pyx_t_6 = __pyx_t_14(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L31_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_6);
          index = 1; __pyx_t_9 = __pyx_t_14(__pyx_t_7); if (unlikely(!__pyx_t_9)) goto __pyx_L31_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_9);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_7), 2) < 0) __PYX_ERR(0, 777, __pyx_L23_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L32_unpacking_done;
          __pyx_L31_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 777, __pyx_L23_error)
          __pyx_L32_unpacking_done:;
        }
        __Pyx_DECREF_SET(__pyx_v_order_lo, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_order_hi, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "flowstar/reachability.pyx":776
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 *             try:             # <<<<<<<<<<<<<<
 *                 (order_lo, order_hi) = order
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L30_try_end;
      __pyx_L23_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "flowstar/reachability.pyx":778
 *             try:
 *                 (order_lo, order_hi) = order
 *             except:             # <<<<<<<<<<<<<<
 *                 order_lo = order_hi = order
 *             C.orders.push_back(order_lo)
 */
      __Pyx_TraceLine(778,0,__PYX_ERR(0, 778, __pyx_L25_except_error))
      /*except:*/ {
        __Pyx_AddTraceback("flowstar.reachability.CReach._init_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 778, __pyx_L25_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);

        /* "flowstar/reachability.pyx":779
 *                 (order_lo, order_hi) = order
 *             except:
 *                 order_lo = order_hi = order             # <<<<<<<<<<<<<<
 *             C.orders.push_back(order_lo)
 *             C.maxOrders.push_back(order_hi)
 */
        __Pyx_TraceLine(779,0,__PYX_ERR(0, 779, __pyx_L25_except_error))
        __Pyx_INCREF(__pyx_v_order);
        __Pyx_DECREF_SET(__pyx_v_order_lo, __pyx_v_order);
        __Pyx_INCREF(__pyx_v_order);
        __Pyx_DECREF_SET(__pyx_v_order_hi, __pyx_v_order);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L24_exception_handled;
      }
      __pyx_L25_except_error:;

      /* "flowstar/reachability.pyx":776
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 *             try:             # <<<<<<<<<<<<<<
 *                 (order_lo, order_hi) = order
 *             except:
 */
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L24_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      __pyx_L30_try_end:;
    }

    /* "flowstar/reachability.pyx":780
 *             except:
 *                 order_lo = order_hi = order
 *             C.orders.push_back(order_lo)             # <<<<<<<<<<<<<<
 *             C.maxOrders.push_back(order_hi)
 *         C.globalMaxOrder = order_hi
 */
    __Pyx_TraceLine(780,0,__PYX_ERR(0, 780, __pyx_L1_error))
    __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_order_lo); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 780, __pyx_L1_error)
    try {
      __pyx_v_C->orders.push_back(__pyx_t_17);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 780, __pyx_L1_error)
    }

    /* "flowstar/reachability.pyx":781
 *                 order_lo = order_hi = order
 *             C.orders.push_back(order_lo)
 *             C.maxOrders.push_back(order_hi)             # <<<<<<<<<<<<<<
 *         C.globalMaxOrder = order_hi
 * 
 */
    __Pyx_TraceLine(781,0,__PYX_ERR(0, 781, __pyx_L1_error))
    __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_order_hi); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 781, __pyx_L1_error)
    try {
      __pyx_v_C->maxOrders.push_back(__pyx_t_17);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 781, __pyx_L1_error)
    }

    /* "flowstar/reachability.pyx":775
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:             # <<<<<<<<<<<<<<
 *             try:
 *                 (order_lo, order_hi) = order
 */
    __Pyx_TraceLine(775,0,__PYX_ERR(0, 775, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":782
 *             C.orders.push_back(order_lo)
 *             C.maxOrders.push_back(order_hi)
 *         C.globalMaxOrder = order_hi             # <<<<<<<<<<<<<<
 * 
 *         # --- The rest
 */
  __Pyx_TraceLine(782,0,__PYX_ERR(0, 782, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_order_hi); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 782, __pyx_L1_error)
  __pyx_v_C->globalMaxOrder = __pyx_t_17;

  /* "flowstar/reachability.pyx":785
 * 
 *         # --- The rest
 *         C.time = <double>time             # <<<<<<<<<<<<<<
 *         C.precondition = precondition
 *         C.plotSetting = 1  # We have to set this to something, but should be
 */
  __Pyx_TraceLine(785,0,__PYX_ERR(0, 785, __pyx_L1_error))
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_time); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L1_error)
  __pyx_v_C->time = ((double)__pyx_t_15);

  /* "flowstar/reachability.pyx":786
 *         # --- The rest
 *         C.time = <double>time
 *         C.precondition = precondition             # <<<<<<<<<<<<<<
 *         C.plotSetting = 1  # We have to set this to something, but should be
 *         # set by plot method
 */
  __Pyx_TraceLine(786,0,__PYX_ERR(0, 786, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_precondition); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L1_error)
  __pyx_v_C->precondition = __pyx_t_17;

  /* "flowstar/reachability.pyx":787
 *         C.time = <double>time
 *         C.precondition = precondition
 *         C.plotSetting = 1  # We have to set this to something, but should be             # <<<<<<<<<<<<<<
 *         # set by plot method
 *         C.bPrint = verbose
 */
  __Pyx_TraceLine(787,0,__PYX_ERR(0, 787, __pyx_L1_error))
  __pyx_v_C->plotSetting = 1;

  /* "flowstar/reachability.pyx":789
 *         C.plotSetting = 1  # We have to set this to something, but should be
 *         # set by plot method
 *         C.bPrint = verbose             # <<<<<<<<<<<<<<
 *         C.bSafetyChecking = False
 *         C.bPlot = True
 */
  __Pyx_TraceLine(789,0,__PYX_ERR(0, 789, __pyx_L1_error))
  __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_16 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 789, __pyx_L1_error)
  __pyx_v_C->bPrint = __pyx_t_16;

  /* "flowstar/reachability.pyx":790
 *         # set by plot method
 *         C.bPrint = verbose
 *         C.bSafetyChecking = False             # <<<<<<<<<<<<<<
 *         C.bPlot = True
 *         C.bDump = False
 */
  __Pyx_TraceLine(790,0,__PYX_ERR(0, 790, __pyx_L1_error))
  __pyx_v_C->bSafetyChecking = 0;

  /* "flowstar/reachability.pyx":791
 *         C.bPrint = verbose
 *         C.bSafetyChecking = False
 *         C.bPlot = True             # <<<<<<<<<<<<<<
 *         C.bDump = False
 *         C.integrationScheme = integrationScheme
 */
  __Pyx_TraceLine(791,0,__PYX_ERR(0, 791, __pyx_L1_error))
  __pyx_v_C->bPlot = 1;

  /* "flowstar/reachability.pyx":792
 *         C.bSafetyChecking = False
 *         C.bPlot = True
 *         C.bDump = False             # <<<<<<<<<<<<<<
 *         C.integrationScheme = integrationScheme
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 */
  __Pyx_TraceLine(792,0,__PYX_ERR(0, 792, __pyx_L1_error))
  __pyx_v_C->bDump = 0;

  /* "flowstar/reachability.pyx":793
 *         C.bPlot = True
 *         C.bDump = False
 *         C.integrationScheme = integrationScheme             # <<<<<<<<<<<<<<
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 *         for _ in odes:
 */
  __Pyx_TraceLine(793,0,__PYX_ERR(0, 793, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_integrationScheme); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 793, __pyx_L1_error)
  __pyx_v_C->integrationScheme = __pyx_t_17;

  /* "flowstar/reachability.pyx":794
 *         C.bDump = False
 *         C.integrationScheme = integrationScheme
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)             # <<<<<<<<<<<<<<
 *         for _ in odes:
 *             C.estimation.push_back(Interval(-estimation,estimation))
 */
  __Pyx_TraceLine(794,0,__PYX_ERR(0, 794, __pyx_L1_error))
  __pyx_t_2 = PyNumber_Negative(__pyx_v_cutoff_threshold); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_v_cutoff_threshold); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 794, __pyx_L1_error)
  __pyx_v_C->cutoff_threshold = flowstar::Interval(__pyx_t_15, __pyx_t_18);

  /* "flowstar/reachability.pyx":795
 *         C.integrationScheme = integrationScheme
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 *         for _ in odes:             # <<<<<<<<<<<<<<
 *             C.estimation.push_back(Interval(-estimation,estimation))
 *         C.maxNumSteps = maxNumSteps
 */
  __Pyx_TraceLine(795,0,__PYX_ERR(0, 795, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_odes)) || PyTuple_CheckExact(__pyx_v_odes)) {
    __pyx_t_2 = __pyx_v_odes; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_odes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 795, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 795, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 795, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 795, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 795, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_10(__pyx_t_2);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 795, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "flowstar/reachability.pyx":796
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 *         for _ in odes:
 *             C.estimation.push_back(Interval(-estimation,estimation))             # <<<<<<<<<<<<<<
 *         C.maxNumSteps = maxNumSteps
 *         C.max_remainder_queue = max_remainder_queue
 */
    __Pyx_TraceLine(796,0,__PYX_ERR(0, 796, __pyx_L1_error))
    __pyx_t_7 = PyNumber_Negative(__pyx_v_estimation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_estimation); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 796, __pyx_L1_error)
    try {
      __pyx_v_C->estimation.push_back(flowstar::Interval(__pyx_t_18, __pyx_t_15));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 796, __pyx_L1_error)
    }

    /* "flowstar/reachability.pyx":795
 *         C.integrationScheme = integrationScheme
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 *         for _ in odes:             # <<<<<<<<<<<<<<
 *             C.estimation.push_back(Interval(-estimation,estimation))
 *         C.maxNumSteps = maxNumSteps
 */
    __Pyx_TraceLine(795,0,__PYX_ERR(0, 795, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":797
 *         for _ in odes:
 *             C.estimation.push_back(Interval(-estimation,estimation))
 *         C.maxNumSteps = maxNumSteps             # <<<<<<<<<<<<<<
 *         C.max_remainder_queue = max_remainder_queue
 * 
 */
  __Pyx_TraceLine(797,0,__PYX_ERR(0, 797, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_maxNumSteps); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 797, __pyx_L1_error)
  __pyx_v_C->maxNumSteps = __pyx_t_17;

  /* "flowstar/reachability.pyx":798
 *             C.estimation.push_back(Interval(-estimation,estimation))
 *         C.maxNumSteps = maxNumSteps
 *         C.max_remainder_queue = max_remainder_queue             # <<<<<<<<<<<<<<
 * 
 *         # Declare state/taylor model variables
 */
  __Pyx_TraceLine(798,0,__PYX_ERR(0, 798, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_max_remainder_queue); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 798, __pyx_L1_error)
  __pyx_v_C->max_remainder_queue = __pyx_t_17;

  /* "flowstar/reachability.pyx":801
 * 
 *         # Declare state/taylor model variables
 *         C.declareTMVar(b"local_t")             # <<<<<<<<<<<<<<
 *         for i, var in enumerate(vars, 1):
 *             C.declareStateVar(<string>var)
 */
  __Pyx_TraceLine(801,0,__PYX_ERR(0, 801, __pyx_L1_error))
  (void)(__pyx_v_C->declareTMVar(__pyx_k_local_t));

  /* "flowstar/reachability.pyx":802
 *         # Declare state/taylor model variables
 *         C.declareTMVar(b"local_t")
 *         for i, var in enumerate(vars, 1):             # <<<<<<<<<<<<<<
 *             C.declareStateVar(<string>var)
 *             assert i == C.getIDForStateVar(<string>var) + 1
 */
  __Pyx_TraceLine(802,0,__PYX_ERR(0, 802, __pyx_L1_error))
  __Pyx_INCREF(__pyx_int_1);
  __pyx_t_2 = __pyx_int_1;
  if (likely(PyList_CheckExact(__pyx_v_vars)) || PyTuple_CheckExact(__pyx_v_vars)) {
    __pyx_t_7 = __pyx_v_vars; __Pyx_INCREF(__pyx_t_7); __pyx_t_3 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_vars); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 802, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 802, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 802, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 802, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 802, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_10(__pyx_t_7);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 802, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "flowstar/reachability.pyx":803
 *         C.declareTMVar(b"local_t")
 *         for i, var in enumerate(vars, 1):
 *             C.declareStateVar(<string>var)             # <<<<<<<<<<<<<<
 *             assert i == C.getIDForStateVar(<string>var) + 1
 *             C.declareTMVar(<string>"local_var_{}".format(i))
 */
    __Pyx_TraceLine(803,0,__PYX_ERR(0, 803, __pyx_L1_error))
    __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_v_var); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L1_error)
    (void)(__pyx_v_C->declareStateVar(((std::string)__pyx_t_19)));

    /* "flowstar/reachability.pyx":804
 *         for i, var in enumerate(vars, 1):
 *             C.declareStateVar(<string>var)
 *             assert i == C.getIDForStateVar(<string>var) + 1             # <<<<<<<<<<<<<<
 *             C.declareTMVar(<string>"local_var_{}".format(i))
 * 
 */
    __Pyx_TraceLine(804,0,__PYX_ERR(0, 804, __pyx_L1_error))
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_v_var); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyInt_From_long((__pyx_v_C->getIDForStateVar(((std::string)__pyx_t_19)) + 1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = PyObject_RichCompare(__pyx_v_i, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 804, __pyx_L1_error)
      }
    }
    #endif

    /* "flowstar/reachability.pyx":805
 *             C.declareStateVar(<string>var)
 *             assert i == C.getIDForStateVar(<string>var) + 1
 *             C.declareTMVar(<string>"local_var_{}".format(i))             # <<<<<<<<<<<<<<
 * 
 *         # Run immediately?
 */
    __Pyx_TraceLine(805,0,__PYX_ERR(0, 805, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_local_var, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 805, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_i};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 805, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_i};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 805, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      {
        __pyx_t_20 = PyTuple_New(1+1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 805, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_20, 0+1, __pyx_v_i);
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_20, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 805, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 805, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    (void)(__pyx_v_C->declareTMVar(((std::string)__pyx_t_19)));

    /* "flowstar/reachability.pyx":802
 *         # Declare state/taylor model variables
 *         C.declareTMVar(b"local_t")
 *         for i, var in enumerate(vars, 1):             # <<<<<<<<<<<<<<
 *             C.declareStateVar(<string>var)
 *             assert i == C.getIDForStateVar(<string>var) + 1
 */
    __Pyx_TraceLine(802,0,__PYX_ERR(0, 802, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":808
 * 
 *         # Run immediately?
 *         if run:             # <<<<<<<<<<<<<<
 *             self.run()
 * 
 */
  __Pyx_TraceLine(808,0,__PYX_ERR(0, 808, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_run); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 808, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":809
 *         # Run immediately?
 *         if run:
 *             self.run()             # <<<<<<<<<<<<<<
 * 
 *     cdef optional[vector[Interval]]\
 */
    __Pyx_TraceLine(809,0,__PYX_ERR(0, 809, __pyx_L1_error))
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_run); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 809, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 809, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "flowstar/reachability.pyx":808
 * 
 *         # Run immediately?
 *         if run:             # <<<<<<<<<<<<<<
 *             self.run()
 * 
 */
  }

  /* "flowstar/reachability.pyx":695
 *         self.run()
 * 
 *     def _init_args(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("flowstar.reachability.CReach._init_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ode);
  __Pyx_XDECREF(__pyx_v_initial);
  __Pyx_XDECREF(__pyx_v_step_lo);
  __Pyx_XDECREF(__pyx_v_step_hi);
  __Pyx_XDECREF(__pyx_v_order_lo);
  __Pyx_XDECREF(__pyx_v_order_hi);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_v_vars);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":811
 *             self.run()
 * 
 *     cdef optional[vector[Interval]]\             # <<<<<<<<<<<<<<
 *             _convert_space_domain(CReach self, space_domain=None):
 *         cdef:
 */

static std::optional<std::vector<flowstar::Interval> >  __pyx_f_8flowstar_12reachability_6CReach__convert_space_domain(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain *__pyx_optional_args) {

  /* "flowstar/reachability.pyx":812
 * 
 *     cdef optional[vector[Interval]]\
 *             _convert_space_domain(CReach self, space_domain=None):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector[Interval] c_space_domain
 */
  PyObject *__pyx_v_space_domain = ((PyObject *)Py_None);
  std::vector<flowstar::Interval>  __pyx_v_c_space_domain;
  std::vector<flowstar::Interval> ::iterator __pyx_v_iinitials;
  flowstar::Interval __pyx_v_I;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_xl = NULL;
  PyObject *__pyx_v_xu = NULL;
  flowstar::Interval __pyx_v_initial;
  double __pyx_v_il;
  double __pyx_v_iu;
  std::optional<std::vector<flowstar::Interval> >  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  double __pyx_t_11;
  double __pyx_t_12;
  __Pyx_RefNannySetupContext("_convert_space_domain", 0);
  __Pyx_TraceCall("_convert_space_domain", __pyx_f[0], 811, 0, __PYX_ERR(0, 811, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_space_domain = __pyx_optional_args->space_domain;
    }
  }

  /* "flowstar/reachability.pyx":815
 *         cdef:
 *             vector[Interval] c_space_domain
 *             vector[Interval].iterator iinitials = self.initials.begin()             # <<<<<<<<<<<<<<
 *             Interval I
 * 
 */
  __Pyx_TraceLine(815,0,__PYX_ERR(0, 815, __pyx_L1_error))
  __pyx_v_iinitials = __pyx_v_self->initials.begin();

  /* "flowstar/reachability.pyx":818
 *             Interval I
 * 
 *         if space_domain is None:             # <<<<<<<<<<<<<<
 *             return optional[vector[Interval]]()
 *         else:
 */
  __Pyx_TraceLine(818,0,__PYX_ERR(0, 818, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_space_domain == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "flowstar/reachability.pyx":819
 * 
 *         if space_domain is None:
 *             return optional[vector[Interval]]()             # <<<<<<<<<<<<<<
 *         else:
 *             for x in space_domain:
 */
    __Pyx_TraceLine(819,0,__PYX_ERR(0, 819, __pyx_L1_error))
    __pyx_r = std::optional<std::vector<flowstar::Interval> > ();
    goto __pyx_L0;

    /* "flowstar/reachability.pyx":818
 *             Interval I
 * 
 *         if space_domain is None:             # <<<<<<<<<<<<<<
 *             return optional[vector[Interval]]()
 *         else:
 */
  }

  /* "flowstar/reachability.pyx":821
 *             return optional[vector[Interval]]()
 *         else:
 *             for x in space_domain:             # <<<<<<<<<<<<<<
 *                 print(x.endpoints())
 *                 xl, xu = x.endpoints()
 */
  __Pyx_TraceLine(821,0,__PYX_ERR(0, 821, __pyx_L1_error))
  /*else*/ {
    if (likely(PyList_CheckExact(__pyx_v_space_domain)) || PyTuple_CheckExact(__pyx_v_space_domain)) {
      __pyx_t_3 = __pyx_v_space_domain; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_space_domain); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 821, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 821, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 821, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 821, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 821, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 821, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "flowstar/reachability.pyx":822
 *         else:
 *             for x in space_domain:
 *                 print(x.endpoints())             # <<<<<<<<<<<<<<
 *                 xl, xu = x.endpoints()
 *                 initial = deref(iinitials)
 */
      __Pyx_TraceLine(822,0,__PYX_ERR(0, 822, __pyx_L1_error))
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_endpoints); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (__pyx_t_8) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 822, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 822, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "flowstar/reachability.pyx":823
 *             for x in space_domain:
 *                 print(x.endpoints())
 *                 xl, xu = x.endpoints()             # <<<<<<<<<<<<<<
 *                 initial = deref(iinitials)
 *                 il, iu = initial.inf(), initial.sup()
 */
      __Pyx_TraceLine(823,0,__PYX_ERR(0, 823, __pyx_L1_error))
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_endpoints); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_8) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 823, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
        PyObject* sequence = __pyx_t_7;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 823, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 823, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 823, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_xl, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_xu, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "flowstar/reachability.pyx":824
 *                 print(x.endpoints())
 *                 xl, xu = x.endpoints()
 *                 initial = deref(iinitials)             # <<<<<<<<<<<<<<
 *                 il, iu = initial.inf(), initial.sup()
 *                 if il < iu:
 */
      __Pyx_TraceLine(824,0,__PYX_ERR(0, 824, __pyx_L1_error))
      __pyx_v_initial = (*__pyx_v_iinitials);

      /* "flowstar/reachability.pyx":825
 *                 xl, xu = x.endpoints()
 *                 initial = deref(iinitials)
 *                 il, iu = initial.inf(), initial.sup()             # <<<<<<<<<<<<<<
 *                 if il < iu:
 *                     I = Interval(-1 + 2*(xl - il)/(iu - il),
 */
      __Pyx_TraceLine(825,0,__PYX_ERR(0, 825, __pyx_L1_error))
      __pyx_t_11 = __pyx_v_initial.inf();
      __pyx_t_12 = __pyx_v_initial.sup();
      __pyx_v_il = __pyx_t_11;
      __pyx_v_iu = __pyx_t_12;

      /* "flowstar/reachability.pyx":826
 *                 initial = deref(iinitials)
 *                 il, iu = initial.inf(), initial.sup()
 *                 if il < iu:             # <<<<<<<<<<<<<<
 *                     I = Interval(-1 + 2*(xl - il)/(iu - il),
 *                                  -1 + 2*(xu - il)/(iu - il))
 */
      __Pyx_TraceLine(826,0,__PYX_ERR(0, 826, __pyx_L1_error))
      __pyx_t_2 = ((__pyx_v_il < __pyx_v_iu) != 0);
      if (__pyx_t_2) {

        /* "flowstar/reachability.pyx":827
 *                 il, iu = initial.inf(), initial.sup()
 *                 if il < iu:
 *                     I = Interval(-1 + 2*(xl - il)/(iu - il),             # <<<<<<<<<<<<<<
 *                                  -1 + 2*(xu - il)/(iu - il))
 *                 else:
 */
        __Pyx_TraceLine(827,0,__PYX_ERR(0, 827, __pyx_L1_error))
        __pyx_t_7 = PyFloat_FromDouble(__pyx_v_il); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 827, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyNumber_Subtract(__pyx_v_xl, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 827, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Multiply(__pyx_int_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 827, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyFloat_FromDouble((__pyx_v_iu - __pyx_v_il)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 827, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 827, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyInt_AddCObj(__pyx_int_neg_1, __pyx_t_6, -1L, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 827, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 827, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "flowstar/reachability.pyx":828
 *                 if il < iu:
 *                     I = Interval(-1 + 2*(xl - il)/(iu - il),
 *                                  -1 + 2*(xu - il)/(iu - il))             # <<<<<<<<<<<<<<
 *                 else:
 *                     I = Interval(-1, 1)
 */
        __Pyx_TraceLine(828,0,__PYX_ERR(0, 828, __pyx_L1_error))
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_il); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyNumber_Subtract(__pyx_v_xu, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Multiply(__pyx_int_2, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_iu - __pyx_v_il)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyInt_AddCObj(__pyx_int_neg_1, __pyx_t_7, -1L, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 828, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "flowstar/reachability.pyx":827
 *                 il, iu = initial.inf(), initial.sup()
 *                 if il < iu:
 *                     I = Interval(-1 + 2*(xl - il)/(iu - il),             # <<<<<<<<<<<<<<
 *                                  -1 + 2*(xu - il)/(iu - il))
 *                 else:
 */
        __Pyx_TraceLine(827,0,__PYX_ERR(0, 827, __pyx_L1_error))
        __pyx_v_I = flowstar::Interval(__pyx_t_12, __pyx_t_11);

        /* "flowstar/reachability.pyx":826
 *                 initial = deref(iinitials)
 *                 il, iu = initial.inf(), initial.sup()
 *                 if il < iu:             # <<<<<<<<<<<<<<
 *                     I = Interval(-1 + 2*(xl - il)/(iu - il),
 *                                  -1 + 2*(xu - il)/(iu - il))
 */
        goto __pyx_L8;
      }

      /* "flowstar/reachability.pyx":830
 *                                  -1 + 2*(xu - il)/(iu - il))
 *                 else:
 *                     I = Interval(-1, 1)             # <<<<<<<<<<<<<<
 *                 c_space_domain.push_back(I)
 * 
 */
      __Pyx_TraceLine(830,0,__PYX_ERR(0, 830, __pyx_L1_error))
      /*else*/ {
        __pyx_v_I = flowstar::Interval(-1.0, 1.0);
      }
      __pyx_L8:;

      /* "flowstar/reachability.pyx":831
 *                 else:
 *                     I = Interval(-1, 1)
 *                 c_space_domain.push_back(I)             # <<<<<<<<<<<<<<
 * 
 *                 inc(iinitials)
 */
      __Pyx_TraceLine(831,0,__PYX_ERR(0, 831, __pyx_L1_error))
      try {
        __pyx_v_c_space_domain.push_back(__pyx_v_I);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 831, __pyx_L1_error)
      }

      /* "flowstar/reachability.pyx":833
 *                 c_space_domain.push_back(I)
 * 
 *                 inc(iinitials)             # <<<<<<<<<<<<<<
 * 
 *             return optional[vector[Interval]](c_space_domain)
 */
      __Pyx_TraceLine(833,0,__PYX_ERR(0, 833, __pyx_L1_error))
      (void)((++__pyx_v_iinitials));

      /* "flowstar/reachability.pyx":821
 *             return optional[vector[Interval]]()
 *         else:
 *             for x in space_domain:             # <<<<<<<<<<<<<<
 *                 print(x.endpoints())
 *                 xl, xu = x.endpoints()
 */
      __Pyx_TraceLine(821,0,__PYX_ERR(0, 821, __pyx_L1_error))
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "flowstar/reachability.pyx":835
 *                 inc(iinitials)
 * 
 *             return optional[vector[Interval]](c_space_domain)             # <<<<<<<<<<<<<<
 * 
 *     def convert_space_domain(CReach self, space_domain):
 */
    __Pyx_TraceLine(835,0,__PYX_ERR(0, 835, __pyx_L1_error))
    __pyx_r = std::optional<std::vector<flowstar::Interval> > (__pyx_v_c_space_domain);
    goto __pyx_L0;
  }

  /* "flowstar/reachability.pyx":811
 *             self.run()
 * 
 *     cdef optional[vector[Interval]]\             # <<<<<<<<<<<<<<
 *             _convert_space_domain(CReach self, space_domain=None):
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("flowstar.reachability.CReach._convert_space_domain", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_xl);
  __Pyx_XDECREF(__pyx_v_xu);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":837
 *             return optional[vector[Interval]](c_space_domain)
 * 
 *     def convert_space_domain(CReach self, space_domain):             # <<<<<<<<<<<<<<
 *         cdef optional[vector[Interval]] c_space_domain\
 *             = self._convert_space_domain(space_domain)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_7convert_space_domain(PyObject *__pyx_v_self, PyObject *__pyx_v_space_domain); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_7convert_space_domain(PyObject *__pyx_v_self, PyObject *__pyx_v_space_domain) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_space_domain (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_6convert_space_domain(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), ((PyObject *)__pyx_v_space_domain));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_6convert_space_domain(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_space_domain) {
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_c_space_domain;
  flowstar::Interval __pyx_v_I;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::optional<std::vector<flowstar::Interval> >  __pyx_t_1;
  struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<flowstar::Interval> ::iterator __pyx_t_4;
  std::vector<flowstar::Interval>  *__pyx_t_5;
  flowstar::Interval __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("convert_space_domain", 0);
  __Pyx_TraceCall("convert_space_domain", __pyx_f[0], 837, 0, __PYX_ERR(0, 837, __pyx_L1_error));

  /* "flowstar/reachability.pyx":839
 *     def convert_space_domain(CReach self, space_domain):
 *         cdef optional[vector[Interval]] c_space_domain\
 *             = self._convert_space_domain(space_domain)             # <<<<<<<<<<<<<<
 *         assert c_space_domain.has_value()
 *         return [sage.RIF(I.inf(), I.sup())
 */
  __Pyx_TraceLine(839,0,__PYX_ERR(0, 839, __pyx_L1_error))
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.space_domain = __pyx_v_space_domain;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8flowstar_12reachability_CReach *)__pyx_v_self->__pyx_vtab)->_convert_space_domain(__pyx_v_self, &__pyx_t_2); 
  __pyx_v_c_space_domain = __pyx_t_1;

  /* "flowstar/reachability.pyx":840
 *         cdef optional[vector[Interval]] c_space_domain\
 *             = self._convert_space_domain(space_domain)
 *         assert c_space_domain.has_value()             # <<<<<<<<<<<<<<
 *         return [sage.RIF(I.inf(), I.sup())
 *                 for I in c_space_domain.value()]
 */
  __Pyx_TraceLine(840,0,__PYX_ERR(0, 840, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(__pyx_v_c_space_domain.has_value() != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 840, __pyx_L1_error)
    }
  }
  #endif

  /* "flowstar/reachability.pyx":841
 *             = self._convert_space_domain(space_domain)
 *         assert c_space_domain.has_value()
 *         return [sage.RIF(I.inf(), I.sup())             # <<<<<<<<<<<<<<
 *                 for I in c_space_domain.value()]
 * 
 */
  __Pyx_TraceLine(841,0,__PYX_ERR(0, 841, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "flowstar/reachability.pyx":842
 *         assert c_space_domain.has_value()
 *         return [sage.RIF(I.inf(), I.sup())
 *                 for I in c_space_domain.value()]             # <<<<<<<<<<<<<<
 * 
 *     def roots(CReach self, f, fprime, space_domain=None,
 */
  __Pyx_TraceLine(842,0,__PYX_ERR(0, 842, __pyx_L1_error))
  __pyx_t_5 = &__pyx_v_c_space_domain.value();
  __pyx_t_4 = __pyx_t_5->begin();
  for (;;) {
    if (!(__pyx_t_4 != __pyx_t_5->end())) break;
    __pyx_t_6 = *__pyx_t_4;
    ++__pyx_t_4;
    __pyx_v_I = __pyx_t_6;

    /* "flowstar/reachability.pyx":841
 *             = self._convert_space_domain(space_domain)
 *         assert c_space_domain.has_value()
 *         return [sage.RIF(I.inf(), I.sup())             # <<<<<<<<<<<<<<
 *                 for I in c_space_domain.value()]
 * 
 */
    __Pyx_TraceLine(841,0,__PYX_ERR(0, 841, __pyx_L1_error))
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_sage); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_RIF); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_I.inf()); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_I.sup()); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_12 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 841, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_10};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_12, 2+__pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 841, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(2+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_10);
      __pyx_t_8 = 0;
      __pyx_t_10 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 841, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "flowstar/reachability.pyx":842
 *         assert c_space_domain.has_value()
 *         return [sage.RIF(I.inf(), I.sup())
 *                 for I in c_space_domain.value()]             # <<<<<<<<<<<<<<
 * 
 *     def roots(CReach self, f, fprime, space_domain=None,
 */
    __Pyx_TraceLine(842,0,__PYX_ERR(0, 842, __pyx_L1_error))
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":837
 *             return optional[vector[Interval]](c_space_domain)
 * 
 *     def convert_space_domain(CReach self, space_domain):             # <<<<<<<<<<<<<<
 *         cdef optional[vector[Interval]] c_space_domain\
 *             = self._convert_space_domain(space_domain)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("flowstar.reachability.CReach.convert_space_domain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":844
 *                 for I in c_space_domain.value()]
 * 
 *     def roots(CReach self, f, fprime, space_domain=None,             # <<<<<<<<<<<<<<
 *               epsilon=0.00001, verbosity=0):
 *         cdef:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_9roots(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_9roots(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f = 0;
  PyObject *__pyx_v_fprime = 0;
  PyObject *__pyx_v_space_domain = 0;
  PyObject *__pyx_v_epsilon = 0;
  PyObject *__pyx_v_verbosity = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("roots (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,&__pyx_n_s_fprime,&__pyx_n_s_space_domain,&__pyx_n_s_epsilon,&__pyx_n_s_verbosity,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_float_0_00001);
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fprime)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("roots", 0, 2, 5, 1); __PYX_ERR(0, 844, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_space_domain);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbosity);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "roots") < 0)) __PYX_ERR(0, 844, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_f = values[0];
    __pyx_v_fprime = values[1];
    __pyx_v_space_domain = values[2];
    __pyx_v_epsilon = values[3];
    __pyx_v_verbosity = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("roots", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 844, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_8roots(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), __pyx_v_f, __pyx_v_fprime, __pyx_v_space_domain, __pyx_v_epsilon, __pyx_v_verbosity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_8roots(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_f, PyObject *__pyx_v_fprime, PyObject *__pyx_v_space_domain, PyObject *__pyx_v_epsilon, PyObject *__pyx_v_verbosity) {
  flowstar::Polynomial __pyx_v_f_poly;
  flowstar::Polynomial __pyx_v_fprime_poly;
  std::vector<flowstar::Interval>  __pyx_v_c_res;
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_c_space_domain;
  std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  __pyx_v_c_space_domain_ref;
  flowstar::Interval __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  flowstar::Polynomial __pyx_t_2;
  std::optional<std::vector<flowstar::Interval> >  __pyx_t_3;
  struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  double __pyx_t_12;
  int __pyx_t_13;
  std::vector<flowstar::Interval>  __pyx_t_14;
  struct __pyx_opt_args_8flowstar_12reachability_6CReach_c_roots __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  std::vector<flowstar::Interval> ::iterator __pyx_t_19;
  flowstar::Interval __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  __Pyx_RefNannySetupContext("roots", 0);
  __Pyx_TraceCall("roots", __pyx_f[0], 844, 0, __PYX_ERR(0, 844, __pyx_L1_error));

  /* "flowstar/reachability.pyx":847
 *               epsilon=0.00001, verbosity=0):
 *         cdef:
 *             Polynomial f_poly = Poly(f).c_poly             # <<<<<<<<<<<<<<
 *             Polynomial fprime_poly = Poly(fprime).c_poly
 *             vector[Interval] c_res
 */
  __Pyx_TraceLine(847,0,__PYX_ERR(0, 847, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8flowstar_4poly_Poly), __pyx_v_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1)->c_poly;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_f_poly = __pyx_t_2;

  /* "flowstar/reachability.pyx":848
 *         cdef:
 *             Polynomial f_poly = Poly(f).c_poly
 *             Polynomial fprime_poly = Poly(fprime).c_poly             # <<<<<<<<<<<<<<
 *             vector[Interval] c_res
 *             optional[vector[Interval]] c_space_domain\
 */
  __Pyx_TraceLine(848,0,__PYX_ERR(0, 848, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8flowstar_4poly_Poly), __pyx_v_fprime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_obj_8flowstar_4poly_Poly *)__pyx_t_1)->c_poly;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fprime_poly = __pyx_t_2;

  /* "flowstar/reachability.pyx":851
 *             vector[Interval] c_res
 *             optional[vector[Interval]] c_space_domain\
 *                 = self._convert_space_domain(space_domain)             # <<<<<<<<<<<<<<
 *             optional[reference_wrapper[vector[Interval]]] c_space_domain_ref
 *             Interval I
 */
  __Pyx_TraceLine(851,0,__PYX_ERR(0, 851, __pyx_L1_error))
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.space_domain = __pyx_v_space_domain;
  __pyx_t_3 = ((struct __pyx_vtabstruct_8flowstar_12reachability_CReach *)__pyx_v_self->__pyx_vtab)->_convert_space_domain(__pyx_v_self, &__pyx_t_4); 
  __pyx_v_c_space_domain = __pyx_t_3;

  /* "flowstar/reachability.pyx":855
 *             Interval I
 * 
 *         if c_space_domain.has_value():             # <<<<<<<<<<<<<<
 *             c_space_domain_ref = optional[reference_wrapper[vector[Interval]]](
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 */
  __Pyx_TraceLine(855,0,__PYX_ERR(0, 855, __pyx_L1_error))
  __pyx_t_5 = (__pyx_v_c_space_domain.has_value() != 0);
  if (__pyx_t_5) {

    /* "flowstar/reachability.pyx":856
 * 
 *         if c_space_domain.has_value():
 *             c_space_domain_ref = optional[reference_wrapper[vector[Interval]]](             # <<<<<<<<<<<<<<
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 * 
 */
    __Pyx_TraceLine(856,0,__PYX_ERR(0, 856, __pyx_L1_error))
    __pyx_v_c_space_domain_ref = std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > > (std::reference_wrapper<std::vector<flowstar::Interval> > (__pyx_v_c_space_domain.value()));

    /* "flowstar/reachability.pyx":855
 *             Interval I
 * 
 *         if c_space_domain.has_value():             # <<<<<<<<<<<<<<
 *             c_space_domain_ref = optional[reference_wrapper[vector[Interval]]](
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 */
  }

  /* "flowstar/reachability.pyx":860
 * 
 * 
 *         self.prepare()             # <<<<<<<<<<<<<<
 * 
 *         with self.global_manager:
 */
  __Pyx_TraceLine(860,0,__PYX_ERR(0, 860, __pyx_L1_error))
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_prepare); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":862
 *         self.prepare()
 * 
 *         with self.global_manager:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(f_poly, fprime_poly,
 *                                  space_domain=c_space_domain_ref,
 */
  __Pyx_TraceLine(862,0,__PYX_ERR(0, 862, __pyx_L1_error))
  /*with:*/ {
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 862, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        /*try:*/ {

          /* "flowstar/reachability.pyx":865
 *             c_res = self.c_roots(f_poly, fprime_poly,
 *                                  space_domain=c_space_domain_ref,
 *                                  epsilon=epsilon, verbosity=verbosity)             # <<<<<<<<<<<<<<
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 */
          __Pyx_TraceLine(865,0,__PYX_ERR(0, 865, __pyx_L8_error))
          __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_epsilon); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L8_error)
          __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_verbosity); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L8_error)

          /* "flowstar/reachability.pyx":863
 * 
 *         with self.global_manager:
 *             c_res = self.c_roots(f_poly, fprime_poly,             # <<<<<<<<<<<<<<
 *                                  space_domain=c_space_domain_ref,
 *                                  epsilon=epsilon, verbosity=verbosity)
 */
          __Pyx_TraceLine(863,0,__PYX_ERR(0, 863, __pyx_L8_error))
          __pyx_t_15.__pyx_n = 3;
          __pyx_t_15.space_domain = __pyx_v_c_space_domain_ref;
          __pyx_t_15.epsilon = __pyx_t_12;
          __pyx_t_15.verbosity = __pyx_t_13;
          __pyx_t_14 = ((struct __pyx_vtabstruct_8flowstar_12reachability_CReach *)__pyx_v_self->__pyx_vtab)->c_roots(__pyx_v_self, __pyx_v_f_poly, __pyx_v_fprime_poly, &__pyx_t_15); 
          __pyx_v_c_res = __pyx_t_14;

          /* "flowstar/reachability.pyx":862
 *         self.prepare()
 * 
 *         with self.global_manager:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(f_poly, fprime_poly,
 *                                  space_domain=c_space_domain_ref,
 */
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("flowstar.reachability.CReach.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 862, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_16 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 862, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_16, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 862, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (__pyx_t_5 < 0) __PYX_ERR(0, 862, __pyx_L10_except_error)
          __pyx_t_18 = ((!(__pyx_t_5 != 0)) != 0);
          if (__pyx_t_18) {
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_XGIVEREF(__pyx_t_7);
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_6, __pyx_t_7);
            __pyx_t_1 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; 
            __PYX_ERR(0, 862, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_8) {
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__12, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 862, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L17;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "flowstar/reachability.pyx":866
 *                                  space_domain=c_space_domain_ref,
 *                                  epsilon=epsilon, verbosity=verbosity)
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Interval] c_roots(CReach self, Polynomial& f,
 */
  __Pyx_TraceLine(866,0,__PYX_ERR(0, 866, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_19 = __pyx_v_c_res.begin();
  for (;;) {
    if (!(__pyx_t_19 != __pyx_v_c_res.end())) break;
    __pyx_t_20 = *__pyx_t_19;
    ++__pyx_t_19;
    __pyx_v_r = __pyx_t_20;
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sage); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_RIF); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_r.inf()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_21 = PyFloat_FromDouble(__pyx_v_r.sup()); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_22 = NULL;
    __pyx_t_13 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_22)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_22);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
        __pyx_t_13 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_16)) {
      PyObject *__pyx_temp[3] = {__pyx_t_22, __pyx_t_1, __pyx_t_21};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_16, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_16)) {
      PyObject *__pyx_temp[3] = {__pyx_t_22, __pyx_t_1, __pyx_t_21};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_16, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    } else
    #endif
    {
      __pyx_t_23 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      if (__pyx_t_22) {
        __Pyx_GIVEREF(__pyx_t_22); PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_22); __pyx_t_22 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_23, 0+__pyx_t_13, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_23, 1+__pyx_t_13, __pyx_t_21);
      __pyx_t_1 = 0;
      __pyx_t_21 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_23, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":844
 *                 for I in c_space_domain.value()]
 * 
 *     def roots(CReach self, f, fprime, space_domain=None,             # <<<<<<<<<<<<<<
 *               epsilon=0.00001, verbosity=0):
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_AddTraceback("flowstar.reachability.CReach.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":868
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 *     cdef vector[Interval] c_roots(CReach self, Polynomial& f,             # <<<<<<<<<<<<<<
 *             Polynomial& fprime,
 *             optional[reference_wrapper[vector[Interval]]] space_domain
 */

static std::vector<flowstar::Interval>  __pyx_f_8flowstar_12reachability_6CReach_c_roots(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, flowstar::Polynomial &__pyx_v_f, flowstar::Polynomial &__pyx_v_fprime, struct __pyx_opt_args_8flowstar_12reachability_6CReach_c_roots *__pyx_optional_args) {
  std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  __pyx_v_space_domain = __pyx_k__13;
  double __pyx_v_epsilon = ((double)0.00001);
  int __pyx_v_verbosity = ((int)0);
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv_end;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain_end;
  std::vector<flowstar::Interval>  __pyx_v_roots;
  std::vector<flowstar::Interval>  __pyx_v_new_roots;
  std::vector<flowstar::Interval> ::iterator __pyx_v_root_iter;
  flowstar::Interval __pyx_v_T0;
  flowstar::Interval __pyx_v_T;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_f_fn;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_fprime_fn;
  flowstar::Interval __pyx_v_f_domain;
  std::vector<flowstar::Interval>  *__pyx_v_loop_domain;
  CYTHON_UNUSED bool __pyx_v_initialized;
  std::vector<flowstar::Interval>  __pyx_v_composed_domain;
  int __pyx_v_var_id_t;
  std::vector<flowstar::Interval>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_t_3;
  std::vector<flowstar::Interval>  *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  flowstar::Interval __pyx_t_12;
  __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_t_13;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_14;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_15;
  struct __pyx_opt_args_8flowstar_14root_detection_detect_roots __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_FakeReference<flowstar::Interval> __pyx_t_19;
  __Pyx_RefNannySetupContext("c_roots", 0);
  __Pyx_TraceCall("c_roots", __pyx_f[0], 868, 0, __PYX_ERR(0, 868, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_space_domain = __pyx_optional_args->space_domain;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_epsilon = __pyx_optional_args->epsilon;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_verbosity = __pyx_optional_args->verbosity;
        }
      }
    }
  }

  /* "flowstar/reachability.pyx":874
 *             double epsilon=0.00001, int verbosity=0):
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 */
  __Pyx_TraceLine(874,0,__PYX_ERR(0, 874, __pyx_L1_error))
  __pyx_v_tmv = __pyx_v_self->c_reach.flowpipesCompo.begin();

  /* "flowstar/reachability.pyx":875
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()
 */
  __Pyx_TraceLine(875,0,__PYX_ERR(0, 875, __pyx_L1_error))
  __pyx_v_tmv_end = __pyx_v_self->c_reach.flowpipesCompo.end();

  /* "flowstar/reachability.pyx":876
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()
 *             vector[Interval] roots
 */
  __Pyx_TraceLine(876,0,__PYX_ERR(0, 876, __pyx_L1_error))
  __pyx_v_domain = __pyx_v_self->c_reach.domains.begin();

  /* "flowstar/reachability.pyx":877
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()             # <<<<<<<<<<<<<<
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 */
  __Pyx_TraceLine(877,0,__PYX_ERR(0, 877, __pyx_L1_error))
  __pyx_v_domain_end = __pyx_v_self->c_reach.domains.end();

  /* "flowstar/reachability.pyx":880
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 *             vector[Interval].iterator root_iter = roots.begin()             # <<<<<<<<<<<<<<
 *             Interval T0
 *             # The current time should be an interval, to take into account
 */
  __Pyx_TraceLine(880,0,__PYX_ERR(0, 880, __pyx_L1_error))
  __pyx_v_root_iter = __pyx_v_roots.begin();

  /* "flowstar/reachability.pyx":891
 * 
 *         cdef vector[Interval] final_res
 *         cdef cbool initialized = False             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[Interval] composed_domain
 */
  __Pyx_TraceLine(891,0,__PYX_ERR(0, 891, __pyx_L1_error))
  __pyx_v_initialized = 0;

  /* "flowstar/reachability.pyx":895
 *         cdef vector[Interval] composed_domain
 * 
 *         if space_domain.has_value():             # <<<<<<<<<<<<<<
 *             composed_domain = space_domain.value().get()
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])
 */
  __Pyx_TraceLine(895,0,__PYX_ERR(0, 895, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_space_domain.has_value() != 0);
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":896
 * 
 *         if space_domain.has_value():
 *             composed_domain = space_domain.value().get()             # <<<<<<<<<<<<<<
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])
 * 
 */
    __Pyx_TraceLine(896,0,__PYX_ERR(0, 896, __pyx_L1_error))
    __pyx_v_composed_domain = __pyx_v_space_domain.value().get();

    /* "flowstar/reachability.pyx":897
 *         if space_domain.has_value():
 *             composed_domain = space_domain.value().get()
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])             # <<<<<<<<<<<<<<
 * 
 *         var_id_t = self.c_reach.tmVarTab[b'local_t']
 */
    __Pyx_TraceLine(897,0,__PYX_ERR(0, 897, __pyx_L1_error))
    try {
      __pyx_v_composed_domain.insert(__pyx_v_composed_domain.begin(), ((*__pyx_v_domain)[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 897, __pyx_L1_error)
    }

    /* "flowstar/reachability.pyx":895
 *         cdef vector[Interval] composed_domain
 * 
 *         if space_domain.has_value():             # <<<<<<<<<<<<<<
 *             composed_domain = space_domain.value().get()
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])
 */
  }

  /* "flowstar/reachability.pyx":899
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])
 * 
 *         var_id_t = self.c_reach.tmVarTab[b'local_t']             # <<<<<<<<<<<<<<
 * 
 *         while (tmv != tmv_end and domain != domain_end):
 */
  __Pyx_TraceLine(899,0,__PYX_ERR(0, 899, __pyx_L1_error))
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L1_error)
  __pyx_v_var_id_t = (__pyx_v_self->c_reach.tmVarTab[__pyx_t_2]);

  /* "flowstar/reachability.pyx":901
 *         var_id_t = self.c_reach.tmVarTab[b'local_t']
 * 
 *         while (tmv != tmv_end and domain != domain_end):             # <<<<<<<<<<<<<<
 *             loop_domain = (&composed_domain
 *                            if space_domain.has_value()
 */
  __Pyx_TraceLine(901,0,__PYX_ERR(0, 901, __pyx_L1_error))
  while (1) {
    __pyx_t_3 = ((__pyx_v_tmv != __pyx_v_tmv_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_domain != __pyx_v_domain_end) != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "flowstar/reachability.pyx":903
 *         while (tmv != tmv_end and domain != domain_end):
 *             loop_domain = (&composed_domain
 *                            if space_domain.has_value()             # <<<<<<<<<<<<<<
 *                            else &deref(domain))
 * 
 */
    __Pyx_TraceLine(903,0,__PYX_ERR(0, 903, __pyx_L1_error))
    if ((__pyx_v_space_domain.has_value() != 0)) {

      /* "flowstar/reachability.pyx":902
 * 
 *         while (tmv != tmv_end and domain != domain_end):
 *             loop_domain = (&composed_domain             # <<<<<<<<<<<<<<
 *                            if space_domain.has_value()
 *                            else &deref(domain))
 */
      __Pyx_TraceLine(902,0,__PYX_ERR(0, 902, __pyx_L1_error))
      __pyx_t_4 = (&__pyx_v_composed_domain);
    } else {

      /* "flowstar/reachability.pyx":904
 *             loop_domain = (&composed_domain
 *                            if space_domain.has_value()
 *                            else &deref(domain))             # <<<<<<<<<<<<<<
 * 
 *             # Isolate roots for current timestep
 */
      __Pyx_TraceLine(904,0,__PYX_ERR(0, 904, __pyx_L1_error))
      __pyx_t_4 = (&(*__pyx_v_domain));
    }
    __pyx_v_loop_domain = __pyx_t_4;

    /* "flowstar/reachability.pyx":907
 * 
 *             # Isolate roots for current timestep
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(T),
 */
    __Pyx_TraceLine(907,0,__PYX_ERR(0, 907, __pyx_L1_error))
    __pyx_t_1 = ((__pyx_v_verbosity >= 2) != 0);
    if (__pyx_t_1) {

      /* "flowstar/reachability.pyx":908
 *             # Isolate roots for current timestep
 *             if verbosity >= 2:
 *                 print("reached detect roots t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(T),
 *                     interval.as_str(deref(domain)[0])))
 */
      __Pyx_TraceLine(908,0,__PYX_ERR(0, 908, __pyx_L1_error))
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_reached_detect_roots_t, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "flowstar/reachability.pyx":909
 *             if verbosity >= 2:
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(T),             # <<<<<<<<<<<<<<
 *                     interval.as_str(deref(domain)[0])))
 *             new_roots.clear()
 */
      __Pyx_TraceLine(909,0,__PYX_ERR(0, 909, __pyx_L1_error))
      __pyx_t_7 = __pyx_f_8flowstar_8interval_as_str(__pyx_v_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 909, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "flowstar/reachability.pyx":910
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(T),
 *                     interval.as_str(deref(domain)[0])))             # <<<<<<<<<<<<<<
 *             new_roots.clear()
 *             T0 = loop_domain[0][0] = deref(domain)[0]
 */
      __Pyx_TraceLine(910,0,__PYX_ERR(0, 910, __pyx_L1_error))
      __pyx_t_8 = __pyx_f_8flowstar_8interval_as_str(((*__pyx_v_domain)[0])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_8);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "flowstar/reachability.pyx":908
 *             # Isolate roots for current timestep
 *             if verbosity >= 2:
 *                 print("reached detect roots t={} + {}".format(             # <<<<<<<<<<<<<<
 *                     interval.as_str(T),
 *                     interval.as_str(deref(domain)[0])))
 */
      __Pyx_TraceLine(908,0,__PYX_ERR(0, 908, __pyx_L1_error))
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "flowstar/reachability.pyx":907
 * 
 *             # Isolate roots for current timestep
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(T),
 */
    }

    /* "flowstar/reachability.pyx":911
 *                     interval.as_str(T),
 *                     interval.as_str(deref(domain)[0])))
 *             new_roots.clear()             # <<<<<<<<<<<<<<
 *             T0 = loop_domain[0][0] = deref(domain)[0]
 *             # print("===")
 */
    __Pyx_TraceLine(911,0,__PYX_ERR(0, 911, __pyx_L1_error))
    __pyx_v_new_roots.clear();

    /* "flowstar/reachability.pyx":912
 *                     interval.as_str(deref(domain)[0])))
 *             new_roots.clear()
 *             T0 = loop_domain[0][0] = deref(domain)[0]             # <<<<<<<<<<<<<<
 *             # print("===")
 *             # print('x domain =', interval.as_str(loop_domain[0].at(1)))
 */
    __Pyx_TraceLine(912,0,__PYX_ERR(0, 912, __pyx_L1_error))
    __pyx_t_12 = ((*__pyx_v_domain)[0]);
    __pyx_v_T0 = __pyx_t_12;
    ((__pyx_v_loop_domain[0])[0]) = __pyx_t_12;

    /* "flowstar/reachability.pyx":920
 * 
 *             # Compose interval functions to compute f
 *             f_fn = interval.compose_interval_fn(poly_fn(f),             # <<<<<<<<<<<<<<
 *                                                 deref(tmv),
 *                                                 deref(loop_domain))
 */
    __Pyx_TraceLine(920,0,__PYX_ERR(0, 920, __pyx_L1_error))
    __pyx_v_f_fn = compose_interval_fn(poly_fn(__pyx_v_f), (*__pyx_v_tmv), (*__pyx_v_loop_domain));

    /* "flowstar/reachability.pyx":923
 *                                                 deref(tmv),
 *                                                 deref(loop_domain))
 *             f_domain = f_fn.call(T0)             # <<<<<<<<<<<<<<
 * 
 *             # Only do anything if there is a chance of a root
 */
    __Pyx_TraceLine(923,0,__PYX_ERR(0, 923, __pyx_L1_error))
    __pyx_v_f_domain = __pyx_v_f_fn.operator()(__pyx_v_T0);

    /* "flowstar/reachability.pyx":926
 * 
 *             # Only do anything if there is a chance of a root
 *             if f_domain.inf() <= 0 and 0 <= f_domain.sup():             # <<<<<<<<<<<<<<
 *                 if self.symbolic_composition:
 *                     # Define f and fprime by symbolically composing polynomials
 */
    __Pyx_TraceLine(926,0,__PYX_ERR(0, 926, __pyx_L1_error))
    __pyx_t_3 = ((__pyx_v_f_domain.inf() <= 0.0) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_3 = ((0.0 <= __pyx_v_f_domain.sup()) != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_1) {

      /* "flowstar/reachability.pyx":927
 *             # Only do anything if there is a chance of a root
 *             if f_domain.inf() <= 0 and 0 <= f_domain.sup():
 *                 if self.symbolic_composition:             # <<<<<<<<<<<<<<
 *                     # Define f and fprime by symbolically composing polynomials
 *                     (f_fn, fprime_fn) = observable(
 */
      __Pyx_TraceLine(927,0,__PYX_ERR(0, 927, __pyx_L1_error))
      __pyx_t_1 = (__pyx_v_self->symbolic_composition != 0);
      if (__pyx_t_1) {

        /* "flowstar/reachability.pyx":929
 *                 if self.symbolic_composition:
 *                     # Define f and fprime by symbolically composing polynomials
 *                     (f_fn, fprime_fn) = observable(             # <<<<<<<<<<<<<<
 *                         f, deref(tmv), deref(loop_domain),
 *                         self.c_reach.globalMaxOrder,
 */
        __Pyx_TraceLine(929,0,__PYX_ERR(0, 929, __pyx_L1_error))
        __pyx_t_13 = __pyx_f_8flowstar_12reachability_observable(__pyx_v_f, (*__pyx_v_tmv), (*__pyx_v_loop_domain), __pyx_v_self->c_reach.globalMaxOrder, __pyx_v_self->c_reach.cutoff_threshold);
        __pyx_t_14 = __pyx_t_13.f0;
        __pyx_t_15 = __pyx_t_13.f1;
        __pyx_v_f_fn = __pyx_t_14;
        __pyx_v_fprime_fn = __pyx_t_15;

        /* "flowstar/reachability.pyx":927
 *             # Only do anything if there is a chance of a root
 *             if f_domain.inf() <= 0 and 0 <= f_domain.sup():
 *                 if self.symbolic_composition:             # <<<<<<<<<<<<<<
 *                     # Define f and fprime by symbolically composing polynomials
 *                     (f_fn, fprime_fn) = observable(
 */
        goto __pyx_L12;
      }

      /* "flowstar/reachability.pyx":937
 *                     # Define fprime as a composition, and use f as defined
 *                     # similarly above
 *                     fprime_fn = interval.compose_interval_fn(             # <<<<<<<<<<<<<<
 *                         poly_fn(fprime),
 *                         deref(tmv),
 */
      __Pyx_TraceLine(937,0,__PYX_ERR(0, 937, __pyx_L1_error))
      /*else*/ {

        /* "flowstar/reachability.pyx":940
 *                         poly_fn(fprime),
 *                         deref(tmv),
 *                         deref(loop_domain)             # <<<<<<<<<<<<<<
 *                     )
 * 
 */
        __Pyx_TraceLine(940,0,__PYX_ERR(0, 940, __pyx_L1_error))
        __pyx_v_fprime_fn = compose_interval_fn(poly_fn(__pyx_v_fprime), (*__pyx_v_tmv), (*__pyx_v_loop_domain));
      }
      __pyx_L12:;

      /* "flowstar/reachability.pyx":943
 *                     )
 * 
 *                 root_detection.detect_roots(new_roots, f_fn, fprime_fn, T0,             # <<<<<<<<<<<<<<
 *                                             epsilon=epsilon,
 *                                             verbosity=verbosity)
 */
      __Pyx_TraceLine(943,0,__PYX_ERR(0, 943, __pyx_L1_error))
      __pyx_t_16.__pyx_n = 2;
      __pyx_t_16.epsilon = __pyx_v_epsilon;
      __pyx_t_16.verbosity = __pyx_v_verbosity;
      __pyx_f_8flowstar_14root_detection_detect_roots(__pyx_v_new_roots, __pyx_v_f_fn, __pyx_v_fprime_fn, __pyx_v_T0, &__pyx_t_16); 

      /* "flowstar/reachability.pyx":926
 * 
 *             # Only do anything if there is a chance of a root
 *             if f_domain.inf() <= 0 and 0 <= f_domain.sup():             # <<<<<<<<<<<<<<
 *                 if self.symbolic_composition:
 *                     # Define f and fprime by symbolically composing polynomials
 */
    }

    /* "flowstar/reachability.pyx":947
 *                                             verbosity=verbosity)
 * 
 *             deref(domain)[0] = T0             # <<<<<<<<<<<<<<
 * 
 *             # Shift roots by current time
 */
    __Pyx_TraceLine(947,0,__PYX_ERR(0, 947, __pyx_L1_error))
    ((*__pyx_v_domain)[0]) = __pyx_v_T0;

    /* "flowstar/reachability.pyx":950
 * 
 *             # Shift roots by current time
 *             root_iter = new_roots.begin()             # <<<<<<<<<<<<<<
 *             while root_iter != new_roots.end():
 *                 # print("shifting root")
 */
    __Pyx_TraceLine(950,0,__PYX_ERR(0, 950, __pyx_L1_error))
    __pyx_v_root_iter = __pyx_v_new_roots.begin();

    /* "flowstar/reachability.pyx":951
 *             # Shift roots by current time
 *             root_iter = new_roots.begin()
 *             while root_iter != new_roots.end():             # <<<<<<<<<<<<<<
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(T)
 */
    __Pyx_TraceLine(951,0,__PYX_ERR(0, 951, __pyx_L1_error))
    while (1) {
      __pyx_t_1 = ((__pyx_v_root_iter != __pyx_v_new_roots.end()) != 0);
      if (!__pyx_t_1) break;

      /* "flowstar/reachability.pyx":953
 *             while root_iter != new_roots.end():
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(T)             # <<<<<<<<<<<<<<
 *                 if (not roots.empty()
 *                     and interval.int_min_dist(
 */
      __Pyx_TraceLine(953,0,__PYX_ERR(0, 953, __pyx_L1_error))
      (void)((*__pyx_v_root_iter).operator+=(__pyx_v_T));

      /* "flowstar/reachability.pyx":954
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(T)
 *                 if (not roots.empty()             # <<<<<<<<<<<<<<
 *                     and interval.int_min_dist(
 *                         deref(root_iter), roots.back()) < 1e-9):
 */
      __Pyx_TraceLine(954,0,__PYX_ERR(0, 954, __pyx_L1_error))
      __pyx_t_3 = ((!(__pyx_v_roots.empty() != 0)) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L16_bool_binop_done;
      }

      /* "flowstar/reachability.pyx":956
 *                 if (not roots.empty()
 *                     and interval.int_min_dist(
 *                         deref(root_iter), roots.back()) < 1e-9):             # <<<<<<<<<<<<<<
 *                     if verbosity >= 3:
 *                         print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 */
      __Pyx_TraceLine(956,0,__PYX_ERR(0, 956, __pyx_L1_error))
      __pyx_t_3 = ((__pyx_f_8flowstar_8interval_int_min_dist((*__pyx_v_root_iter), __pyx_v_roots.back()) < 1e-9) != 0);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L16_bool_binop_done:;

      /* "flowstar/reachability.pyx":954
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(T)
 *                 if (not roots.empty()             # <<<<<<<<<<<<<<
 *                     and interval.int_min_dist(
 *                         deref(root_iter), roots.back()) < 1e-9):
 */
      __Pyx_TraceLine(954,0,__PYX_ERR(0, 954, __pyx_L1_error))
      if (__pyx_t_1) {

        /* "flowstar/reachability.pyx":957
 *                     and interval.int_min_dist(
 *                         deref(root_iter), roots.back()) < 1e-9):
 *                     if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                         print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                             deref(root_iter).inf(), deref(root_iter).sup(),
 */
        __Pyx_TraceLine(957,0,__PYX_ERR(0, 957, __pyx_L1_error))
        __pyx_t_1 = ((__pyx_v_verbosity >= 3) != 0);
        if (__pyx_t_1) {

          /* "flowstar/reachability.pyx":958
 *                         deref(root_iter), roots.back()) < 1e-9):
 *                     if verbosity >= 3:
 *                         print("merging intervals:\n[{}..{}]\n[{}..{}]".format(             # <<<<<<<<<<<<<<
 *                             deref(root_iter).inf(), deref(root_iter).sup(),
 *                             roots.back().inf(), roots.back().sup()))
 */
          __Pyx_TraceLine(958,0,__PYX_ERR(0, 958, __pyx_L1_error))
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_merging_intervals, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 958, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);

          /* "flowstar/reachability.pyx":959
 *                     if verbosity >= 3:
 *                         print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                             deref(root_iter).inf(), deref(root_iter).sup(),             # <<<<<<<<<<<<<<
 *                             roots.back().inf(), roots.back().sup()))
 *                     interval.interval_union(roots.back(),
 */
          __Pyx_TraceLine(959,0,__PYX_ERR(0, 959, __pyx_L1_error))
          __pyx_t_11 = PyFloat_FromDouble((*__pyx_v_root_iter).inf()); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 959, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_8 = PyFloat_FromDouble((*__pyx_v_root_iter).sup()); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 959, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);

          /* "flowstar/reachability.pyx":960
 *                         print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                             deref(root_iter).inf(), deref(root_iter).sup(),
 *                             roots.back().inf(), roots.back().sup()))             # <<<<<<<<<<<<<<
 *                     interval.interval_union(roots.back(),
 *                                             deref(root_iter))
 */
          __Pyx_TraceLine(960,0,__PYX_ERR(0, 960, __pyx_L1_error))
          __pyx_t_7 = PyFloat_FromDouble(__pyx_v_roots.back().inf()); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 960, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_roots.back().sup()); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 960, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_17 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
              __pyx_t_10 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[5] = {__pyx_t_17, __pyx_t_11, __pyx_t_8, __pyx_t_7, __pyx_t_9};
            __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 4+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 958, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[5] = {__pyx_t_17, __pyx_t_11, __pyx_t_8, __pyx_t_7, __pyx_t_9};
            __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 4+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 958, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else
          #endif
          {
            __pyx_t_18 = PyTuple_New(4+__pyx_t_10); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 958, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            if (__pyx_t_17) {
              __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17); __pyx_t_17 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_10, __pyx_t_11);
            __Pyx_GIVEREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_10, __pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_18, 2+__pyx_t_10, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_18, 3+__pyx_t_10, __pyx_t_9);
            __pyx_t_11 = 0;
            __pyx_t_8 = 0;
            __pyx_t_7 = 0;
            __pyx_t_9 = 0;
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_18, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 958, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "flowstar/reachability.pyx":958
 *                         deref(root_iter), roots.back()) < 1e-9):
 *                     if verbosity >= 3:
 *                         print("merging intervals:\n[{}..{}]\n[{}..{}]".format(             # <<<<<<<<<<<<<<
 *                             deref(root_iter).inf(), deref(root_iter).sup(),
 *                             roots.back().inf(), roots.back().sup()))
 */
          __Pyx_TraceLine(958,0,__PYX_ERR(0, 958, __pyx_L1_error))
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 958, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "flowstar/reachability.pyx":957
 *                     and interval.int_min_dist(
 *                         deref(root_iter), roots.back()) < 1e-9):
 *                     if verbosity >= 3:             # <<<<<<<<<<<<<<
 *                         print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                             deref(root_iter).inf(), deref(root_iter).sup(),
 */
        }

        /* "flowstar/reachability.pyx":961
 *                             deref(root_iter).inf(), deref(root_iter).sup(),
 *                             roots.back().inf(), roots.back().sup()))
 *                     interval.interval_union(roots.back(),             # <<<<<<<<<<<<<<
 *                                             deref(root_iter))
 *                 else:
 */
        __Pyx_TraceLine(961,0,__PYX_ERR(0, 961, __pyx_L1_error))
        __pyx_f_8flowstar_8interval_interval_union(__pyx_v_roots.back(), (*__pyx_v_root_iter));

        /* "flowstar/reachability.pyx":954
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(T)
 *                 if (not roots.empty()             # <<<<<<<<<<<<<<
 *                     and interval.int_min_dist(
 *                         deref(root_iter), roots.back()) < 1e-9):
 */
        goto __pyx_L15;
      }

      /* "flowstar/reachability.pyx":964
 *                                             deref(root_iter))
 *                 else:
 *                     roots.push_back(deref(root_iter))             # <<<<<<<<<<<<<<
 *                 inc(root_iter)
 * 
 */
      __Pyx_TraceLine(964,0,__PYX_ERR(0, 964, __pyx_L1_error))
      /*else*/ {
        try {
          __pyx_v_roots.push_back((*__pyx_v_root_iter));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 964, __pyx_L1_error)
        }
      }
      __pyx_L15:;

      /* "flowstar/reachability.pyx":965
 *                 else:
 *                     roots.push_back(deref(root_iter))
 *                 inc(root_iter)             # <<<<<<<<<<<<<<
 * 
 *             # Increment time and loop iters
 */
      __Pyx_TraceLine(965,0,__PYX_ERR(0, 965, __pyx_L1_error))
      (void)((++__pyx_v_root_iter));
    }

    /* "flowstar/reachability.pyx":968
 * 
 *             # Increment time and loop iters
 *             T += deref(domain).at(var_id_t).sup()             # <<<<<<<<<<<<<<
 *             T += Interval(-1e-53, 0)
 *             inc(tmv)
 */
    __Pyx_TraceLine(968,0,__PYX_ERR(0, 968, __pyx_L1_error))
    try {
      __pyx_t_19 = (*__pyx_v_domain).at(__pyx_v_var_id_t);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 968, __pyx_L1_error)
    }
    __pyx_v_T += __pyx_t_19->sup();

    /* "flowstar/reachability.pyx":969
 *             # Increment time and loop iters
 *             T += deref(domain).at(var_id_t).sup()
 *             T += Interval(-1e-53, 0)             # <<<<<<<<<<<<<<
 *             inc(tmv)
 *             inc(domain)
 */
    __Pyx_TraceLine(969,0,__PYX_ERR(0, 969, __pyx_L1_error))
    __pyx_v_T += flowstar::Interval(-1e-53, 0.0);

    /* "flowstar/reachability.pyx":970
 *             T += deref(domain).at(var_id_t).sup()
 *             T += Interval(-1e-53, 0)
 *             inc(tmv)             # <<<<<<<<<<<<<<
 *             inc(domain)
 * 
 */
    __Pyx_TraceLine(970,0,__PYX_ERR(0, 970, __pyx_L1_error))
    (void)((++__pyx_v_tmv));

    /* "flowstar/reachability.pyx":971
 *             T += Interval(-1e-53, 0)
 *             inc(tmv)
 *             inc(domain)             # <<<<<<<<<<<<<<
 * 
 *         return roots
 */
    __Pyx_TraceLine(971,0,__PYX_ERR(0, 971, __pyx_L1_error))
    (void)((++__pyx_v_domain));
  }

  /* "flowstar/reachability.pyx":973
 *             inc(domain)
 * 
 *         return roots             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Interval] eval_interval(CReach self, Interval & I,
 */
  __Pyx_TraceLine(973,0,__PYX_ERR(0, 973, __pyx_L1_error))
  __pyx_r = __pyx_v_roots;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":868
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 *     cdef vector[Interval] c_roots(CReach self, Polynomial& f,             # <<<<<<<<<<<<<<
 *             Polynomial& fprime,
 *             optional[reference_wrapper[vector[Interval]]] space_domain
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_WriteUnraisable("flowstar.reachability.CReach.c_roots", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":975
 *         return roots
 * 
 *     cdef vector[Interval] eval_interval(CReach self, Interval & I,             # <<<<<<<<<<<<<<
 *             optional[reference_wrapper[vector[Interval]]]
 *             space_domain=optional[reference_wrapper[vector[Interval]]](),
 */

static std::vector<flowstar::Interval>  __pyx_f_8flowstar_12reachability_6CReach_eval_interval(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, flowstar::Interval &__pyx_v_I, struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval *__pyx_optional_args) {
  std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  __pyx_v_space_domain = __pyx_k__14;
  std::optional<std::reference_wrapper<flowstar::Polynomial> >  __pyx_v_poly = __pyx_k__15;
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv_end;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain_end;
  std::vector<flowstar::Interval>  __pyx_v_res;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_f_fn;
  std::vector<int>  __pyx_v_varIDs;
  double __pyx_v_t;
  flowstar::Interval __pyx_v_T;
  std::vector<flowstar::Interval>  *__pyx_v_loop_domain;
  std::pair<std::string,int>  __pyx_v_i;
  std::vector<flowstar::Interval>  __pyx_v_domainCopy;
  std::vector<flowstar::Interval>  __pyx_v_final_res;
  bool __pyx_v_initialized;
  std::vector<flowstar::Interval>  __pyx_v_composed_domain;
  int __pyx_v_var_id_t;
  CYTHON_UNUSED std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v__;
  std::vector<flowstar::Interval>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::map<std::string,int> ::iterator __pyx_t_1;
  std::map<std::string,int>  *__pyx_t_2;
  std::pair<std::string,int>  __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  __Pyx_FakeReference<flowstar::Interval> __pyx_t_7;
  std::vector<flowstar::Interval>  *__pyx_t_8;
  __pyx_ctuple_1dd3e__4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__and_4c71b__std__in_function__lAngflowstar__in_Interval__lParen__const_flowstar__in_Interval__ref__rParen__rAng__etc__etc __pyx_t_9;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_10;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_t_11;
  __Pyx_FakeReference<flowstar::Interval> __pyx_t_12;
  __Pyx_RefNannySetupContext("eval_interval", 0);
  __Pyx_TraceCall("eval_interval", __pyx_f[0], 975, 0, __PYX_ERR(0, 975, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_space_domain = __pyx_optional_args->space_domain;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_poly = __pyx_optional_args->poly;
      }
    }
  }

  /* "flowstar/reachability.pyx":980
 *             optional[reference_wrapper[Polynomial]] poly=optional[reference_wrapper[Polynomial]]()):
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 */
  __Pyx_TraceLine(980,0,__PYX_ERR(0, 980, __pyx_L1_error))
  __pyx_v_tmv = __pyx_v_self->c_reach.flowpipesCompo.begin();

  /* "flowstar/reachability.pyx":981
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()
 */
  __Pyx_TraceLine(981,0,__PYX_ERR(0, 981, __pyx_L1_error))
  __pyx_v_tmv_end = __pyx_v_self->c_reach.flowpipesCompo.end();

  /* "flowstar/reachability.pyx":982
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()
 *             vector[Interval] res
 */
  __Pyx_TraceLine(982,0,__PYX_ERR(0, 982, __pyx_L1_error))
  __pyx_v_domain = __pyx_v_self->c_reach.domains.begin();

  /* "flowstar/reachability.pyx":983
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()             # <<<<<<<<<<<<<<
 *             vector[Interval] res
 *             interval_time_fn f_fn
 */
  __Pyx_TraceLine(983,0,__PYX_ERR(0, 983, __pyx_L1_error))
  __pyx_v_domain_end = __pyx_v_self->c_reach.domains.end();

  /* "flowstar/reachability.pyx":987
 *             interval_time_fn f_fn
 *             vector[int] varIDs # state variable ids
 *             double t = 0.0             # <<<<<<<<<<<<<<
 *             Interval T
 *             vector[Interval]* loop_domain
 */
  __Pyx_TraceLine(987,0,__PYX_ERR(0, 987, __pyx_L1_error))
  __pyx_v_t = 0.0;

  /* "flowstar/reachability.pyx":991
 *             vector[Interval]* loop_domain
 * 
 *         for i in self.c_reach.stateVarTab:             # <<<<<<<<<<<<<<
 *             varIDs.push_back(i.second)
 *         csort(varIDs.begin(), varIDs.end())
 */
  __Pyx_TraceLine(991,0,__PYX_ERR(0, 991, __pyx_L1_error))
  __pyx_t_2 = &__pyx_v_self->c_reach.stateVarTab;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_i = __pyx_t_3;

    /* "flowstar/reachability.pyx":992
 * 
 *         for i in self.c_reach.stateVarTab:
 *             varIDs.push_back(i.second)             # <<<<<<<<<<<<<<
 *         csort(varIDs.begin(), varIDs.end())
 * 
 */
    __Pyx_TraceLine(992,0,__PYX_ERR(0, 992, __pyx_L1_error))
    try {
      __pyx_v_varIDs.push_back(__pyx_v_i.second);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 992, __pyx_L1_error)
    }

    /* "flowstar/reachability.pyx":991
 *             vector[Interval]* loop_domain
 * 
 *         for i in self.c_reach.stateVarTab:             # <<<<<<<<<<<<<<
 *             varIDs.push_back(i.second)
 *         csort(varIDs.begin(), varIDs.end())
 */
    __Pyx_TraceLine(991,0,__PYX_ERR(0, 991, __pyx_L1_error))
  }

  /* "flowstar/reachability.pyx":993
 *         for i in self.c_reach.stateVarTab:
 *             varIDs.push_back(i.second)
 *         csort(varIDs.begin(), varIDs.end())             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[Interval] domainCopy
 */
  __Pyx_TraceLine(993,0,__PYX_ERR(0, 993, __pyx_L1_error))
  std::sort<std::vector<int> ::iterator>(__pyx_v_varIDs.begin(), __pyx_v_varIDs.end());

  /* "flowstar/reachability.pyx":997
 *         cdef vector[Interval] domainCopy
 *         cdef vector[Interval] final_res
 *         cdef cbool initialized = False             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[Interval] composed_domain
 */
  __Pyx_TraceLine(997,0,__PYX_ERR(0, 997, __pyx_L1_error))
  __pyx_v_initialized = 0;

  /* "flowstar/reachability.pyx":1001
 *         cdef vector[Interval] composed_domain
 * 
 *         if space_domain.has_value():             # <<<<<<<<<<<<<<
 *             composed_domain = space_domain.value().get()
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])
 */
  __Pyx_TraceLine(1001,0,__PYX_ERR(0, 1001, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_space_domain.has_value() != 0);
  if (__pyx_t_4) {

    /* "flowstar/reachability.pyx":1002
 * 
 *         if space_domain.has_value():
 *             composed_domain = space_domain.value().get()             # <<<<<<<<<<<<<<
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])
 * 
 */
    __Pyx_TraceLine(1002,0,__PYX_ERR(0, 1002, __pyx_L1_error))
    __pyx_v_composed_domain = __pyx_v_space_domain.value().get();

    /* "flowstar/reachability.pyx":1003
 *         if space_domain.has_value():
 *             composed_domain = space_domain.value().get()
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])             # <<<<<<<<<<<<<<
 * 
 *         var_id_t = self.c_reach.tmVarTab[b'local_t']
 */
    __Pyx_TraceLine(1003,0,__PYX_ERR(0, 1003, __pyx_L1_error))
    try {
      __pyx_v_composed_domain.insert(__pyx_v_composed_domain.begin(), ((*__pyx_v_domain)[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1003, __pyx_L1_error)
    }

    /* "flowstar/reachability.pyx":1001
 *         cdef vector[Interval] composed_domain
 * 
 *         if space_domain.has_value():             # <<<<<<<<<<<<<<
 *             composed_domain = space_domain.value().get()
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])
 */
  }

  /* "flowstar/reachability.pyx":1005
 *             composed_domain.insert(composed_domain.begin(), deref(domain)[0])
 * 
 *         var_id_t = self.c_reach.tmVarTab[b'local_t']             # <<<<<<<<<<<<<<
 * 
 *         while (tmv != tmv_end and domain != domain_end):
 */
  __Pyx_TraceLine(1005,0,__PYX_ERR(0, 1005, __pyx_L1_error))
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1005, __pyx_L1_error)
  __pyx_v_var_id_t = (__pyx_v_self->c_reach.tmVarTab[__pyx_t_5]);

  /* "flowstar/reachability.pyx":1007
 *         var_id_t = self.c_reach.tmVarTab[b'local_t']
 * 
 *         while (tmv != tmv_end and domain != domain_end):             # <<<<<<<<<<<<<<
 *             T = deref(domain).at(var_id_t)
 *             loop_domain = (&composed_domain
 */
  __Pyx_TraceLine(1007,0,__PYX_ERR(0, 1007, __pyx_L1_error))
  while (1) {
    __pyx_t_6 = ((__pyx_v_tmv != __pyx_v_tmv_end) != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_domain != __pyx_v_domain_end) != 0);
    __pyx_t_4 = __pyx_t_6;
    __pyx_L8_bool_binop_done:;
    if (!__pyx_t_4) break;

    /* "flowstar/reachability.pyx":1008
 * 
 *         while (tmv != tmv_end and domain != domain_end):
 *             T = deref(domain).at(var_id_t)             # <<<<<<<<<<<<<<
 *             loop_domain = (&composed_domain
 *                            if space_domain.has_value()
 */
    __Pyx_TraceLine(1008,0,__PYX_ERR(0, 1008, __pyx_L1_error))
    try {
      __pyx_t_7 = (*__pyx_v_domain).at(__pyx_v_var_id_t);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1008, __pyx_L1_error)
    }
    __pyx_v_T = __pyx_t_7;

    /* "flowstar/reachability.pyx":1010
 *             T = deref(domain).at(var_id_t)
 *             loop_domain = (&composed_domain
 *                            if space_domain.has_value()             # <<<<<<<<<<<<<<
 *                            else &deref(domain))
 *             T.add_assign(t)
 */
    __Pyx_TraceLine(1010,0,__PYX_ERR(0, 1010, __pyx_L1_error))
    if ((__pyx_v_space_domain.has_value() != 0)) {

      /* "flowstar/reachability.pyx":1009
 *         while (tmv != tmv_end and domain != domain_end):
 *             T = deref(domain).at(var_id_t)
 *             loop_domain = (&composed_domain             # <<<<<<<<<<<<<<
 *                            if space_domain.has_value()
 *                            else &deref(domain))
 */
      __Pyx_TraceLine(1009,0,__PYX_ERR(0, 1009, __pyx_L1_error))
      __pyx_t_8 = (&__pyx_v_composed_domain);
    } else {

      /* "flowstar/reachability.pyx":1011
 *             loop_domain = (&composed_domain
 *                            if space_domain.has_value()
 *                            else &deref(domain))             # <<<<<<<<<<<<<<
 *             T.add_assign(t)
 *             if interval.overlaps(I, T):
 */
      __Pyx_TraceLine(1011,0,__PYX_ERR(0, 1011, __pyx_L1_error))
      __pyx_t_8 = (&(*__pyx_v_domain));
    }
    __pyx_v_loop_domain = __pyx_t_8;

    /* "flowstar/reachability.pyx":1012
 *                            if space_domain.has_value()
 *                            else &deref(domain))
 *             T.add_assign(t)             # <<<<<<<<<<<<<<
 *             if interval.overlaps(I, T):
 *                 # Restrict the time domain of the flowpipe to that portion
 */
    __Pyx_TraceLine(1012,0,__PYX_ERR(0, 1012, __pyx_L1_error))
    __pyx_v_T.operator+=(__pyx_v_t);

    /* "flowstar/reachability.pyx":1013
 *                            else &deref(domain))
 *             T.add_assign(t)
 *             if interval.overlaps(I, T):             # <<<<<<<<<<<<<<
 *                 # Restrict the time domain of the flowpipe to that portion
 *                 # which intersects the time interval we are evaluating at
 */
    __Pyx_TraceLine(1013,0,__PYX_ERR(0, 1013, __pyx_L1_error))
    __pyx_t_4 = (__pyx_f_8flowstar_8interval_overlaps(__pyx_v_I, __pyx_v_T) != 0);
    if (__pyx_t_4) {

      /* "flowstar/reachability.pyx":1016
 *                 # Restrict the time domain of the flowpipe to that portion
 *                 # which intersects the time interval we are evaluating at
 *                 domainCopy = deref(loop_domain)             # <<<<<<<<<<<<<<
 *                 domainCopy[var_id_t] = T.intersect(I) # No bounds checking!
 *                 domainCopy[var_id_t].add_assign(-t)
 */
      __Pyx_TraceLine(1016,0,__PYX_ERR(0, 1016, __pyx_L1_error))
      __pyx_v_domainCopy = (*__pyx_v_loop_domain);

      /* "flowstar/reachability.pyx":1017
 *                 # which intersects the time interval we are evaluating at
 *                 domainCopy = deref(loop_domain)
 *                 domainCopy[var_id_t] = T.intersect(I) # No bounds checking!             # <<<<<<<<<<<<<<
 *                 domainCopy[var_id_t].add_assign(-t)
 * 
 */
      __Pyx_TraceLine(1017,0,__PYX_ERR(0, 1017, __pyx_L1_error))
      (__pyx_v_domainCopy[__pyx_v_var_id_t]) = __pyx_v_T.intersect(__pyx_v_I);

      /* "flowstar/reachability.pyx":1018
 *                 domainCopy = deref(loop_domain)
 *                 domainCopy[var_id_t] = T.intersect(I) # No bounds checking!
 *                 domainCopy[var_id_t].add_assign(-t)             # <<<<<<<<<<<<<<
 * 
 *                 if not poly.has_value():
 */
      __Pyx_TraceLine(1018,0,__PYX_ERR(0, 1018, __pyx_L1_error))
      (__pyx_v_domainCopy[__pyx_v_var_id_t]).operator+=((-__pyx_v_t));

      /* "flowstar/reachability.pyx":1020
 *                 domainCopy[var_id_t].add_assign(-t)
 * 
 *                 if not poly.has_value():             # <<<<<<<<<<<<<<
 *                     # In the normal case we directly evaulate the intervals for
 *                     # each component of the system
 */
      __Pyx_TraceLine(1020,0,__PYX_ERR(0, 1020, __pyx_L1_error))
      __pyx_t_4 = ((!(__pyx_v_poly.has_value() != 0)) != 0);
      if (__pyx_t_4) {

        /* "flowstar/reachability.pyx":1023
 *                     # In the normal case we directly evaulate the intervals for
 *                     # each component of the system
 *                     deref(tmv).intEval(res, domainCopy, varIDs)             # <<<<<<<<<<<<<<
 *                 else:
 *                     # If a polynomial poly is specified, we evaluate that over
 */
        __Pyx_TraceLine(1023,0,__PYX_ERR(0, 1023, __pyx_L1_error))
        (*__pyx_v_tmv).intEval(__pyx_v_res, __pyx_v_domainCopy, __pyx_v_varIDs);

        /* "flowstar/reachability.pyx":1020
 *                 domainCopy[var_id_t].add_assign(-t)
 * 
 *                 if not poly.has_value():             # <<<<<<<<<<<<<<
 *                     # In the normal case we directly evaulate the intervals for
 *                     # each component of the system
 */
        goto __pyx_L11;
      }

      /* "flowstar/reachability.pyx":1027
 *                     # If a polynomial poly is specified, we evaluate that over
 *                     # the system instead
 *                     res.clear()             # <<<<<<<<<<<<<<
 *                     if self.symbolic_composition:
 *                         # Evaluate by symbolically compositing the polynomial
 */
      __Pyx_TraceLine(1027,0,__PYX_ERR(0, 1027, __pyx_L1_error))
      /*else*/ {
        __pyx_v_res.clear();

        /* "flowstar/reachability.pyx":1028
 *                     # the system instead
 *                     res.clear()
 *                     if self.symbolic_composition:             # <<<<<<<<<<<<<<
 *                         # Evaluate by symbolically compositing the polynomial
 *                         # with the system
 */
        __Pyx_TraceLine(1028,0,__PYX_ERR(0, 1028, __pyx_L1_error))
        __pyx_t_4 = (__pyx_v_self->symbolic_composition != 0);
        if (__pyx_t_4) {

          /* "flowstar/reachability.pyx":1031
 *                         # Evaluate by symbolically compositing the polynomial
 *                         # with the system
 *                         (f_fn, _) = observable(             # <<<<<<<<<<<<<<
 *                             poly.value().get(), deref(tmv), domainCopy,
 *                             self.c_reach.globalMaxOrder,
 */
          __Pyx_TraceLine(1031,0,__PYX_ERR(0, 1031, __pyx_L1_error))
          __pyx_t_9 = __pyx_f_8flowstar_12reachability_observable(__pyx_v_poly.value().get(), (*__pyx_v_tmv), __pyx_v_domainCopy, __pyx_v_self->c_reach.globalMaxOrder, __pyx_v_self->c_reach.cutoff_threshold);
          __pyx_t_10 = __pyx_t_9.f0;
          __pyx_t_11 = __pyx_t_9.f1;
          __pyx_v_f_fn = __pyx_t_10;
          __pyx_v__ = __pyx_t_11;

          /* "flowstar/reachability.pyx":1028
 *                     # the system instead
 *                     res.clear()
 *                     if self.symbolic_composition:             # <<<<<<<<<<<<<<
 *                         # Evaluate by symbolically compositing the polynomial
 *                         # with the system
 */
          goto __pyx_L12;
        }

        /* "flowstar/reachability.pyx":1038
 *                     else:
 *                         # Evaluate by two-step functional composition
 *                         f_fn = interval.compose_interval_fn(             # <<<<<<<<<<<<<<
 *                             poly_fn(poly.value().get()),
 *                             deref(tmv),
 */
        __Pyx_TraceLine(1038,0,__PYX_ERR(0, 1038, __pyx_L1_error))
        /*else*/ {

          /* "flowstar/reachability.pyx":1041
 *                             poly_fn(poly.value().get()),
 *                             deref(tmv),
 *                             domainCopy,             # <<<<<<<<<<<<<<
 *                         )
 *                     res.push_back(f_fn.call(domainCopy.at(0)))
 */
          __Pyx_TraceLine(1041,0,__PYX_ERR(0, 1041, __pyx_L1_error))
          __pyx_v_f_fn = compose_interval_fn(poly_fn(__pyx_v_poly.value().get()), (*__pyx_v_tmv), __pyx_v_domainCopy);
        }
        __pyx_L12:;

        /* "flowstar/reachability.pyx":1043
 *                             domainCopy,
 *                         )
 *                     res.push_back(f_fn.call(domainCopy.at(0)))             # <<<<<<<<<<<<<<
 * 
 *                 if initialized:
 */
        __Pyx_TraceLine(1043,0,__PYX_ERR(0, 1043, __pyx_L1_error))
        try {
          __pyx_t_12 = __pyx_v_domainCopy.at(0);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 1043, __pyx_L1_error)
        }
        try {
          __pyx_v_res.push_back(__pyx_v_f_fn.operator()(__pyx_t_12));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 1043, __pyx_L1_error)
        }
      }
      __pyx_L11:;

      /* "flowstar/reachability.pyx":1045
 *                     res.push_back(f_fn.call(domainCopy.at(0)))
 * 
 *                 if initialized:             # <<<<<<<<<<<<<<
 *                     interval.interval_vect_union(final_res, res)
 *                 else:
 */
      __Pyx_TraceLine(1045,0,__PYX_ERR(0, 1045, __pyx_L1_error))
      __pyx_t_4 = (__pyx_v_initialized != 0);
      if (__pyx_t_4) {

        /* "flowstar/reachability.pyx":1046
 * 
 *                 if initialized:
 *                     interval.interval_vect_union(final_res, res)             # <<<<<<<<<<<<<<
 *                 else:
 *                     final_res = res
 */
        __Pyx_TraceLine(1046,0,__PYX_ERR(0, 1046, __pyx_L1_error))
        __pyx_f_8flowstar_8interval_interval_vect_union(__pyx_v_final_res, __pyx_v_res);

        /* "flowstar/reachability.pyx":1045
 *                     res.push_back(f_fn.call(domainCopy.at(0)))
 * 
 *                 if initialized:             # <<<<<<<<<<<<<<
 *                     interval.interval_vect_union(final_res, res)
 *                 else:
 */
        goto __pyx_L13;
      }

      /* "flowstar/reachability.pyx":1048
 *                     interval.interval_vect_union(final_res, res)
 *                 else:
 *                     final_res = res             # <<<<<<<<<<<<<<
 *                     initialized = True
 * 
 */
      __Pyx_TraceLine(1048,0,__PYX_ERR(0, 1048, __pyx_L1_error))
      /*else*/ {
        __pyx_v_final_res = __pyx_v_res;

        /* "flowstar/reachability.pyx":1049
 *                 else:
 *                     final_res = res
 *                     initialized = True             # <<<<<<<<<<<<<<
 * 
 *             t = T.sup()
 */
        __Pyx_TraceLine(1049,0,__PYX_ERR(0, 1049, __pyx_L1_error))
        __pyx_v_initialized = 1;
      }
      __pyx_L13:;

      /* "flowstar/reachability.pyx":1013
 *                            else &deref(domain))
 *             T.add_assign(t)
 *             if interval.overlaps(I, T):             # <<<<<<<<<<<<<<
 *                 # Restrict the time domain of the flowpipe to that portion
 *                 # which intersects the time interval we are evaluating at
 */
    }

    /* "flowstar/reachability.pyx":1051
 *                     initialized = True
 * 
 *             t = T.sup()             # <<<<<<<<<<<<<<
 *             inc(tmv)
 *             inc(domain)
 */
    __Pyx_TraceLine(1051,0,__PYX_ERR(0, 1051, __pyx_L1_error))
    __pyx_v_t = __pyx_v_T.sup();

    /* "flowstar/reachability.pyx":1052
 * 
 *             t = T.sup()
 *             inc(tmv)             # <<<<<<<<<<<<<<
 *             inc(domain)
 * 
 */
    __Pyx_TraceLine(1052,0,__PYX_ERR(0, 1052, __pyx_L1_error))
    (void)((++__pyx_v_tmv));

    /* "flowstar/reachability.pyx":1053
 *             t = T.sup()
 *             inc(tmv)
 *             inc(domain)             # <<<<<<<<<<<<<<
 * 
 *         return final_res
 */
    __Pyx_TraceLine(1053,0,__PYX_ERR(0, 1053, __pyx_L1_error))
    (void)((++__pyx_v_domain));
  }

  /* "flowstar/reachability.pyx":1055
 *             inc(domain)
 * 
 *         return final_res             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, t, space_domain=None):
 */
  __Pyx_TraceLine(1055,0,__PYX_ERR(0, 1055, __pyx_L1_error))
  __pyx_r = __pyx_v_final_res;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":975
 *         return roots
 * 
 *     cdef vector[Interval] eval_interval(CReach self, Interval & I,             # <<<<<<<<<<<<<<
 *             optional[reference_wrapper[vector[Interval]]]
 *             space_domain=optional[reference_wrapper[vector[Interval]]](),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("flowstar.reachability.CReach.eval_interval", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1057
 *         return final_res
 * 
 *     def __call__(self, t, space_domain=None):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_11__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_11__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_space_domain = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_space_domain,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_space_domain);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(0, 1057, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = values[0];
    __pyx_v_space_domain = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1057, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_10__call__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), __pyx_v_t, __pyx_v_space_domain);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10__call__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_t, PyObject *__pyx_v_space_domain) {
  PyObject *__pyx_v_RIF = NULL;
  std::vector<flowstar::Interval>  __pyx_v_res;
  flowstar::Interval __pyx_v_I;
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_c_space_domain;
  std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  __pyx_v_c_space_domain_ref;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::optional<std::vector<flowstar::Interval> >  __pyx_t_4;
  struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  std::vector<flowstar::Interval>  __pyx_t_11;
  struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  std::vector<flowstar::Interval> ::iterator __pyx_t_16;
  flowstar::Interval __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  __Pyx_RefNannySetupContext("__call__", 0);
  __Pyx_TraceCall("__call__", __pyx_f[0], 1057, 0, __PYX_ERR(0, 1057, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1058
 * 
 *     def __call__(self, t, space_domain=None):
 *         from sage.all import RIF             # <<<<<<<<<<<<<<
 * 
 *         self.prepare()
 */
  __Pyx_TraceLine(1058,0,__PYX_ERR(0, 1058, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_RIF);
  __Pyx_GIVEREF(__pyx_n_s_RIF);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_RIF);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_RIF); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_RIF = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":1060
 *         from sage.all import RIF
 * 
 *         self.prepare()             # <<<<<<<<<<<<<<
 * 
 *         # Convert python interval to flow* interval
 */
  __Pyx_TraceLine(1060,0,__PYX_ERR(0, 1060, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_prepare); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1060, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1060, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":1065
 *         cdef:
 *             vector[Interval] res
 *             Interval I = interval.make_interval(t)             # <<<<<<<<<<<<<<
 *             optional[vector[Interval]] c_space_domain\
 *                 = self._convert_space_domain(space_domain)
 */
  __Pyx_TraceLine(1065,0,__PYX_ERR(0, 1065, __pyx_L1_error))
  __pyx_v_I = __pyx_f_8flowstar_8interval_make_interval(__pyx_v_t);

  /* "flowstar/reachability.pyx":1067
 *             Interval I = interval.make_interval(t)
 *             optional[vector[Interval]] c_space_domain\
 *                 = self._convert_space_domain(space_domain)             # <<<<<<<<<<<<<<
 *             optional[reference_wrapper[vector[Interval]]] c_space_domain_ref
 * 
 */
  __Pyx_TraceLine(1067,0,__PYX_ERR(0, 1067, __pyx_L1_error))
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.space_domain = __pyx_v_space_domain;
  __pyx_t_4 = ((struct __pyx_vtabstruct_8flowstar_12reachability_CReach *)__pyx_v_self->__pyx_vtab)->_convert_space_domain(__pyx_v_self, &__pyx_t_5); 
  __pyx_v_c_space_domain = __pyx_t_4;

  /* "flowstar/reachability.pyx":1071
 * 
 *         # Convert optional to optional reference
 *         if c_space_domain.has_value():             # <<<<<<<<<<<<<<
 *             c_space_domain_ref = optional[reference_wrapper[vector[Interval]]](
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 */
  __Pyx_TraceLine(1071,0,__PYX_ERR(0, 1071, __pyx_L1_error))
  __pyx_t_6 = (__pyx_v_c_space_domain.has_value() != 0);
  if (__pyx_t_6) {

    /* "flowstar/reachability.pyx":1072
 *         # Convert optional to optional reference
 *         if c_space_domain.has_value():
 *             c_space_domain_ref = optional[reference_wrapper[vector[Interval]]](             # <<<<<<<<<<<<<<
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 * 
 */
    __Pyx_TraceLine(1072,0,__PYX_ERR(0, 1072, __pyx_L1_error))
    __pyx_v_c_space_domain_ref = std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > > (std::reference_wrapper<std::vector<flowstar::Interval> > (__pyx_v_c_space_domain.value()));

    /* "flowstar/reachability.pyx":1071
 * 
 *         # Convert optional to optional reference
 *         if c_space_domain.has_value():             # <<<<<<<<<<<<<<
 *             c_space_domain_ref = optional[reference_wrapper[vector[Interval]]](
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 */
  }

  /* "flowstar/reachability.pyx":1075
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 * 
 *         with self.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I, space_domain=c_space_domain_ref)
 * 
 */
  __Pyx_TraceLine(1075,0,__PYX_ERR(0, 1075, __pyx_L1_error))
  /*with:*/ {
    __pyx_t_7 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "flowstar/reachability.pyx":1076
 * 
 *         with self.global_manager: #  Use captured globals
 *             res = self.eval_interval(I, space_domain=c_space_domain_ref)             # <<<<<<<<<<<<<<
 * 
 *         return [RIF(I.inf(), I.sup()) for I in res]
 */
          __Pyx_TraceLine(1076,0,__PYX_ERR(0, 1076, __pyx_L8_error))
          __pyx_t_12.__pyx_n = 1;
          __pyx_t_12.space_domain = __pyx_v_c_space_domain_ref;
          __pyx_t_11 = ((struct __pyx_vtabstruct_8flowstar_12reachability_CReach *)__pyx_v_self->__pyx_vtab)->eval_interval(__pyx_v_self, __pyx_v_I, &__pyx_t_12); 
          __pyx_v_res = __pyx_t_11;

          /* "flowstar/reachability.pyx":1075
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 * 
 *         with self.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I, space_domain=c_space_domain_ref)
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("flowstar.reachability.CReach.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 1075, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_13 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1075, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_13, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1075, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__pyx_t_6 < 0) __PYX_ERR(0, 1075, __pyx_L10_except_error)
          __pyx_t_15 = ((!(__pyx_t_6 != 0)) != 0);
          if (__pyx_t_15) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_1, __pyx_t_3);
            __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 1075, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_7) {
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__16, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1075, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L17;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "flowstar/reachability.pyx":1078
 *             res = self.eval_interval(I, space_domain=c_space_domain_ref)
 * 
 *         return [RIF(I.inf(), I.sup()) for I in res]             # <<<<<<<<<<<<<<
 * 
 *     def eval_poly(self, Poly p, t, space_domain=None):
 */
  __Pyx_TraceLine(1078,0,__PYX_ERR(0, 1078, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_16 = __pyx_v_res.begin();
  for (;;) {
    if (!(__pyx_t_16 != __pyx_v_res.end())) break;
    __pyx_t_17 = *__pyx_t_16;
    ++__pyx_t_16;
    __pyx_v_I = __pyx_t_17;
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_I.inf()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_I.sup()); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_v_RIF);
    __pyx_t_18 = __pyx_v_RIF; __pyx_t_19 = NULL;
    __pyx_t_20 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_20 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_t_2, __pyx_t_13};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_t_2, __pyx_t_13};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    {
      __pyx_t_21 = PyTuple_New(2+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1078, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      if (__pyx_t_19) {
        __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_t_13);
      __pyx_t_2 = 0;
      __pyx_t_13 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1057
 *         return final_res
 * 
 *     def __call__(self, t, space_domain=None):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("flowstar.reachability.CReach.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_RIF);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1080
 *         return [RIF(I.inf(), I.sup()) for I in res]
 * 
 *     def eval_poly(self, Poly p, t, space_domain=None):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_13eval_poly(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_13eval_poly(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8flowstar_4poly_Poly *__pyx_v_p = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_space_domain = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_poly (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,&__pyx_n_s_t,&__pyx_n_s_space_domain,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_poly", 0, 2, 3, 1); __PYX_ERR(0, 1080, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_space_domain);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eval_poly") < 0)) __PYX_ERR(0, 1080, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p = ((struct __pyx_obj_8flowstar_4poly_Poly *)values[0]);
    __pyx_v_t = values[1];
    __pyx_v_space_domain = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eval_poly", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1080, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach.eval_poly", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_8flowstar_4poly_Poly, 1, "p", 0))) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_12eval_poly(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), __pyx_v_p, __pyx_v_t, __pyx_v_space_domain);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_12eval_poly(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, struct __pyx_obj_8flowstar_4poly_Poly *__pyx_v_p, PyObject *__pyx_v_t, PyObject *__pyx_v_space_domain) {
  PyObject *__pyx_v_RIF = NULL;
  std::vector<flowstar::Interval>  __pyx_v_res;
  flowstar::Interval __pyx_v_I;
  std::optional<std::vector<flowstar::Interval> >  __pyx_v_c_space_domain;
  std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > >  __pyx_v_c_space_domain_ref;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::optional<std::vector<flowstar::Interval> >  __pyx_t_4;
  struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  std::vector<flowstar::Interval>  __pyx_t_11;
  struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("eval_poly", 0);
  __Pyx_TraceCall("eval_poly", __pyx_f[0], 1080, 0, __PYX_ERR(0, 1080, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1081
 * 
 *     def eval_poly(self, Poly p, t, space_domain=None):
 *         from sage.all import RIF             # <<<<<<<<<<<<<<
 * 
 *         self.prepare()
 */
  __Pyx_TraceLine(1081,0,__PYX_ERR(0, 1081, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_RIF);
  __Pyx_GIVEREF(__pyx_n_s_RIF);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_RIF);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_RIF); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_RIF = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":1083
 *         from sage.all import RIF
 * 
 *         self.prepare()             # <<<<<<<<<<<<<<
 * 
 *         # Convert python interval to flow* interval
 */
  __Pyx_TraceLine(1083,0,__PYX_ERR(0, 1083, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_prepare); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1083, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":1088
 *         cdef:
 *             vector[Interval] res
 *             Interval I = interval.make_interval(t)             # <<<<<<<<<<<<<<
 *             optional[vector[Interval]] c_space_domain\
 *                 = self._convert_space_domain(space_domain)
 */
  __Pyx_TraceLine(1088,0,__PYX_ERR(0, 1088, __pyx_L1_error))
  __pyx_v_I = __pyx_f_8flowstar_8interval_make_interval(__pyx_v_t);

  /* "flowstar/reachability.pyx":1090
 *             Interval I = interval.make_interval(t)
 *             optional[vector[Interval]] c_space_domain\
 *                 = self._convert_space_domain(space_domain)             # <<<<<<<<<<<<<<
 *             optional[reference_wrapper[vector[Interval]]] c_space_domain_ref
 * 
 */
  __Pyx_TraceLine(1090,0,__PYX_ERR(0, 1090, __pyx_L1_error))
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.space_domain = __pyx_v_space_domain;
  __pyx_t_4 = ((struct __pyx_vtabstruct_8flowstar_12reachability_CReach *)__pyx_v_self->__pyx_vtab)->_convert_space_domain(__pyx_v_self, &__pyx_t_5); 
  __pyx_v_c_space_domain = __pyx_t_4;

  /* "flowstar/reachability.pyx":1094
 * 
 *         # Convert optional to optional reference
 *         if c_space_domain.has_value():             # <<<<<<<<<<<<<<
 *             c_space_domain_ref = optional[reference_wrapper[vector[Interval]]](
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 */
  __Pyx_TraceLine(1094,0,__PYX_ERR(0, 1094, __pyx_L1_error))
  __pyx_t_6 = (__pyx_v_c_space_domain.has_value() != 0);
  if (__pyx_t_6) {

    /* "flowstar/reachability.pyx":1095
 *         # Convert optional to optional reference
 *         if c_space_domain.has_value():
 *             c_space_domain_ref = optional[reference_wrapper[vector[Interval]]](             # <<<<<<<<<<<<<<
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 * 
 */
    __Pyx_TraceLine(1095,0,__PYX_ERR(0, 1095, __pyx_L1_error))
    __pyx_v_c_space_domain_ref = std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > > (std::reference_wrapper<std::vector<flowstar::Interval> > (__pyx_v_c_space_domain.value()));

    /* "flowstar/reachability.pyx":1094
 * 
 *         # Convert optional to optional reference
 *         if c_space_domain.has_value():             # <<<<<<<<<<<<<<
 *             c_space_domain_ref = optional[reference_wrapper[vector[Interval]]](
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 */
  }

  /* "flowstar/reachability.pyx":1098
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 * 
 *         with self.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I,
 *                 space_domain=c_space_domain_ref,
 */
  __Pyx_TraceLine(1098,0,__PYX_ERR(0, 1098, __pyx_L1_error))
  /*with:*/ {
    __pyx_t_7 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "flowstar/reachability.pyx":1099
 * 
 *         with self.global_manager: #  Use captured globals
 *             res = self.eval_interval(I,             # <<<<<<<<<<<<<<
 *                 space_domain=c_space_domain_ref,
 *                 poly=optional[reference_wrapper[Polynomial]](
 */
          __Pyx_TraceLine(1099,0,__PYX_ERR(0, 1099, __pyx_L8_error))
          __pyx_t_12.__pyx_n = 2;
          __pyx_t_12.space_domain = __pyx_v_c_space_domain_ref;
          __pyx_t_12.poly = std::optional<std::reference_wrapper<flowstar::Polynomial> > (std::reference_wrapper<flowstar::Polynomial> (__pyx_v_p->c_poly));
          __pyx_t_11 = ((struct __pyx_vtabstruct_8flowstar_12reachability_CReach *)__pyx_v_self->__pyx_vtab)->eval_interval(__pyx_v_self, __pyx_v_I, &__pyx_t_12); 
          __pyx_v_res = __pyx_t_11;

          /* "flowstar/reachability.pyx":1098
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 * 
 *         with self.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I,
 *                 space_domain=c_space_domain_ref,
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("flowstar.reachability.CReach.eval_poly", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 1098, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_13 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1098, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_13, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1098, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__pyx_t_6 < 0) __PYX_ERR(0, 1098, __pyx_L10_except_error)
          __pyx_t_15 = ((!(__pyx_t_6 != 0)) != 0);
          if (__pyx_t_15) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_1, __pyx_t_3);
            __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 1098, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_7) {
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__17, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1098, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L17;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L1_error;
    __pyx_L17:;
  }

  /* "flowstar/reachability.pyx":1104
 *                     reference_wrapper[Polynomial](p.c_poly)))
 * 
 *         return RIF(res[0].inf(), res[0].sup())             # <<<<<<<<<<<<<<
 * 
 *     def prepare(self):
 */
  __Pyx_TraceLine(1104,0,__PYX_ERR(0, 1104, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_res[0]).inf()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_res[0]).sup()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_RIF);
  __pyx_t_13 = __pyx_v_RIF; __pyx_t_16 = NULL;
  __pyx_t_17 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
      __pyx_t_17 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_t_1, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_t_1, __pyx_t_2};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_18 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    if (__pyx_t_16) {
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_16); __pyx_t_16 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_17, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_17, __pyx_t_2);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1080
 *         return [RIF(I.inf(), I.sup()) for I in res]
 * 
 *     def eval_poly(self, Poly p, t, space_domain=None):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("flowstar.reachability.CReach.eval_poly", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_RIF);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1106
 *         return RIF(res[0].inf(), res[0].sup())
 * 
 *     def prepare(self):             # <<<<<<<<<<<<<<
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_15prepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8flowstar_12reachability_6CReach_14prepare[] = "Prepare for plotting / evaluating.";
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_15prepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepare (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_14prepare(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_14prepare(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("prepare", 0);
  __Pyx_TraceCall("prepare", __pyx_f[0], 1106, 0, __PYX_ERR(0, 1106, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1108
 *     def prepare(self):
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Not ran!')
 * 
 */
  __Pyx_TraceLine(1108,0,__PYX_ERR(0, 1108, __pyx_L1_error))
  __pyx_t_1 = ((!(__pyx_v_self->ran != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "flowstar/reachability.pyx":1109
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:
 *             raise Exception('Not ran!')             # <<<<<<<<<<<<<<
 * 
 *         if not self.prepared:
 */
    __Pyx_TraceLine(1109,0,__PYX_ERR(0, 1109, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1109, __pyx_L1_error)

    /* "flowstar/reachability.pyx":1108
 *     def prepare(self):
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Not ran!')
 * 
 */
  }

  /* "flowstar/reachability.pyx":1111
 *             raise Exception('Not ran!')
 * 
 *         if not self.prepared:             # <<<<<<<<<<<<<<
 *             with self.global_manager:  # with local globals
 *                 # if we run prepareForPlotting more than once we crash
 */
  __Pyx_TraceLine(1111,0,__PYX_ERR(0, 1111, __pyx_L1_error))
  __pyx_t_1 = ((!(__pyx_v_self->prepared != 0)) != 0);
  if (__pyx_t_1) {

    /* "flowstar/reachability.pyx":1112
 * 
 *         if not self.prepared:
 *             with self.global_manager:  # with local globals             # <<<<<<<<<<<<<<
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()
 */
    __Pyx_TraceLine(1112,0,__PYX_ERR(0, 1112, __pyx_L1_error))
    /*with:*/ {
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->global_manager), __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self->global_manager), __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1112, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L5_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_6);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_8);
          /*try:*/ {

            /* "flowstar/reachability.pyx":1114
 *             with self.global_manager:  # with local globals
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()             # <<<<<<<<<<<<<<
 *             self.prepared = True
 * 
 */
            __Pyx_TraceLine(1114,0,__PYX_ERR(0, 1114, __pyx_L9_error))
            __pyx_v_self->c_reach.prepareForDumping();

            /* "flowstar/reachability.pyx":1112
 * 
 *         if not self.prepared:
 *             with self.global_manager:  # with local globals             # <<<<<<<<<<<<<<
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()
 */
          }
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L14_try_end;
          __pyx_L9_error:;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("flowstar.reachability.CReach.prepare", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 1112, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_9 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1112, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1112, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 1112, __pyx_L11_except_error)
            __pyx_t_11 = ((!(__pyx_t_1 != 0)) != 0);
            if (__pyx_t_11) {
              __Pyx_GIVEREF(__pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_5);
              __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_4, __pyx_t_5);
              __pyx_t_2 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0; 
              __PYX_ERR(0, 1112, __pyx_L11_except_error)
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L10_exception_handled;
          }
          __pyx_L11_except_error:;
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          goto __pyx_L1_error;
          __pyx_L10_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          __pyx_L14_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__19, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1112, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
      goto __pyx_L18;
      __pyx_L5_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L18:;
    }

    /* "flowstar/reachability.pyx":1115
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()
 *             self.prepared = True             # <<<<<<<<<<<<<<
 * 
 *     def run(self):
 */
    __Pyx_TraceLine(1115,0,__PYX_ERR(0, 1115, __pyx_L1_error))
    __pyx_v_self->prepared = 1;

    /* "flowstar/reachability.pyx":1111
 *             raise Exception('Not ran!')
 * 
 *         if not self.prepared:             # <<<<<<<<<<<<<<
 *             with self.global_manager:  # with local globals
 *                 # if we run prepareForPlotting more than once we crash
 */
  }

  /* "flowstar/reachability.pyx":1106
 *         return RIF(res[0].inf(), res[0].sup())
 * 
 *     def prepare(self):             # <<<<<<<<<<<<<<
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("flowstar.reachability.CReach.prepare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1117
 *             self.prepared = True
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         if self.ran:
 *             raise Exception('Already ran')
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_17run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_17run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_16run(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_16run(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("run", 0);
  __Pyx_TraceCall("run", __pyx_f[0], 1117, 0, __PYX_ERR(0, 1117, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1118
 * 
 *     def run(self):
 *         if self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Already ran')
 *         try:
 */
  __Pyx_TraceLine(1118,0,__PYX_ERR(0, 1118, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_self->ran != 0);
  if (unlikely(__pyx_t_1)) {

    /* "flowstar/reachability.pyx":1119
 *     def run(self):
 *         if self.ran:
 *             raise Exception('Already ran')             # <<<<<<<<<<<<<<
 *         try:
 *             FlowstarGlobalManager.clear_global()
 */
    __Pyx_TraceLine(1119,0,__PYX_ERR(0, 1119, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1119, __pyx_L1_error)

    /* "flowstar/reachability.pyx":1118
 * 
 *     def run(self):
 *         if self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Already ran')
 *         try:
 */
  }

  /* "flowstar/reachability.pyx":1120
 *         if self.ran:
 *             raise Exception('Already ran')
 *         try:             # <<<<<<<<<<<<<<
 *             FlowstarGlobalManager.clear_global()
 *             self.result = int(self.c_reach.run())
 */
  __Pyx_TraceLine(1120,0,__PYX_ERR(0, 1120, __pyx_L5_error))
  /*try:*/ {

    /* "flowstar/reachability.pyx":1121
 *             raise Exception('Already ran')
 *         try:
 *             FlowstarGlobalManager.clear_global()             # <<<<<<<<<<<<<<
 *             self.result = int(self.c_reach.run())
 *             self.global_manager.capture()
 */
    __Pyx_TraceLine(1121,0,__PYX_ERR(0, 1121, __pyx_L5_error))
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager), __pyx_n_s_clear_global); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L5_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "flowstar/reachability.pyx":1122
 *         try:
 *             FlowstarGlobalManager.clear_global()
 *             self.result = int(self.c_reach.run())             # <<<<<<<<<<<<<<
 *             self.global_manager.capture()
 *             return self.result
 */
    __Pyx_TraceLine(1122,0,__PYX_ERR(0, 1122, __pyx_L5_error))
    __pyx_v_self->result = __pyx_v_self->c_reach.run();

    /* "flowstar/reachability.pyx":1123
 *             FlowstarGlobalManager.clear_global()
 *             self.result = int(self.c_reach.run())
 *             self.global_manager.capture()             # <<<<<<<<<<<<<<
 *             return self.result
 *         finally:
 */
    __Pyx_TraceLine(1123,0,__PYX_ERR(0, 1123, __pyx_L5_error))
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->global_manager), __pyx_n_s_capture); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1123, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1123, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1123, __pyx_L5_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "flowstar/reachability.pyx":1124
 *             self.result = int(self.c_reach.run())
 *             self.global_manager.capture()
 *             return self.result             # <<<<<<<<<<<<<<
 *         finally:
 *             self.ran = self.num_flowpipes > 0
 */
    __Pyx_TraceLine(1124,0,__PYX_ERR(0, 1124, __pyx_L5_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1124, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L4_return;
  }

  /* "flowstar/reachability.pyx":1126
 *             return self.result
 *         finally:
 *             self.ran = self.num_flowpipes > 0             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1126,0,__PYX_ERR(0, 1126, __pyx_L1_error))
  /*finally:*/ {
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_flowpipes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1126, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1126, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_self->ran = __pyx_t_1;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
      __pyx_L8_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_flowpipes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1126, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1126, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_self->ran = __pyx_t_1;
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "flowstar/reachability.pyx":1117
 *             self.prepared = True
 * 
 *     def run(self):             # <<<<<<<<<<<<<<
 *         if self.ran:
 *             raise Exception('Already ran')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("flowstar.reachability.CReach.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1129
 * 
 *     @property
 *     def res(self):             # <<<<<<<<<<<<<<
 *         return self.result
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_3res_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_3res_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_3res___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_3res___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1129, 0, __PYX_ERR(0, 1129, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1130
 *     @property
 *     def res(self):
 *         return self.result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1130,0,__PYX_ERR(0, 1130, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1129
 * 
 *     @property
 *     def res(self):             # <<<<<<<<<<<<<<
 *         return self.result
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.CReach.res.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1133
 * 
 *     @property
 *     def cutoff_threshold(self):             # <<<<<<<<<<<<<<
 *         i = self.c_reach.cutoff_threshold
 *         return (i.inf(), i.sup())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_16cutoff_threshold_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_16cutoff_threshold_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_16cutoff_threshold___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_16cutoff_threshold___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  flowstar::Interval __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  flowstar::Interval __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1133, 0, __PYX_ERR(0, 1133, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1134
 *     @property
 *     def cutoff_threshold(self):
 *         i = self.c_reach.cutoff_threshold             # <<<<<<<<<<<<<<
 *         return (i.inf(), i.sup())
 * 
 */
  __Pyx_TraceLine(1134,0,__PYX_ERR(0, 1134, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_self->c_reach.cutoff_threshold;
  __pyx_v_i = __pyx_t_1;

  /* "flowstar/reachability.pyx":1135
 *     def cutoff_threshold(self):
 *         i = self.c_reach.cutoff_threshold
 *         return (i.inf(), i.sup())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1135,0,__PYX_ERR(0, 1135, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_i.inf()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_i.sup()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1133
 * 
 *     @property
 *     def cutoff_threshold(self):             # <<<<<<<<<<<<<<
 *         i = self.c_reach.cutoff_threshold
 *         return (i.inf(), i.sup())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("flowstar.reachability.CReach.cutoff_threshold.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1138
 * 
 *     @property
 *     def estimation(self):             # <<<<<<<<<<<<<<
 *         return [(i.inf(), i.sup()) for i in self.c_reach.estimation]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_10estimation_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_10estimation_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_10estimation___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10estimation___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  flowstar::Interval __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<flowstar::Interval> ::iterator __pyx_t_2;
  std::vector<flowstar::Interval>  *__pyx_t_3;
  flowstar::Interval __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1138, 0, __PYX_ERR(0, 1138, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1139
 *     @property
 *     def estimation(self):
 *         return [(i.inf(), i.sup()) for i in self.c_reach.estimation]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1139,0,__PYX_ERR(0, 1139, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = &__pyx_v_self->c_reach.estimation;
  __pyx_t_2 = __pyx_t_3->begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_t_3->end())) break;
    __pyx_t_4 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_i.inf()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_i.sup()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1138
 * 
 *     @property
 *     def estimation(self):             # <<<<<<<<<<<<<<
 *         return [(i.inf(), i.sup()) for i in self.c_reach.estimation]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("flowstar.reachability.CReach.estimation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1142
 * 
 *     @property
 *     def num_flowpipes(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.numOfFlowpipes())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_13num_flowpipes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_13num_flowpipes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_13num_flowpipes___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_13num_flowpipes___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1142, 0, __PYX_ERR(0, 1142, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1143
 *     @property
 *     def num_flowpipes(self):
 *         return int(self.c_reach.numOfFlowpipes())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1143,0,__PYX_ERR(0, 1143, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_reach.numOfFlowpipes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1142
 * 
 *     @property
 *     def num_flowpipes(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.numOfFlowpipes())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("flowstar.reachability.CReach.num_flowpipes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1146
 * 
 *     @property
 *     def num_state_vars(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.stateVarNames.size())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_14num_state_vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_14num_state_vars_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_14num_state_vars___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_14num_state_vars___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1146, 0, __PYX_ERR(0, 1146, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1147
 *     @property
 *     def num_state_vars(self):
 *         return int(self.c_reach.stateVarNames.size())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1147,0,__PYX_ERR(0, 1147, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_reach.stateVarNames.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1146
 * 
 *     @property
 *     def num_state_vars(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.stateVarNames.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("flowstar.reachability.CReach.num_state_vars.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1150
 * 
 *     @property
 *     def state_vars(self):             # <<<<<<<<<<<<<<
 *         return [str(v) for v in self.c_reach.stateVarNames]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_10state_vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_10state_vars_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_10state_vars___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_10state_vars___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  std::string __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string> ::iterator __pyx_t_2;
  std::vector<std::string>  *__pyx_t_3;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1150, 0, __PYX_ERR(0, 1150, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1151
 *     @property
 *     def state_vars(self):
 *         return [str(v) for v in self.c_reach.stateVarNames]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1151,0,__PYX_ERR(0, 1151, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = &__pyx_v_self->c_reach.stateVarNames;
  __pyx_t_2 = __pyx_t_3->begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_t_3->end())) break;
    __pyx_t_4 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_v = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1150
 * 
 *     @property
 *     def state_vars(self):             # <<<<<<<<<<<<<<
 *         return [str(v) for v in self.c_reach.stateVarNames]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("flowstar.reachability.CReach.state_vars.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1154
 * 
 *     @property
 *     def num_initials(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.system.initialSets.size())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_12num_initials_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_12num_initials_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_12num_initials___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_12num_initials___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1154, 0, __PYX_ERR(0, 1154, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1155
 *     @property
 *     def num_initials(self):
 *         return int(self.c_reach.system.initialSets.size())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1155,0,__PYX_ERR(0, 1155, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_reach.system.initialSets.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1154
 * 
 *     @property
 *     def num_initials(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.system.initialSets.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("flowstar.reachability.CReach.num_initials.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1158
 * 
 *     @property
 *     def step(self):             # <<<<<<<<<<<<<<
 *         return float(self.c_reach.step)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_4step_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_4step_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_4step___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_4step___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1158, 0, __PYX_ERR(0, 1158, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1159
 *     @property
 *     def step(self):
 *         return float(self.c_reach.step)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1159,0,__PYX_ERR(0, 1159, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_reach.step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1158
 * 
 *     @property
 *     def step(self):             # <<<<<<<<<<<<<<
 *         return float(self.c_reach.step)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.CReach.step.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1162
 * 
 *     @property
 *     def time(self):             # <<<<<<<<<<<<<<
 *         return float(self.c_reach.time)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_4time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_4time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_4time___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_4time___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1162, 0, __PYX_ERR(0, 1162, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1163
 *     @property
 *     def time(self):
 *         return float(self.c_reach.time)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1163,0,__PYX_ERR(0, 1163, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_reach.time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1162
 * 
 *     @property
 *     def time(self):             # <<<<<<<<<<<<<<
 *         return float(self.c_reach.time)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.CReach.time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1166
 * 
 *     @property
 *     def ode_strs(self):             # <<<<<<<<<<<<<<
 *         res = []
 *         cdef string ode_str
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_8ode_strs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_8ode_strs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_8ode_strs___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_8ode_strs___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_v_res = NULL;
  std::string __pyx_v_ode_str;
  std::string __pyx_v_interval_str;
  std::vector<std::string>  __pyx_v_names;
  flowstar::TaylorModel __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string>  __pyx_t_2;
  std::vector<flowstar::TaylorModel> ::iterator __pyx_t_3;
  std::vector<flowstar::TaylorModel>  *__pyx_t_4;
  flowstar::TaylorModel __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1166, 0, __PYX_ERR(0, 1166, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1167
 *     @property
 *     def ode_strs(self):
 *         res = []             # <<<<<<<<<<<<<<
 *         cdef string ode_str
 *         cdef string interval_str
 */
  __Pyx_TraceLine(1167,0,__PYX_ERR(0, 1167, __pyx_L1_error))
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":1170
 *         cdef string ode_str
 *         cdef string interval_str
 *         cdef vector[string] names = self.c_reach.stateVarNames             # <<<<<<<<<<<<<<
 *         names.insert(names.begin(), b"local_t")
 *         for v in self.c_reach.system.tmvOde.tms:
 */
  __Pyx_TraceLine(1170,0,__PYX_ERR(0, 1170, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->c_reach.stateVarNames;
  __pyx_v_names = __pyx_t_2;

  /* "flowstar/reachability.pyx":1171
 *         cdef string interval_str
 *         cdef vector[string] names = self.c_reach.stateVarNames
 *         names.insert(names.begin(), b"local_t")             # <<<<<<<<<<<<<<
 *         for v in self.c_reach.system.tmvOde.tms:
 *             v.expansion.toString(ode_str, names)
 */
  __Pyx_TraceLine(1171,0,__PYX_ERR(0, 1171, __pyx_L1_error))
  try {
    __pyx_v_names.insert(__pyx_v_names.begin(), __pyx_k_local_t);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1171, __pyx_L1_error)
  }

  /* "flowstar/reachability.pyx":1172
 *         cdef vector[string] names = self.c_reach.stateVarNames
 *         names.insert(names.begin(), b"local_t")
 *         for v in self.c_reach.system.tmvOde.tms:             # <<<<<<<<<<<<<<
 *             v.expansion.toString(ode_str, names)
 *             v.remainder.toString(interval_str)
 */
  __Pyx_TraceLine(1172,0,__PYX_ERR(0, 1172, __pyx_L1_error))
  __pyx_t_4 = &__pyx_v_self->c_reach.system.tmvOde.tms;
  __pyx_t_3 = __pyx_t_4->begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_t_4->end())) break;
    __pyx_t_5 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_v = __pyx_t_5;

    /* "flowstar/reachability.pyx":1173
 *         names.insert(names.begin(), b"local_t")
 *         for v in self.c_reach.system.tmvOde.tms:
 *             v.expansion.toString(ode_str, names)             # <<<<<<<<<<<<<<
 *             v.remainder.toString(interval_str)
 *             res.append("({}, {})".format(ode_str, interval_str))
 */
    __Pyx_TraceLine(1173,0,__PYX_ERR(0, 1173, __pyx_L1_error))
    __pyx_v_v.expansion.toString(__pyx_v_ode_str, __pyx_v_names);

    /* "flowstar/reachability.pyx":1174
 *         for v in self.c_reach.system.tmvOde.tms:
 *             v.expansion.toString(ode_str, names)
 *             v.remainder.toString(interval_str)             # <<<<<<<<<<<<<<
 *             res.append("({}, {})".format(ode_str, interval_str))
 *         return res
 */
    __Pyx_TraceLine(1174,0,__PYX_ERR(0, 1174, __pyx_L1_error))
    __pyx_v_v.remainder.toString(__pyx_v_interval_str);

    /* "flowstar/reachability.pyx":1175
 *             v.expansion.toString(ode_str, names)
 *             v.remainder.toString(interval_str)
 *             res.append("({}, {})".format(ode_str, interval_str))             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
    __Pyx_TraceLine(1175,0,__PYX_ERR(0, 1175, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__21, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_ode_str); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_interval_str); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_8);
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "flowstar/reachability.pyx":1172
 *         cdef vector[string] names = self.c_reach.stateVarNames
 *         names.insert(names.begin(), b"local_t")
 *         for v in self.c_reach.system.tmvOde.tms:             # <<<<<<<<<<<<<<
 *             v.expansion.toString(ode_str, names)
 *             v.remainder.toString(interval_str)
 */
    __Pyx_TraceLine(1172,0,__PYX_ERR(0, 1172, __pyx_L1_error))
  }

  /* "flowstar/reachability.pyx":1176
 *             v.remainder.toString(interval_str)
 *             res.append("({}, {})".format(ode_str, interval_str))
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1176,0,__PYX_ERR(0, 1176, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1166
 * 
 *     @property
 *     def ode_strs(self):             # <<<<<<<<<<<<<<
 *         res = []
 *         cdef string ode_str
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("flowstar.reachability.CReach.ode_strs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1179
 * 
 *     @property
 *     def num_odes(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.system.tmvOde.tms.size())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_8num_odes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_8num_odes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_8num_odes___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_8num_odes___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1179, 0, __PYX_ERR(0, 1179, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1180
 *     @property
 *     def num_odes(self):
 *         return int(self.c_reach.system.tmvOde.tms.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1180,0,__PYX_ERR(0, 1180, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_reach.system.tmvOde.tms.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1179
 * 
 *     @property
 *     def num_odes(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.system.tmvOde.tms.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("flowstar.reachability.CReach.num_odes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pxd":93
 * 
 * cdef class CReach:
 *     cdef public FlowstarGlobalManager global_manager             # <<<<<<<<<<<<<<
 * 
 *     cdef ContinuousReachability c_reach
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_14global_manager_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_14global_manager_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_14global_manager___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_14global_manager___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 93, 0, __PYX_ERR(2, 93, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->global_manager));
  __pyx_r = ((PyObject *)__pyx_v_self->global_manager);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach.global_manager.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8flowstar_12reachability_6CReach_14global_manager_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8flowstar_12reachability_6CReach_14global_manager_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_14global_manager_2__set__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_12reachability_6CReach_14global_manager_2__set__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 93, 0, __PYX_ERR(2, 93, __pyx_L1_error));
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager))))) __PYX_ERR(2, 93, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->global_manager);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->global_manager));
  __pyx_v_self->global_manager = ((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.CReach.global_manager.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8flowstar_12reachability_6CReach_14global_manager_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8flowstar_12reachability_6CReach_14global_manager_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_14global_manager_4__del__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_12reachability_6CReach_14global_manager_4__del__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[2], 93, 0, __PYX_ERR(2, 93, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->global_manager);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->global_manager));
  __pyx_v_self->global_manager = ((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach.global_manager.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pxd":96
 * 
 *     cdef ContinuousReachability c_reach
 *     cdef public bint ran             # <<<<<<<<<<<<<<
 *     cdef bint prepared
 *     cdef public int result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_3ran_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_3ran_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_3ran___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_3ran___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 96, 0, __PYX_ERR(2, 96, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->ran); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.CReach.ran.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8flowstar_12reachability_6CReach_3ran_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8flowstar_12reachability_6CReach_3ran_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_3ran_2__set__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_12reachability_6CReach_3ran_2__set__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 96, 0, __PYX_ERR(2, 96, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 96, __pyx_L1_error)
  __pyx_v_self->ran = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach.ran.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pxd":98
 *     cdef public bint ran
 *     cdef bint prepared
 *     cdef public int result             # <<<<<<<<<<<<<<
 *     cdef public bint symbolic_composition
 *     cdef vector[Interval] initials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_6result_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_6result_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_6result___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_6result___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 98, 0, __PYX_ERR(2, 98, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->result); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.CReach.result.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8flowstar_12reachability_6CReach_6result_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8flowstar_12reachability_6CReach_6result_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_6result_2__set__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_12reachability_6CReach_6result_2__set__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 98, 0, __PYX_ERR(2, 98, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 98, __pyx_L1_error)
  __pyx_v_self->result = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach.result.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pxd":99
 *     cdef bint prepared
 *     cdef public int result
 *     cdef public bint symbolic_composition             # <<<<<<<<<<<<<<
 *     cdef vector[Interval] initials
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_20symbolic_composition_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_20symbolic_composition_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_20symbolic_composition___get__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_20symbolic_composition___get__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[2], 99, 0, __PYX_ERR(2, 99, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->symbolic_composition); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.CReach.symbolic_composition.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8flowstar_12reachability_6CReach_20symbolic_composition_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8flowstar_12reachability_6CReach_20symbolic_composition_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_20symbolic_composition_2__set__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8flowstar_12reachability_6CReach_20symbolic_composition_2__set__(struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[2], 99, 0, __PYX_ERR(2, 99, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 99, __pyx_L1_error)
  __pyx_v_self->symbolic_composition = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.CReach.symbolic_composition.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_18__reduce_cython__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.CReach.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_6CReach_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_6CReach_20__setstate_cython__(((struct __pyx_obj_8flowstar_12reachability_CReach *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_6CReach_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_CReach *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.CReach.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1192
 * cdef class FlowstarGlobalManager:
 *     @staticmethod
 *     def get_global_domain_var_names():             # <<<<<<<<<<<<<<
 *         global domainVarNames
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_1get_global_domain_var_names(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_1get_global_domain_var_names = {"get_global_domain_var_names", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_1get_global_domain_var_names, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_1get_global_domain_var_names(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_global_domain_var_names (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_global_domain_var_names", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_global_domain_var_names", 0))) return NULL;
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_get_global_domain_var_names();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_get_global_domain_var_names(void) {
  std::string __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string> ::iterator __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__24)
  __Pyx_RefNannySetupContext("get_global_domain_var_names", 0);
  __Pyx_TraceCall("get_global_domain_var_names", __pyx_f[0], 1192, 0, __PYX_ERR(0, 1192, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1195
 *         global domainVarNames
 * 
 *         return [str(name) for name in domainVarNames]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_TraceLine(1195,0,__PYX_ERR(0, 1195, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = flowstar::domainVarNames.begin();
  for (;;) {
    if (!(__pyx_t_2 != flowstar::domainVarNames.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_name = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1192
 * cdef class FlowstarGlobalManager:
 *     @staticmethod
 *     def get_global_domain_var_names():             # <<<<<<<<<<<<<<
 *         global domainVarNames
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.get_global_domain_var_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1198
 * 
 *     @staticmethod
 *     def get_global_factorial_rec():             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         return interval.intervals_to_list(factorial_rec)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_3get_global_factorial_rec(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_3get_global_factorial_rec = {"get_global_factorial_rec", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_3get_global_factorial_rec, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_3get_global_factorial_rec(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_global_factorial_rec (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_global_factorial_rec", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_global_factorial_rec", 0))) return NULL;
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_2get_global_factorial_rec();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_2get_global_factorial_rec(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__25)
  __Pyx_RefNannySetupContext("get_global_factorial_rec", 0);
  __Pyx_TraceCall("get_global_factorial_rec", __pyx_f[0], 1198, 0, __PYX_ERR(0, 1198, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1200
 *     def get_global_factorial_rec():
 *         global factorial_rec
 *         return interval.intervals_to_list(factorial_rec)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_TraceLine(1200,0,__PYX_ERR(0, 1200, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8flowstar_8interval_intervals_to_list(flowstar::factorial_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1198
 * 
 *     @staticmethod
 *     def get_global_factorial_rec():             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         return interval.intervals_to_list(factorial_rec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.get_global_factorial_rec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1203
 * 
 *     @staticmethod
 *     def get_global_power_4():             # <<<<<<<<<<<<<<
 *         global power_4
 *         return interval.intervals_to_list(power_4)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_5get_global_power_4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_5get_global_power_4 = {"get_global_power_4", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_5get_global_power_4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_5get_global_power_4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_global_power_4 (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_global_power_4", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_global_power_4", 0))) return NULL;
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_4get_global_power_4();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_4get_global_power_4(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__26)
  __Pyx_RefNannySetupContext("get_global_power_4", 0);
  __Pyx_TraceCall("get_global_power_4", __pyx_f[0], 1203, 0, __PYX_ERR(0, 1203, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1205
 *     def get_global_power_4():
 *         global power_4
 *         return interval.intervals_to_list(power_4)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_TraceLine(1205,0,__PYX_ERR(0, 1205, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8flowstar_8interval_intervals_to_list(flowstar::power_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1203
 * 
 *     @staticmethod
 *     def get_global_power_4():             # <<<<<<<<<<<<<<
 *         global power_4
 *         return interval.intervals_to_list(power_4)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.get_global_power_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1208
 * 
 *     @staticmethod
 *     def get_global_double_factorial():             # <<<<<<<<<<<<<<
 *         global double_factorial
 *         return interval.intervals_to_list(double_factorial)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_7get_global_double_factorial(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_7get_global_double_factorial = {"get_global_double_factorial", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_7get_global_double_factorial, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_7get_global_double_factorial(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_global_double_factorial (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_global_double_factorial", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_global_double_factorial", 0))) return NULL;
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_6get_global_double_factorial();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_6get_global_double_factorial(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__27)
  __Pyx_RefNannySetupContext("get_global_double_factorial", 0);
  __Pyx_TraceCall("get_global_double_factorial", __pyx_f[0], 1208, 0, __PYX_ERR(0, 1208, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1210
 *     def get_global_double_factorial():
 *         global double_factorial
 *         return interval.intervals_to_list(double_factorial)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_TraceLine(1210,0,__PYX_ERR(0, 1210, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8flowstar_8interval_intervals_to_list(flowstar::double_factorial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "flowstar/reachability.pyx":1208
 * 
 *     @staticmethod
 *     def get_global_double_factorial():             # <<<<<<<<<<<<<<
 *         global double_factorial
 *         return interval.intervals_to_list(double_factorial)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.get_global_double_factorial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1213
 * 
 *     @staticmethod
 *     def clear_global():             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_9clear_global(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_9clear_global = {"clear_global", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_9clear_global, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_9clear_global(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_global (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("clear_global", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "clear_global", 0))) return NULL;
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_8clear_global();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_8clear_global(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_TraceFrameInit(__pyx_codeobj__28)
  __Pyx_RefNannySetupContext("clear_global", 0);
  __Pyx_TraceCall("clear_global", __pyx_f[0], 1213, 0, __PYX_ERR(0, 1213, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1219
 *         global domainVarNames
 * 
 *         factorial_rec.clear()             # <<<<<<<<<<<<<<
 *         power_4.clear()
 *         double_factorial.clear()
 */
  __Pyx_TraceLine(1219,0,__PYX_ERR(0, 1219, __pyx_L1_error))
  flowstar::factorial_rec.clear();

  /* "flowstar/reachability.pyx":1220
 * 
 *         factorial_rec.clear()
 *         power_4.clear()             # <<<<<<<<<<<<<<
 *         double_factorial.clear()
 *         domainVarNames.clear()
 */
  __Pyx_TraceLine(1220,0,__PYX_ERR(0, 1220, __pyx_L1_error))
  flowstar::power_4.clear();

  /* "flowstar/reachability.pyx":1221
 *         factorial_rec.clear()
 *         power_4.clear()
 *         double_factorial.clear()             # <<<<<<<<<<<<<<
 *         domainVarNames.clear()
 * 
 */
  __Pyx_TraceLine(1221,0,__PYX_ERR(0, 1221, __pyx_L1_error))
  flowstar::double_factorial.clear();

  /* "flowstar/reachability.pyx":1222
 *         power_4.clear()
 *         double_factorial.clear()
 *         domainVarNames.clear()             # <<<<<<<<<<<<<<
 * 
 *     def capture(FlowstarGlobalManager self):
 */
  __Pyx_TraceLine(1222,0,__PYX_ERR(0, 1222, __pyx_L1_error))
  flowstar::domainVarNames.clear();

  /* "flowstar/reachability.pyx":1213
 * 
 *     @staticmethod
 *     def clear_global():             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.clear_global", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1224
 *         domainVarNames.clear()
 * 
 *     def capture(FlowstarGlobalManager self):             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_11capture(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_11capture(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("capture (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_10capture(((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_10capture(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("capture", 0);
  __Pyx_TraceCall("capture", __pyx_f[0], 1224, 0, __PYX_ERR(0, 1224, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1230
 *         global domainVarNames
 * 
 *         self.domainVarNames = domainVarNames             # <<<<<<<<<<<<<<
 *         self.factorial_rec = factorial_rec
 *         self.power_4 = power_4
 */
  __Pyx_TraceLine(1230,0,__PYX_ERR(0, 1230, __pyx_L1_error))
  __pyx_v_self->domainVarNames = flowstar::domainVarNames;

  /* "flowstar/reachability.pyx":1231
 * 
 *         self.domainVarNames = domainVarNames
 *         self.factorial_rec = factorial_rec             # <<<<<<<<<<<<<<
 *         self.power_4 = power_4
 *         self.double_factorial = double_factorial
 */
  __Pyx_TraceLine(1231,0,__PYX_ERR(0, 1231, __pyx_L1_error))
  __pyx_v_self->factorial_rec = flowstar::factorial_rec;

  /* "flowstar/reachability.pyx":1232
 *         self.domainVarNames = domainVarNames
 *         self.factorial_rec = factorial_rec
 *         self.power_4 = power_4             # <<<<<<<<<<<<<<
 *         self.double_factorial = double_factorial
 * 
 */
  __Pyx_TraceLine(1232,0,__PYX_ERR(0, 1232, __pyx_L1_error))
  __pyx_v_self->power_4 = flowstar::power_4;

  /* "flowstar/reachability.pyx":1233
 *         self.factorial_rec = factorial_rec
 *         self.power_4 = power_4
 *         self.double_factorial = double_factorial             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __Pyx_TraceLine(1233,0,__PYX_ERR(0, 1233, __pyx_L1_error))
  __pyx_v_self->double_factorial = flowstar::double_factorial;

  /* "flowstar/reachability.pyx":1224
 *         domainVarNames.clear()
 * 
 *     def capture(FlowstarGlobalManager self):             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.capture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1235
 *         self.double_factorial = double_factorial
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.domainVarNames.clear()
 *         self.factorial_rec.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_13clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_13clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_12clear(((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_12clear(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);
  __Pyx_TraceCall("clear", __pyx_f[0], 1235, 0, __PYX_ERR(0, 1235, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1236
 * 
 *     def clear(self):
 *         self.domainVarNames.clear()             # <<<<<<<<<<<<<<
 *         self.factorial_rec.clear()
 *         self.power_4.clear()
 */
  __Pyx_TraceLine(1236,0,__PYX_ERR(0, 1236, __pyx_L1_error))
  __pyx_v_self->domainVarNames.clear();

  /* "flowstar/reachability.pyx":1237
 *     def clear(self):
 *         self.domainVarNames.clear()
 *         self.factorial_rec.clear()             # <<<<<<<<<<<<<<
 *         self.power_4.clear()
 *         self.double_factorial.clear()
 */
  __Pyx_TraceLine(1237,0,__PYX_ERR(0, 1237, __pyx_L1_error))
  __pyx_v_self->factorial_rec.clear();

  /* "flowstar/reachability.pyx":1238
 *         self.domainVarNames.clear()
 *         self.factorial_rec.clear()
 *         self.power_4.clear()             # <<<<<<<<<<<<<<
 *         self.double_factorial.clear()
 * 
 */
  __Pyx_TraceLine(1238,0,__PYX_ERR(0, 1238, __pyx_L1_error))
  __pyx_v_self->power_4.clear();

  /* "flowstar/reachability.pyx":1239
 *         self.factorial_rec.clear()
 *         self.power_4.clear()
 *         self.double_factorial.clear()             # <<<<<<<<<<<<<<
 * 
 *     # Restore local copy of flowstar global variables
 */
  __Pyx_TraceLine(1239,0,__PYX_ERR(0, 1239, __pyx_L1_error))
  __pyx_v_self->double_factorial.clear();

  /* "flowstar/reachability.pyx":1235
 *         self.double_factorial = double_factorial
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.domainVarNames.clear()
 *         self.factorial_rec.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1242
 * 
 *     # Restore local copy of flowstar global variables
 *     def restore(FlowstarGlobalManager self):             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_15restore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_15restore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_14restore(((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_14restore(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  std::vector<flowstar::Interval>  __pyx_t_2;
  __Pyx_RefNannySetupContext("restore", 0);
  __Pyx_TraceCall("restore", __pyx_f[0], 1242, 0, __PYX_ERR(0, 1242, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1248
 *         global domainVarNames
 * 
 *         domainVarNames = self.domainVarNames             # <<<<<<<<<<<<<<
 *         factorial_rec = self.factorial_rec
 *         power_4 = self.power_4
 */
  __Pyx_TraceLine(1248,0,__PYX_ERR(0, 1248, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_self->domainVarNames;
  flowstar::domainVarNames = __pyx_t_1;

  /* "flowstar/reachability.pyx":1249
 * 
 *         domainVarNames = self.domainVarNames
 *         factorial_rec = self.factorial_rec             # <<<<<<<<<<<<<<
 *         power_4 = self.power_4
 *         double_factorial = self.double_factorial
 */
  __Pyx_TraceLine(1249,0,__PYX_ERR(0, 1249, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->factorial_rec;
  flowstar::factorial_rec = __pyx_t_2;

  /* "flowstar/reachability.pyx":1250
 *         domainVarNames = self.domainVarNames
 *         factorial_rec = self.factorial_rec
 *         power_4 = self.power_4             # <<<<<<<<<<<<<<
 *         double_factorial = self.double_factorial
 * 
 */
  __Pyx_TraceLine(1250,0,__PYX_ERR(0, 1250, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->power_4;
  flowstar::power_4 = __pyx_t_2;

  /* "flowstar/reachability.pyx":1251
 *         factorial_rec = self.factorial_rec
 *         power_4 = self.power_4
 *         double_factorial = self.double_factorial             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __Pyx_TraceLine(1251,0,__PYX_ERR(0, 1251, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->double_factorial;
  flowstar::double_factorial = __pyx_t_2;

  /* "flowstar/reachability.pyx":1242
 * 
 *     # Restore local copy of flowstar global variables
 *     def restore(FlowstarGlobalManager self):             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.restore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1253
 *         double_factorial = self.double_factorial
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         self.restore()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_17__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_17__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_16__enter__(((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_16__enter__(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__enter__", 0);
  __Pyx_TraceCall("__enter__", __pyx_f[0], 1253, 0, __PYX_ERR(0, 1253, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1254
 * 
 *     def __enter__(self):
 *         self.restore()             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */
  __Pyx_TraceLine(1254,0,__PYX_ERR(0, 1254, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_restore); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1254, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":1253
 *         double_factorial = self.double_factorial
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         self.restore()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "flowstar/reachability.pyx":1256
 *         self.restore()
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         FlowstarGlobalManager.clear_global()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_19__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_19__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 1256, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 1256, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) __PYX_ERR(0, 1256, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1256, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_18__exit__(((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_18__exit__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__exit__", 0);
  __Pyx_TraceCall("__exit__", __pyx_f[0], 1256, 0, __PYX_ERR(0, 1256, __pyx_L1_error));

  /* "flowstar/reachability.pyx":1257
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         FlowstarGlobalManager.clear_global()             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(1257,0,__PYX_ERR(0, 1257, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager), __pyx_n_s_clear_global); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1257, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":1256
 *         self.restore()
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         FlowstarGlobalManager.clear_global()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_20__reduce_cython__(((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_22__setstate_cython__(((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8flowstar_12reachability_21FlowstarGlobalManager_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("flowstar.reachability.FlowstarGlobalManager.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cysignals/signals.pxd":49
 * # (PyErr_Occurred() is non-NULL). To Cython, it will look like
 * # cython_check_exception() actually raised the exception.
 * cdef inline void cython_check_exception() nogil except *:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

static CYTHON_INLINE void __pyx_f_9cysignals_7signals_cython_check_exception(void) {
  __Pyx_TraceDeclarations
  __Pyx_TraceCall("cython_check_exception", __pyx_f[3], 49, 1, __PYX_ERR(3, 49, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cysignals.signals.cython_check_exception", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "cysignals/signals.pxd":64
 * 
 * 
 * cdef inline void __generate_declarations():             # <<<<<<<<<<<<<<
 *     cysigs
 *     _sig_on_interrupt_received
 */

static CYTHON_INLINE void __pyx_f_9cysignals_7signals___generate_declarations(void) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__generate_declarations", 0);
  __Pyx_TraceCall("__generate_declarations", __pyx_f[3], 64, 0, __PYX_ERR(3, 64, __pyx_L1_error));

  /* "cysignals/signals.pxd":65
 * 
 * cdef inline void __generate_declarations():
 *     cysigs             # <<<<<<<<<<<<<<
 *     _sig_on_interrupt_received
 *     _sig_on_recover
 */
  __Pyx_TraceLine(65,0,__PYX_ERR(3, 65, __pyx_L1_error))
  (void)(cysigs);

  /* "cysignals/signals.pxd":66
 * cdef inline void __generate_declarations():
 *     cysigs
 *     _sig_on_interrupt_received             # <<<<<<<<<<<<<<
 *     _sig_on_recover
 *     _sig_off_warning
 */
  __Pyx_TraceLine(66,0,__PYX_ERR(3, 66, __pyx_L1_error))
  (void)(_sig_on_interrupt_received);

  /* "cysignals/signals.pxd":67
 *     cysigs
 *     _sig_on_interrupt_received
 *     _sig_on_recover             # <<<<<<<<<<<<<<
 *     _sig_off_warning
 *     print_backtrace
 */
  __Pyx_TraceLine(67,0,__PYX_ERR(3, 67, __pyx_L1_error))
  (void)(_sig_on_recover);

  /* "cysignals/signals.pxd":68
 *     _sig_on_interrupt_received
 *     _sig_on_recover
 *     _sig_off_warning             # <<<<<<<<<<<<<<
 *     print_backtrace
 */
  __Pyx_TraceLine(68,0,__PYX_ERR(3, 68, __pyx_L1_error))
  (void)(_sig_off_warning);

  /* "cysignals/signals.pxd":69
 *     _sig_on_recover
 *     _sig_off_warning
 *     print_backtrace             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(69,0,__PYX_ERR(3, 69, __pyx_L1_error))
  (void)(print_backtrace);

  /* "cysignals/signals.pxd":64
 * 
 * 
 * cdef inline void __generate_declarations():             # <<<<<<<<<<<<<<
 *     cysigs
 *     _sig_on_interrupt_received
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cysignals.signals.__generate_declarations", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_string_from_py_std__in_string", __pyx_f[1], 13, 0, __PYX_ERR(1, 13, __pyx_L1_error));

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(1, 15, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(1, 16, __pyx_L1_error))
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_f[1], 31, 0, __PYX_ERR(1, 31, __pyx_L1_error));

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(1, 32, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_f[1], 37, 0, __PYX_ERR(1, 37, __pyx_L1_error));

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(38,0,__PYX_ERR(1, 38, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_f[1], 43, 0, __PYX_ERR(1, 43, __pyx_L1_error));

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(44,0,__PYX_ERR(1, 44, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_f[1], 49, 0, __PYX_ERR(1, 49, __pyx_L1_error));

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(1, 50, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_f[1], 55, 0, __PYX_ERR(1, 55, __pyx_L1_error));

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_TraceLine(56,0,__PYX_ERR(1, 56, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver __pyx_vtable_8flowstar_12reachability_PolyObserver;

static PyObject *__pyx_tp_new_8flowstar_12reachability_PolyObserver(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8flowstar_12reachability_PolyObserver *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8flowstar_12reachability_PolyObserver *)o);
  p->__pyx_vtab = __pyx_vtabptr_8flowstar_12reachability_PolyObserver;
  new((void*)&(p->poly_f_fns)) std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ();
  new((void*)&(p->poly_fprime_fns)) std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ();
  new((void*)&(p->bools)) std::vector<std::optional<int> > ();
  new((void*)&(p->masked_regions)) std::vector<flowstar::Interval> ();
  p->reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)Py_None); Py_INCREF(Py_None);
  p->f = ((struct __pyx_obj_8flowstar_4poly_Poly *)Py_None); Py_INCREF(Py_None);
  p->fprime = ((struct __pyx_obj_8flowstar_4poly_Poly *)Py_None); Py_INCREF(Py_None);
  p->mask = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8flowstar_12reachability_PolyObserver(PyObject *o) {
  struct __pyx_obj_8flowstar_12reachability_PolyObserver *p = (struct __pyx_obj_8flowstar_12reachability_PolyObserver *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->poly_f_fns);
  __Pyx_call_destructor(p->poly_fprime_fns);
  __Pyx_call_destructor(p->bools);
  __Pyx_call_destructor(p->masked_regions);
  Py_CLEAR(p->reach);
  Py_CLEAR(p->f);
  Py_CLEAR(p->fprime);
  Py_CLEAR(p->mask);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8flowstar_12reachability_PolyObserver(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8flowstar_12reachability_PolyObserver *p = (struct __pyx_obj_8flowstar_12reachability_PolyObserver *)o;
  if (p->reach) {
    e = (*v)(((PyObject *)p->reach), a); if (e) return e;
  }
  if (p->f) {
    e = (*v)(((PyObject *)p->f), a); if (e) return e;
  }
  if (p->fprime) {
    e = (*v)(((PyObject *)p->fprime), a); if (e) return e;
  }
  if (p->mask) {
    e = (*v)(p->mask, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8flowstar_12reachability_PolyObserver(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8flowstar_12reachability_PolyObserver *p = (struct __pyx_obj_8flowstar_12reachability_PolyObserver *)o;
  tmp = ((PyObject*)p->reach);
  p->reach = ((struct __pyx_obj_8flowstar_12reachability_CReach *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->f);
  p->f = ((struct __pyx_obj_8flowstar_4poly_Poly *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->fprime);
  p->fprime = ((struct __pyx_obj_8flowstar_4poly_Poly *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->mask);
  p->mask = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8flowstar_12reachability_12PolyObserver_flowstar_successful(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_12PolyObserver_19flowstar_successful_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_12PolyObserver_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_12PolyObserver_4time_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_12PolyObserver_mask(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_12PolyObserver_4mask_1__get__(o);
}

static PyMethodDef __pyx_methods_8flowstar_12reachability_PolyObserver[] = {
  {"_init_stored_data", (PyCFunction)__pyx_pw_8flowstar_12reachability_12PolyObserver_3_init_stored_data, METH_NOARGS, 0},
  {"roots", (PyCFunction)__pyx_pw_8flowstar_12reachability_12PolyObserver_5roots, METH_VARARGS|METH_KEYWORDS, 0},
  {"check", (PyCFunction)__pyx_pw_8flowstar_12reachability_12PolyObserver_9check, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8flowstar_12reachability_12PolyObserver_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8flowstar_12reachability_12PolyObserver_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8flowstar_12reachability_PolyObserver[] = {
  {(char *)"flowstar_successful", __pyx_getprop_8flowstar_12reachability_12PolyObserver_flowstar_successful, 0, (char *)0, 0},
  {(char *)"time", __pyx_getprop_8flowstar_12reachability_12PolyObserver_time, 0, (char *)0, 0},
  {(char *)"mask", __pyx_getprop_8flowstar_12reachability_12PolyObserver_mask, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8flowstar_12reachability_PolyObserver = {
  PyVarObject_HEAD_INIT(0, 0)
  "flowstar.reachability.PolyObserver", /*tp_name*/
  sizeof(struct __pyx_obj_8flowstar_12reachability_PolyObserver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8flowstar_12reachability_PolyObserver, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_8flowstar_12reachability_12PolyObserver_7__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8flowstar_12reachability_PolyObserver, /*tp_traverse*/
  __pyx_tp_clear_8flowstar_12reachability_PolyObserver, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8flowstar_12reachability_PolyObserver, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8flowstar_12reachability_PolyObserver, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8flowstar_12reachability_12PolyObserver_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8flowstar_12reachability_PolyObserver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8flowstar_12reachability_RestrictedObserver __pyx_vtable_8flowstar_12reachability_RestrictedObserver;

static PyObject *__pyx_tp_new_8flowstar_12reachability_RestrictedObserver(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *p;
  PyObject *o = __pyx_tp_new_8flowstar_12reachability_PolyObserver(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8flowstar_12reachability_PolyObserver*)__pyx_vtabptr_8flowstar_12reachability_RestrictedObserver;
  new((void*)&(p->space_domain)) std::vector<flowstar::Interval> ();
  return o;
}

static void __pyx_tp_dealloc_8flowstar_12reachability_RestrictedObserver(PyObject *o) {
  struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *p = (struct __pyx_obj_8flowstar_12reachability_RestrictedObserver *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->space_domain);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8flowstar_12reachability_PolyObserver(o);
}

static PyMethodDef __pyx_methods_8flowstar_12reachability_RestrictedObserver[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8flowstar_12reachability_18RestrictedObserver_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8flowstar_12reachability_18RestrictedObserver_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8flowstar_12reachability_RestrictedObserver = {
  PyVarObject_HEAD_INIT(0, 0)
  "flowstar.reachability.RestrictedObserver", /*tp_name*/
  sizeof(struct __pyx_obj_8flowstar_12reachability_RestrictedObserver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8flowstar_12reachability_RestrictedObserver, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8flowstar_12reachability_12PolyObserver_7__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8flowstar_12reachability_PolyObserver, /*tp_traverse*/
  __pyx_tp_clear_8flowstar_12reachability_PolyObserver, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8flowstar_12reachability_RestrictedObserver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8flowstar_12reachability_18RestrictedObserver_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8flowstar_12reachability_RestrictedObserver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8flowstar_12reachability_CReach __pyx_vtable_8flowstar_12reachability_CReach;

static PyObject *__pyx_tp_new_8flowstar_12reachability_CReach(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8flowstar_12reachability_CReach *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8flowstar_12reachability_CReach *)o);
  p->__pyx_vtab = __pyx_vtabptr_8flowstar_12reachability_CReach;
  new((void*)&(p->c_reach)) flowstar::ContinuousReachability();
  new((void*)&(p->initials)) std::vector<flowstar::Interval> ();
  p->global_manager = ((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8flowstar_12reachability_6CReach_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8flowstar_12reachability_CReach(PyObject *o) {
  struct __pyx_obj_8flowstar_12reachability_CReach *p = (struct __pyx_obj_8flowstar_12reachability_CReach *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->c_reach);
  __Pyx_call_destructor(p->initials);
  Py_CLEAR(p->global_manager);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8flowstar_12reachability_CReach(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8flowstar_12reachability_CReach *p = (struct __pyx_obj_8flowstar_12reachability_CReach *)o;
  if (p->global_manager) {
    e = (*v)(((PyObject *)p->global_manager), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8flowstar_12reachability_CReach(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8flowstar_12reachability_CReach *p = (struct __pyx_obj_8flowstar_12reachability_CReach *)o;
  tmp = ((PyObject*)p->global_manager);
  p->global_manager = ((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_res(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_3res_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_cutoff_threshold(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_16cutoff_threshold_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_estimation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_10estimation_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_num_flowpipes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_13num_flowpipes_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_num_state_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_14num_state_vars_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_state_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_10state_vars_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_num_initials(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_12num_initials_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_step(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_4step_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_4time_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_ode_strs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_8ode_strs_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_num_odes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_8num_odes_1__get__(o);
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_global_manager(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_14global_manager_1__get__(o);
}

static int __pyx_setprop_8flowstar_12reachability_6CReach_global_manager(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8flowstar_12reachability_6CReach_14global_manager_3__set__(o, v);
  }
  else {
    return __pyx_pw_8flowstar_12reachability_6CReach_14global_manager_5__del__(o);
  }
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_ran(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_3ran_1__get__(o);
}

static int __pyx_setprop_8flowstar_12reachability_6CReach_ran(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8flowstar_12reachability_6CReach_3ran_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_result(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_6result_1__get__(o);
}

static int __pyx_setprop_8flowstar_12reachability_6CReach_result(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8flowstar_12reachability_6CReach_6result_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8flowstar_12reachability_6CReach_symbolic_composition(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8flowstar_12reachability_6CReach_20symbolic_composition_1__get__(o);
}

static int __pyx_setprop_8flowstar_12reachability_6CReach_symbolic_composition(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8flowstar_12reachability_6CReach_20symbolic_composition_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8flowstar_12reachability_CReach[] = {
  {"_init_clone", (PyCFunction)__pyx_pw_8flowstar_12reachability_6CReach_3_init_clone, METH_VARARGS|METH_KEYWORDS, 0},
  {"_init_args", (PyCFunction)__pyx_pw_8flowstar_12reachability_6CReach_5_init_args, METH_VARARGS|METH_KEYWORDS, 0},
  {"convert_space_domain", (PyCFunction)__pyx_pw_8flowstar_12reachability_6CReach_7convert_space_domain, METH_O, 0},
  {"roots", (PyCFunction)__pyx_pw_8flowstar_12reachability_6CReach_9roots, METH_VARARGS|METH_KEYWORDS, 0},
  {"eval_poly", (PyCFunction)__pyx_pw_8flowstar_12reachability_6CReach_13eval_poly, METH_VARARGS|METH_KEYWORDS, 0},
  {"prepare", (PyCFunction)__pyx_pw_8flowstar_12reachability_6CReach_15prepare, METH_NOARGS, __pyx_doc_8flowstar_12reachability_6CReach_14prepare},
  {"run", (PyCFunction)__pyx_pw_8flowstar_12reachability_6CReach_17run, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8flowstar_12reachability_6CReach_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8flowstar_12reachability_6CReach_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8flowstar_12reachability_CReach[] = {
  {(char *)"res", __pyx_getprop_8flowstar_12reachability_6CReach_res, 0, (char *)0, 0},
  {(char *)"cutoff_threshold", __pyx_getprop_8flowstar_12reachability_6CReach_cutoff_threshold, 0, (char *)0, 0},
  {(char *)"estimation", __pyx_getprop_8flowstar_12reachability_6CReach_estimation, 0, (char *)0, 0},
  {(char *)"num_flowpipes", __pyx_getprop_8flowstar_12reachability_6CReach_num_flowpipes, 0, (char *)0, 0},
  {(char *)"num_state_vars", __pyx_getprop_8flowstar_12reachability_6CReach_num_state_vars, 0, (char *)0, 0},
  {(char *)"state_vars", __pyx_getprop_8flowstar_12reachability_6CReach_state_vars, 0, (char *)0, 0},
  {(char *)"num_initials", __pyx_getprop_8flowstar_12reachability_6CReach_num_initials, 0, (char *)0, 0},
  {(char *)"step", __pyx_getprop_8flowstar_12reachability_6CReach_step, 0, (char *)0, 0},
  {(char *)"time", __pyx_getprop_8flowstar_12reachability_6CReach_time, 0, (char *)0, 0},
  {(char *)"ode_strs", __pyx_getprop_8flowstar_12reachability_6CReach_ode_strs, 0, (char *)0, 0},
  {(char *)"num_odes", __pyx_getprop_8flowstar_12reachability_6CReach_num_odes, 0, (char *)0, 0},
  {(char *)"global_manager", __pyx_getprop_8flowstar_12reachability_6CReach_global_manager, __pyx_setprop_8flowstar_12reachability_6CReach_global_manager, (char *)0, 0},
  {(char *)"ran", __pyx_getprop_8flowstar_12reachability_6CReach_ran, __pyx_setprop_8flowstar_12reachability_6CReach_ran, (char *)0, 0},
  {(char *)"result", __pyx_getprop_8flowstar_12reachability_6CReach_result, __pyx_setprop_8flowstar_12reachability_6CReach_result, (char *)0, 0},
  {(char *)"symbolic_composition", __pyx_getprop_8flowstar_12reachability_6CReach_symbolic_composition, __pyx_setprop_8flowstar_12reachability_6CReach_symbolic_composition, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8flowstar_12reachability_CReach = {
  PyVarObject_HEAD_INIT(0, 0)
  "flowstar.reachability.CReach", /*tp_name*/
  sizeof(struct __pyx_obj_8flowstar_12reachability_CReach), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8flowstar_12reachability_CReach, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_8flowstar_12reachability_6CReach_11__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8flowstar_12reachability_CReach, /*tp_traverse*/
  __pyx_tp_clear_8flowstar_12reachability_CReach, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8flowstar_12reachability_CReach, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8flowstar_12reachability_CReach, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8flowstar_12reachability_CReach, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8flowstar_12reachability_FlowstarGlobalManager(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)o);
  new((void*)&(p->factorial_rec)) std::vector<flowstar::Interval> ();
  new((void*)&(p->power_4)) std::vector<flowstar::Interval> ();
  new((void*)&(p->double_factorial)) std::vector<flowstar::Interval> ();
  new((void*)&(p->domainVarNames)) std::vector<std::string> ();
  return o;
}

static void __pyx_tp_dealloc_8flowstar_12reachability_FlowstarGlobalManager(PyObject *o) {
  struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *p = (struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->factorial_rec);
  __Pyx_call_destructor(p->power_4);
  __Pyx_call_destructor(p->double_factorial);
  __Pyx_call_destructor(p->domainVarNames);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8flowstar_12reachability_FlowstarGlobalManager[] = {
  {"get_global_domain_var_names", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_1get_global_domain_var_names, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_global_factorial_rec", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_3get_global_factorial_rec, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_global_power_4", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_5get_global_power_4, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_global_double_factorial", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_7get_global_double_factorial, METH_VARARGS|METH_KEYWORDS, 0},
  {"clear_global", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_9clear_global, METH_VARARGS|METH_KEYWORDS, 0},
  {"capture", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_11capture, METH_NOARGS, 0},
  {"clear", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_13clear, METH_NOARGS, 0},
  {"restore", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_15restore, METH_NOARGS, 0},
  {"__enter__", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_17__enter__, METH_NOARGS, 0},
  {"__exit__", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_19__exit__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8flowstar_12reachability_21FlowstarGlobalManager_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8flowstar_12reachability_FlowstarGlobalManager = {
  PyVarObject_HEAD_INIT(0, 0)
  "flowstar.reachability.FlowstarGlobalManager", /*tp_name*/
  sizeof(struct __pyx_obj_8flowstar_12reachability_FlowstarGlobalManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8flowstar_12reachability_FlowstarGlobalManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8flowstar_12reachability_FlowstarGlobalManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8flowstar_12reachability_FlowstarGlobalManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *__pyx_freelist_8flowstar_12reachability___pyx_scope_struct___init_args[8];
static int __pyx_freecount_8flowstar_12reachability___pyx_scope_struct___init_args = 0;

static PyObject *__pyx_tp_new_8flowstar_12reachability___pyx_scope_struct___init_args(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8flowstar_12reachability___pyx_scope_struct___init_args > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args)))) {
    o = (PyObject*)__pyx_freelist_8flowstar_12reachability___pyx_scope_struct___init_args[--__pyx_freecount_8flowstar_12reachability___pyx_scope_struct___init_args];
    memset(o, 0, sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8flowstar_12reachability___pyx_scope_struct___init_args(PyObject *o) {
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *p = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_orders);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8flowstar_12reachability___pyx_scope_struct___init_args < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args)))) {
    __pyx_freelist_8flowstar_12reachability___pyx_scope_struct___init_args[__pyx_freecount_8flowstar_12reachability___pyx_scope_struct___init_args++] = ((struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8flowstar_12reachability___pyx_scope_struct___init_args(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *p = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *)o;
  if (p->__pyx_v_orders) {
    e = (*v)(p->__pyx_v_orders, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8flowstar_12reachability___pyx_scope_struct___init_args(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *p = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args *)o;
  tmp = ((PyObject*)p->__pyx_v_orders);
  p->__pyx_v_orders = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8flowstar_12reachability___pyx_scope_struct___init_args = {
  PyVarObject_HEAD_INIT(0, 0)
  "flowstar.reachability.__pyx_scope_struct___init_args", /*tp_name*/
  sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct___init_args), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8flowstar_12reachability___pyx_scope_struct___init_args, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8flowstar_12reachability___pyx_scope_struct___init_args, /*tp_traverse*/
  __pyx_tp_clear_8flowstar_12reachability___pyx_scope_struct___init_args, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8flowstar_12reachability___pyx_scope_struct___init_args, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *__pyx_freelist_8flowstar_12reachability___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_8flowstar_12reachability___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_8flowstar_12reachability___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8flowstar_12reachability___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8flowstar_12reachability___pyx_scope_struct_1_genexpr[--__pyx_freecount_8flowstar_12reachability___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8flowstar_12reachability___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8flowstar_12reachability___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_8flowstar_12reachability___pyx_scope_struct_1_genexpr[__pyx_freecount_8flowstar_12reachability___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8flowstar_12reachability___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8flowstar_12reachability___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "flowstar.reachability.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8flowstar_12reachability___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8flowstar_12reachability___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8flowstar_12reachability___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *__pyx_freelist_8flowstar_12reachability___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_8flowstar_12reachability___pyx_scope_struct_2_genexpr = 0;

static PyObject *__pyx_tp_new_8flowstar_12reachability___pyx_scope_struct_2_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8flowstar_12reachability___pyx_scope_struct_2_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8flowstar_12reachability___pyx_scope_struct_2_genexpr[--__pyx_freecount_8flowstar_12reachability___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8flowstar_12reachability___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8flowstar_12reachability___pyx_scope_struct_2_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_8flowstar_12reachability___pyx_scope_struct_2_genexpr[__pyx_freecount_8flowstar_12reachability___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8flowstar_12reachability___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8flowstar_12reachability___pyx_scope_struct_2_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "flowstar.reachability.__pyx_scope_struct_2_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_8flowstar_12reachability___pyx_scope_struct_2_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8flowstar_12reachability___pyx_scope_struct_2_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8flowstar_12reachability___pyx_scope_struct_2_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8flowstar_12reachability___pyx_scope_struct_2_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_reachability(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_reachability},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "reachability",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Already_ran, __pyx_k_Already_ran, sizeof(__pyx_k_Already_ran), 0, 0, 1, 0},
  {&__pyx_n_s_FlowstarFailedException, __pyx_k_FlowstarFailedException, sizeof(__pyx_k_FlowstarFailedException), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_case, __pyx_k_Invalid_case, sizeof(__pyx_k_Invalid_case), 0, 0, 1, 0},
  {&__pyx_kp_s_Not_ran, __pyx_k_Not_ran, sizeof(__pyx_k_Not_ran), 0, 0, 1, 0},
  {&__pyx_n_s_RIF, __pyx_k_RIF, sizeof(__pyx_k_RIF), 0, 0, 1, 1},
  {&__pyx_n_s_Reach, __pyx_k_Reach, sizeof(__pyx_k_Reach), 0, 0, 1, 1},
  {&__pyx_kp_s_Test_1, __pyx_k_Test_1, sizeof(__pyx_k_Test_1), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s__21, __pyx_k__21, sizeof(__pyx_k__21), 0, 0, 1, 0},
  {&__pyx_n_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 1},
  {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_capture, __pyx_k_capture, sizeof(__pyx_k_capture), 0, 0, 1, 1},
  {&__pyx_n_s_clear_global, __pyx_k_clear_global, sizeof(__pyx_k_clear_global), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_cutoff_threshold, __pyx_k_cutoff_threshold, sizeof(__pyx_k_cutoff_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_endpoints, __pyx_k_endpoints, sizeof(__pyx_k_endpoints), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_estimation, __pyx_k_estimation, sizeof(__pyx_k_estimation), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tb, __pyx_k_exc_tb, sizeof(__pyx_k_exc_tb), 0, 0, 1, 1},
  {&__pyx_n_s_exc_type, __pyx_k_exc_type, sizeof(__pyx_k_exc_type), 0, 0, 1, 1},
  {&__pyx_n_s_exc_val, __pyx_k_exc_val, sizeof(__pyx_k_exc_val), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_flowstar_reachability, __pyx_k_flowstar_reachability, sizeof(__pyx_k_flowstar_reachability), 0, 0, 1, 1},
  {&__pyx_kp_s_flowstar_reachability_pyx, __pyx_k_flowstar_reachability_pyx, sizeof(__pyx_k_flowstar_reachability_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_flowstar_successful, __pyx_k_flowstar_successful, sizeof(__pyx_k_flowstar_successful), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fprime, __pyx_k_fprime, sizeof(__pyx_k_fprime), 0, 0, 1, 1},
  {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_gens, __pyx_k_gens, sizeof(__pyx_k_gens), 0, 0, 1, 1},
  {&__pyx_n_s_get_global_domain_var_names, __pyx_k_get_global_domain_var_names, sizeof(__pyx_k_get_global_domain_var_names), 0, 0, 1, 1},
  {&__pyx_n_s_get_global_double_factorial, __pyx_k_get_global_double_factorial, sizeof(__pyx_k_get_global_double_factorial), 0, 0, 1, 1},
  {&__pyx_n_s_get_global_factorial_rec, __pyx_k_get_global_factorial_rec, sizeof(__pyx_k_get_global_factorial_rec), 0, 0, 1, 1},
  {&__pyx_n_s_get_global_power_4, __pyx_k_get_global_power_4, sizeof(__pyx_k_get_global_power_4), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init_args, __pyx_k_init_args, sizeof(__pyx_k_init_args), 0, 0, 1, 1},
  {&__pyx_n_s_init_args_locals_genexpr, __pyx_k_init_args_locals_genexpr, sizeof(__pyx_k_init_args_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_init_clone, __pyx_k_init_clone, sizeof(__pyx_k_init_clone), 0, 0, 1, 1},
  {&__pyx_n_s_init_stored_data, __pyx_k_init_stored_data, sizeof(__pyx_k_init_stored_data), 0, 0, 1, 1},
  {&__pyx_n_s_initials, __pyx_k_initials, sizeof(__pyx_k_initials), 0, 0, 1, 1},
  {&__pyx_n_s_integrationScheme, __pyx_k_integrationScheme, sizeof(__pyx_k_integrationScheme), 0, 0, 1, 1},
  {&__pyx_n_b_local_t, __pyx_k_local_t, sizeof(__pyx_k_local_t), 0, 0, 0, 1},
  {&__pyx_kp_s_local_var, __pyx_k_local_var, sizeof(__pyx_k_local_var), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_maxNumSteps, __pyx_k_maxNumSteps, sizeof(__pyx_k_maxNumSteps), 0, 0, 1, 1},
  {&__pyx_n_s_max_remainder_queue, __pyx_k_max_remainder_queue, sizeof(__pyx_k_max_remainder_queue), 0, 0, 1, 1},
  {&__pyx_kp_s_merging_intervals, __pyx_k_merging_intervals, sizeof(__pyx_k_merging_intervals), 0, 0, 1, 0},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_num_flowpipes, __pyx_k_num_flowpipes, sizeof(__pyx_k_num_flowpipes), 0, 0, 1, 1},
  {&__pyx_n_s_odes, __pyx_k_odes, sizeof(__pyx_k_odes), 0, 0, 1, 1},
  {&__pyx_n_s_operator, __pyx_k_operator, sizeof(__pyx_k_operator), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_orders, __pyx_k_orders, sizeof(__pyx_k_orders), 0, 0, 1, 1},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_precondition, __pyx_k_precondition, sizeof(__pyx_k_precondition), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_prepare_2, __pyx_k_prepare_2, sizeof(__pyx_k_prepare_2), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reach, __pyx_k_reach, sizeof(__pyx_k_reach), 0, 0, 1, 1},
  {&__pyx_kp_s_reached_detect_roots_t, __pyx_k_reached_detect_roots_t, sizeof(__pyx_k_reached_detect_roots_t), 0, 0, 1, 0},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_2, __pyx_k_reduce_2, sizeof(__pyx_k_reduce_2), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_restore, __pyx_k_restore, sizeof(__pyx_k_restore), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_n_s_sage, __pyx_k_sage, sizeof(__pyx_k_sage), 0, 0, 1, 1},
  {&__pyx_n_s_sage_all, __pyx_k_sage_all, sizeof(__pyx_k_sage_all), 0, 0, 1, 1},
  {&__pyx_kp_s_self_bools_self_masked_regions_s, __pyx_k_self_bools_self_masked_regions_s, sizeof(__pyx_k_self_bools_self_masked_regions_s), 0, 0, 1, 0},
  {&__pyx_kp_s_self_bools_self_masked_regions_s_2, __pyx_k_self_bools_self_masked_regions_s_2, sizeof(__pyx_k_self_bools_self_masked_regions_s_2), 0, 0, 1, 0},
  {&__pyx_kp_s_self_double_factorial_self_facto, __pyx_k_self_double_factorial_self_facto, sizeof(__pyx_k_self_double_factorial_self_facto), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_space_domain, __pyx_k_space_domain, sizeof(__pyx_k_space_domain), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_symbolic_composition, __pyx_k_symbolic_composition, sizeof(__pyx_k_symbolic_composition), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_vars, __pyx_k_vars, sizeof(__pyx_k_vars), 0, 0, 1, 1},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {&__pyx_n_s_verbosity, __pyx_k_verbosity, sizeof(__pyx_k_verbosity), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 1191, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_builtin_min = __Pyx_GetBuiltinName(__pyx_n_s_min); if (!__pyx_builtin_min) __PYX_ERR(0, 770, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 772, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 802, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_bools_self_masked_regions_s); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns,self.space_domain cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_bools_self_masked_regions_s); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "flowstar/reachability.pyx":168
 *             return None
 * 
 *         print("Test 1!")             # <<<<<<<<<<<<<<
 * 
 *         with self.reach.global_manager:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Test_1); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "flowstar/reachability.pyx":170
 *         print("Test 1!")
 * 
 *         with self.reach.global_manager:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(epsilon=epsilon, verbosity=verbosity)
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "flowstar/reachability.pyx":274
 *                                     poly_f_fn, poly_fprime_fn, T, T0):
 *             if verbosity >= 2:
 *                 print("===")             # <<<<<<<<<<<<<<
 *                 print("reached detect roots t={} + {}".format(
 *                     interval.as_str(T),
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s__5); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "flowstar/reachability.pyx":338
 *                 )
 *             else:
 *                 raise Exception("Invalid case!")             # <<<<<<<<<<<<<<
 * 
 *             ### Perform root detection
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Invalid_case); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "flowstar/reachability.pyx":477
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I)
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "flowstar/reachability.pyx":623
 *             Interval I = interval.make_interval(t)
 * 
 *         with self.reach.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_bool_interval(I)
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_bools_self_masked_regions_s_2); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.bools,self.masked_regions,self.poly_f_fns,self.poly_fprime_fns cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self_bools_self_masked_regions_s_2); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "flowstar/reachability.pyx":862
 *         self.prepare()
 * 
 *         with self.global_manager:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(f_poly, fprime_poly,
 *                                  space_domain=c_space_domain_ref,
 */
  __pyx_tuple__12 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "flowstar/reachability.pyx":1075
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 * 
 *         with self.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I, space_domain=c_space_domain_ref)
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "flowstar/reachability.pyx":1098
 *                 reference_wrapper[vector[Interval]](c_space_domain.value()))
 * 
 *         with self.global_manager: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I,
 *                 space_domain=c_space_domain_ref,
 */
  __pyx_tuple__17 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "flowstar/reachability.pyx":1109
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:
 *             raise Exception('Not ran!')             # <<<<<<<<<<<<<<
 * 
 *         if not self.prepared:
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Not_ran); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "flowstar/reachability.pyx":1112
 * 
 *         if not self.prepared:
 *             with self.global_manager:  # with local globals             # <<<<<<<<<<<<<<
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()
 */
  __pyx_tuple__19 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "flowstar/reachability.pyx":1119
 *     def run(self):
 *         if self.ran:
 *             raise Exception('Already ran')             # <<<<<<<<<<<<<<
 *         try:
 *             FlowstarGlobalManager.clear_global()
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Already_ran); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_self_double_factorial_self_facto); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.double_factorial,self.factorial_rec,self.power_4 cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_self_double_factorial_self_facto); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "flowstar/reachability.pyx":1192
 * cdef class FlowstarGlobalManager:
 *     @staticmethod
 *     def get_global_domain_var_names():             # <<<<<<<<<<<<<<
 *         global domainVarNames
 * 
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_n_s_name_2); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_flowstar_reachability_pyx, __pyx_n_s_get_global_domain_var_names, 1192, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 1192, __pyx_L1_error)

  /* "flowstar/reachability.pyx":1198
 * 
 *     @staticmethod
 *     def get_global_factorial_rec():             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         return interval.intervals_to_list(factorial_rec)
 */
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_flowstar_reachability_pyx, __pyx_n_s_get_global_factorial_rec, 1198, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 1198, __pyx_L1_error)

  /* "flowstar/reachability.pyx":1203
 * 
 *     @staticmethod
 *     def get_global_power_4():             # <<<<<<<<<<<<<<
 *         global power_4
 *         return interval.intervals_to_list(power_4)
 */
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_flowstar_reachability_pyx, __pyx_n_s_get_global_power_4, 1203, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 1203, __pyx_L1_error)

  /* "flowstar/reachability.pyx":1208
 * 
 *     @staticmethod
 *     def get_global_double_factorial():             # <<<<<<<<<<<<<<
 *         global double_factorial
 *         return interval.intervals_to_list(double_factorial)
 */
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_flowstar_reachability_pyx, __pyx_n_s_get_global_double_factorial, 1208, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 1208, __pyx_L1_error)

  /* "flowstar/reachability.pyx":1213
 * 
 *     @staticmethod
 *     def clear_global():             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_flowstar_reachability_pyx, __pyx_n_s_clear_global, 1213, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_3 = PyFloat_FromDouble(1e-3); if (unlikely(!__pyx_float_1eneg_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_7 = PyFloat_FromDouble(1e-7); if (unlikely(!__pyx_float_1eneg_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_00001 = PyFloat_FromDouble(0.00001); if (unlikely(!__pyx_float_0_00001)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_8flowstar_12reachability_PolyObserver = &__pyx_vtable_8flowstar_12reachability_PolyObserver;
  __pyx_vtable_8flowstar_12reachability_PolyObserver.mask_overlap = (std::optional<flowstar::Interval>  (*)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, flowstar::Interval &))__pyx_f_8flowstar_12reachability_12PolyObserver_mask_overlap;
  __pyx_vtable_8flowstar_12reachability_PolyObserver._global_domain = (std::optional<std::vector<flowstar::Interval> >  (*)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *))__pyx_f_8flowstar_12reachability_12PolyObserver__global_domain;
  __pyx_vtable_8flowstar_12reachability_PolyObserver.c_roots = (std::vector<flowstar::Interval>  (*)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver_c_roots *__pyx_optional_args))__pyx_f_8flowstar_12reachability_12PolyObserver_c_roots;
  __pyx_vtable_8flowstar_12reachability_PolyObserver.eval_interval = (flowstar::Interval (*)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, flowstar::Interval &))__pyx_f_8flowstar_12reachability_12PolyObserver_eval_interval;
  __pyx_vtable_8flowstar_12reachability_PolyObserver.eval_bool_interval = (boost::logic::tribool (*)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, flowstar::Interval &))__pyx_f_8flowstar_12reachability_12PolyObserver_eval_bool_interval;
  __pyx_vtable_8flowstar_12reachability_PolyObserver._amalgamate_roots = (void (*)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, std::vector<flowstar::Interval>  &, std::vector<flowstar::Interval>  &, flowstar::Interval &, struct __pyx_opt_args_8flowstar_12reachability_12PolyObserver__amalgamate_roots *__pyx_optional_args))__pyx_f_8flowstar_12reachability_12PolyObserver__amalgamate_roots;
  __pyx_vtable_8flowstar_12reachability_PolyObserver._tm_segment_loop = (int (*)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *, int &, std::vector<flowstar::Interval>  *&, std::optional<std::vector<flowstar::Interval> >  &, std::list<flowstar::TaylorModelVec> ::iterator &, std::list<std::vector<flowstar::Interval> > ::iterator &, std::vector<std::optional<int> > ::iterator &, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &, std::vector<std::optional<std::function<flowstar::Interval(const flowstar::Interval &)>> > ::iterator &, flowstar::Interval &, flowstar::Interval &))__pyx_f_8flowstar_12reachability_12PolyObserver__tm_segment_loop;
  if (PyType_Ready(&__pyx_type_8flowstar_12reachability_PolyObserver) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_type_8flowstar_12reachability_PolyObserver.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8flowstar_12reachability_PolyObserver.tp_dictoffset && __pyx_type_8flowstar_12reachability_PolyObserver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8flowstar_12reachability_PolyObserver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8flowstar_12reachability_PolyObserver.tp_dict, __pyx_vtabptr_8flowstar_12reachability_PolyObserver) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "PolyObserver", (PyObject *)&__pyx_type_8flowstar_12reachability_PolyObserver) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8flowstar_12reachability_PolyObserver) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_ptype_8flowstar_12reachability_PolyObserver = &__pyx_type_8flowstar_12reachability_PolyObserver;
  __pyx_vtabptr_8flowstar_12reachability_RestrictedObserver = &__pyx_vtable_8flowstar_12reachability_RestrictedObserver;
  __pyx_vtable_8flowstar_12reachability_RestrictedObserver.__pyx_base = *__pyx_vtabptr_8flowstar_12reachability_PolyObserver;
  __pyx_vtable_8flowstar_12reachability_RestrictedObserver.__pyx_base._global_domain = (std::optional<std::vector<flowstar::Interval> >  (*)(struct __pyx_obj_8flowstar_12reachability_PolyObserver *))__pyx_f_8flowstar_12reachability_18RestrictedObserver__global_domain;
  __pyx_type_8flowstar_12reachability_RestrictedObserver.tp_base = __pyx_ptype_8flowstar_12reachability_PolyObserver;
  if (PyType_Ready(&__pyx_type_8flowstar_12reachability_RestrictedObserver) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_type_8flowstar_12reachability_RestrictedObserver.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8flowstar_12reachability_RestrictedObserver.tp_dictoffset && __pyx_type_8flowstar_12reachability_RestrictedObserver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8flowstar_12reachability_RestrictedObserver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8flowstar_12reachability_RestrictedObserver.tp_dict, __pyx_vtabptr_8flowstar_12reachability_RestrictedObserver) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "RestrictedObserver", (PyObject *)&__pyx_type_8flowstar_12reachability_RestrictedObserver) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8flowstar_12reachability_RestrictedObserver) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_ptype_8flowstar_12reachability_RestrictedObserver = &__pyx_type_8flowstar_12reachability_RestrictedObserver;
  __pyx_vtabptr_8flowstar_12reachability_CReach = &__pyx_vtable_8flowstar_12reachability_CReach;
  __pyx_vtable_8flowstar_12reachability_CReach.c_roots = (std::vector<flowstar::Interval>  (*)(struct __pyx_obj_8flowstar_12reachability_CReach *, flowstar::Polynomial &, flowstar::Polynomial &, struct __pyx_opt_args_8flowstar_12reachability_6CReach_c_roots *__pyx_optional_args))__pyx_f_8flowstar_12reachability_6CReach_c_roots;
  __pyx_vtable_8flowstar_12reachability_CReach.eval_interval = (std::vector<flowstar::Interval>  (*)(struct __pyx_obj_8flowstar_12reachability_CReach *, flowstar::Interval, struct __pyx_opt_args_8flowstar_12reachability_6CReach_eval_interval *__pyx_optional_args))__pyx_f_8flowstar_12reachability_6CReach_eval_interval;
  __pyx_vtable_8flowstar_12reachability_CReach._convert_space_domain = (std::optional<std::vector<flowstar::Interval> >  (*)(struct __pyx_obj_8flowstar_12reachability_CReach *, struct __pyx_opt_args_8flowstar_12reachability_6CReach__convert_space_domain *__pyx_optional_args))__pyx_f_8flowstar_12reachability_6CReach__convert_space_domain;
  if (PyType_Ready(&__pyx_type_8flowstar_12reachability_CReach) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_type_8flowstar_12reachability_CReach.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8flowstar_12reachability_CReach.tp_dictoffset && __pyx_type_8flowstar_12reachability_CReach.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8flowstar_12reachability_CReach.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8flowstar_12reachability_CReach.tp_dict, __pyx_vtabptr_8flowstar_12reachability_CReach) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "CReach", (PyObject *)&__pyx_type_8flowstar_12reachability_CReach) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8flowstar_12reachability_CReach) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_ptype_8flowstar_12reachability_CReach = &__pyx_type_8flowstar_12reachability_CReach;
  if (PyType_Ready(&__pyx_type_8flowstar_12reachability_FlowstarGlobalManager) < 0) __PYX_ERR(0, 1190, __pyx_L1_error)
  __pyx_type_8flowstar_12reachability_FlowstarGlobalManager.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8flowstar_12reachability_FlowstarGlobalManager.tp_dictoffset && __pyx_type_8flowstar_12reachability_FlowstarGlobalManager.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8flowstar_12reachability_FlowstarGlobalManager.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "FlowstarGlobalManager", (PyObject *)&__pyx_type_8flowstar_12reachability_FlowstarGlobalManager) < 0) __PYX_ERR(0, 1190, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8flowstar_12reachability_FlowstarGlobalManager) < 0) __PYX_ERR(0, 1190, __pyx_L1_error)
  __pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager = &__pyx_type_8flowstar_12reachability_FlowstarGlobalManager;
  if (PyType_Ready(&__pyx_type_8flowstar_12reachability___pyx_scope_struct___init_args) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
  __pyx_type_8flowstar_12reachability___pyx_scope_struct___init_args.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8flowstar_12reachability___pyx_scope_struct___init_args.tp_dictoffset && __pyx_type_8flowstar_12reachability___pyx_scope_struct___init_args.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8flowstar_12reachability___pyx_scope_struct___init_args.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8flowstar_12reachability___pyx_scope_struct___init_args = &__pyx_type_8flowstar_12reachability___pyx_scope_struct___init_args;
  if (PyType_Ready(&__pyx_type_8flowstar_12reachability___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 770, __pyx_L1_error)
  __pyx_type_8flowstar_12reachability___pyx_scope_struct_1_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8flowstar_12reachability___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_8flowstar_12reachability___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8flowstar_12reachability___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8flowstar_12reachability___pyx_scope_struct_1_genexpr = &__pyx_type_8flowstar_12reachability___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_8flowstar_12reachability___pyx_scope_struct_2_genexpr) < 0) __PYX_ERR(0, 772, __pyx_L1_error)
  __pyx_type_8flowstar_12reachability___pyx_scope_struct_2_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8flowstar_12reachability___pyx_scope_struct_2_genexpr.tp_dictoffset && __pyx_type_8flowstar_12reachability___pyx_scope_struct_2_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8flowstar_12reachability___pyx_scope_struct_2_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8flowstar_12reachability___pyx_scope_struct_2_genexpr = &__pyx_type_8flowstar_12reachability___pyx_scope_struct_2_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_8flowstar_4poly_Poly = __Pyx_ImportType("flowstar.poly", "Poly", sizeof(struct __pyx_obj_8flowstar_4poly_Poly), 1); if (unlikely(!__pyx_ptype_8flowstar_4poly_Poly)) __PYX_ERR(4, 65, __pyx_L1_error)
  __pyx_vtabptr_8flowstar_4poly_Poly = (struct __pyx_vtabstruct_8flowstar_4poly_Poly*)__Pyx_GetVtable(__pyx_ptype_8flowstar_4poly_Poly->tp_dict); if (unlikely(!__pyx_vtabptr_8flowstar_4poly_Poly)) __PYX_ERR(4, 65, __pyx_L1_error)
  __pyx_ptype_8flowstar_8plotting_FlowstarPlotMixin = __Pyx_ImportType("flowstar.plotting", "FlowstarPlotMixin", sizeof(struct __pyx_obj_8flowstar_8plotting_FlowstarPlotMixin), 1); if (unlikely(!__pyx_ptype_8flowstar_8plotting_FlowstarPlotMixin)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_ptype_8flowstar_8plotting_SagePlotMixin = __Pyx_ImportType("flowstar.plotting", "SagePlotMixin", sizeof(struct __pyx_obj_8flowstar_8plotting_SagePlotMixin), 1); if (unlikely(!__pyx_ptype_8flowstar_8plotting_SagePlotMixin)) __PYX_ERR(5, 6, __pyx_L1_error)
  __pyx_ptype_8flowstar_8plotting_SageTubePlotMixin = __Pyx_ImportType("flowstar.plotting", "SageTubePlotMixin", sizeof(struct __pyx_obj_8flowstar_8plotting_SageTubePlotMixin), 1); if (unlikely(!__pyx_ptype_8flowstar_8plotting_SageTubePlotMixin)) __PYX_ERR(5, 14, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("cysignals.signals"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "cysigs", (void **)&__pyx_vp_9cysignals_7signals_cysigs, "cysigs_t") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("flowstar.interval"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "as_str", (void (**)(void))&__pyx_f_8flowstar_8interval_as_str, "PyObject *(flowstar::Interval const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "make_interval", (void (**)(void))&__pyx_f_8flowstar_8interval_make_interval, "flowstar::Interval (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "overlaps", (void (**)(void))&__pyx_f_8flowstar_8interval_overlaps, "bool (flowstar::Interval const &, flowstar::Interval const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "interval_union", (void (**)(void))&__pyx_f_8flowstar_8interval_interval_union, "void (flowstar::Interval &, flowstar::Interval const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "interval_vect_union", (void (**)(void))&__pyx_f_8flowstar_8interval_interval_vect_union, "void (std::vector<flowstar::Interval>  &, std::vector<flowstar::Interval>  &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "intervals_to_list", (void (**)(void))&__pyx_f_8flowstar_8interval_intervals_to_list, "PyObject *(std::vector<flowstar::Interval>  &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "int_min_dist", (void (**)(void))&__pyx_f_8flowstar_8interval_int_min_dist, "double (flowstar::Interval const &, flowstar::Interval const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("flowstar.poly"); if (!__pyx_t_2) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "compose", (void (**)(void))&__pyx_f_8flowstar_4poly_compose, "flowstar::TaylorModel (flowstar::Polynomial const &, flowstar::TaylorModelVec const , std::vector<flowstar::Interval>  const &, int const , flowstar::Interval const , struct __pyx_opt_args_8flowstar_4poly_compose *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_ImportModule("flowstar.root_detection"); if (!__pyx_t_3) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_3, "detect_roots", (void (**)(void))&__pyx_f_8flowstar_14root_detection_detect_roots, "void (std::vector<flowstar::Interval>  &, std::function<flowstar::Interval(const flowstar::Interval &)>, std::function<flowstar::Interval(const flowstar::Interval &)>, flowstar::Interval &, struct __pyx_opt_args_8flowstar_14root_detection_detect_roots *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_ImportModule("cysignals.signals"); if (!__pyx_t_4) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "_sig_on_interrupt_received", (void (**)(void))&_sig_on_interrupt_received, "void (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "_sig_on_recover", (void (**)(void))&_sig_on_recover, "void (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "_sig_off_warning", (void (**)(void))&_sig_off_warning, "void (char const *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "print_backtrace", (void (**)(void))&print_backtrace, "void (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initreachability(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initreachability(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_reachability(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_reachability(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_reachability(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_reachability(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("reachability", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_flowstar__reachability) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "flowstar.reachability")) {
      if (unlikely(PyDict_SetItemString(modules, "flowstar.reachability", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_variable_import_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_reachability(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "flowstar/reachability.pyx":30
 * from libcpp.memory cimport unique_ptr, make_unique
 * from libcpp.algorithm cimport sort as csort
 * import operator             # <<<<<<<<<<<<<<
 * from functools import reduce
 * import collections
 */
  __Pyx_TraceLine(30,0,__PYX_ERR(0, 30, __pyx_L1_error))
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_operator, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_operator, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":31
 * from libcpp.algorithm cimport sort as csort
 * import operator
 * from functools import reduce             # <<<<<<<<<<<<<<
 * import collections
 * import sage.all as sage
 */
  __Pyx_TraceLine(31,0,__PYX_ERR(0, 31, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_reduce_2);
  __Pyx_GIVEREF(__pyx_n_s_reduce_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_reduce_2);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_functools, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_reduce_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_2, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":32
 * import operator
 * from functools import reduce
 * import collections             # <<<<<<<<<<<<<<
 * import sage.all as sage
 * from cysignals.signals cimport sig_on, sig_off, sig_check
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(0, 32, __pyx_L1_error))
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collections, __pyx_t_2) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "flowstar/reachability.pyx":33
 * from functools import reduce
 * import collections
 * import sage.all as sage             # <<<<<<<<<<<<<<
 * from cysignals.signals cimport sig_on, sig_off, sig_check
 * 
 */
  __Pyx_TraceLine(33,0,__PYX_ERR(0, 33, __pyx_L1_error))
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__31);
  __Pyx_GIVEREF(__pyx_n_s__31);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__31);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sage, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":37
 * 
 * 
 * class FlowstarFailedException(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __Pyx_TraceLine(37,0,__PYX_ERR(0, 37, __pyx_L1_error))
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_FlowstarFailedException, __pyx_n_s_FlowstarFailedException, (PyObject *) NULL, __pyx_n_s_flowstar_reachability, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_FlowstarFailedException, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FlowstarFailedException, __pyx_t_4) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":871
 *             Polynomial& fprime,
 *             optional[reference_wrapper[vector[Interval]]] space_domain
 *                 =optional[reference_wrapper[vector[Interval]]](),             # <<<<<<<<<<<<<<
 *             double epsilon=0.00001, int verbosity=0):
 *         cdef:
 */
  __Pyx_TraceLine(871,0,__PYX_ERR(0, 871, __pyx_L1_error))
  __pyx_k__13 = std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > > ();

  /* "flowstar/reachability.pyx":977
 *     cdef vector[Interval] eval_interval(CReach self, Interval & I,
 *             optional[reference_wrapper[vector[Interval]]]
 *             space_domain=optional[reference_wrapper[vector[Interval]]](),             # <<<<<<<<<<<<<<
 *             optional[reference_wrapper[Polynomial]] poly=optional[reference_wrapper[Polynomial]]()):
 *         cdef:
 */
  __Pyx_TraceLine(977,0,__PYX_ERR(0, 977, __pyx_L1_error))
  __pyx_k__14 = std::optional<std::reference_wrapper<std::vector<flowstar::Interval> > > ();

  /* "flowstar/reachability.pyx":978
 *             optional[reference_wrapper[vector[Interval]]]
 *             space_domain=optional[reference_wrapper[vector[Interval]]](),
 *             optional[reference_wrapper[Polynomial]] poly=optional[reference_wrapper[Polynomial]]()):             # <<<<<<<<<<<<<<
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 */
  __Pyx_TraceLine(978,0,__PYX_ERR(0, 978, __pyx_L1_error))
  __pyx_k__15 = std::optional<std::reference_wrapper<flowstar::Polynomial> > ();

  /* "flowstar/reachability.pyx":1183
 * 
 * 
 * class Reach(plotting.FlowstarPlotMixin,             # <<<<<<<<<<<<<<
 *             plotting.SagePlotMixin,
 *             plotting.SageTubePlotMixin,
 */
  __Pyx_TraceLine(1183,0,__PYX_ERR(0, 1183, __pyx_L1_error))
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_8flowstar_8plotting_FlowstarPlotMixin));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8flowstar_8plotting_FlowstarPlotMixin));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_8flowstar_8plotting_FlowstarPlotMixin));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_8flowstar_8plotting_SagePlotMixin));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8flowstar_8plotting_SagePlotMixin));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_ptype_8flowstar_8plotting_SagePlotMixin));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_8flowstar_8plotting_SageTubePlotMixin));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8flowstar_8plotting_SageTubePlotMixin));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_ptype_8flowstar_8plotting_SageTubePlotMixin));
  __Pyx_INCREF(((PyObject *)__pyx_ptype_8flowstar_12reachability_CReach));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8flowstar_12reachability_CReach));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_ptype_8flowstar_12reachability_CReach));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Reach, __pyx_n_s_Reach, (PyObject *) NULL, __pyx_n_s_flowstar_reachability, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Reach, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Reach, __pyx_t_4) < 0) __PYX_ERR(0, 1183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "flowstar/reachability.pyx":1192
 * cdef class FlowstarGlobalManager:
 *     @staticmethod
 *     def get_global_domain_var_names():             # <<<<<<<<<<<<<<
 *         global domainVarNames
 * 
 */
  __Pyx_TraceLine(1192,0,__PYX_ERR(0, 1192, __pyx_L1_error))
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_1get_global_domain_var_names, NULL, __pyx_n_s_flowstar_reachability); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_get_global_domain_var_names, __pyx_t_1) < 0) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1191
 * 
 * cdef class FlowstarGlobalManager:
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def get_global_domain_var_names():
 *         global domainVarNames
 */
  __Pyx_TraceLine(1191,0,__PYX_ERR(0, 1191, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager, __pyx_n_s_get_global_domain_var_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_get_global_domain_var_names, __pyx_t_2) < 0) __PYX_ERR(0, 1192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1198
 * 
 *     @staticmethod
 *     def get_global_factorial_rec():             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         return interval.intervals_to_list(factorial_rec)
 */
  __Pyx_TraceLine(1198,0,__PYX_ERR(0, 1198, __pyx_L1_error))
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_3get_global_factorial_rec, NULL, __pyx_n_s_flowstar_reachability); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_get_global_factorial_rec, __pyx_t_2) < 0) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1197
 *         return [str(name) for name in domainVarNames]
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def get_global_factorial_rec():
 *         global factorial_rec
 */
  __Pyx_TraceLine(1197,0,__PYX_ERR(0, 1197, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager, __pyx_n_s_get_global_factorial_rec); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_get_global_factorial_rec, __pyx_t_1) < 0) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1203
 * 
 *     @staticmethod
 *     def get_global_power_4():             # <<<<<<<<<<<<<<
 *         global power_4
 *         return interval.intervals_to_list(power_4)
 */
  __Pyx_TraceLine(1203,0,__PYX_ERR(0, 1203, __pyx_L1_error))
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_5get_global_power_4, NULL, __pyx_n_s_flowstar_reachability); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_get_global_power_4, __pyx_t_1) < 0) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1202
 *         return interval.intervals_to_list(factorial_rec)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def get_global_power_4():
 *         global power_4
 */
  __Pyx_TraceLine(1202,0,__PYX_ERR(0, 1202, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager, __pyx_n_s_get_global_power_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_get_global_power_4, __pyx_t_2) < 0) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1208
 * 
 *     @staticmethod
 *     def get_global_double_factorial():             # <<<<<<<<<<<<<<
 *         global double_factorial
 *         return interval.intervals_to_list(double_factorial)
 */
  __Pyx_TraceLine(1208,0,__PYX_ERR(0, 1208, __pyx_L1_error))
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_7get_global_double_factorial, NULL, __pyx_n_s_flowstar_reachability); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_get_global_double_factorial, __pyx_t_2) < 0) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1207
 *         return interval.intervals_to_list(power_4)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def get_global_double_factorial():
 *         global double_factorial
 */
  __Pyx_TraceLine(1207,0,__PYX_ERR(0, 1207, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager, __pyx_n_s_get_global_double_factorial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_get_global_double_factorial, __pyx_t_1) < 0) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1213
 * 
 *     @staticmethod
 *     def clear_global():             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */
  __Pyx_TraceLine(1213,0,__PYX_ERR(0, 1213, __pyx_L1_error))
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8flowstar_12reachability_21FlowstarGlobalManager_9clear_global, NULL, __pyx_n_s_flowstar_reachability); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_clear_global, __pyx_t_1) < 0) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1212
 *         return interval.intervals_to_list(double_factorial)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def clear_global():
 *         global factorial_rec
 */
  __Pyx_TraceLine(1212,0,__PYX_ERR(0, 1212, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager, __pyx_n_s_clear_global); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager->tp_dict, __pyx_n_s_clear_global, __pyx_t_2) < 0) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8flowstar_12reachability_FlowstarGlobalManager);

  /* "flowstar/reachability.pyx":1
 * # cython: profile=True             # <<<<<<<<<<<<<<
 * # cython: linetrace=True
 * from __future__ import division, print_function, absolute_import
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(0, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init flowstar.reachability", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init flowstar.reachability");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,
        #if PY_MAJOR_VERSION >= 3
        0,
        #endif
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A3
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* Import */
        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
        static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* KeywordStringCheck */
        static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* None */
        static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* GetItemInt */
        static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseTooManyValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
        static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
        static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* SwapException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObject_GenericGetAttrNoDict */
        #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
        #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
        static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
        static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetVTable */
        static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CalculateMetaclass */
        static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
        static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare_2);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* PyErrExceptionMatches */
        #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetNameInClass */
        static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    return __Pyx_GetModuleGlobalName(name);
}
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
        #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
        static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
        #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
        #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
        static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
        static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
        static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
        #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* PyObjectCallMethod1 */
        static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
    result = __Pyx__PyObject_CallMethod1(method, arg);
    Py_DECREF(method);
    return result;
}

/* CoroutineBase */
        #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    if (self->exc_type) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
        __Pyx_ExceptionSave(&self->exc_type, &self->exc_value, &self->exc_traceback);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self) {
    if (likely(self->exc_traceback)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
            static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
            #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
            static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
            static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
            #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
            #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* VoidPtrImport */
            #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
            #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
