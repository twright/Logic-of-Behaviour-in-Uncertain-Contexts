/* Generated by Cython 0.28.5 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/usr/lib64/python2.7/site-packages/cysignals/macros.h", 
            "/usr/lib64/python2.7/site-packages/cysignals/struct_signals.h", 
            "flowstar-2.1.0/Continuous.h", 
            "flowstar-2.1.0/Interval.h", 
            "flowstar-2.1.0/Monomial.h", 
            "flowstar-2.1.0/Polynomial.h", 
            "flowstar-2.1.0/TaylorModel.h", 
            "flowstar-2.1.0/include.h"
        ], 
        "extra_compile_args": [
            "-O0", 
            "-std=c++17", 
            "-Wno-register"
        ], 
        "extra_link_args": [
            "-lpari", 
            "-std=c++17"
        ], 
        "include_dirs": [
            "/usr/lib64/python2.7/site-packages/cysignals", 
            ".", 
            "flowstar-2.1.0"
        ], 
        "language": "c++", 
        "libraries": [
            "flowstar", 
            "mpfr", 
            "gmp", 
            "gsl", 
            "gslcblas", 
            "m", 
            "glpk"
        ], 
        "library_dirs": [
            ".", 
            "flowstar-2.1.0"
        ], 
        "name": "reachability", 
        "sources": [
            "reachability.pyx"
        ]
    }, 
    "module_name": "reachability"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_5"
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__reachability
#define __PYX_HAVE_API__reachability
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include <functional>
#include "mpfr.h"
#include "Interval.h"
#include "Monomial.h"
#include <list>
#include "Polynomial.h"
#include "TaylorModel.h"
#include "include.h"
#include <utility>
#include <map>
#include "Continuous.h"

    std::function<flowstar::Interval(std::vector<flowstar::Interval>&)>
    poly_fn(const flowstar::Polynomial & p) {
        // flowstar::HornerForm hf;
        // Convert p to HornerForm to increase accuracy
        // of interval evaluation
        // p.toHornerForm(hf);

        return [p](auto & v) {
            flowstar::Interval res;
            p.intEval(res, v);
            return res;
        };
    }

    std::function<flowstar::Interval(const flowstar::Interval&)>
    poly_time_fn(const flowstar::Polynomial & p) {
        return [p](const flowstar::Interval & t) -> flowstar::Interval {
            flowstar::Interval res;
            std::vector<flowstar::Interval> v;
            v.push_back(t);
            v.push_back(t);
            p.intEval(res, v);
            return res;
        };
    }
    

    std::function<flowstar::Interval(const flowstar::Interval &)>
    compose_interval_fn(
    std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> f, flowstar::TaylorModelVec& tmv,
    std::vector<flowstar::Interval>& domain
    ) {
        return [f, &tmv, &domain](const flowstar::Interval & t) -> flowstar::Interval {
            // std::vector<flowstar::Interval> dom = domain;
            std::vector<flowstar::Interval> I;
            domain[0] = t;
            tmv.intEval(I, domain);
            I.insert(I.begin(), t);
            return f(I);
        };
    }
    
#include <memory>
#include <algorithm>
#include <signal.h>
#include "struct_signals.h"
#include <cstdlib>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "reachability.pyx",
  "stringsource",
  "signals.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/*--- Type declarations ---*/
struct __pyx_obj_12reachability_Poly;
struct __pyx_obj_12reachability_Reach;
struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial;
struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr;
struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage;
struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr;
struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr;
struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__;
struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr;
struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr;
struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot;
struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot;

/* "libc/signal.pxd":3
 * # 7.14 Signal handling <signal.h>
 * 
 * ctypedef void (*sighandler_t)(int SIGNUM) nogil             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<signal.h>" nogil:
 */
typedef void (*__pyx_t_4libc_6signal_sighandler_t)(int);
struct __pyx_opt_args_12reachability_search_zero;
struct __pyx_opt_args_12reachability_detect_roots3;
struct __pyx_opt_args_12reachability_detect_roots2;
struct __pyx_opt_args_12reachability_detect_roots;

/* "reachability.pyx":432
 * 
 * # t assumed to be scaled in the same manner as tmv domain
 * cdef cbool search_zero(Interval & t, interval_fn f, interval_fn fprime,             # <<<<<<<<<<<<<<
 *                        TaylorModelVec & tmv, vector[Interval] & domain,
 *                        double epsilon=0.00001, double theta=0.01,
 */
struct __pyx_opt_args_12reachability_search_zero {
  int __pyx_n;
  double epsilon;
  double theta;
  double abs_inf;
};

/* "reachability.pyx":547
 *     return [(r.inf(), r.sup()) for r in roots]
 * 
 * cdef void detect_roots3(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                         interval_time_fn f, interval_time_fn fprime,
 *                         Interval & T0,
 */
struct __pyx_opt_args_12reachability_detect_roots3 {
  int __pyx_n;
  double epsilon;
  int verbosity;
};

/* "reachability.pyx":654
 *         #     print("stopping!")
 * 
 * cdef void detect_roots2(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                         interval_fn f, interval_fn fprime,
 *                         TaylorModelVec & tmv,
 */
struct __pyx_opt_args_12reachability_detect_roots2 {
  int __pyx_n;
  double epsilon;
};

/* "reachability.pyx":725
 * 
 * # Append result to roots
 * cdef void detect_roots(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                        interval_fn f, interval_fn fprime,
 *                        TaylorModelVec & tmv,
 */
struct __pyx_opt_args_12reachability_detect_roots {
  int __pyx_n;
  double epsilon;
  double theta;
  double abs_inf;
  double nudge;
};

/* "reachability.pxd":75
 *     interval_time_fn compose_interval_fn(interval_fn, TaylorModelVec &, vector[Interval] &)
 * 
 * cdef class Poly:             # <<<<<<<<<<<<<<
 *     cdef Polynomial c_poly
 *     cdef dict vars
 */
struct __pyx_obj_12reachability_Poly {
  PyObject_HEAD
  flowstar::Polynomial c_poly;
  PyObject *vars;
};


/* "reachability.pxd":81
 * cdef cbool int_diff2(Interval & L, Interval & U, cbool & split, Interval & a, const Interval & b)
 * 
 * cdef class Reach:             # <<<<<<<<<<<<<<
 *     cdef vector[Interval] factorial_rec
 *     cdef vector[Interval] power_4
 */
struct __pyx_obj_12reachability_Reach {
  PyObject_HEAD
  struct __pyx_vtabstruct_12reachability_Reach *__pyx_vtab;
  std::vector<flowstar::Interval>  factorial_rec;
  std::vector<flowstar::Interval>  power_4;
  std::vector<flowstar::Interval>  double_factorial;
  std::vector<std::string>  domainVarNames;
  flowstar::ContinuousReachability c_reach;
  int ran;
  int prepared;
  int result;
};


/* "reachability.pyx":170
 * 
 *     @staticmethod
 *     def from_monomial(coeff, mono, vars):             # <<<<<<<<<<<<<<
 *         # print("coeff =", coeff)
 *         # print("mono =", mono)
 */
struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial {
  PyObject_HEAD
  PyObject *__pyx_v_mono;
  PyObject *__pyx_v_vars;
};


/* "reachability.pyx":176
 *         # ts = [Poly(1, k, 1, vars) for k in vars]
 *         return reduce(operator.mul,
 *                       (Poly(1, k, n, vars) for k, n in zip(vars, mono)),             # <<<<<<<<<<<<<<
 *                       c)
 * 
 */
struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *__pyx_outer_scope;
  PyObject *__pyx_v_k;
  PyObject *__pyx_v_n;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "reachability.pyx":180
 * 
 *     @staticmethod
 *     def from_sage(p):             # <<<<<<<<<<<<<<
 *         '''
 *         >>> R, (x, y) = sage.PolynomialRing(sage.RIF, 'x, y').objgens()
 */
struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage {
  PyObject_HEAD
  PyObject *__pyx_v_cs;
  PyObject *__pyx_v_p;
  PyObject *__pyx_v_vars;
};


/* "reachability.pyx":201
 *             # Univariate polynomials handle interval coefficients containing
 *             # 0 strangly so we must treat this as a special case
 *             cs = (c for c in p.list() if not(c == 0 and hasattr(c, 'diameter') <= (c.diameter() == 0)))             # <<<<<<<<<<<<<<
 *         else:
 *             cs = p.coefficients()
 */
struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *__pyx_outer_scope;
  PyObject *__pyx_v_c;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "reachability.pyx":211
 * 
 *         return sum(
 *             (Poly.from_monomial(c,             # <<<<<<<<<<<<<<
 *                                 ex if isinstance(ex, collections.Iterable)
 *                                 else (ex,),
 */
struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *__pyx_outer_scope;
  PyObject *__pyx_v_c;
  PyObject *__pyx_v_ex;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "reachability.pyx":766
 * cdef class Reach:
 *     # initials :: [(lower, upper)]
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */
struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ {
  PyObject_HEAD
  PyObject *__pyx_v_orders;
};


/* "reachability.pyx":835
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */
struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *__pyx_outer_scope;
  PyObject *__pyx_v_order;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "reachability.pyx":837
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */
struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *__pyx_outer_scope;
  PyObject *__pyx_v_order;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "reachability.pyx":1216
 *         return p
 * 
 *     def sage_plot(self, x, duration=None, double step=1e-2):             # <<<<<<<<<<<<<<
 *         from sage.all import plot
 * 
 */
struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot {
  PyObject_HEAD
  PyObject *__pyx_v_ress;
  struct __pyx_obj_12reachability_Reach *__pyx_v_self;
  double __pyx_v_step;
  int __pyx_v_var_id;
};


/* "reachability.pyx":1239
 *                     plot_points=self.c_reach.time//step)
 * 
 *     def sage_parametric_plot(self, str x, str y, double step=1e-2):             # <<<<<<<<<<<<<<
 *         from sage.all import parametric_plot, RIF
 *         from functools import partial
 */
struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot {
  PyObject_HEAD
  struct __pyx_obj_12reachability_Reach *__pyx_v_self;
  double __pyx_v_step;
  int __pyx_v_var_id_x;
  int __pyx_v_var_id_y;
};



/* "reachability.pyx":764
 * 
 * 
 * cdef class Reach:             # <<<<<<<<<<<<<<
 *     # initials :: [(lower, upper)]
 *     def __cinit__(
 */

struct __pyx_vtabstruct_12reachability_Reach {
  std::vector<flowstar::Interval>  (*c_roots)(struct __pyx_obj_12reachability_Reach *, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)>, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)>);
  std::vector<flowstar::Interval>  (*eval_interval)(struct __pyx_obj_12reachability_Reach *, flowstar::Interval);
};
static struct __pyx_vtabstruct_12reachability_Reach *__pyx_vtabptr_12reachability_Reach;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* py_dict_iteritems.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_IterItems(PyObject* d);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* MergeKeywords.proto */
static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_mpfr_prec_t(mpfr_prec_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->exc_type, &(self)->exc_value, &(self)->exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(self);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->exc_type, (self)->exc_value, (self)->exc_traceback);\
    (self)->exc_type = (self)->exc_value = (self)->exc_traceback = NULL;\
    }
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static std::vector<flowstar::Interval>  __pyx_f_12reachability_5Reach_c_roots(struct __pyx_obj_12reachability_Reach *__pyx_v_self, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_f, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_fprime); /* proto*/
static std::vector<flowstar::Interval>  __pyx_f_12reachability_5Reach_eval_interval(struct __pyx_obj_12reachability_Reach *__pyx_v_self, flowstar::Interval &__pyx_v_I); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.functional' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'Interval' */

/* Module declarations from 'Monomial' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'Polynomial' */

/* Module declarations from 'TaylorModel' */

/* Module declarations from 'includeh' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'Continuous' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'libc.signal' */

/* Module declarations from 'cysignals.signals' */
static cysigs_t *__pyx_vp_9cysignals_7signals_cysigs = 0;
#define cysigs (*__pyx_vp_9cysignals_7signals_cysigs)
static void (*_sig_on_interrupt_received)(void); /*proto*/
static void (*_sig_on_recover)(void); /*proto*/
static void (*_sig_off_warning)(char const *, int); /*proto*/
static void (*print_backtrace)(void); /*proto*/

/* Module declarations from 'reachability' */
static PyTypeObject *__pyx_ptype_12reachability_Poly = 0;
static PyTypeObject *__pyx_ptype_12reachability_Reach = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct__from_monomial = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct_2_from_sage = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct_5___cinit__ = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct_7_genexpr = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct_8_sage_plot = 0;
static PyTypeObject *__pyx_ptype_12reachability___pyx_scope_struct_9_sage_parametric_plot = 0;
static bool __pyx_f_12reachability_int_diff2(flowstar::Interval &, flowstar::Interval &, bool &, flowstar::Interval &, flowstar::Interval const &); /*proto*/
static bool __pyx_f_12reachability_overlaps(flowstar::Interval &, flowstar::Interval &); /*proto*/
static void __pyx_f_12reachability_interval_union(flowstar::Interval &, flowstar::Interval &); /*proto*/
static void __pyx_f_12reachability_interval_vect_union(std::vector<flowstar::Interval>  &, std::vector<flowstar::Interval>  &); /*proto*/
static PyObject *__pyx_f_12reachability_get_domain_var_names(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12reachability_set_precision(int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12reachability_get_precision(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12reachability_interval_to_tuple(flowstar::Interval &); /*proto*/
static PyObject *__pyx_f_12reachability_intervals_to_list(std::vector<flowstar::Interval>  &); /*proto*/
static PyObject *__pyx_f_12reachability_get_factorial_rec(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12reachability_get_power_4(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12reachability_get_double_factorial(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_12reachability_clear_globals(int __pyx_skip_dispatch); /*proto*/
static flowstar::Interval __pyx_f_12reachability__interval(PyObject *); /*proto*/
static double __pyx_f_12reachability_int_dist(flowstar::Interval &, flowstar::Interval &); /*proto*/
static bool __pyx_f_12reachability_int_diff_assign(flowstar::Interval &, flowstar::Interval const &); /*proto*/
static bool __pyx_f_12reachability_extdiv2(flowstar::Interval &, flowstar::Interval &, bool &, flowstar::Interval &, flowstar::Interval const &, flowstar::Interval const &); /*proto*/
static bool __pyx_f_12reachability_extdiv(flowstar::Interval &, flowstar::Interval const &, flowstar::Interval const &); /*proto*/
static flowstar::Interval __pyx_f_12reachability_call_f(std::function<flowstar::Interval(std::vector<flowstar::Interval> &)>, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  &); /*proto*/
static bool __pyx_f_12reachability_search_zero(flowstar::Interval &, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)>, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)>, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  &, struct __pyx_opt_args_12reachability_search_zero *__pyx_optional_args); /*proto*/
static void __pyx_f_12reachability_detect_roots3(std::vector<flowstar::Interval>  &, std::function<flowstar::Interval(const flowstar::Interval &)>, std::function<flowstar::Interval(const flowstar::Interval &)>, flowstar::Interval &, struct __pyx_opt_args_12reachability_detect_roots3 *__pyx_optional_args); /*proto*/
static void __pyx_f_12reachability_detect_roots2(std::vector<flowstar::Interval>  &, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)>, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)>, flowstar::TaylorModelVec &, std::vector<flowstar::Interval>  &, struct __pyx_opt_args_12reachability_detect_roots2 *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "reachability"
extern int __pyx_module_is_main_reachability;
int __pyx_module_is_main_reachability = 0;

/* Implementation of 'reachability' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_min;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_A[] = "A:";
static const char __pyx_k_B[] = "B:";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_M[] = "M=[{}..{}]";
static const char __pyx_k_T[] = "T = [{}..{}]";
static const char __pyx_k_U[] = "U";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_cs[] = "cs";
static const char __pyx_k_fl[] = "fl";
static const char __pyx_k_fu[] = "fu";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_A_2[] = "A";
static const char __pyx_k_B_2[] = "B";
static const char __pyx_k_RIF[] = "RIF";
static const char __pyx_k_T_2[] = "T";
static const char __pyx_k__24[] = "--";
static const char __pyx_k__34[] = "({}, {})";
static const char __pyx_k__37[] = "*";
static const char __pyx_k_cos[] = "cos";
static const char __pyx_k_eps[] = "eps";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_mul[] = "mul";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_sin[] = "sin";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tan[] = "tan";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_call[] = "call";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_fill[] = "fill";
static const char __pyx_k_gens[] = "gens";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_list[] = "list";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mono[] = "mono";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_odes[] = "odes";
static const char __pyx_k_plot[] = "plot";
static const char __pyx_k_sage[] = "sage";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_uuid[] = "uuid";
static const char __pyx_k_vars[] = "vars";
static const char __pyx_k_zero[] = "zero";
static const char __pyx_k_Image[] = "Image";
static const char __pyx_k_arrow[] = "arrow";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_coeff[] = "coeff";
static const char __pyx_k_color[] = "color";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_joins[] = "joins";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_point[] = "point";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_roots[] = "roots";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_tight[] = "tight";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_uuid4[] = "uuid4";
static const char __pyx_k_3bcc00[] = "#3bcc00";
static const char __pyx_k_Fprime[] = "Fprime";
static const char __pyx_k_arctan[] = "arctan";
static const char __pyx_k_arrows[] = "arrows";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_exc_tb[] = "exc_tb";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_fprime[] = "fprime";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_orders[] = "orders";
static const char __pyx_k_parent[] = "parent";
static const char __pyx_k_reduce[] = "reduce";
static const char __pyx_k_rotate[] = "rotate";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_vector[] = "vector";
static const char __pyx_k_Not_ran[] = "Not ran!";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_exc_val[] = "exc_val";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_gnuplot[] = "gnuplot";
static const char __pyx_k_local_t[] = "local_t";
static const char __pyx_k_partial[] = "partial";
static const char __pyx_k_polygon[] = "polygon";
static const char __pyx_k_prepare[] = "prepare";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_Graphics[] = "Graphics";
static const char __pyx_k_Iterable[] = "Iterable";
static const char __pyx_k_diameter[] = "diameter";
static const char __pyx_k_duration[] = "duration";
static const char __pyx_k_exc_type[] = "exc_type";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_initials[] = "initials";
static const char __pyx_k_operator[] = "operator";
static const char __pyx_k_reduce_2[] = "__reduce__";
static const char __pyx_k_sage_all[] = "sage.all";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_straight[] = "straight";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_endpoints[] = "endpoints";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_exponents[] = "exponents";
static const char __pyx_k_failed_on[] = "failed! on:";
static const char __pyx_k_from_sage[] = "from_sage";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_linestyle[] = "linestyle";
static const char __pyx_k_local_var[] = "local_var_{}";
static const char __pyx_k_plot_type[] = "plot_type";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_splitting[] = "splitting! [{}..{}] -> [{}..{}] + [{}..{}]";
static const char __pyx_k_var_names[] = "var_names";
static const char __pyx_k_verbosity[] = "verbosity";
static const char __pyx_k_boundaries[] = "boundaries";
static const char __pyx_k_estimation[] = "estimation";
static const char __pyx_k_images_eps[] = "./images/{}.eps";
static const char __pyx_k_itemgetter[] = "itemgetter";
static const char __pyx_k_py_extdiv2[] = "py_extdiv2";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_subprocess[] = "subprocess";
static const char __pyx_k_wand_image[] = "wand.image";
static const char __pyx_k_Already_ran[] = "Already ran";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_maxNumSteps[] = "maxNumSteps";
static const char __pyx_k_outputs_plt[] = "./outputs/{}.plt";
static const char __pyx_k_plot_points[] = "plot_points";
static const char __pyx_k_coefficients[] = "coefficients";
static const char __pyx_k_precondition[] = "precondition";
static const char __pyx_k_py_int_diff2[] = "py_int_diff2";
static const char __pyx_k_reachability[] = "reachability";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_from_monomial[] = "from_monomial";
static const char __pyx_k_num_flowpipes[] = "num_flowpipes";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_sage_tube_plot[] = "sage_tube_plot";
static const char __pyx_k_capture_globals[] = "capture_globals";
static const char __pyx_k_parametric_plot[] = "parametric_plot";
static const char __pyx_k_restore_globals[] = "restore_globals";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cutoff_threshold[] = "cutoff_threshold";
static const char __pyx_k_py_detect_roots3[] = "py_detect_roots3";
static const char __pyx_k_reachability_pyx[] = "reachability.pyx";
static const char __pyx_k_root_on_boundary[] = "root on boundary!";
static const char __pyx_k_Filename_too_long[] = "Filename too long!";
static const char __pyx_k_absolute_diameter[] = "absolute_diameter";
static const char __pyx_k_integrationScheme[] = "integrationScheme";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_max_remainder_queue[] = "max_remainder_queue";
static const char __pyx_k_py_extdiv2_line_347[] = "py_extdiv2 (line 347)";
static const char __pyx_k_sage_plot_locals_fl[] = "sage_plot.<locals>.fl";
static const char __pyx_k_sage_plot_locals_fu[] = "sage_plot.<locals>.fu";
static const char __pyx_k_repr___locals_lambda[] = "__repr__.<locals>.<lambda>";
static const char __pyx_k_verified_contractive[] = "verified contractive!";
static const char __pyx_k_Invalid_args_for_Poly[] = "Invalid args for Poly";
static const char __pyx_k_py_int_diff2_line_294[] = "py_int_diff2 (line 294)";
static const char __pyx_k_cinit___locals_genexpr[] = "__cinit__.<locals>.genexpr";
static const char __pyx_k_Poly_from_sage_line_180[] = "Poly.from_sage (line 180)";
static const char __pyx_k_from_sage_locals_genexpr[] = "from_sage.<locals>.genexpr";
static const char __pyx_k_py_detect_roots3_line_512[] = "py_detect_roots3 (line 512)";
static const char __pyx_k_extdiv2_T_Tu_split_T_fI_fP[] = "extdiv2(T=[{}..{}], Tu=[{}..{}], split={}, T=[{}..{}], fI=[{}..{}], fP=[{}..{}])";
static const char __pyx_k_failed_to_verify_contractive[] = "failed to verify contractive!";
static const char __pyx_k_from_monomial_locals_genexpr[] = "from_monomial.<locals>.genexpr";
static const char __pyx_k_warning_eval_failed_for_t_in[] = "warning: eval failed for t in [{}, {}]";
static const char __pyx_k_sage_parametric_plot_locals_f[] = "sage_parametric_plot.<locals>.f";
static const char __pyx_k_sage_parametric_plot_locals_g[] = "sage_parametric_plot.<locals>.g";
static const char __pyx_k_R_x_y_sage_PolynomialRing_sage[] = "\n        >>> R, (x, y) = sage.PolynomialRing(sage.RIF, 'x, y').objgens()\n        >>> Poly.from_sage(x*y + x + R(3))\n        (([3.0000000000e+00 , 3.0000000000e+00]) + ([1.0000000000e+00 , 1.0000000000e+00] * x) + ([1.0000000000e+00 , 1.0000000000e+00] * x * y))\n        >>> R, (t,) = sage.PolynomialRing(sage.RIF, 't').objgens()\n        >>> Poly(t - 0.5)\n        (([-5.0000000000e-01 , -5.0000000000e-01]) + ([1.0000000000e+00 , 1.0000000000e+00] * t))\n        >>> Poly(t + sage.RIF(-1,1))\n        (([-1.0000000000e+00 , 1.0000000000e+00]) + ([1.0000000000e+00 , 1.0000000000e+00] * t))\n        >>> Poly(t**2 - 2)\n        (([-2.0000000000e+00 , -2.0000000000e+00]) + ([1.0000000000e+00 , 1.0000000000e+00] * t^2))\n        ";
static const char __pyx_k_R_t_sage_PolynomialRing_sage_RI[] = "\n    >>> R, (t,) = sage.PolynomialRing(sage.RIF, 't').objgens()\n    >>> py_detect_roots3(Poly(t - 0.5), Poly(R(1.0)), sage.RIF(0, 1))\n    verified contractive!\n    [(0.5, 0.5)]\n    >>> py_detect_roots3(Poly(t - sage.RIF(0.4,0.5)), Poly(R(1.0)), sage.RIF(0, 1))\n    verified contractive!\n    [(0.4, 0.5)]\n    >>> py_detect_roots3(Poly(t**2 - 2), Poly(2*t), sage.RIF(1, 2))\n    verified contractive!\n    [(1.4142135623730947, 1.4142135623730954)]\n    >>> py_detect_roots3(Poly(6*(t - 0.5)**2 - sage.RIF(0.4)), Poly(12*t - 6), sage.RIF(0, 1))\n    verified contractive!\n    verified contractive!\n    [(0.7581988897471607, 0.7581988897471615), (0.24180111025283868, 0.24180111025283899)]\n    >>> py_detect_roots3(Poly(t - sage.RIF(-1,1)), Poly(R(1)), sage.RIF(0, 1))\n    root on boundary!\n    [(-0.0, 1.0)]\n    ";
static const char __pyx_k_py_extdiv2_0_5_4_4_2_2_True_Fal[] = "\n    >>> py_extdiv2((0,5), (4,4), (2,2))\n    (True, False, (2.0, 2.0), ...)\n    >>> py_extdiv2((-5,5), (4,4), (-2,2))\n    (True, True, (-5.0, -2.0), (2.0, 5.0))\n    >>> py_extdiv2((-5,5), (4,4), (-2,0.0))\n    (True, False, (-5.0, -2.0), ...)\n    ";
static const char __pyx_k_py_int_diff2_1_3_2_4_True_False[] = "\n    >>> py_int_diff2((1,3), (2,4))\n    (True, False, (1.0, 2.0), ...)\n    >>> py_int_diff2((1,3), (4,5))\n    (True, False, (1.0, 3.0), ...)\n    >>> py_int_diff2((1,3), (0,2))\n    (True, False, (2.0, 3.0), ...)\n    >>> py_int_diff2((1,3), (2,4))\n    (True, False, (1.0, 2.0), ...)\n    >>> py_int_diff2((1,5), (2,4))\n    (True, True, (1.0, 2.0), (4.0, 5.0))\n    >>> py_int_diff2((2,4), (1,5))\n    (False, False, ..., ...)\n    ";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_kp_s_3bcc00;
static PyObject *__pyx_kp_s_A;
static PyObject *__pyx_n_s_A_2;
static PyObject *__pyx_kp_s_Already_ran;
static PyObject *__pyx_kp_s_B;
static PyObject *__pyx_n_s_B_2;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_kp_s_Filename_too_long;
static PyObject *__pyx_n_s_Fprime;
static PyObject *__pyx_n_s_Graphics;
static PyObject *__pyx_n_s_Image;
static PyObject *__pyx_kp_s_Invalid_args_for_Poly;
static PyObject *__pyx_n_s_Iterable;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_kp_s_M;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_kp_s_Not_ran;
static PyObject *__pyx_kp_u_Poly_from_sage_line_180;
static PyObject *__pyx_n_s_RIF;
static PyObject *__pyx_kp_u_R_t_sage_PolynomialRing_sage_RI;
static PyObject *__pyx_kp_u_R_x_y_sage_PolynomialRing_sage;
static PyObject *__pyx_kp_s_T;
static PyObject *__pyx_n_s_T_2;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_U;
static PyObject *__pyx_kp_s__24;
static PyObject *__pyx_kp_s__34;
static PyObject *__pyx_n_s__37;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_absolute_diameter;
static PyObject *__pyx_n_s_arctan;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_arrow;
static PyObject *__pyx_n_s_arrows;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_boundaries;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_call;
static PyObject *__pyx_n_s_capture_globals;
static PyObject *__pyx_n_s_center;
static PyObject *__pyx_n_s_cinit___locals_genexpr;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_coeff;
static PyObject *__pyx_n_s_coefficients;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_color;
static PyObject *__pyx_n_s_cos;
static PyObject *__pyx_n_s_cs;
static PyObject *__pyx_n_s_cutoff_threshold;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_diameter;
static PyObject *__pyx_n_s_duration;
static PyObject *__pyx_n_s_endpoints;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eps;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_estimation;
static PyObject *__pyx_n_s_exc_tb;
static PyObject *__pyx_n_s_exc_type;
static PyObject *__pyx_n_s_exc_val;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_exponents;
static PyObject *__pyx_kp_s_extdiv2_T_Tu_split_T_fI_fP;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_kp_s_failed_on;
static PyObject *__pyx_kp_s_failed_to_verify_contractive;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_fill;
static PyObject *__pyx_n_s_fl;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fprime;
static PyObject *__pyx_n_s_from_monomial;
static PyObject *__pyx_n_s_from_monomial_locals_genexpr;
static PyObject *__pyx_n_s_from_sage;
static PyObject *__pyx_n_s_from_sage_locals_genexpr;
static PyObject *__pyx_n_s_fu;
static PyObject *__pyx_n_s_functools;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_gens;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gnuplot;
static PyObject *__pyx_kp_s_images_eps;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_initials;
static PyObject *__pyx_n_s_integrationScheme;
static PyObject *__pyx_n_s_itemgetter;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_joins;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_linestyle;
static PyObject *__pyx_n_s_list;
static PyObject *__pyx_n_b_local_t;
static PyObject *__pyx_n_s_local_t;
static PyObject *__pyx_kp_s_local_var;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_maxNumSteps;
static PyObject *__pyx_n_s_max_remainder_queue;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_mono;
static PyObject *__pyx_n_s_mul;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_num_flowpipes;
static PyObject *__pyx_n_s_odes;
static PyObject *__pyx_n_s_operator;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_orders;
static PyObject *__pyx_kp_s_outputs_plt;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_parametric_plot;
static PyObject *__pyx_n_s_parent;
static PyObject *__pyx_n_s_partial;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_plot;
static PyObject *__pyx_n_s_plot_points;
static PyObject *__pyx_n_s_plot_type;
static PyObject *__pyx_n_s_point;
static PyObject *__pyx_n_s_polygon;
static PyObject *__pyx_n_s_precondition;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_py_detect_roots3;
static PyObject *__pyx_kp_u_py_detect_roots3_line_512;
static PyObject *__pyx_n_s_py_extdiv2;
static PyObject *__pyx_kp_u_py_extdiv2_0_5_4_4_2_2_True_Fal;
static PyObject *__pyx_kp_u_py_extdiv2_line_347;
static PyObject *__pyx_n_s_py_int_diff2;
static PyObject *__pyx_kp_u_py_int_diff2_1_3_2_4_True_False;
static PyObject *__pyx_kp_u_py_int_diff2_line_294;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reachability;
static PyObject *__pyx_kp_s_reachability_pyx;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_2;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_repr___locals_lambda;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_restore_globals;
static PyObject *__pyx_kp_s_root_on_boundary;
static PyObject *__pyx_n_s_roots;
static PyObject *__pyx_n_s_rotate;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_n_s_sage;
static PyObject *__pyx_n_s_sage_all;
static PyObject *__pyx_n_s_sage_parametric_plot_locals_f;
static PyObject *__pyx_n_s_sage_parametric_plot_locals_g;
static PyObject *__pyx_n_s_sage_plot_locals_fl;
static PyObject *__pyx_n_s_sage_plot_locals_fu;
static PyObject *__pyx_n_s_sage_tube_plot;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sin;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_kp_s_splitting;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_straight;
static PyObject *__pyx_n_s_subprocess;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_tan;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tight;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_uuid;
static PyObject *__pyx_n_s_uuid4;
static PyObject *__pyx_n_s_var_names;
static PyObject *__pyx_n_s_vars;
static PyObject *__pyx_n_s_vector;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_n_s_verbosity;
static PyObject *__pyx_kp_s_verified_contractive;
static PyObject *__pyx_n_s_wand_image;
static PyObject *__pyx_kp_s_warning_eval_failed_for_t_in;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_zero;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_12reachability_get_domain_var_names(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12reachability_2set_precision(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_prec); /* proto */
static PyObject *__pyx_pf_12reachability_4get_precision(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12reachability_6get_factorial_rec(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12reachability_8get_power_4(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12reachability_10get_double_factorial(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12reachability_12clear_globals(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_12reachability_4Poly___cinit__(struct __pyx_obj_12reachability_Poly *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_13from_monomial_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_2from_monomial(PyObject *__pyx_v_coeff, PyObject *__pyx_v_mono, PyObject *__pyx_v_vars); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_9from_sage_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_9from_sage_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_4from_sage(PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_9var_names___get__(struct __pyx_obj_12reachability_Poly *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_6__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_8__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_10__repr__(struct __pyx_obj_12reachability_Poly *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_12reachability_Poly *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_4Poly_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_12reachability_Poly *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_12reachability_14py_int_diff2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_12reachability_16py_extdiv2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_12reachability_18py_detect_roots3(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_12reachability_Poly *__pyx_v_f, struct __pyx_obj_12reachability_Poly *__pyx_v_fprime, PyObject *__pyx_v_t, double __pyx_v_epsilon, int __pyx_v_verbosity); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_9__cinit___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_9__cinit___3genexpr(PyObject *__pyx_self); /* proto */
static int __pyx_pf_12reachability_5Reach___cinit__(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_odes, PyObject *__pyx_v_initials, PyObject *__pyx_v_time, PyObject *__pyx_v_step, PyObject *__pyx_v_precondition, PyObject *__pyx_v_order, PyObject *__pyx_v_orders, PyObject *__pyx_v_verbose, PyObject *__pyx_v_integrationScheme, PyObject *__pyx_v_cutoff_threshold, PyObject *__pyx_v_estimation, PyObject *__pyx_v_max_remainder_queue, PyObject *__pyx_v_maxNumSteps, PyObject *__pyx_v_vars, PyObject *__pyx_v_run); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_2plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_filename, PyObject *__pyx_v_plot_type); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_4wplot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_plot_type, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_6roots(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_f, PyObject *__pyx_v_fprime); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_8__call__(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_10prepare(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_12sage_plot_manual(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, double __pyx_v_step); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_14sage_interval_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, double __pyx_v_step, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_16sage_time_tube_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, double __pyx_v_step, PyObject *__pyx_v_joins); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_18sage_tube_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, double __pyx_v_step, int __pyx_v_arrows, PyObject *__pyx_v_straight, PyObject *__pyx_v_tight, PyObject *__pyx_v_boundaries, PyObject *__pyx_v_joins, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_9sage_plot_fl(PyObject *__pyx_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_9sage_plot_2fu(PyObject *__pyx_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_20sage_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_duration, double __pyx_v_step); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_20sage_parametric_plot_f(PyObject *__pyx_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_20sage_parametric_plot_2g(PyObject *__pyx_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_22sage_parametric_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, double __pyx_v_step); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_24run(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_26capture_globals(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_28clear_captured_globals(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_30restore_globals(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_32__enter__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_34__exit__(CYTHON_UNUSED struct __pyx_obj_12reachability_Reach *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_3res___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_16cutoff_threshold___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_10estimation___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_13num_flowpipes___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_14num_state_vars___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_10state_vars___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_12num_initials___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_4step___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_4time___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_8ode_strs___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_8num_odes___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_12reachability_Reach *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12reachability_5Reach_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_12reachability_Reach *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_12reachability_Poly(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability_Reach(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct__from_monomial(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_2_from_sage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_5___cinit__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_8_sage_plot(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_9_sage_parametric_plot(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_iteritems = {0, &__pyx_n_s_iteritems, 0, 0, 0};
static PyObject *__pyx_float_0_01;
static PyObject *__pyx_float_1eneg_3;
static PyObject *__pyx_float_1eneg_7;
static PyObject *__pyx_float_neg_1eneg_7;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_90;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_200;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
/* Late includes */
#include "macros.h"

/* "reachability.pyx":36
 * 
 * 
 * cdef cbool overlaps(Interval & I, Interval & J) nogil:             # <<<<<<<<<<<<<<
 *     il, iu = I.inf(), I.sup()
 *     jl, ju = J.inf(), J.sup()
 */

static bool __pyx_f_12reachability_overlaps(flowstar::Interval &__pyx_v_I, flowstar::Interval &__pyx_v_J) {
  double __pyx_v_il;
  double __pyx_v_iu;
  double __pyx_v_jl;
  double __pyx_v_ju;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_TraceCall("overlaps", __pyx_f[0], 36, 1, __PYX_ERR(0, 36, __pyx_L1_error));

  /* "reachability.pyx":37
 * 
 * cdef cbool overlaps(Interval & I, Interval & J) nogil:
 *     il, iu = I.inf(), I.sup()             # <<<<<<<<<<<<<<
 *     jl, ju = J.inf(), J.sup()
 *     return not (iu < jl or ju < il)
 */
  __Pyx_TraceLine(37,1,__PYX_ERR(0, 37, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_I.inf();
  __pyx_t_2 = __pyx_v_I.sup();
  __pyx_v_il = __pyx_t_1;
  __pyx_v_iu = __pyx_t_2;

  /* "reachability.pyx":38
 * cdef cbool overlaps(Interval & I, Interval & J) nogil:
 *     il, iu = I.inf(), I.sup()
 *     jl, ju = J.inf(), J.sup()             # <<<<<<<<<<<<<<
 *     return not (iu < jl or ju < il)
 * 
 */
  __Pyx_TraceLine(38,1,__PYX_ERR(0, 38, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_J.inf();
  __pyx_t_1 = __pyx_v_J.sup();
  __pyx_v_jl = __pyx_t_2;
  __pyx_v_ju = __pyx_t_1;

  /* "reachability.pyx":39
 *     il, iu = I.inf(), I.sup()
 *     jl, ju = J.inf(), J.sup()
 *     return not (iu < jl or ju < il)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(39,1,__PYX_ERR(0, 39, __pyx_L1_error))
  __pyx_t_4 = ((__pyx_v_iu < __pyx_v_jl) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_ju < __pyx_v_il) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L3_bool_binop_done:;
  __pyx_r = (!__pyx_t_3);
  goto __pyx_L0;

  /* "reachability.pyx":36
 * 
 * 
 * cdef cbool overlaps(Interval & I, Interval & J) nogil:             # <<<<<<<<<<<<<<
 *     il, iu = I.inf(), I.sup()
 *     jl, ju = J.inf(), J.sup()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.overlaps", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "reachability.pyx":42
 * 
 * 
 * cdef void interval_union(Interval & I, Interval & J) nogil:             # <<<<<<<<<<<<<<
 *     I.setInf(cmin(I.inf(), J.inf()))
 *     I.setSup(cmax(I.sup(), J.sup()))
 */

static void __pyx_f_12reachability_interval_union(flowstar::Interval &__pyx_v_I, flowstar::Interval &__pyx_v_J) {
  __Pyx_TraceDeclarations
  __Pyx_TraceCall("interval_union", __pyx_f[0], 42, 1, __PYX_ERR(0, 42, __pyx_L1_error));

  /* "reachability.pyx":43
 * 
 * cdef void interval_union(Interval & I, Interval & J) nogil:
 *     I.setInf(cmin(I.inf(), J.inf()))             # <<<<<<<<<<<<<<
 *     I.setSup(cmax(I.sup(), J.sup()))
 * 
 */
  __Pyx_TraceLine(43,1,__PYX_ERR(0, 43, __pyx_L1_error))
  __pyx_v_I.setInf(std::min<double>(__pyx_v_I.inf(), __pyx_v_J.inf()));

  /* "reachability.pyx":44
 * cdef void interval_union(Interval & I, Interval & J) nogil:
 *     I.setInf(cmin(I.inf(), J.inf()))
 *     I.setSup(cmax(I.sup(), J.sup()))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(44,1,__PYX_ERR(0, 44, __pyx_L1_error))
  __pyx_v_I.setSup(std::max<double>(__pyx_v_I.sup(), __pyx_v_J.sup()));

  /* "reachability.pyx":42
 * 
 * 
 * cdef void interval_union(Interval & I, Interval & J) nogil:             # <<<<<<<<<<<<<<
 *     I.setInf(cmin(I.inf(), J.inf()))
 *     I.setSup(cmax(I.sup(), J.sup()))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.interval_union", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "reachability.pyx":47
 * 
 * 
 * cdef void interval_vect_union(vector[Interval] & Is, vector[Interval] & Js) nogil:             # <<<<<<<<<<<<<<
 *     cdef:
 *         vector[Interval].iterator itI = Is.begin()
 */

static void __pyx_f_12reachability_interval_vect_union(std::vector<flowstar::Interval>  &__pyx_v_Is, std::vector<flowstar::Interval>  &__pyx_v_Js) {
  std::vector<flowstar::Interval> ::iterator __pyx_v_itI;
  std::vector<flowstar::Interval> ::iterator __pyx_v_itJ;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_TraceCall("interval_vect_union", __pyx_f[0], 47, 1, __PYX_ERR(0, 47, __pyx_L1_error));

  /* "reachability.pyx":49
 * cdef void interval_vect_union(vector[Interval] & Is, vector[Interval] & Js) nogil:
 *     cdef:
 *         vector[Interval].iterator itI = Is.begin()             # <<<<<<<<<<<<<<
 *         vector[Interval].iterator itJ = Js.begin()
 * 
 */
  __Pyx_TraceLine(49,1,__PYX_ERR(0, 49, __pyx_L1_error))
  __pyx_v_itI = __pyx_v_Is.begin();

  /* "reachability.pyx":50
 *     cdef:
 *         vector[Interval].iterator itI = Is.begin()
 *         vector[Interval].iterator itJ = Js.begin()             # <<<<<<<<<<<<<<
 * 
 *     while itI != Is.end() and itJ != Js.end():
 */
  __Pyx_TraceLine(50,1,__PYX_ERR(0, 50, __pyx_L1_error))
  __pyx_v_itJ = __pyx_v_Js.begin();

  /* "reachability.pyx":52
 *         vector[Interval].iterator itJ = Js.begin()
 * 
 *     while itI != Is.end() and itJ != Js.end():             # <<<<<<<<<<<<<<
 *         interval_union(deref(itI), deref(itJ))
 * 
 */
  __Pyx_TraceLine(52,1,__PYX_ERR(0, 52, __pyx_L1_error))
  while (1) {
    __pyx_t_2 = ((__pyx_v_itI != __pyx_v_Is.end()) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_itJ != __pyx_v_Js.end()) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "reachability.pyx":53
 * 
 *     while itI != Is.end() and itJ != Js.end():
 *         interval_union(deref(itI), deref(itJ))             # <<<<<<<<<<<<<<
 * 
 *         inc(itI)
 */
    __Pyx_TraceLine(53,1,__PYX_ERR(0, 53, __pyx_L1_error))
    __pyx_f_12reachability_interval_union((*__pyx_v_itI), (*__pyx_v_itJ));

    /* "reachability.pyx":55
 *         interval_union(deref(itI), deref(itJ))
 * 
 *         inc(itI)             # <<<<<<<<<<<<<<
 *         inc(itJ)
 * 
 */
    __Pyx_TraceLine(55,1,__PYX_ERR(0, 55, __pyx_L1_error))
    (void)((++__pyx_v_itI));

    /* "reachability.pyx":56
 * 
 *         inc(itI)
 *         inc(itJ)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(56,1,__PYX_ERR(0, 56, __pyx_L1_error))
    (void)((++__pyx_v_itJ));
  }

  /* "reachability.pyx":47
 * 
 * 
 * cdef void interval_vect_union(vector[Interval] & Is, vector[Interval] & Js) nogil:             # <<<<<<<<<<<<<<
 *     cdef:
 *         vector[Interval].iterator itI = Is.begin()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.interval_vect_union", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "reachability.pyx":59
 * 
 * 
 * cpdef get_domain_var_names():             # <<<<<<<<<<<<<<
 *     global domainVarNames
 * 
 */

static PyObject *__pyx_pw_12reachability_1get_domain_var_names(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_12reachability_get_domain_var_names(CYTHON_UNUSED int __pyx_skip_dispatch) {
  std::string __pyx_v_name;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string> ::iterator __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_domain_var_names", 0);
  __Pyx_TraceCall("get_domain_var_names", __pyx_f[0], 59, 0, __PYX_ERR(0, 59, __pyx_L1_error));

  /* "reachability.pyx":62
 *     global domainVarNames
 * 
 *     return [str(name) for name in domainVarNames]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(62,0,__PYX_ERR(0, 62, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = flowstar::domainVarNames.begin();
  for (;;) {
    if (!(__pyx_t_2 != flowstar::domainVarNames.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_name = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":59
 * 
 * 
 * cpdef get_domain_var_names():             # <<<<<<<<<<<<<<
 *     global domainVarNames
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("reachability.get_domain_var_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_1get_domain_var_names(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_1get_domain_var_names(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_domain_var_names (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_get_domain_var_names(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_get_domain_var_names(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_domain_var_names", 0);
  __Pyx_TraceCall("get_domain_var_names (wrapper)", __pyx_f[0], 59, 0, __PYX_ERR(0, 59, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_get_domain_var_names(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.get_domain_var_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":65
 * 
 * 
 * cpdef set_precision(int prec):             # <<<<<<<<<<<<<<
 *     global intervalNumPrecision
 * 
 */

static PyObject *__pyx_pw_12reachability_3set_precision(PyObject *__pyx_self, PyObject *__pyx_arg_prec); /*proto*/
static PyObject *__pyx_f_12reachability_set_precision(int __pyx_v_prec, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_precision", 0);
  __Pyx_TraceCall("set_precision", __pyx_f[0], 65, 0, __PYX_ERR(0, 65, __pyx_L1_error));

  /* "reachability.pyx":68
 *     global intervalNumPrecision
 * 
 *     intervalNumPrecision = prec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(68,0,__PYX_ERR(0, 68, __pyx_L1_error))
  intervalNumPrecision = __pyx_v_prec;

  /* "reachability.pyx":65
 * 
 * 
 * cpdef set_precision(int prec):             # <<<<<<<<<<<<<<
 *     global intervalNumPrecision
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.set_precision", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_3set_precision(PyObject *__pyx_self, PyObject *__pyx_arg_prec); /*proto*/
static PyObject *__pyx_pw_12reachability_3set_precision(PyObject *__pyx_self, PyObject *__pyx_arg_prec) {
  int __pyx_v_prec;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_precision (wrapper)", 0);
  assert(__pyx_arg_prec); {
    __pyx_v_prec = __Pyx_PyInt_As_int(__pyx_arg_prec); if (unlikely((__pyx_v_prec == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.set_precision", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_2set_precision(__pyx_self, ((int)__pyx_v_prec));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_2set_precision(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_prec) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_precision", 0);
  __Pyx_TraceCall("set_precision (wrapper)", __pyx_f[0], 65, 0, __PYX_ERR(0, 65, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_set_precision(__pyx_v_prec, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.set_precision", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":71
 * 
 * 
 * cpdef get_precision():             # <<<<<<<<<<<<<<
 *     global intervalNumPrecision
 * 
 */

static PyObject *__pyx_pw_12reachability_5get_precision(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_12reachability_get_precision(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_precision", 0);
  __Pyx_TraceCall("get_precision", __pyx_f[0], 71, 0, __PYX_ERR(0, 71, __pyx_L1_error));

  /* "reachability.pyx":74
 *     global intervalNumPrecision
 * 
 *     return intervalNumPrecision             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(74,0,__PYX_ERR(0, 74, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_mpfr_prec_t(intervalNumPrecision); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":71
 * 
 * 
 * cpdef get_precision():             # <<<<<<<<<<<<<<
 *     global intervalNumPrecision
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.get_precision", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5get_precision(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_5get_precision(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_precision (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_4get_precision(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_4get_precision(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_precision", 0);
  __Pyx_TraceCall("get_precision (wrapper)", __pyx_f[0], 71, 0, __PYX_ERR(0, 71, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_get_precision(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.get_precision", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":77
 * 
 * 
 * cdef interval_to_tuple(Interval & I):             # <<<<<<<<<<<<<<
 *     return (float(I.inf()), float(I.sup()))
 * 
 */

static PyObject *__pyx_f_12reachability_interval_to_tuple(flowstar::Interval &__pyx_v_I) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("interval_to_tuple", 0);
  __Pyx_TraceCall("interval_to_tuple", __pyx_f[0], 77, 0, __PYX_ERR(0, 77, __pyx_L1_error));

  /* "reachability.pyx":78
 * 
 * cdef interval_to_tuple(Interval & I):
 *     return (float(I.inf()), float(I.sup()))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(78,0,__PYX_ERR(0, 78, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_I.inf()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_I.sup()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":77
 * 
 * 
 * cdef interval_to_tuple(Interval & I):             # <<<<<<<<<<<<<<
 *     return (float(I.inf()), float(I.sup()))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("reachability.interval_to_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":81
 * 
 * 
 * cdef intervals_to_list(vector[Interval] & intervals):             # <<<<<<<<<<<<<<
 *     return [interval_to_tuple(I) for I in intervals]
 * 
 */

static PyObject *__pyx_f_12reachability_intervals_to_list(std::vector<flowstar::Interval>  &__pyx_v_intervals) {
  flowstar::Interval __pyx_v_I;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<flowstar::Interval> ::iterator __pyx_t_2;
  flowstar::Interval __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("intervals_to_list", 0);
  __Pyx_TraceCall("intervals_to_list", __pyx_f[0], 81, 0, __PYX_ERR(0, 81, __pyx_L1_error));

  /* "reachability.pyx":82
 * 
 * cdef intervals_to_list(vector[Interval] & intervals):
 *     return [interval_to_tuple(I) for I in intervals]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(82,0,__PYX_ERR(0, 82, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_intervals.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_intervals.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_I = __pyx_t_3;
    __pyx_t_4 = __pyx_f_12reachability_interval_to_tuple(__pyx_v_I); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":81
 * 
 * 
 * cdef intervals_to_list(vector[Interval] & intervals):             # <<<<<<<<<<<<<<
 *     return [interval_to_tuple(I) for I in intervals]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("reachability.intervals_to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":85
 * 
 * 
 * cpdef get_factorial_rec():             # <<<<<<<<<<<<<<
 *     global factorial_rec
 *     return intervals_to_list(factorial_rec)
 */

static PyObject *__pyx_pw_12reachability_7get_factorial_rec(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_12reachability_get_factorial_rec(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_factorial_rec", 0);
  __Pyx_TraceCall("get_factorial_rec", __pyx_f[0], 85, 0, __PYX_ERR(0, 85, __pyx_L1_error));

  /* "reachability.pyx":87
 * cpdef get_factorial_rec():
 *     global factorial_rec
 *     return intervals_to_list(factorial_rec)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(87,0,__PYX_ERR(0, 87, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_intervals_to_list(flowstar::factorial_rec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":85
 * 
 * 
 * cpdef get_factorial_rec():             # <<<<<<<<<<<<<<
 *     global factorial_rec
 *     return intervals_to_list(factorial_rec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.get_factorial_rec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_7get_factorial_rec(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_7get_factorial_rec(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_factorial_rec (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_6get_factorial_rec(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_6get_factorial_rec(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_factorial_rec", 0);
  __Pyx_TraceCall("get_factorial_rec (wrapper)", __pyx_f[0], 85, 0, __PYX_ERR(0, 85, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_get_factorial_rec(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.get_factorial_rec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":90
 * 
 * 
 * cpdef get_power_4():             # <<<<<<<<<<<<<<
 *     global power_4
 *     return intervals_to_list(power_4)
 */

static PyObject *__pyx_pw_12reachability_9get_power_4(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_12reachability_get_power_4(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_power_4", 0);
  __Pyx_TraceCall("get_power_4", __pyx_f[0], 90, 0, __PYX_ERR(0, 90, __pyx_L1_error));

  /* "reachability.pyx":92
 * cpdef get_power_4():
 *     global power_4
 *     return intervals_to_list(power_4)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(92,0,__PYX_ERR(0, 92, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_intervals_to_list(flowstar::power_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":90
 * 
 * 
 * cpdef get_power_4():             # <<<<<<<<<<<<<<
 *     global power_4
 *     return intervals_to_list(power_4)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.get_power_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_9get_power_4(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_9get_power_4(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_power_4 (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_8get_power_4(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_8get_power_4(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_power_4", 0);
  __Pyx_TraceCall("get_power_4 (wrapper)", __pyx_f[0], 90, 0, __PYX_ERR(0, 90, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_get_power_4(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.get_power_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":95
 * 
 * 
 * cpdef get_double_factorial():             # <<<<<<<<<<<<<<
 *     global double_factorial
 *     return intervals_to_list(double_factorial)
 */

static PyObject *__pyx_pw_12reachability_11get_double_factorial(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_12reachability_get_double_factorial(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_double_factorial", 0);
  __Pyx_TraceCall("get_double_factorial", __pyx_f[0], 95, 0, __PYX_ERR(0, 95, __pyx_L1_error));

  /* "reachability.pyx":97
 * cpdef get_double_factorial():
 *     global double_factorial
 *     return intervals_to_list(double_factorial)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(97,0,__PYX_ERR(0, 97, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_intervals_to_list(flowstar::double_factorial); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":95
 * 
 * 
 * cpdef get_double_factorial():             # <<<<<<<<<<<<<<
 *     global double_factorial
 *     return intervals_to_list(double_factorial)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.get_double_factorial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_11get_double_factorial(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_11get_double_factorial(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_double_factorial (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_10get_double_factorial(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_10get_double_factorial(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_double_factorial", 0);
  __Pyx_TraceCall("get_double_factorial (wrapper)", __pyx_f[0], 95, 0, __PYX_ERR(0, 95, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_get_double_factorial(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.get_double_factorial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":100
 * 
 * 
 * cpdef clear_globals():             # <<<<<<<<<<<<<<
 *     global factorial_rec
 *     global power_4
 */

static PyObject *__pyx_pw_12reachability_13clear_globals(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_12reachability_clear_globals(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_globals", 0);
  __Pyx_TraceCall("clear_globals", __pyx_f[0], 100, 0, __PYX_ERR(0, 100, __pyx_L1_error));

  /* "reachability.pyx":106
 *     global domainVarNames
 * 
 *     factorial_rec.clear()             # <<<<<<<<<<<<<<
 *     power_4.clear()
 *     double_factorial.clear()
 */
  __Pyx_TraceLine(106,0,__PYX_ERR(0, 106, __pyx_L1_error))
  flowstar::factorial_rec.clear();

  /* "reachability.pyx":107
 * 
 *     factorial_rec.clear()
 *     power_4.clear()             # <<<<<<<<<<<<<<
 *     double_factorial.clear()
 *     domainVarNames.clear()
 */
  __Pyx_TraceLine(107,0,__PYX_ERR(0, 107, __pyx_L1_error))
  flowstar::power_4.clear();

  /* "reachability.pyx":108
 *     factorial_rec.clear()
 *     power_4.clear()
 *     double_factorial.clear()             # <<<<<<<<<<<<<<
 *     domainVarNames.clear()
 * 
 */
  __Pyx_TraceLine(108,0,__PYX_ERR(0, 108, __pyx_L1_error))
  flowstar::double_factorial.clear();

  /* "reachability.pyx":109
 *     power_4.clear()
 *     double_factorial.clear()
 *     domainVarNames.clear()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(109,0,__PYX_ERR(0, 109, __pyx_L1_error))
  flowstar::domainVarNames.clear();

  /* "reachability.pyx":100
 * 
 * 
 * cpdef clear_globals():             # <<<<<<<<<<<<<<
 *     global factorial_rec
 *     global power_4
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.clear_globals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_13clear_globals(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_13clear_globals(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_globals (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_12clear_globals(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_12clear_globals(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("clear_globals", 0);
  __Pyx_TraceCall("clear_globals (wrapper)", __pyx_f[0], 100, 0, __PYX_ERR(0, 100, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12reachability_clear_globals(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.clear_globals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":117
 * 
 * 
 * cdef Interval _interval(i):             # <<<<<<<<<<<<<<
 *     try:
 *         (lo, hi) = i
 */

static flowstar::Interval __pyx_f_12reachability__interval(PyObject *__pyx_v_i) {
  PyObject *__pyx_v_lo = NULL;
  PyObject *__pyx_v_hi = NULL;
  flowstar::Interval __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  double __pyx_t_15;
  double __pyx_t_16;
  __Pyx_RefNannySetupContext("_interval", 0);
  __Pyx_TraceCall("_interval", __pyx_f[0], 117, 0, __PYX_ERR(0, 117, __pyx_L1_error));

  /* "reachability.pyx":118
 * 
 * cdef Interval _interval(i):
 *     try:             # <<<<<<<<<<<<<<
 *         (lo, hi) = i
 *     except:
 */
  __Pyx_TraceLine(118,0,__PYX_ERR(0, 118, __pyx_L3_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "reachability.pyx":119
 * cdef Interval _interval(i):
 *     try:
 *         (lo, hi) = i             # <<<<<<<<<<<<<<
 *     except:
 *         try:
 */
      __Pyx_TraceLine(119,0,__PYX_ERR(0, 119, __pyx_L3_error))
      if ((likely(PyTuple_CheckExact(__pyx_v_i))) || (PyList_CheckExact(__pyx_v_i))) {
        PyObject* sequence = __pyx_v_i;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 119, __pyx_L3_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 119, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 119, __pyx_L3_error)
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 119, __pyx_L3_error)
        __pyx_L10_unpacking_done:;
      }
      __pyx_v_lo = __pyx_t_4;
      __pyx_t_4 = 0;
      __pyx_v_hi = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "reachability.pyx":118
 * 
 * cdef Interval _interval(i):
 *     try:             # <<<<<<<<<<<<<<
 *         (lo, hi) = i
 *     except:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "reachability.pyx":120
 *     try:
 *         (lo, hi) = i
 *     except:             # <<<<<<<<<<<<<<
 *         try:
 *             (lo, hi) = i.lower(), i.upper()
 */
    __Pyx_TraceLine(120,0,__PYX_ERR(0, 120, __pyx_L5_except_error))
    /*except:*/ {
      __Pyx_AddTraceback("reachability._interval", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 120, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);

      /* "reachability.pyx":121
 *         (lo, hi) = i
 *     except:
 *         try:             # <<<<<<<<<<<<<<
 *             (lo, hi) = i.lower(), i.upper()
 *         except:
 */
      __Pyx_TraceLine(121,0,__PYX_ERR(0, 121, __pyx_L13_error))
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "reachability.pyx":122
 *     except:
 *         try:
 *             (lo, hi) = i.lower(), i.upper()             # <<<<<<<<<<<<<<
 *         except:
 *             lo = hi = i
 */
          __Pyx_TraceLine(122,0,__PYX_ERR(0, 122, __pyx_L13_error))
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_lower); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 122, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          if (__pyx_t_13) {
            __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 122, __pyx_L13_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          } else {
            __pyx_t_11 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 122, __pyx_L13_error)
          }
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_upper); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 122, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
            }
          }
          if (__pyx_t_14) {
            __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 122, __pyx_L13_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          } else {
            __pyx_t_12 = __Pyx_PyObject_CallNoArg(__pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 122, __pyx_L13_error)
          }
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_XDECREF_SET(__pyx_v_lo, __pyx_t_11);
          __pyx_t_11 = 0;
          __Pyx_XDECREF_SET(__pyx_v_hi, __pyx_t_12);
          __pyx_t_12 = 0;

          /* "reachability.pyx":121
 *         (lo, hi) = i
 *     except:
 *         try:             # <<<<<<<<<<<<<<
 *             (lo, hi) = i.lower(), i.upper()
 *         except:
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L20_try_end;
        __pyx_L13_error:;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "reachability.pyx":123
 *         try:
 *             (lo, hi) = i.lower(), i.upper()
 *         except:             # <<<<<<<<<<<<<<
 *             lo = hi = i
 * 
 */
        __Pyx_TraceLine(123,0,__PYX_ERR(0, 123, __pyx_L15_except_error))
        /*except:*/ {
          __Pyx_AddTraceback("reachability._interval", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_11, &__pyx_t_13) < 0) __PYX_ERR(0, 123, __pyx_L15_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GOTREF(__pyx_t_13);

          /* "reachability.pyx":124
 *             (lo, hi) = i.lower(), i.upper()
 *         except:
 *             lo = hi = i             # <<<<<<<<<<<<<<
 * 
 *     return Interval(<double>lo, <double>hi)
 */
          __Pyx_TraceLine(124,0,__PYX_ERR(0, 124, __pyx_L15_except_error))
          __Pyx_INCREF(__pyx_v_i);
          __Pyx_XDECREF_SET(__pyx_v_lo, __pyx_v_i);
          __Pyx_INCREF(__pyx_v_i);
          __Pyx_XDECREF_SET(__pyx_v_hi, __pyx_v_i);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          goto __pyx_L14_exception_handled;
        }
        __pyx_L15_except_error:;

        /* "reachability.pyx":121
 *         (lo, hi) = i
 *     except:
 *         try:             # <<<<<<<<<<<<<<
 *             (lo, hi) = i.lower(), i.upper()
 *         except:
 */
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L5_except_error;
        __pyx_L14_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L20_try_end:;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;

    /* "reachability.pyx":118
 * 
 * cdef Interval _interval(i):
 *     try:             # <<<<<<<<<<<<<<
 *         (lo, hi) = i
 *     except:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "reachability.pyx":126
 *             lo = hi = i
 * 
 *     return Interval(<double>lo, <double>hi)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(126,0,__PYX_ERR(0, 126, __pyx_L1_error))
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_lo); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_hi); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_r = flowstar::Interval(((double)__pyx_t_15), ((double)__pyx_t_16));
  goto __pyx_L0;

  /* "reachability.pyx":117
 * 
 * 
 * cdef Interval _interval(i):             # <<<<<<<<<<<<<<
 *     try:
 *         (lo, hi) = i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_WriteUnraisable("reachability._interval", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lo);
  __Pyx_XDECREF(__pyx_v_hi);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":132
 *     # Constructor makes a univariate monomial -- should combine using
 *     # arithmetic operations
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         # cdef Polynomial poly
 *         # cdef Interval I
 */

/* Python wrapper */
static int __pyx_pw_12reachability_4Poly_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_12reachability_4Poly_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_12reachability_4Poly___cinit__(((struct __pyx_obj_12reachability_Poly *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12reachability_4Poly___cinit__(struct __pyx_obj_12reachability_Poly *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_coeff = NULL;
  PyObject *__pyx_v_var_name = NULL;
  PyObject *__pyx_v_expn = NULL;
  PyObject *__pyx_v_vars = NULL;
  Py_ssize_t __pyx_v_num_vars;
  struct __pyx_obj_12reachability_Poly *__pyx_v_p = NULL;
  PyObject *__pyx_7genexpr__pyx_v_i = NULL;
  PyObject *__pyx_7genexpr__pyx_v_v = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_v = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  flowstar::Polynomial __pyx_t_13;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 132, 0, __PYX_ERR(0, 132, __pyx_L1_error));

  /* "reachability.pyx":135
 *         # cdef Polynomial poly
 *         # cdef Interval I
 *         if len(args) == 4:             # <<<<<<<<<<<<<<
 *             # print("explicit")
 *             coeff, var_name, expn, vars = args
 */
  __Pyx_TraceLine(135,0,__PYX_ERR(0, 135, __pyx_L1_error))
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 4) != 0);
  if (__pyx_t_2) {

    /* "reachability.pyx":137
 *         if len(args) == 4:
 *             # print("explicit")
 *             coeff, var_name, expn, vars = args             # <<<<<<<<<<<<<<
 * 
 *             # start var ids from 1 to take TM time var into account
 */
    __Pyx_TraceLine(137,0,__PYX_ERR(0, 137, __pyx_L1_error))
    if (1) {
      PyObject* sequence = __pyx_v_args;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 137, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 137, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
    }
    __pyx_v_coeff = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_var_name = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_expn = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_v_vars = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "reachability.pyx":140
 * 
 *             # start var ids from 1 to take TM time var into account
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}             # <<<<<<<<<<<<<<
 *             self.vars['local_t'] = 0
 *             num_vars = len(self.vars)
 */
    __Pyx_TraceLine(140,0,__PYX_ERR(0, 140, __pyx_L1_error))
    { /* enter inner scope */
      __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 140, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_int_1);
      __pyx_t_5 = __pyx_int_1;
      if (likely(PyList_CheckExact(__pyx_v_vars)) || PyTuple_CheckExact(__pyx_v_vars)) {
        __pyx_t_4 = __pyx_v_vars; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_vars); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 140, __pyx_L6_error)
      }
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 140, __pyx_L6_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 140, __pyx_L6_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_7(__pyx_t_4);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 140, __pyx_L6_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_v, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_i, __pyx_t_5);
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5);
        __pyx_t_5 = __pyx_t_3;
        __pyx_t_3 = 0;
        if (unlikely(PyDict_SetItem(__pyx_t_6, (PyObject*)__pyx_7genexpr__pyx_v_v, (PyObject*)__pyx_7genexpr__pyx_v_i))) __PYX_ERR(0, 140, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_v); __pyx_7genexpr__pyx_v_v = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_v); __pyx_7genexpr__pyx_v_v = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->vars);
    __Pyx_DECREF(__pyx_v_self->vars);
    __pyx_v_self->vars = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "reachability.pyx":141
 *             # start var ids from 1 to take TM time var into account
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}
 *             self.vars['local_t'] = 0             # <<<<<<<<<<<<<<
 *             num_vars = len(self.vars)
 * 
 */
    __Pyx_TraceLine(141,0,__PYX_ERR(0, 141, __pyx_L1_error))
    if (unlikely(__pyx_v_self->vars == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 141, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->vars, __pyx_n_s_local_t, __pyx_int_0) < 0)) __PYX_ERR(0, 141, __pyx_L1_error)

    /* "reachability.pyx":142
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}
 *             self.vars['local_t'] = 0
 *             num_vars = len(self.vars)             # <<<<<<<<<<<<<<
 * 
 *             self.c_poly = Polynomial(self.vars[var_name], expn, num_vars)
 */
    __Pyx_TraceLine(142,0,__PYX_ERR(0, 142, __pyx_L1_error))
    __pyx_t_6 = __pyx_v_self->vars;
    __Pyx_INCREF(__pyx_t_6);
    if (unlikely(__pyx_t_6 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 142, __pyx_L1_error)
    }
    __pyx_t_1 = PyDict_Size(__pyx_t_6); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_num_vars = __pyx_t_1;

    /* "reachability.pyx":144
 *             num_vars = len(self.vars)
 * 
 *             self.c_poly = Polynomial(self.vars[var_name], expn, num_vars)             # <<<<<<<<<<<<<<
 *             self.c_poly.mul_assign(_interval(coeff))
 *         elif len(args) == 2:
 */
    __Pyx_TraceLine(144,0,__PYX_ERR(0, 144, __pyx_L1_error))
    if (unlikely(__pyx_v_self->vars == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 144, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_GetItem(__pyx_v_self->vars, __pyx_v_var_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_expn); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L1_error)
    __pyx_v_self->c_poly = flowstar::Polynomial(__pyx_t_8, __pyx_t_9, __pyx_v_num_vars);

    /* "reachability.pyx":145
 * 
 *             self.c_poly = Polynomial(self.vars[var_name], expn, num_vars)
 *             self.c_poly.mul_assign(_interval(coeff))             # <<<<<<<<<<<<<<
 *         elif len(args) == 2:
 *             # print("from constant")
 */
    __Pyx_TraceLine(145,0,__PYX_ERR(0, 145, __pyx_L1_error))
    __pyx_v_self->c_poly.mul_assign(__pyx_f_12reachability__interval(__pyx_v_coeff));

    /* "reachability.pyx":135
 *         # cdef Polynomial poly
 *         # cdef Interval I
 *         if len(args) == 4:             # <<<<<<<<<<<<<<
 *             # print("explicit")
 *             coeff, var_name, expn, vars = args
 */
    goto __pyx_L3;
  }

  /* "reachability.pyx":146
 *             self.c_poly = Polynomial(self.vars[var_name], expn, num_vars)
 *             self.c_poly.mul_assign(_interval(coeff))
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             # print("from constant")
 *             coeff, vars = args
 */
  __Pyx_TraceLine(146,0,__PYX_ERR(0, 146, __pyx_L1_error))
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 2) != 0);
  if (__pyx_t_2) {

    /* "reachability.pyx":148
 *         elif len(args) == 2:
 *             # print("from constant")
 *             coeff, vars = args             # <<<<<<<<<<<<<<
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}
 *             self.vars['local_t'] = 0
 */
    __Pyx_TraceLine(148,0,__PYX_ERR(0, 148, __pyx_L1_error))
    if (1) {
      PyObject* sequence = __pyx_v_args;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 148, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
    }
    __pyx_v_coeff = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_v_vars = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "reachability.pyx":149
 *             # print("from constant")
 *             coeff, vars = args
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}             # <<<<<<<<<<<<<<
 *             self.vars['local_t'] = 0
 *             num_vars = len(self.vars)
 */
    __Pyx_TraceLine(149,0,__PYX_ERR(0, 149, __pyx_L1_error))
    { /* enter inner scope */
      __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 149, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_int_1);
      __pyx_t_6 = __pyx_int_1;
      if (likely(PyList_CheckExact(__pyx_v_vars)) || PyTuple_CheckExact(__pyx_v_vars)) {
        __pyx_t_4 = __pyx_v_vars; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_vars); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 149, __pyx_L12_error)
      }
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 149, __pyx_L12_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 149, __pyx_L12_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_7(__pyx_t_4);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 149, __pyx_L12_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_v, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_i, __pyx_t_6);
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6);
        __pyx_t_6 = __pyx_t_3;
        __pyx_t_3 = 0;
        if (unlikely(PyDict_SetItem(__pyx_t_5, (PyObject*)__pyx_8genexpr1__pyx_v_v, (PyObject*)__pyx_8genexpr1__pyx_v_i))) __PYX_ERR(0, 149, __pyx_L12_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_v); __pyx_8genexpr1__pyx_v_v = 0;
      goto __pyx_L15_exit_scope;
      __pyx_L12_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_v); __pyx_8genexpr1__pyx_v_v = 0;
      goto __pyx_L1_error;
      __pyx_L15_exit_scope:;
    } /* exit inner scope */
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->vars);
    __Pyx_DECREF(__pyx_v_self->vars);
    __pyx_v_self->vars = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "reachability.pyx":150
 *             coeff, vars = args
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}
 *             self.vars['local_t'] = 0             # <<<<<<<<<<<<<<
 *             num_vars = len(self.vars)
 *             self.c_poly = Polynomial(_interval(coeff), num_vars)
 */
    __Pyx_TraceLine(150,0,__PYX_ERR(0, 150, __pyx_L1_error))
    if (unlikely(__pyx_v_self->vars == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 150, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->vars, __pyx_n_s_local_t, __pyx_int_0) < 0)) __PYX_ERR(0, 150, __pyx_L1_error)

    /* "reachability.pyx":151
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}
 *             self.vars['local_t'] = 0
 *             num_vars = len(self.vars)             # <<<<<<<<<<<<<<
 *             self.c_poly = Polynomial(_interval(coeff), num_vars)
 *         elif len(args) == 1 and hasattr(args[0], 'exponents'):
 */
    __Pyx_TraceLine(151,0,__PYX_ERR(0, 151, __pyx_L1_error))
    __pyx_t_5 = __pyx_v_self->vars;
    __Pyx_INCREF(__pyx_t_5);
    if (unlikely(__pyx_t_5 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 151, __pyx_L1_error)
    }
    __pyx_t_1 = PyDict_Size(__pyx_t_5); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_num_vars = __pyx_t_1;

    /* "reachability.pyx":152
 *             self.vars['local_t'] = 0
 *             num_vars = len(self.vars)
 *             self.c_poly = Polynomial(_interval(coeff), num_vars)             # <<<<<<<<<<<<<<
 *         elif len(args) == 1 and hasattr(args[0], 'exponents'):
 *             # print("from sage")
 */
    __Pyx_TraceLine(152,0,__PYX_ERR(0, 152, __pyx_L1_error))
    __pyx_v_self->c_poly = flowstar::Polynomial(__pyx_f_12reachability__interval(__pyx_v_coeff), __pyx_v_num_vars);

    /* "reachability.pyx":146
 *             self.c_poly = Polynomial(self.vars[var_name], expn, num_vars)
 *             self.c_poly.mul_assign(_interval(coeff))
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             # print("from constant")
 *             coeff, vars = args
 */
    goto __pyx_L3;
  }

  /* "reachability.pyx":153
 *             num_vars = len(self.vars)
 *             self.c_poly = Polynomial(_interval(coeff), num_vars)
 *         elif len(args) == 1 and hasattr(args[0], 'exponents'):             # <<<<<<<<<<<<<<
 *             # print("from sage")
 *             p = <Poly?>Poly.from_sage(args[0])
 */
  __Pyx_TraceLine(153,0,__PYX_ERR(0, 153, __pyx_L1_error))
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 153, __pyx_L1_error)
  __pyx_t_10 = ((__pyx_t_1 == 1) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_2 = __pyx_t_10;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = __Pyx_HasAttr(__pyx_t_5, __pyx_n_s_exponents); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_11 = (__pyx_t_10 != 0);
  __pyx_t_2 = __pyx_t_11;
  __pyx_L16_bool_binop_done:;
  if (__pyx_t_2) {

    /* "reachability.pyx":155
 *         elif len(args) == 1 and hasattr(args[0], 'exponents'):
 *             # print("from sage")
 *             p = <Poly?>Poly.from_sage(args[0])             # <<<<<<<<<<<<<<
 *             self.vars = p.vars
 *             self.c_poly = p.c_poly
 */
    __Pyx_TraceLine(155,0,__PYX_ERR(0, 155, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_n_s_from_sage); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_12, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_12reachability_Poly)))) __PYX_ERR(0, 155, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_5;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_p = ((struct __pyx_obj_12reachability_Poly *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "reachability.pyx":156
 *             # print("from sage")
 *             p = <Poly?>Poly.from_sage(args[0])
 *             self.vars = p.vars             # <<<<<<<<<<<<<<
 *             self.c_poly = p.c_poly
 *         elif len(args) == 1:
 */
    __Pyx_TraceLine(156,0,__PYX_ERR(0, 156, __pyx_L1_error))
    __pyx_t_6 = __pyx_v_p->vars;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->vars);
    __Pyx_DECREF(__pyx_v_self->vars);
    __pyx_v_self->vars = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "reachability.pyx":157
 *             p = <Poly?>Poly.from_sage(args[0])
 *             self.vars = p.vars
 *             self.c_poly = p.c_poly             # <<<<<<<<<<<<<<
 *         elif len(args) == 1:
 *             # print("from vars")
 */
    __Pyx_TraceLine(157,0,__PYX_ERR(0, 157, __pyx_L1_error))
    __pyx_t_13 = __pyx_v_p->c_poly;
    __pyx_v_self->c_poly = __pyx_t_13;

    /* "reachability.pyx":153
 *             num_vars = len(self.vars)
 *             self.c_poly = Polynomial(_interval(coeff), num_vars)
 *         elif len(args) == 1 and hasattr(args[0], 'exponents'):             # <<<<<<<<<<<<<<
 *             # print("from sage")
 *             p = <Poly?>Poly.from_sage(args[0])
 */
    goto __pyx_L3;
  }

  /* "reachability.pyx":158
 *             self.vars = p.vars
 *             self.c_poly = p.c_poly
 *         elif len(args) == 1:             # <<<<<<<<<<<<<<
 *             # print("from vars")
 *             vars, = args
 */
  __Pyx_TraceLine(158,0,__PYX_ERR(0, 158, __pyx_L1_error))
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 158, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 == 1) != 0);
  if (likely(__pyx_t_2)) {

    /* "reachability.pyx":160
 *         elif len(args) == 1:
 *             # print("from vars")
 *             vars, = args             # <<<<<<<<<<<<<<
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}
 *             self.vars['local_t'] = 0
 */
    __Pyx_TraceLine(160,0,__PYX_ERR(0, 160, __pyx_L1_error))
    if (1) {
      PyObject* sequence = __pyx_v_args;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 1)) {
        if (size > 1) __Pyx_RaiseTooManyValuesError(1);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 160, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
    }
    __pyx_v_vars = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "reachability.pyx":161
 *             # print("from vars")
 *             vars, = args
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}             # <<<<<<<<<<<<<<
 *             self.vars['local_t'] = 0
 *             num_vars = len(self.vars)
 */
    __Pyx_TraceLine(161,0,__PYX_ERR(0, 161, __pyx_L1_error))
    { /* enter inner scope */
      __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_int_1);
      __pyx_t_5 = __pyx_int_1;
      if (likely(PyList_CheckExact(__pyx_v_vars)) || PyTuple_CheckExact(__pyx_v_vars)) {
        __pyx_t_12 = __pyx_v_vars; __Pyx_INCREF(__pyx_t_12); __pyx_t_1 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_v_vars); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 161, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 161, __pyx_L20_error)
      }
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_12))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_12)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 161, __pyx_L20_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_12, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 161, __pyx_L20_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_12, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_7(__pyx_t_12);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 161, __pyx_L20_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_v, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_i, __pyx_t_5);
        __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
        if (unlikely(PyDict_SetItem(__pyx_t_6, (PyObject*)__pyx_8genexpr2__pyx_v_v, (PyObject*)__pyx_8genexpr2__pyx_v_i))) __PYX_ERR(0, 161, __pyx_L20_error)
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i); __pyx_8genexpr2__pyx_v_i = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_v); __pyx_8genexpr2__pyx_v_v = 0;
      goto __pyx_L23_exit_scope;
      __pyx_L20_error:;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i); __pyx_8genexpr2__pyx_v_i = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_v); __pyx_8genexpr2__pyx_v_v = 0;
      goto __pyx_L1_error;
      __pyx_L23_exit_scope:;
    } /* exit inner scope */
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->vars);
    __Pyx_DECREF(__pyx_v_self->vars);
    __pyx_v_self->vars = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "reachability.pyx":162
 *             vars, = args
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}
 *             self.vars['local_t'] = 0             # <<<<<<<<<<<<<<
 *             num_vars = len(self.vars)
 *             self.c_poly = Polynomial(_interval(0), num_vars)
 */
    __Pyx_TraceLine(162,0,__PYX_ERR(0, 162, __pyx_L1_error))
    if (unlikely(__pyx_v_self->vars == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 162, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->vars, __pyx_n_s_local_t, __pyx_int_0) < 0)) __PYX_ERR(0, 162, __pyx_L1_error)

    /* "reachability.pyx":163
 *             self.vars = {v: i for i,v in enumerate(vars, 1)}
 *             self.vars['local_t'] = 0
 *             num_vars = len(self.vars)             # <<<<<<<<<<<<<<
 *             self.c_poly = Polynomial(_interval(0), num_vars)
 *             # self.vars = vars
 */
    __Pyx_TraceLine(163,0,__PYX_ERR(0, 163, __pyx_L1_error))
    __pyx_t_6 = __pyx_v_self->vars;
    __Pyx_INCREF(__pyx_t_6);
    if (unlikely(__pyx_t_6 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 163, __pyx_L1_error)
    }
    __pyx_t_1 = PyDict_Size(__pyx_t_6); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_num_vars = __pyx_t_1;

    /* "reachability.pyx":164
 *             self.vars['local_t'] = 0
 *             num_vars = len(self.vars)
 *             self.c_poly = Polynomial(_interval(0), num_vars)             # <<<<<<<<<<<<<<
 *             # self.vars = vars
 *         else:
 */
    __Pyx_TraceLine(164,0,__PYX_ERR(0, 164, __pyx_L1_error))
    __pyx_v_self->c_poly = flowstar::Polynomial(__pyx_f_12reachability__interval(__pyx_int_0), __pyx_v_num_vars);

    /* "reachability.pyx":158
 *             self.vars = p.vars
 *             self.c_poly = p.c_poly
 *         elif len(args) == 1:             # <<<<<<<<<<<<<<
 *             # print("from vars")
 *             vars, = args
 */
    goto __pyx_L3;
  }

  /* "reachability.pyx":167
 *             # self.vars = vars
 *         else:
 *             raise Exception("Invalid args for Poly")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_TraceLine(167,0,__PYX_ERR(0, 167, __pyx_L1_error))
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 167, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "reachability.pyx":132
 *     # Constructor makes a univariate monomial -- should combine using
 *     # arithmetic operations
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         # cdef Polynomial poly
 *         # cdef Interval I
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("reachability.Poly.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coeff);
  __Pyx_XDECREF(__pyx_v_var_name);
  __Pyx_XDECREF(__pyx_v_expn);
  __Pyx_XDECREF(__pyx_v_vars);
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_v);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_v);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_v);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":170
 * 
 *     @staticmethod
 *     def from_monomial(coeff, mono, vars):             # <<<<<<<<<<<<<<
 *         # print("coeff =", coeff)
 *         # print("mono =", mono)
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_4Poly_3from_monomial(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_12reachability_4Poly_3from_monomial = {"from_monomial", (PyCFunction)__pyx_pw_12reachability_4Poly_3from_monomial, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_12reachability_4Poly_3from_monomial(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coeff = 0;
  PyObject *__pyx_v_mono = 0;
  PyObject *__pyx_v_vars = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_monomial (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeff,&__pyx_n_s_mono,&__pyx_n_s_vars,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mono)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_monomial", 1, 3, 3, 1); __PYX_ERR(0, 170, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vars)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_monomial", 1, 3, 3, 2); __PYX_ERR(0, 170, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_monomial") < 0)) __PYX_ERR(0, 170, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_coeff = values[0];
    __pyx_v_mono = values[1];
    __pyx_v_vars = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_monomial", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 170, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Poly.from_monomial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_4Poly_2from_monomial(__pyx_v_coeff, __pyx_v_mono, __pyx_v_vars);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_12reachability_4Poly_13from_monomial_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "reachability.pyx":176
 *         # ts = [Poly(1, k, 1, vars) for k in vars]
 *         return reduce(operator.mul,
 *                       (Poly(1, k, n, vars) for k, n in zip(vars, mono)),             # <<<<<<<<<<<<<<
 *                       c)
 * 
 */

static PyObject *__pyx_pf_12reachability_4Poly_13from_monomial_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *)__pyx_tp_new_12reachability___pyx_scope_struct_1_genexpr(__pyx_ptype_12reachability___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 176, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_12reachability_4Poly_13from_monomial_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_from_monomial_locals_genexpr, __pyx_n_s_reachability); if (unlikely(!gen)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.Poly.from_monomial.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_12reachability_4Poly_13from_monomial_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 176, 0, __PYX_ERR(0, 176, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 176, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars)) { __Pyx_RaiseClosureNameError("vars"); __PYX_ERR(0, 176, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mono)) { __Pyx_RaiseClosureNameError("mono"); __PYX_ERR(0, 176, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mono);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mono);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_mono);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 176, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 176, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 176, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_k, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_n);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_n, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars)) { __Pyx_RaiseClosureNameError("vars"); __PYX_ERR(0, 176, __pyx_L1_error) }
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_1);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_k);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_k);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_k);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_n);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars);
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 176, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":170
 * 
 *     @staticmethod
 *     def from_monomial(coeff, mono, vars):             # <<<<<<<<<<<<<<
 *         # print("coeff =", coeff)
 *         # print("mono =", mono)
 */

static PyObject *__pyx_pf_12reachability_4Poly_2from_monomial(PyObject *__pyx_v_coeff, PyObject *__pyx_v_mono, PyObject *__pyx_v_vars) {
  struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *__pyx_cur_scope;
  struct __pyx_obj_12reachability_Poly *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__2)
  __Pyx_RefNannySetupContext("from_monomial", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *)__pyx_tp_new_12reachability___pyx_scope_struct__from_monomial(__pyx_ptype_12reachability___pyx_scope_struct__from_monomial, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 170, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("from_monomial", __pyx_f[0], 170, 0, __PYX_ERR(0, 170, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_mono = __pyx_v_mono;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_mono);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_mono);
  __pyx_cur_scope->__pyx_v_vars = __pyx_v_vars;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vars);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vars);

  /* "reachability.pyx":173
 *         # print("coeff =", coeff)
 *         # print("mono =", mono)
 *         c = Poly(coeff, vars)             # <<<<<<<<<<<<<<
 *         # ts = [Poly(1, k, 1, vars) for k in vars]
 *         return reduce(operator.mul,
 */
  __Pyx_TraceLine(173,0,__PYX_ERR(0, 173, __pyx_L1_error))
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_coeff);
  __Pyx_GIVEREF(__pyx_v_coeff);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_coeff);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_vars);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_vars);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_vars);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_c = ((struct __pyx_obj_12reachability_Poly *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "reachability.pyx":175
 *         c = Poly(coeff, vars)
 *         # ts = [Poly(1, k, 1, vars) for k in vars]
 *         return reduce(operator.mul,             # <<<<<<<<<<<<<<
 *                       (Poly(1, k, n, vars) for k, n in zip(vars, mono)),
 *                       c)
 */
  __Pyx_TraceLine(175,0,__PYX_ERR(0, 175, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_reduce); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_operator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mul); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "reachability.pyx":176
 *         # ts = [Poly(1, k, 1, vars) for k in vars]
 *         return reduce(operator.mul,
 *                       (Poly(1, k, n, vars) for k, n in zip(vars, mono)),             # <<<<<<<<<<<<<<
 *                       c)
 * 
 */
  __Pyx_TraceLine(176,0,__PYX_ERR(0, 176, __pyx_L1_error))
  __pyx_t_3 = __pyx_pf_12reachability_4Poly_13from_monomial_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "reachability.pyx":177
 *         return reduce(operator.mul,
 *                       (Poly(1, k, n, vars) for k, n in zip(vars, mono)),
 *                       c)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_TraceLine(177,0,__PYX_ERR(0, 177, __pyx_L1_error))
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_4, __pyx_t_3, ((PyObject *)__pyx_v_c)};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_4, __pyx_t_3, ((PyObject *)__pyx_v_c)};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_c));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_c));
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, ((PyObject *)__pyx_v_c));
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":170
 * 
 *     @staticmethod
 *     def from_monomial(coeff, mono, vars):             # <<<<<<<<<<<<<<
 *         # print("coeff =", coeff)
 *         # print("mono =", mono)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("reachability.Poly.from_monomial", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":180
 * 
 *     @staticmethod
 *     def from_sage(p):             # <<<<<<<<<<<<<<
 *         '''
 *         >>> R, (x, y) = sage.PolynomialRing(sage.RIF, 'x, y').objgens()
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_4Poly_5from_sage(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12reachability_4Poly_4from_sage[] = "\n        >>> R, (x, y) = sage.PolynomialRing(sage.RIF, 'x, y').objgens()\n        >>> Poly.from_sage(x*y + x + R(3))\n        (([3.0000000000e+00 , 3.0000000000e+00]) + ([1.0000000000e+00 , 1.0000000000e+00] * x) + ([1.0000000000e+00 , 1.0000000000e+00] * x * y))\n        >>> R, (t,) = sage.PolynomialRing(sage.RIF, 't').objgens()\n        >>> Poly(t - 0.5)\n        (([-5.0000000000e-01 , -5.0000000000e-01]) + ([1.0000000000e+00 , 1.0000000000e+00] * t))\n        >>> Poly(t + sage.RIF(-1,1))\n        (([-1.0000000000e+00 , 1.0000000000e+00]) + ([1.0000000000e+00 , 1.0000000000e+00] * t))\n        >>> Poly(t**2 - 2)\n        (([-2.0000000000e+00 , -2.0000000000e+00]) + ([1.0000000000e+00 , 1.0000000000e+00] * t^2))\n        ";
static PyMethodDef __pyx_mdef_12reachability_4Poly_5from_sage = {"from_sage", (PyCFunction)__pyx_pw_12reachability_4Poly_5from_sage, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12reachability_4Poly_4from_sage};
static PyObject *__pyx_pw_12reachability_4Poly_5from_sage(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_sage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_sage") < 0)) __PYX_ERR(0, 180, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_p = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_sage", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 180, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Poly.from_sage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_4Poly_4from_sage(__pyx_v_p);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_12reachability_4Poly_9from_sage_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "reachability.pyx":201
 *             # Univariate polynomials handle interval coefficients containing
 *             # 0 strangly so we must treat this as a special case
 *             cs = (c for c in p.list() if not(c == 0 and hasattr(c, 'diameter') <= (c.diameter() == 0)))             # <<<<<<<<<<<<<<
 *         else:
 *             cs = p.coefficients()
 */

static PyObject *__pyx_pf_12reachability_4Poly_9from_sage_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *)__pyx_tp_new_12reachability___pyx_scope_struct_3_genexpr(__pyx_ptype_12reachability___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 201, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_12reachability_4Poly_9from_sage_2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_from_sage_locals_genexpr, __pyx_n_s_reachability); if (unlikely(!gen)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.Poly.from_sage.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_12reachability_4Poly_9from_sage_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 201, 0, __PYX_ERR(0, 201, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 201, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_p)) { __Pyx_RaiseClosureNameError("p"); __PYX_ERR(0, 201, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_p, __pyx_n_s_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 201, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 201, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_c);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_c, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_cur_scope->__pyx_v_c, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_HasAttr(__pyx_cur_scope->__pyx_v_c, __pyx_n_s_diameter); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 201, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_c, __pyx_n_s_diameter); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    __pyx_t_7 = ((!__pyx_t_6) != 0);
    if (__pyx_t_7) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_c);
      __pyx_r = __pyx_cur_scope->__pyx_v_c;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_TraceReturn(__pyx_r, 0);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 201, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_12reachability_4Poly_9from_sage_5generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "reachability.pyx":211
 * 
 *         return sum(
 *             (Poly.from_monomial(c,             # <<<<<<<<<<<<<<
 *                                 ex if isinstance(ex, collections.Iterable)
 *                                 else (ex,),
 */

static PyObject *__pyx_pf_12reachability_4Poly_9from_sage_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *)__pyx_tp_new_12reachability___pyx_scope_struct_4_genexpr(__pyx_ptype_12reachability___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 211, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_12reachability_4Poly_9from_sage_5generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_from_sage_locals_genexpr, __pyx_n_s_reachability); if (unlikely(!gen)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.Poly.from_sage.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_12reachability_4Poly_9from_sage_5generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 211, 0, __PYX_ERR(0, 211, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 211, __pyx_L1_error)

  /* "reachability.pyx":215
 *                                 else (ex,),
 *                                 vars)
 *                 for c, ex in zip(cs, p.exponents())),             # <<<<<<<<<<<<<<
 *             zero,
 *         )
 */
  __Pyx_TraceLine(215,0,__PYX_ERR(0, 215, __pyx_L1_error))
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_cs)) { __Pyx_RaiseClosureNameError("cs"); __PYX_ERR(0, 215, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_p)) { __Pyx_RaiseClosureNameError("p"); __PYX_ERR(0, 215, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_p, __pyx_n_s_exponents); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_cs);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_cs);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_cs);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 215, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 215, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 215, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 215, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 215, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_c);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_c, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ex);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ex, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "reachability.pyx":211
 * 
 *         return sum(
 *             (Poly.from_monomial(c,             # <<<<<<<<<<<<<<
 *                                 ex if isinstance(ex, collections.Iterable)
 *                                 else (ex,),
 */
    __Pyx_TraceLine(211,0,__PYX_ERR(0, 211, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_n_s_from_monomial); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "reachability.pyx":212
 *         return sum(
 *             (Poly.from_monomial(c,
 *                                 ex if isinstance(ex, collections.Iterable)             # <<<<<<<<<<<<<<
 *                                 else (ex,),
 *                                 vars)
 */
    __Pyx_TraceLine(212,0,__PYX_ERR(0, 212, __pyx_L1_error))
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_collections); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = PyObject_IsInstance(__pyx_cur_scope->__pyx_v_ex, __pyx_t_9); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if ((__pyx_t_10 != 0)) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ex);
      __pyx_t_3 = __pyx_cur_scope->__pyx_v_ex;
    } else {

      /* "reachability.pyx":213
 *             (Poly.from_monomial(c,
 *                                 ex if isinstance(ex, collections.Iterable)
 *                                 else (ex,),             # <<<<<<<<<<<<<<
 *                                 vars)
 *                 for c, ex in zip(cs, p.exponents())),
 */
      __Pyx_TraceLine(213,0,__PYX_ERR(0, 213, __pyx_L1_error))
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ex);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ex);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_cur_scope->__pyx_v_ex);
      __pyx_t_3 = __pyx_t_9;
      __pyx_t_9 = 0;
    }

    /* "reachability.pyx":214
 *                                 ex if isinstance(ex, collections.Iterable)
 *                                 else (ex,),
 *                                 vars)             # <<<<<<<<<<<<<<
 *                 for c, ex in zip(cs, p.exponents())),
 *             zero,
 */
    __Pyx_TraceLine(214,0,__PYX_ERR(0, 214, __pyx_L1_error))
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars)) { __Pyx_RaiseClosureNameError("vars"); __PYX_ERR(0, 214, __pyx_L1_error) }
    __pyx_t_9 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_c, __pyx_t_3, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_9, __pyx_cur_scope->__pyx_v_c, __pyx_t_3, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_11, 3+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_11); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_c);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_11, __pyx_cur_scope->__pyx_v_c);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_11, __pyx_t_3);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_11, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_vars);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 211, __pyx_L1_error)

    /* "reachability.pyx":215
 *                                 else (ex,),
 *                                 vars)
 *                 for c, ex in zip(cs, p.exponents())),             # <<<<<<<<<<<<<<
 *             zero,
 *         )
 */
    __Pyx_TraceLine(215,0,__PYX_ERR(0, 215, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "reachability.pyx":211
 * 
 *         return sum(
 *             (Poly.from_monomial(c,             # <<<<<<<<<<<<<<
 *                                 ex if isinstance(ex, collections.Iterable)
 *                                 else (ex,),
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":180
 * 
 *     @staticmethod
 *     def from_sage(p):             # <<<<<<<<<<<<<<
 *         '''
 *         >>> R, (x, y) = sage.PolynomialRing(sage.RIF, 'x, y').objgens()
 */

static PyObject *__pyx_pf_12reachability_4Poly_4from_sage(PyObject *__pyx_v_p) {
  struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *__pyx_cur_scope;
  struct __pyx_obj_12reachability_Poly *__pyx_v_zero = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_TraceFrameInit(__pyx_codeobj__3)
  __Pyx_RefNannySetupContext("from_sage", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *)__pyx_tp_new_12reachability___pyx_scope_struct_2_from_sage(__pyx_ptype_12reachability___pyx_scope_struct_2_from_sage, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 180, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("from_sage", __pyx_f[0], 180, 0, __PYX_ERR(0, 180, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_p = __pyx_v_p;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_p);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_p);

  /* "reachability.pyx":196
 *         # print(p.coefficients())
 *         # print(p.exponents())
 *         vars = list(map(str, p.parent().gens()))             # <<<<<<<<<<<<<<
 *         zero = Poly(vars)
 *         if hasattr(p, 'list'):
 */
  __Pyx_TraceLine(196,0,__PYX_ERR(0, 196, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_p, __pyx_n_s_parent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_gens); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)(&PyString_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyString_Type)));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)(&PyString_Type)));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_vars = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "reachability.pyx":197
 *         # print(p.exponents())
 *         vars = list(map(str, p.parent().gens()))
 *         zero = Poly(vars)             # <<<<<<<<<<<<<<
 *         if hasattr(p, 'list'):
 *             # Univariate polynomials handle interval coefficients containing
 */
  __Pyx_TraceLine(197,0,__PYX_ERR(0, 197, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_cur_scope->__pyx_v_vars); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_zero = ((struct __pyx_obj_12reachability_Poly *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "reachability.pyx":198
 *         vars = list(map(str, p.parent().gens()))
 *         zero = Poly(vars)
 *         if hasattr(p, 'list'):             # <<<<<<<<<<<<<<
 *             # Univariate polynomials handle interval coefficients containing
 *             # 0 strangly so we must treat this as a special case
 */
  __Pyx_TraceLine(198,0,__PYX_ERR(0, 198, __pyx_L1_error))
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_p;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_HasAttr(__pyx_t_3, __pyx_n_s_list); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "reachability.pyx":201
 *             # Univariate polynomials handle interval coefficients containing
 *             # 0 strangly so we must treat this as a special case
 *             cs = (c for c in p.list() if not(c == 0 and hasattr(c, 'diameter') <= (c.diameter() == 0)))             # <<<<<<<<<<<<<<
 *         else:
 *             cs = p.coefficients()
 */
    __Pyx_TraceLine(201,0,__PYX_ERR(0, 201, __pyx_L1_error))
    __pyx_t_3 = __pyx_pf_12reachability_4Poly_9from_sage_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_cs = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "reachability.pyx":198
 *         vars = list(map(str, p.parent().gens()))
 *         zero = Poly(vars)
 *         if hasattr(p, 'list'):             # <<<<<<<<<<<<<<
 *             # Univariate polynomials handle interval coefficients containing
 *             # 0 strangly so we must treat this as a special case
 */
    goto __pyx_L3;
  }

  /* "reachability.pyx":203
 *             cs = (c for c in p.list() if not(c == 0 and hasattr(c, 'diameter') <= (c.diameter() == 0)))
 *         else:
 *             cs = p.coefficients()             # <<<<<<<<<<<<<<
 *         # try:
 *         #     cs = p.coefficients(sparse=False)
 */
  __Pyx_TraceLine(203,0,__PYX_ERR(0, 203, __pyx_L1_error))
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_p, __pyx_n_s_coefficients); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_cs = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "reachability.pyx":210
 *         #cs = [Poly(c, vars) for c in p.coefficients()]
 * 
 *         return sum(             # <<<<<<<<<<<<<<
 *             (Poly.from_monomial(c,
 *                                 ex if isinstance(ex, collections.Iterable)
 */
  __Pyx_TraceLine(210,0,__PYX_ERR(0, 210, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);

  /* "reachability.pyx":211
 * 
 *         return sum(
 *             (Poly.from_monomial(c,             # <<<<<<<<<<<<<<
 *                                 ex if isinstance(ex, collections.Iterable)
 *                                 else (ex,),
 */
  __Pyx_TraceLine(211,0,__PYX_ERR(0, 211, __pyx_L1_error))
  __pyx_t_3 = __pyx_pf_12reachability_4Poly_9from_sage_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "reachability.pyx":210
 *         #cs = [Poly(c, vars) for c in p.coefficients()]
 * 
 *         return sum(             # <<<<<<<<<<<<<<
 *             (Poly.from_monomial(c,
 *                                 ex if isinstance(ex, collections.Iterable)
 */
  __Pyx_TraceLine(210,0,__PYX_ERR(0, 210, __pyx_L1_error))
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_zero));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_zero));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_zero));
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":180
 * 
 *     @staticmethod
 *     def from_sage(p):             # <<<<<<<<<<<<<<
 *         '''
 *         >>> R, (x, y) = sage.PolynomialRing(sage.RIF, 'x, y').objgens()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("reachability.Poly.from_sage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_zero);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":220
 * 
 *     @property
 *     def var_names(self):             # <<<<<<<<<<<<<<
 *         return [k for k,v in
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_4Poly_9var_names_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_4Poly_9var_names_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_4Poly_9var_names___get__(((struct __pyx_obj_12reachability_Poly *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_4Poly_9var_names___get__(struct __pyx_obj_12reachability_Poly *__pyx_v_self) {
  PyObject *__pyx_v_k = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 220, 0, __PYX_ERR(0, 220, __pyx_L1_error));

  /* "reachability.pyx":221
 *     @property
 *     def var_names(self):
 *         return [k for k,v in             # <<<<<<<<<<<<<<
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))
 *                     if k != 'local_t']
 */
  __Pyx_TraceLine(221,0,__PYX_ERR(0, 221, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "reachability.pyx":222
 *     def var_names(self):
 *         return [k for k,v in
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))             # <<<<<<<<<<<<<<
 *                     if k != 'local_t']
 * 
 */
  __Pyx_TraceLine(222,0,__PYX_ERR(0, 222, __pyx_L1_error))
  if (unlikely(__pyx_v_self->vars == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 222, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_Items(__pyx_v_self->vars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_operator); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_itemgetter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_key, __pyx_t_4) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_2 = __pyx_t_4; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 222, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 222, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 222, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 222, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 221, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 221, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }

    /* "reachability.pyx":221
 *     @property
 *     def var_names(self):
 *         return [k for k,v in             # <<<<<<<<<<<<<<
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))
 *                     if k != 'local_t']
 */
    __Pyx_TraceLine(221,0,__PYX_ERR(0, 221, __pyx_L1_error))
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "reachability.pyx":223
 *         return [k for k,v in
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))
 *                     if k != 'local_t']             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, other):
 */
    __Pyx_TraceLine(223,0,__PYX_ERR(0, 223, __pyx_L1_error))
    __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_v_k, __pyx_n_s_local_t, Py_NE)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 223, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "reachability.pyx":221
 *     @property
 *     def var_names(self):
 *         return [k for k,v in             # <<<<<<<<<<<<<<
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))
 *                     if k != 'local_t']
 */
      __Pyx_TraceLine(221,0,__PYX_ERR(0, 221, __pyx_L1_error))
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_k))) __PYX_ERR(0, 221, __pyx_L1_error)

      /* "reachability.pyx":223
 *         return [k for k,v in
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))
 *                     if k != 'local_t']             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, other):
 */
    }

    /* "reachability.pyx":221
 *     @property
 *     def var_names(self):
 *         return [k for k,v in             # <<<<<<<<<<<<<<
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))
 *                     if k != 'local_t']
 */
    __Pyx_TraceLine(221,0,__PYX_ERR(0, 221, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":220
 * 
 *     @property
 *     def var_names(self):             # <<<<<<<<<<<<<<
 *         return [k for k,v in
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("reachability.Poly.var_names.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":225
 *                     if k != 'local_t']
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Poly) and isinstance(other, Poly):
 *             p = Poly((<Poly>self).var_names)
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_4Poly_7__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_12reachability_4Poly_7__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_4Poly_6__add__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_4Poly_6__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_12reachability_Poly *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__add__", 0);
  __Pyx_TraceCall("__add__", __pyx_f[0], 225, 0, __PYX_ERR(0, 225, __pyx_L1_error));

  /* "reachability.pyx":226
 * 
 *     def __add__(self, other):
 *         if isinstance(self, Poly) and isinstance(other, Poly):             # <<<<<<<<<<<<<<
 *             p = Poly((<Poly>self).var_names)
 *             p.c_poly = (<Poly>self).c_poly + (<Poly>other).c_poly
 */
  __Pyx_TraceLine(226,0,__PYX_ERR(0, 226, __pyx_L1_error))
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_self, __pyx_ptype_12reachability_Poly); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_12reachability_Poly); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "reachability.pyx":227
 *     def __add__(self, other):
 *         if isinstance(self, Poly) and isinstance(other, Poly):
 *             p = Poly((<Poly>self).var_names)             # <<<<<<<<<<<<<<
 *             p.c_poly = (<Poly>self).c_poly + (<Poly>other).c_poly
 *             return p
 */
    __Pyx_TraceLine(227,0,__PYX_ERR(0, 227, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_var_names); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_p = ((struct __pyx_obj_12reachability_Poly *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "reachability.pyx":228
 *         if isinstance(self, Poly) and isinstance(other, Poly):
 *             p = Poly((<Poly>self).var_names)
 *             p.c_poly = (<Poly>self).c_poly + (<Poly>other).c_poly             # <<<<<<<<<<<<<<
 *             return p
 *         elif isinstance(self, Poly):
 */
    __Pyx_TraceLine(228,0,__PYX_ERR(0, 228, __pyx_L1_error))
    __pyx_v_p->c_poly = (((struct __pyx_obj_12reachability_Poly *)__pyx_v_self)->c_poly + ((struct __pyx_obj_12reachability_Poly *)__pyx_v_other)->c_poly);

    /* "reachability.pyx":229
 *             p = Poly((<Poly>self).var_names)
 *             p.c_poly = (<Poly>self).c_poly + (<Poly>other).c_poly
 *             return p             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Poly):
 *             # We assume other is some kind of interval
 */
    __Pyx_TraceLine(229,0,__PYX_ERR(0, 229, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_p));
    __pyx_r = ((PyObject *)__pyx_v_p);
    goto __pyx_L0;

    /* "reachability.pyx":226
 * 
 *     def __add__(self, other):
 *         if isinstance(self, Poly) and isinstance(other, Poly):             # <<<<<<<<<<<<<<
 *             p = Poly((<Poly>self).var_names)
 *             p.c_poly = (<Poly>self).c_poly + (<Poly>other).c_poly
 */
  }

  /* "reachability.pyx":230
 *             p.c_poly = (<Poly>self).c_poly + (<Poly>other).c_poly
 *             return p
 *         elif isinstance(self, Poly):             # <<<<<<<<<<<<<<
 *             # We assume other is some kind of interval
 *             # CAREFUL: explicit NotImplemented case may be needed
 */
  __Pyx_TraceLine(230,0,__PYX_ERR(0, 230, __pyx_L1_error))
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_self, __pyx_ptype_12reachability_Poly); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "reachability.pyx":233
 *             # We assume other is some kind of interval
 *             # CAREFUL: explicit NotImplemented case may be needed
 *             return <Poly>self + Poly(other, self.var_names)             # <<<<<<<<<<<<<<
 *         elif isinstance(other, Poly):
 *             # We assume other is some kind of interval
 */
    __Pyx_TraceLine(233,0,__PYX_ERR(0, 233, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_var_names); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_v_self, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "reachability.pyx":230
 *             p.c_poly = (<Poly>self).c_poly + (<Poly>other).c_poly
 *             return p
 *         elif isinstance(self, Poly):             # <<<<<<<<<<<<<<
 *             # We assume other is some kind of interval
 *             # CAREFUL: explicit NotImplemented case may be needed
 */
  }

  /* "reachability.pyx":234
 *             # CAREFUL: explicit NotImplemented case may be needed
 *             return <Poly>self + Poly(other, self.var_names)
 *         elif isinstance(other, Poly):             # <<<<<<<<<<<<<<
 *             # We assume other is some kind of interval
 *             # CAREFUL: explicit NotImplemented case may be needed
 */
  __Pyx_TraceLine(234,0,__PYX_ERR(0, 234, __pyx_L1_error))
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_12reachability_Poly); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "reachability.pyx":237
 *             # We assume other is some kind of interval
 *             # CAREFUL: explicit NotImplemented case may be needed
 *             return Poly(self, other.var_names) + <Poly>other             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
    __Pyx_TraceLine(237,0,__PYX_ERR(0, 237, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_var_names); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_v_other); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "reachability.pyx":234
 *             # CAREFUL: explicit NotImplemented case may be needed
 *             return <Poly>self + Poly(other, self.var_names)
 *         elif isinstance(other, Poly):             # <<<<<<<<<<<<<<
 *             # We assume other is some kind of interval
 *             # CAREFUL: explicit NotImplemented case may be needed
 */
  }

  /* "reachability.pyx":239
 *             return Poly(self, other.var_names) + <Poly>other
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, other):
 */
  __Pyx_TraceLine(239,0,__PYX_ERR(0, 239, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }

  /* "reachability.pyx":225
 *                     if k != 'local_t']
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Poly) and isinstance(other, Poly):
 *             p = Poly((<Poly>self).var_names)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("reachability.Poly.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":241
 *             return NotImplemented
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Poly) and isinstance(other, Poly):
 *             # print("case p * p")
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_4Poly_9__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_12reachability_4Poly_9__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_4Poly_8__mul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_4Poly_8__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_12reachability_Poly *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__mul__", 0);
  __Pyx_TraceCall("__mul__", __pyx_f[0], 241, 0, __PYX_ERR(0, 241, __pyx_L1_error));

  /* "reachability.pyx":242
 * 
 *     def __mul__(self, other):
 *         if isinstance(self, Poly) and isinstance(other, Poly):             # <<<<<<<<<<<<<<
 *             # print("case p * p")
 *             p = Poly((<Poly>self).var_names)
 */
  __Pyx_TraceLine(242,0,__PYX_ERR(0, 242, __pyx_L1_error))
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_self, __pyx_ptype_12reachability_Poly); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_12reachability_Poly); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "reachability.pyx":244
 *         if isinstance(self, Poly) and isinstance(other, Poly):
 *             # print("case p * p")
 *             p = Poly((<Poly>self).var_names)             # <<<<<<<<<<<<<<
 *             p.c_poly = (<Poly>self).c_poly * (<Poly>other).c_poly
 *             return p
 */
    __Pyx_TraceLine(244,0,__PYX_ERR(0, 244, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_var_names); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_p = ((struct __pyx_obj_12reachability_Poly *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "reachability.pyx":245
 *             # print("case p * p")
 *             p = Poly((<Poly>self).var_names)
 *             p.c_poly = (<Poly>self).c_poly * (<Poly>other).c_poly             # <<<<<<<<<<<<<<
 *             return p
 *         elif isinstance(self, Poly):
 */
    __Pyx_TraceLine(245,0,__PYX_ERR(0, 245, __pyx_L1_error))
    __pyx_v_p->c_poly = (((struct __pyx_obj_12reachability_Poly *)__pyx_v_self)->c_poly * ((struct __pyx_obj_12reachability_Poly *)__pyx_v_other)->c_poly);

    /* "reachability.pyx":246
 *             p = Poly((<Poly>self).var_names)
 *             p.c_poly = (<Poly>self).c_poly * (<Poly>other).c_poly
 *             return p             # <<<<<<<<<<<<<<
 *         elif isinstance(self, Poly):
 *             # print("case p * o")
 */
    __Pyx_TraceLine(246,0,__PYX_ERR(0, 246, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_p));
    __pyx_r = ((PyObject *)__pyx_v_p);
    goto __pyx_L0;

    /* "reachability.pyx":242
 * 
 *     def __mul__(self, other):
 *         if isinstance(self, Poly) and isinstance(other, Poly):             # <<<<<<<<<<<<<<
 *             # print("case p * p")
 *             p = Poly((<Poly>self).var_names)
 */
  }

  /* "reachability.pyx":247
 *             p.c_poly = (<Poly>self).c_poly * (<Poly>other).c_poly
 *             return p
 *         elif isinstance(self, Poly):             # <<<<<<<<<<<<<<
 *             # print("case p * o")
 *             # We assume other is some kind of interval
 */
  __Pyx_TraceLine(247,0,__PYX_ERR(0, 247, __pyx_L1_error))
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_self, __pyx_ptype_12reachability_Poly); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "reachability.pyx":251
 *             # We assume other is some kind of interval
 *             # CAREFUL: explicit NotImplemented case may be needed
 *             return <Poly>self * Poly(other, self.var_names)             # <<<<<<<<<<<<<<
 *             # p.c_poly = <Polynomial?>self.c_poly * _interval(other)
 *         elif isinstance(other, Poly):
 */
    __Pyx_TraceLine(251,0,__PYX_ERR(0, 251, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_var_names); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_v_self, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "reachability.pyx":247
 *             p.c_poly = (<Poly>self).c_poly * (<Poly>other).c_poly
 *             return p
 *         elif isinstance(self, Poly):             # <<<<<<<<<<<<<<
 *             # print("case p * o")
 *             # We assume other is some kind of interval
 */
  }

  /* "reachability.pyx":253
 *             return <Poly>self * Poly(other, self.var_names)
 *             # p.c_poly = <Polynomial?>self.c_poly * _interval(other)
 *         elif isinstance(other, Poly):             # <<<<<<<<<<<<<<
 *             # print("case o * p")
 *             # We assume other is some kind of interval
 */
  __Pyx_TraceLine(253,0,__PYX_ERR(0, 253, __pyx_L1_error))
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_12reachability_Poly); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "reachability.pyx":257
 *             # We assume other is some kind of interval
 *             # CAREFUL: explicit NotImplemented case may be needed
 *             return Poly(self, other.var_names) * <Poly>other             # <<<<<<<<<<<<<<
 *         else:
 *             # print("not implemented")
 */
    __Pyx_TraceLine(257,0,__PYX_ERR(0, 257, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_var_names); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_v_other); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "reachability.pyx":253
 *             return <Poly>self * Poly(other, self.var_names)
 *             # p.c_poly = <Polynomial?>self.c_poly * _interval(other)
 *         elif isinstance(other, Poly):             # <<<<<<<<<<<<<<
 *             # print("case o * p")
 *             # We assume other is some kind of interval
 */
  }

  /* "reachability.pyx":260
 *         else:
 *             # print("not implemented")
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_TraceLine(260,0,__PYX_ERR(0, 260, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;
  }

  /* "reachability.pyx":241
 *             return NotImplemented
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(self, Poly) and isinstance(other, Poly):
 *             # print("case p * p")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("reachability.Poly.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":262
 *             return NotImplemented
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cdef vector[string] var_names
 *         for (name, _) in sorted(self.vars.iteritems(), key=(lambda x: x[1])):
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_4Poly_11__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_4Poly_11__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_4Poly_10__repr__(((struct __pyx_obj_12reachability_Poly *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":264
 *     def __repr__(self):
 *         cdef vector[string] var_names
 *         for (name, _) in sorted(self.vars.iteritems(), key=(lambda x: x[1])):             # <<<<<<<<<<<<<<
 *             var_names.push_back(<string>name)
 *         cdef string res
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_4Poly_8__repr___lambda3(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_12reachability_4Poly_8__repr___lambda3 = {"lambda3", (PyCFunction)__pyx_pw_12reachability_4Poly_8__repr___lambda3, METH_O, 0};
static PyObject *__pyx_pw_12reachability_4Poly_8__repr___lambda3(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda3(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __Pyx_TraceCall("lambda3", __pyx_f[0], 264, 0, __PYX_ERR(0, 264, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.Poly.__repr__.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":262
 *             return NotImplemented
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cdef vector[string] var_names
 *         for (name, _) in sorted(self.vars.iteritems(), key=(lambda x: x[1])):
 */

static PyObject *__pyx_pf_12reachability_4Poly_10__repr__(struct __pyx_obj_12reachability_Poly *__pyx_v_self) {
  std::vector<std::string>  __pyx_v_var_names;
  PyObject *__pyx_v_name = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  std::string __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  std::string __pyx_t_9;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[0], 262, 0, __PYX_ERR(0, 262, __pyx_L1_error));

  /* "reachability.pyx":264
 *     def __repr__(self):
 *         cdef vector[string] var_names
 *         for (name, _) in sorted(self.vars.iteritems(), key=(lambda x: x[1])):             # <<<<<<<<<<<<<<
 *             var_names.push_back(<string>name)
 *         cdef string res
 */
  __Pyx_TraceLine(264,0,__PYX_ERR(0, 264, __pyx_L1_error))
  if (unlikely(__pyx_v_self->vars == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(0, 264, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_IterItems(__pyx_v_self->vars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_12reachability_4Poly_8__repr___lambda3, 0, __pyx_n_s_repr___locals_lambda, NULL, __pyx_n_s_reachability, __pyx_d, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_key, __pyx_t_3) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 264, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 264, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 264, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 264, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 264, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 264, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "reachability.pyx":265
 *         cdef vector[string] var_names
 *         for (name, _) in sorted(self.vars.iteritems(), key=(lambda x: x[1])):
 *             var_names.push_back(<string>name)             # <<<<<<<<<<<<<<
 *         cdef string res
 *         self.c_poly.toString(res, var_names)
 */
    __Pyx_TraceLine(265,0,__PYX_ERR(0, 265, __pyx_L1_error))
    __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
    try {
      __pyx_v_var_names.push_back(((std::string)__pyx_t_9));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 265, __pyx_L1_error)
    }

    /* "reachability.pyx":264
 *     def __repr__(self):
 *         cdef vector[string] var_names
 *         for (name, _) in sorted(self.vars.iteritems(), key=(lambda x: x[1])):             # <<<<<<<<<<<<<<
 *             var_names.push_back(<string>name)
 *         cdef string res
 */
    __Pyx_TraceLine(264,0,__PYX_ERR(0, 264, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":267
 *             var_names.push_back(<string>name)
 *         cdef string res
 *         self.c_poly.toString(res, var_names)             # <<<<<<<<<<<<<<
 *         return str(res)
 * 
 */
  __Pyx_TraceLine(267,0,__PYX_ERR(0, 267, __pyx_L1_error))
  __pyx_v_self->c_poly.toString(__pyx_v_res, __pyx_v_var_names);

  /* "reachability.pyx":268
 *         cdef string res
 *         self.c_poly.toString(res, var_names)
 *         return str(res)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(268,0,__PYX_ERR(0, 268, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_res); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":262
 *             return NotImplemented
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cdef vector[string] var_names
 *         for (name, _) in sorted(self.vars.iteritems(), key=(lambda x: x[1])):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("reachability.Poly.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_4Poly_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_4Poly_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_4Poly_12__reduce_cython__(((struct __pyx_obj_12reachability_Poly *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_4Poly_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_12reachability_Poly *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.Poly.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_4Poly_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_12reachability_4Poly_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_4Poly_14__setstate_cython__(((struct __pyx_obj_12reachability_Poly *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_4Poly_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_12reachability_Poly *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.Poly.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":271
 * 
 * 
 * cdef double int_dist(Interval & I, Interval & J) nogil:             # <<<<<<<<<<<<<<
 *     cdef double il, iu, jl, ju
 *     il, iu = I.inf(), J.sup()
 */

static double __pyx_f_12reachability_int_dist(flowstar::Interval &__pyx_v_I, flowstar::Interval &__pyx_v_J) {
  double __pyx_v_il;
  double __pyx_v_iu;
  double __pyx_v_jl;
  double __pyx_v_ju;
  double __pyx_r;
  __Pyx_TraceDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  __Pyx_TraceCall("int_dist", __pyx_f[0], 271, 1, __PYX_ERR(0, 271, __pyx_L1_error));

  /* "reachability.pyx":273
 * cdef double int_dist(Interval & I, Interval & J) nogil:
 *     cdef double il, iu, jl, ju
 *     il, iu = I.inf(), J.sup()             # <<<<<<<<<<<<<<
 *     jl, ju = J.inf(), J.sup()
 *     # Round up/down endpoints so as to overapproximate the real distance
 */
  __Pyx_TraceLine(273,1,__PYX_ERR(0, 273, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_I.inf();
  __pyx_t_2 = __pyx_v_J.sup();
  __pyx_v_il = __pyx_t_1;
  __pyx_v_iu = __pyx_t_2;

  /* "reachability.pyx":274
 *     cdef double il, iu, jl, ju
 *     il, iu = I.inf(), J.sup()
 *     jl, ju = J.inf(), J.sup()             # <<<<<<<<<<<<<<
 *     # Round up/down endpoints so as to overapproximate the real distance
 *     return cmax(cabs(il - jl), cabs(iu - ju))
 */
  __Pyx_TraceLine(274,1,__PYX_ERR(0, 274, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_J.inf();
  __pyx_t_1 = __pyx_v_J.sup();
  __pyx_v_jl = __pyx_t_2;
  __pyx_v_ju = __pyx_t_1;

  /* "reachability.pyx":276
 *     jl, ju = J.inf(), J.sup()
 *     # Round up/down endpoints so as to overapproximate the real distance
 *     return cmax(cabs(il - jl), cabs(iu - ju))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(276,1,__PYX_ERR(0, 276, __pyx_L1_error))
  __pyx_r = std::max<double>(std::abs((__pyx_v_il - __pyx_v_jl)), std::abs((__pyx_v_iu - __pyx_v_ju)));
  goto __pyx_L0;

  /* "reachability.pyx":271
 * 
 * 
 * cdef double int_dist(Interval & I, Interval & J) nogil:             # <<<<<<<<<<<<<<
 *     cdef double il, iu, jl, ju
 *     il, iu = I.inf(), J.sup()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.int_dist", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "reachability.pyx":279
 * 
 * 
 * cdef cbool int_diff_assign(Interval & a, const Interval & b) nogil:             # <<<<<<<<<<<<<<
 *     cdef double al, au, bl, bu
 *     al, au = a.inf(), a.sup()
 */

static bool __pyx_f_12reachability_int_diff_assign(flowstar::Interval &__pyx_v_a, flowstar::Interval const &__pyx_v_b) {
  double __pyx_v_al;
  double __pyx_v_au;
  double __pyx_v_bl;
  double __pyx_v_bu;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_TraceCall("int_diff_assign", __pyx_f[0], 279, 1, __PYX_ERR(0, 279, __pyx_L1_error));

  /* "reachability.pyx":281
 * cdef cbool int_diff_assign(Interval & a, const Interval & b) nogil:
 *     cdef double al, au, bl, bu
 *     al, au = a.inf(), a.sup()             # <<<<<<<<<<<<<<
 *     bl, bu = b.inf(), b.sup()
 *     if al <= bl <= au <= bu:
 */
  __Pyx_TraceLine(281,1,__PYX_ERR(0, 281, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_a.inf();
  __pyx_t_2 = __pyx_v_a.sup();
  __pyx_v_al = __pyx_t_1;
  __pyx_v_au = __pyx_t_2;

  /* "reachability.pyx":282
 *     cdef double al, au, bl, bu
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()             # <<<<<<<<<<<<<<
 *     if al <= bl <= au <= bu:
 *         a.setSup(bl)
 */
  __Pyx_TraceLine(282,1,__PYX_ERR(0, 282, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_b.inf();
  __pyx_t_1 = __pyx_v_b.sup();
  __pyx_v_bl = __pyx_t_2;
  __pyx_v_bu = __pyx_t_1;

  /* "reachability.pyx":283
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()
 *     if al <= bl <= au <= bu:             # <<<<<<<<<<<<<<
 *         a.setSup(bl)
 *         return True
 */
  __Pyx_TraceLine(283,1,__PYX_ERR(0, 283, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_al <= __pyx_v_bl);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_bl <= __pyx_v_au);
    if (__pyx_t_3) {
      __pyx_t_3 = (__pyx_v_au <= __pyx_v_bu);
    }
  }
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":284
 *     bl, bu = b.inf(), b.sup()
 *     if al <= bl <= au <= bu:
 *         a.setSup(bl)             # <<<<<<<<<<<<<<
 *         return True
 *     elif bl <= al <= bu <= au:
 */
    __Pyx_TraceLine(284,1,__PYX_ERR(0, 284, __pyx_L1_error))
    __pyx_v_a.setSup(__pyx_v_bl);

    /* "reachability.pyx":285
 *     if al <= bl <= au <= bu:
 *         a.setSup(bl)
 *         return True             # <<<<<<<<<<<<<<
 *     elif bl <= al <= bu <= au:
 *         a.setInf(bu)
 */
    __Pyx_TraceLine(285,1,__PYX_ERR(0, 285, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;

    /* "reachability.pyx":283
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()
 *     if al <= bl <= au <= bu:             # <<<<<<<<<<<<<<
 *         a.setSup(bl)
 *         return True
 */
  }

  /* "reachability.pyx":286
 *         a.setSup(bl)
 *         return True
 *     elif bl <= al <= bu <= au:             # <<<<<<<<<<<<<<
 *         a.setInf(bu)
 *         return True
 */
  __Pyx_TraceLine(286,1,__PYX_ERR(0, 286, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_bl <= __pyx_v_al);
  if (__pyx_t_4) {
    __pyx_t_4 = (__pyx_v_al <= __pyx_v_bu);
    if (__pyx_t_4) {
      __pyx_t_4 = (__pyx_v_bu <= __pyx_v_au);
    }
  }
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "reachability.pyx":287
 *         return True
 *     elif bl <= al <= bu <= au:
 *         a.setInf(bu)             # <<<<<<<<<<<<<<
 *         return True
 *     elif bl <= al <= au <= bu:
 */
    __Pyx_TraceLine(287,1,__PYX_ERR(0, 287, __pyx_L1_error))
    __pyx_v_a.setInf(__pyx_v_bu);

    /* "reachability.pyx":288
 *     elif bl <= al <= bu <= au:
 *         a.setInf(bu)
 *         return True             # <<<<<<<<<<<<<<
 *     elif bl <= al <= au <= bu:
 *         return False
 */
    __Pyx_TraceLine(288,1,__PYX_ERR(0, 288, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;

    /* "reachability.pyx":286
 *         a.setSup(bl)
 *         return True
 *     elif bl <= al <= bu <= au:             # <<<<<<<<<<<<<<
 *         a.setInf(bu)
 *         return True
 */
  }

  /* "reachability.pyx":289
 *         a.setInf(bu)
 *         return True
 *     elif bl <= al <= au <= bu:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  __Pyx_TraceLine(289,1,__PYX_ERR(0, 289, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_bl <= __pyx_v_al);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_al <= __pyx_v_au);
    if (__pyx_t_3) {
      __pyx_t_3 = (__pyx_v_au <= __pyx_v_bu);
    }
  }
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":290
 *         return True
 *     elif bl <= al <= au <= bu:
 *         return False             # <<<<<<<<<<<<<<
 *     else:
 *         return True
 */
    __Pyx_TraceLine(290,1,__PYX_ERR(0, 290, __pyx_L1_error))
    __pyx_r = 0;
    goto __pyx_L0;

    /* "reachability.pyx":289
 *         a.setInf(bu)
 *         return True
 *     elif bl <= al <= au <= bu:             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  }

  /* "reachability.pyx":292
 *         return False
 *     else:
 *         return True             # <<<<<<<<<<<<<<
 * 
 * def py_int_diff2(a, b):
 */
  __Pyx_TraceLine(292,1,__PYX_ERR(0, 292, __pyx_L1_error))
  /*else*/ {
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "reachability.pyx":279
 * 
 * 
 * cdef cbool int_diff_assign(Interval & a, const Interval & b) nogil:             # <<<<<<<<<<<<<<
 *     cdef double al, au, bl, bu
 *     al, au = a.inf(), a.sup()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.int_diff_assign", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "reachability.pyx":294
 *         return True
 * 
 * def py_int_diff2(a, b):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> py_int_diff2((1,3), (2,4))
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_15py_int_diff2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12reachability_14py_int_diff2[] = "\n    >>> py_int_diff2((1,3), (2,4))\n    (True, False, (1.0, 2.0), ...)\n    >>> py_int_diff2((1,3), (4,5))\n    (True, False, (1.0, 3.0), ...)\n    >>> py_int_diff2((1,3), (0,2))\n    (True, False, (2.0, 3.0), ...)\n    >>> py_int_diff2((1,3), (2,4))\n    (True, False, (1.0, 2.0), ...)\n    >>> py_int_diff2((1,5), (2,4))\n    (True, True, (1.0, 2.0), (4.0, 5.0))\n    >>> py_int_diff2((2,4), (1,5))\n    (False, False, ..., ...)\n    ";
static PyMethodDef __pyx_mdef_12reachability_15py_int_diff2 = {"py_int_diff2", (PyCFunction)__pyx_pw_12reachability_15py_int_diff2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12reachability_14py_int_diff2};
static PyObject *__pyx_pw_12reachability_15py_int_diff2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_int_diff2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_int_diff2", 1, 2, 2, 1); __PYX_ERR(0, 294, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_int_diff2") < 0)) __PYX_ERR(0, 294, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_int_diff2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 294, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.py_int_diff2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_14py_int_diff2(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_14py_int_diff2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  flowstar::Interval __pyx_v_L;
  flowstar::Interval __pyx_v_U;
  flowstar::Interval __pyx_v_A;
  flowstar::Interval __pyx_v_B;
  bool __pyx_v_res;
  bool __pyx_v_split;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__7)
  __Pyx_RefNannySetupContext("py_int_diff2", 0);
  __Pyx_TraceCall("py_int_diff2", __pyx_f[0], 294, 0, __PYX_ERR(0, 294, __pyx_L1_error));

  /* "reachability.pyx":312
 *     cdef cbool res,split
 * 
 *     A = _interval(a)             # <<<<<<<<<<<<<<
 *     B = _interval(b)
 * 
 */
  __Pyx_TraceLine(312,0,__PYX_ERR(0, 312, __pyx_L1_error))
  __pyx_v_A = __pyx_f_12reachability__interval(__pyx_v_a);

  /* "reachability.pyx":313
 * 
 *     A = _interval(a)
 *     B = _interval(b)             # <<<<<<<<<<<<<<
 * 
 *     res = int_diff2(L, U, split, A, B)
 */
  __Pyx_TraceLine(313,0,__PYX_ERR(0, 313, __pyx_L1_error))
  __pyx_v_B = __pyx_f_12reachability__interval(__pyx_v_b);

  /* "reachability.pyx":315
 *     B = _interval(b)
 * 
 *     res = int_diff2(L, U, split, A, B)             # <<<<<<<<<<<<<<
 * 
 *     return (<bint?>res,
 */
  __Pyx_TraceLine(315,0,__PYX_ERR(0, 315, __pyx_L1_error))
  __pyx_v_res = __pyx_f_12reachability_int_diff2(__pyx_v_L, __pyx_v_U, __pyx_v_split, __pyx_v_A, __pyx_v_B);

  /* "reachability.pyx":317
 *     res = int_diff2(L, U, split, A, B)
 * 
 *     return (<bint?>res,             # <<<<<<<<<<<<<<
 *             <bint?>split,
 *             (L.inf(), L.sup()),
 */
  __Pyx_TraceLine(317,0,__PYX_ERR(0, 317, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_res != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "reachability.pyx":318
 * 
 *     return (<bint?>res,
 *             <bint?>split,             # <<<<<<<<<<<<<<
 *             (L.inf(), L.sup()),
 *             (U.inf(), U.sup()))
 */
  __Pyx_TraceLine(318,0,__PYX_ERR(0, 318, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_split != 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "reachability.pyx":319
 *     return (<bint?>res,
 *             <bint?>split,
 *             (L.inf(), L.sup()),             # <<<<<<<<<<<<<<
 *             (U.inf(), U.sup()))
 * 
 */
  __Pyx_TraceLine(319,0,__PYX_ERR(0, 319, __pyx_L1_error))
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_L.inf()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_L.sup()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;

  /* "reachability.pyx":320
 *             <bint?>split,
 *             (L.inf(), L.sup()),
 *             (U.inf(), U.sup()))             # <<<<<<<<<<<<<<
 * 
 * # Interval difference separating upper and lower
 */
  __Pyx_TraceLine(320,0,__PYX_ERR(0, 320, __pyx_L1_error))
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_U.inf()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_U.sup()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;

  /* "reachability.pyx":317
 *     res = int_diff2(L, U, split, A, B)
 * 
 *     return (<bint?>res,             # <<<<<<<<<<<<<<
 *             <bint?>split,
 *             (L.inf(), L.sup()),
 */
  __Pyx_TraceLine(317,0,__PYX_ERR(0, 317, __pyx_L1_error))
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":294
 *         return True
 * 
 * def py_int_diff2(a, b):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> py_int_diff2((1,3), (2,4))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("reachability.py_int_diff2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":324
 * # Interval difference separating upper and lower
 * # Return value indicates existance of answer
 * cdef cbool int_diff2(Interval & L, Interval & U, cbool & split, Interval & a, const Interval & b):             # <<<<<<<<<<<<<<
 *     cdef double al, au, bl, bu
 *     al, au = a.inf(), a.sup()
 */

static bool __pyx_f_12reachability_int_diff2(flowstar::Interval &__pyx_v_L, flowstar::Interval &__pyx_v_U, bool &__pyx_v_split, flowstar::Interval &__pyx_v_a, flowstar::Interval const &__pyx_v_b) {
  double __pyx_v_al;
  double __pyx_v_au;
  double __pyx_v_bl;
  double __pyx_v_bu;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  flowstar::Interval __pyx_t_5;
  __Pyx_RefNannySetupContext("int_diff2", 0);
  __Pyx_TraceCall("int_diff2", __pyx_f[0], 324, 0, __PYX_ERR(0, 324, __pyx_L1_error));

  /* "reachability.pyx":326
 * cdef cbool int_diff2(Interval & L, Interval & U, cbool & split, Interval & a, const Interval & b):
 *     cdef double al, au, bl, bu
 *     al, au = a.inf(), a.sup()             # <<<<<<<<<<<<<<
 *     bl, bu = b.inf(), b.sup()
 *     (&split)[0] = False
 */
  __Pyx_TraceLine(326,0,__PYX_ERR(0, 326, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_a.inf();
  __pyx_t_2 = __pyx_v_a.sup();
  __pyx_v_al = __pyx_t_1;
  __pyx_v_au = __pyx_t_2;

  /* "reachability.pyx":327
 *     cdef double al, au, bl, bu
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()             # <<<<<<<<<<<<<<
 *     (&split)[0] = False
 *     if al <= bl <= au <= bu:
 */
  __Pyx_TraceLine(327,0,__PYX_ERR(0, 327, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_b.inf();
  __pyx_t_1 = __pyx_v_b.sup();
  __pyx_v_bl = __pyx_t_2;
  __pyx_v_bu = __pyx_t_1;

  /* "reachability.pyx":328
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()
 *     (&split)[0] = False             # <<<<<<<<<<<<<<
 *     if al <= bl <= au <= bu:
 *         (&L)[0] = (&U)[0] = Interval(al, bl)
 */
  __Pyx_TraceLine(328,0,__PYX_ERR(0, 328, __pyx_L1_error))
  ((&__pyx_v_split)[0]) = 0;

  /* "reachability.pyx":329
 *     bl, bu = b.inf(), b.sup()
 *     (&split)[0] = False
 *     if al <= bl <= au <= bu:             # <<<<<<<<<<<<<<
 *         (&L)[0] = (&U)[0] = Interval(al, bl)
 *         return True
 */
  __Pyx_TraceLine(329,0,__PYX_ERR(0, 329, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_al <= __pyx_v_bl);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_bl <= __pyx_v_au);
    if (__pyx_t_3) {
      __pyx_t_3 = (__pyx_v_au <= __pyx_v_bu);
    }
  }
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":330
 *     (&split)[0] = False
 *     if al <= bl <= au <= bu:
 *         (&L)[0] = (&U)[0] = Interval(al, bl)             # <<<<<<<<<<<<<<
 *         return True
 *     elif bl <= al <= bu <= au:
 */
    __Pyx_TraceLine(330,0,__PYX_ERR(0, 330, __pyx_L1_error))
    __pyx_t_5 = flowstar::Interval(__pyx_v_al, __pyx_v_bl);
    ((&__pyx_v_L)[0]) = __pyx_t_5;
    ((&__pyx_v_U)[0]) = __pyx_t_5;

    /* "reachability.pyx":331
 *     if al <= bl <= au <= bu:
 *         (&L)[0] = (&U)[0] = Interval(al, bl)
 *         return True             # <<<<<<<<<<<<<<
 *     elif bl <= al <= bu <= au:
 *         (&L)[0] = (&U)[0] = Interval(bu, au)
 */
    __Pyx_TraceLine(331,0,__PYX_ERR(0, 331, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;

    /* "reachability.pyx":329
 *     bl, bu = b.inf(), b.sup()
 *     (&split)[0] = False
 *     if al <= bl <= au <= bu:             # <<<<<<<<<<<<<<
 *         (&L)[0] = (&U)[0] = Interval(al, bl)
 *         return True
 */
  }

  /* "reachability.pyx":332
 *         (&L)[0] = (&U)[0] = Interval(al, bl)
 *         return True
 *     elif bl <= al <= bu <= au:             # <<<<<<<<<<<<<<
 *         (&L)[0] = (&U)[0] = Interval(bu, au)
 *         return True
 */
  __Pyx_TraceLine(332,0,__PYX_ERR(0, 332, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_bl <= __pyx_v_al);
  if (__pyx_t_4) {
    __pyx_t_4 = (__pyx_v_al <= __pyx_v_bu);
    if (__pyx_t_4) {
      __pyx_t_4 = (__pyx_v_bu <= __pyx_v_au);
    }
  }
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "reachability.pyx":333
 *         return True
 *     elif bl <= al <= bu <= au:
 *         (&L)[0] = (&U)[0] = Interval(bu, au)             # <<<<<<<<<<<<<<
 *         return True
 *     elif bl <= al <= au <= bu:
 */
    __Pyx_TraceLine(333,0,__PYX_ERR(0, 333, __pyx_L1_error))
    __pyx_t_5 = flowstar::Interval(__pyx_v_bu, __pyx_v_au);
    ((&__pyx_v_L)[0]) = __pyx_t_5;
    ((&__pyx_v_U)[0]) = __pyx_t_5;

    /* "reachability.pyx":334
 *     elif bl <= al <= bu <= au:
 *         (&L)[0] = (&U)[0] = Interval(bu, au)
 *         return True             # <<<<<<<<<<<<<<
 *     elif bl <= al <= au <= bu:
 *         return False
 */
    __Pyx_TraceLine(334,0,__PYX_ERR(0, 334, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;

    /* "reachability.pyx":332
 *         (&L)[0] = (&U)[0] = Interval(al, bl)
 *         return True
 *     elif bl <= al <= bu <= au:             # <<<<<<<<<<<<<<
 *         (&L)[0] = (&U)[0] = Interval(bu, au)
 *         return True
 */
  }

  /* "reachability.pyx":335
 *         (&L)[0] = (&U)[0] = Interval(bu, au)
 *         return True
 *     elif bl <= al <= au <= bu:             # <<<<<<<<<<<<<<
 *         return False
 *     elif al <= bl <= bu <= au:
 */
  __Pyx_TraceLine(335,0,__PYX_ERR(0, 335, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_bl <= __pyx_v_al);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_al <= __pyx_v_au);
    if (__pyx_t_3) {
      __pyx_t_3 = (__pyx_v_au <= __pyx_v_bu);
    }
  }
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":336
 *         return True
 *     elif bl <= al <= au <= bu:
 *         return False             # <<<<<<<<<<<<<<
 *     elif al <= bl <= bu <= au:
 *         # print("split on diff")
 */
    __Pyx_TraceLine(336,0,__PYX_ERR(0, 336, __pyx_L1_error))
    __pyx_r = 0;
    goto __pyx_L0;

    /* "reachability.pyx":335
 *         (&L)[0] = (&U)[0] = Interval(bu, au)
 *         return True
 *     elif bl <= al <= au <= bu:             # <<<<<<<<<<<<<<
 *         return False
 *     elif al <= bl <= bu <= au:
 */
  }

  /* "reachability.pyx":337
 *     elif bl <= al <= au <= bu:
 *         return False
 *     elif al <= bl <= bu <= au:             # <<<<<<<<<<<<<<
 *         # print("split on diff")
 *         (&L)[0] = Interval(al, bl)
 */
  __Pyx_TraceLine(337,0,__PYX_ERR(0, 337, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_al <= __pyx_v_bl);
  if (__pyx_t_4) {
    __pyx_t_4 = (__pyx_v_bl <= __pyx_v_bu);
    if (__pyx_t_4) {
      __pyx_t_4 = (__pyx_v_bu <= __pyx_v_au);
    }
  }
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "reachability.pyx":339
 *     elif al <= bl <= bu <= au:
 *         # print("split on diff")
 *         (&L)[0] = Interval(al, bl)             # <<<<<<<<<<<<<<
 *         (&U)[0] = Interval(bu, au)
 *         (&split)[0] = True
 */
    __Pyx_TraceLine(339,0,__PYX_ERR(0, 339, __pyx_L1_error))
    ((&__pyx_v_L)[0]) = flowstar::Interval(__pyx_v_al, __pyx_v_bl);

    /* "reachability.pyx":340
 *         # print("split on diff")
 *         (&L)[0] = Interval(al, bl)
 *         (&U)[0] = Interval(bu, au)             # <<<<<<<<<<<<<<
 *         (&split)[0] = True
 *         return True
 */
    __Pyx_TraceLine(340,0,__PYX_ERR(0, 340, __pyx_L1_error))
    ((&__pyx_v_U)[0]) = flowstar::Interval(__pyx_v_bu, __pyx_v_au);

    /* "reachability.pyx":341
 *         (&L)[0] = Interval(al, bl)
 *         (&U)[0] = Interval(bu, au)
 *         (&split)[0] = True             # <<<<<<<<<<<<<<
 *         return True
 *     else:
 */
    __Pyx_TraceLine(341,0,__PYX_ERR(0, 341, __pyx_L1_error))
    ((&__pyx_v_split)[0]) = 1;

    /* "reachability.pyx":342
 *         (&U)[0] = Interval(bu, au)
 *         (&split)[0] = True
 *         return True             # <<<<<<<<<<<<<<
 *     else:
 *         (&L)[0] = (&U)[0] = a
 */
    __Pyx_TraceLine(342,0,__PYX_ERR(0, 342, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;

    /* "reachability.pyx":337
 *     elif bl <= al <= au <= bu:
 *         return False
 *     elif al <= bl <= bu <= au:             # <<<<<<<<<<<<<<
 *         # print("split on diff")
 *         (&L)[0] = Interval(al, bl)
 */
  }

  /* "reachability.pyx":344
 *         return True
 *     else:
 *         (&L)[0] = (&U)[0] = a             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
  __Pyx_TraceLine(344,0,__PYX_ERR(0, 344, __pyx_L1_error))
  /*else*/ {
    ((&__pyx_v_L)[0]) = __pyx_v_a;
    ((&__pyx_v_U)[0]) = __pyx_v_a;

    /* "reachability.pyx":345
 *     else:
 *         (&L)[0] = (&U)[0] = a
 *         return True             # <<<<<<<<<<<<<<
 * 
 * def py_extdiv2(d, a, b):
 */
    __Pyx_TraceLine(345,0,__PYX_ERR(0, 345, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "reachability.pyx":324
 * # Interval difference separating upper and lower
 * # Return value indicates existance of answer
 * cdef cbool int_diff2(Interval & L, Interval & U, cbool & split, Interval & a, const Interval & b):             # <<<<<<<<<<<<<<
 *     cdef double al, au, bl, bu
 *     al, au = a.inf(), a.sup()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.int_diff2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":347
 *         return True
 * 
 * def py_extdiv2(d, a, b):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> py_extdiv2((0,5), (4,4), (2,2))
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_17py_extdiv2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12reachability_16py_extdiv2[] = "\n    >>> py_extdiv2((0,5), (4,4), (2,2))\n    (True, False, (2.0, 2.0), ...)\n    >>> py_extdiv2((-5,5), (4,4), (-2,2))\n    (True, True, (-5.0, -2.0), (2.0, 5.0))\n    >>> py_extdiv2((-5,5), (4,4), (-2,0.0))\n    (True, False, (-5.0, -2.0), ...)\n    ";
static PyMethodDef __pyx_mdef_12reachability_17py_extdiv2 = {"py_extdiv2", (PyCFunction)__pyx_pw_12reachability_17py_extdiv2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12reachability_16py_extdiv2};
static PyObject *__pyx_pw_12reachability_17py_extdiv2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_d = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_extdiv2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_d,&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_extdiv2", 1, 3, 3, 1); __PYX_ERR(0, 347, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_extdiv2", 1, 3, 3, 2); __PYX_ERR(0, 347, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_extdiv2") < 0)) __PYX_ERR(0, 347, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_d = values[0];
    __pyx_v_a = values[1];
    __pyx_v_b = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_extdiv2", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 347, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.py_extdiv2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_16py_extdiv2(__pyx_self, __pyx_v_d, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_16py_extdiv2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  flowstar::Interval __pyx_v_A;
  flowstar::Interval __pyx_v_B;
  flowstar::Interval __pyx_v_D;
  flowstar::Interval __pyx_v_L;
  flowstar::Interval __pyx_v_U;
  bool __pyx_v_split;
  int __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__8)
  __Pyx_RefNannySetupContext("py_extdiv2", 0);
  __Pyx_TraceCall("py_extdiv2", __pyx_f[0], 347, 0, __PYX_ERR(0, 347, __pyx_L1_error));

  /* "reachability.pyx":356
 *     (True, False, (-5.0, -2.0), ...)
 *     '''
 *     cdef Interval A = _interval(a)             # <<<<<<<<<<<<<<
 *     cdef Interval B = _interval(b)
 *     cdef Interval D = _interval(d)
 */
  __Pyx_TraceLine(356,0,__PYX_ERR(0, 356, __pyx_L1_error))
  __pyx_v_A = __pyx_f_12reachability__interval(__pyx_v_a);

  /* "reachability.pyx":357
 *     '''
 *     cdef Interval A = _interval(a)
 *     cdef Interval B = _interval(b)             # <<<<<<<<<<<<<<
 *     cdef Interval D = _interval(d)
 *     cdef Interval L, U
 */
  __Pyx_TraceLine(357,0,__PYX_ERR(0, 357, __pyx_L1_error))
  __pyx_v_B = __pyx_f_12reachability__interval(__pyx_v_b);

  /* "reachability.pyx":358
 *     cdef Interval A = _interval(a)
 *     cdef Interval B = _interval(b)
 *     cdef Interval D = _interval(d)             # <<<<<<<<<<<<<<
 *     cdef Interval L, U
 *     cdef cbool split
 */
  __Pyx_TraceLine(358,0,__PYX_ERR(0, 358, __pyx_L1_error))
  __pyx_v_D = __pyx_f_12reachability__interval(__pyx_v_d);

  /* "reachability.pyx":362
 *     cdef cbool split
 * 
 *     res = <bint?>extdiv2(L, U, split, D, A, B)             # <<<<<<<<<<<<<<
 * 
 *     return (res,
 */
  __Pyx_TraceLine(362,0,__PYX_ERR(0, 362, __pyx_L1_error))
  __pyx_v_res = (__pyx_f_12reachability_extdiv2(__pyx_v_L, __pyx_v_U, __pyx_v_split, __pyx_v_D, __pyx_v_A, __pyx_v_B) != 0);

  /* "reachability.pyx":364
 *     res = <bint?>extdiv2(L, U, split, D, A, B)
 * 
 *     return (res,             # <<<<<<<<<<<<<<
 *             <bint?>split,
 *             (L.inf(), L.sup()),
 */
  __Pyx_TraceLine(364,0,__PYX_ERR(0, 364, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_res); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "reachability.pyx":365
 * 
 *     return (res,
 *             <bint?>split,             # <<<<<<<<<<<<<<
 *             (L.inf(), L.sup()),
 *             (U.inf(), U.sup()))
 */
  __Pyx_TraceLine(365,0,__PYX_ERR(0, 365, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_v_split != 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "reachability.pyx":366
 *     return (res,
 *             <bint?>split,
 *             (L.inf(), L.sup()),             # <<<<<<<<<<<<<<
 *             (U.inf(), U.sup()))
 * 
 */
  __Pyx_TraceLine(366,0,__PYX_ERR(0, 366, __pyx_L1_error))
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_L.inf()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_L.sup()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;

  /* "reachability.pyx":367
 *             <bint?>split,
 *             (L.inf(), L.sup()),
 *             (U.inf(), U.sup()))             # <<<<<<<<<<<<<<
 * 
 * cdef cbool extdiv2(Interval & L, Interval & U, cbool & split, Interval & d, const Interval & a, const Interval & b):
 */
  __Pyx_TraceLine(367,0,__PYX_ERR(0, 367, __pyx_L1_error))
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_U.inf()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_U.sup()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;

  /* "reachability.pyx":364
 *     res = <bint?>extdiv2(L, U, split, D, A, B)
 * 
 *     return (res,             # <<<<<<<<<<<<<<
 *             <bint?>split,
 *             (L.inf(), L.sup()),
 */
  __Pyx_TraceLine(364,0,__PYX_ERR(0, 364, __pyx_L1_error))
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":347
 *         return True
 * 
 * def py_extdiv2(d, a, b):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> py_extdiv2((0,5), (4,4), (2,2))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("reachability.py_extdiv2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":369
 *             (U.inf(), U.sup()))
 * 
 * cdef cbool extdiv2(Interval & L, Interval & U, cbool & split, Interval & d, const Interval & a, const Interval & b):             # <<<<<<<<<<<<<<
 *     cdef double al, au, bl, bu
 *     cdef Interval ratio
 */

static bool __pyx_f_12reachability_extdiv2(flowstar::Interval &__pyx_v_L, flowstar::Interval &__pyx_v_U, bool &__pyx_v_split, flowstar::Interval &__pyx_v_d, flowstar::Interval const &__pyx_v_a, flowstar::Interval const &__pyx_v_b) {
  double __pyx_v_al;
  double __pyx_v_au;
  double __pyx_v_bl;
  double __pyx_v_bu;
  flowstar::Interval __pyx_v_ratio;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("extdiv2", 0);
  __Pyx_TraceCall("extdiv2", __pyx_f[0], 369, 0, __PYX_ERR(0, 369, __pyx_L1_error));

  /* "reachability.pyx":372
 *     cdef double al, au, bl, bu
 *     cdef Interval ratio
 *     al, au = a.inf(), a.sup()             # <<<<<<<<<<<<<<
 *     bl, bu = b.inf(), b.sup()
 *     if not (bl <= 0 <= bu):
 */
  __Pyx_TraceLine(372,0,__PYX_ERR(0, 372, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_a.inf();
  __pyx_t_2 = __pyx_v_a.sup();
  __pyx_v_al = __pyx_t_1;
  __pyx_v_au = __pyx_t_2;

  /* "reachability.pyx":373
 *     cdef Interval ratio
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()             # <<<<<<<<<<<<<<
 *     if not (bl <= 0 <= bu):
 *         # print("div a")
 */
  __Pyx_TraceLine(373,0,__PYX_ERR(0, 373, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_b.inf();
  __pyx_t_1 = __pyx_v_b.sup();
  __pyx_v_bl = __pyx_t_2;
  __pyx_v_bu = __pyx_t_1;

  /* "reachability.pyx":374
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()
 *     if not (bl <= 0 <= bu):             # <<<<<<<<<<<<<<
 *         # print("div a")
 *         ratio = a / b
 */
  __Pyx_TraceLine(374,0,__PYX_ERR(0, 374, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_bl <= 0.0);
  if (__pyx_t_3) {
    __pyx_t_3 = (0.0 <= __pyx_v_bu);
  }
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":376
 *     if not (bl <= 0 <= bu):
 *         # print("div a")
 *         ratio = a / b             # <<<<<<<<<<<<<<
 *         (&split)[0]=False
 *         (&L)[0] = d
 */
    __Pyx_TraceLine(376,0,__PYX_ERR(0, 376, __pyx_L1_error))
    __pyx_v_ratio = (((flowstar::Interval const )__pyx_v_a) / ((flowstar::Interval const )__pyx_v_b));

    /* "reachability.pyx":377
 *         # print("div a")
 *         ratio = a / b
 *         (&split)[0]=False             # <<<<<<<<<<<<<<
 *         (&L)[0] = d
 *         if overlaps(ratio, L):
 */
    __Pyx_TraceLine(377,0,__PYX_ERR(0, 377, __pyx_L1_error))
    ((&__pyx_v_split)[0]) = 0;

    /* "reachability.pyx":378
 *         ratio = a / b
 *         (&split)[0]=False
 *         (&L)[0] = d             # <<<<<<<<<<<<<<
 *         if overlaps(ratio, L):
 *             L.intersect_assign(ratio)
 */
    __Pyx_TraceLine(378,0,__PYX_ERR(0, 378, __pyx_L1_error))
    ((&__pyx_v_L)[0]) = __pyx_v_d;

    /* "reachability.pyx":379
 *         (&split)[0]=False
 *         (&L)[0] = d
 *         if overlaps(ratio, L):             # <<<<<<<<<<<<<<
 *             L.intersect_assign(ratio)
 *             (&U)[0] = L
 */
    __Pyx_TraceLine(379,0,__PYX_ERR(0, 379, __pyx_L1_error))
    __pyx_t_4 = (__pyx_f_12reachability_overlaps(__pyx_v_ratio, __pyx_v_L) != 0);
    if (__pyx_t_4) {

      /* "reachability.pyx":380
 *         (&L)[0] = d
 *         if overlaps(ratio, L):
 *             L.intersect_assign(ratio)             # <<<<<<<<<<<<<<
 *             (&U)[0] = L
 *             return True
 */
      __Pyx_TraceLine(380,0,__PYX_ERR(0, 380, __pyx_L1_error))
      __pyx_v_L.intersect_assign(__pyx_v_ratio);

      /* "reachability.pyx":381
 *         if overlaps(ratio, L):
 *             L.intersect_assign(ratio)
 *             (&U)[0] = L             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
      __Pyx_TraceLine(381,0,__PYX_ERR(0, 381, __pyx_L1_error))
      ((&__pyx_v_U)[0]) = __pyx_v_L;

      /* "reachability.pyx":382
 *             L.intersect_assign(ratio)
 *             (&U)[0] = L
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
      __Pyx_TraceLine(382,0,__PYX_ERR(0, 382, __pyx_L1_error))
      __pyx_r = 1;
      goto __pyx_L0;

      /* "reachability.pyx":379
 *         (&split)[0]=False
 *         (&L)[0] = d
 *         if overlaps(ratio, L):             # <<<<<<<<<<<<<<
 *             L.intersect_assign(ratio)
 *             (&U)[0] = L
 */
    }

    /* "reachability.pyx":384
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 *     elif al > 0:
 *         # print("div b")
 */
    __Pyx_TraceLine(384,0,__PYX_ERR(0, 384, __pyx_L1_error))
    /*else*/ {
      __pyx_r = 0;
      goto __pyx_L0;
    }

    /* "reachability.pyx":374
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()
 *     if not (bl <= 0 <= bu):             # <<<<<<<<<<<<<<
 *         # print("div a")
 *         ratio = a / b
 */
  }

  /* "reachability.pyx":385
 *         else:
 *             return False
 *     elif al > 0:             # <<<<<<<<<<<<<<
 *         # print("div b")
 *         return int_diff2(L, U, split, d,
 */
  __Pyx_TraceLine(385,0,__PYX_ERR(0, 385, __pyx_L1_error))
  __pyx_t_4 = ((__pyx_v_al > 0.0) != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":388
 *         # print("div b")
 *         return int_diff2(L, U, split, d,
 *                          Interval(d.inf() if bl == 0 else al/bl,             # <<<<<<<<<<<<<<
 *                                   d.sup() if bu == 0 else al/bu))
 *     elif au < 0:
 */
    __Pyx_TraceLine(388,0,__PYX_ERR(0, 388, __pyx_L1_error))
    if (((__pyx_v_bl == 0.0) != 0)) {
      __pyx_t_1 = __pyx_v_d.inf();
    } else {
      if (unlikely(__pyx_v_bl == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 388, __pyx_L1_error)
      }
      __pyx_t_1 = (__pyx_v_al / __pyx_v_bl);
    }

    /* "reachability.pyx":389
 *         return int_diff2(L, U, split, d,
 *                          Interval(d.inf() if bl == 0 else al/bl,
 *                                   d.sup() if bu == 0 else al/bu))             # <<<<<<<<<<<<<<
 *     elif au < 0:
 *         # print("div c")
 */
    __Pyx_TraceLine(389,0,__PYX_ERR(0, 389, __pyx_L1_error))
    if (((__pyx_v_bu == 0.0) != 0)) {
      __pyx_t_2 = __pyx_v_d.sup();
    } else {
      if (unlikely(__pyx_v_bu == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 389, __pyx_L1_error)
      }
      __pyx_t_2 = (__pyx_v_al / __pyx_v_bu);
    }

    /* "reachability.pyx":387
 *     elif al > 0:
 *         # print("div b")
 *         return int_diff2(L, U, split, d,             # <<<<<<<<<<<<<<
 *                          Interval(d.inf() if bl == 0 else al/bl,
 *                                   d.sup() if bu == 0 else al/bu))
 */
    __Pyx_TraceLine(387,0,__PYX_ERR(0, 387, __pyx_L1_error))
    __pyx_r = __pyx_f_12reachability_int_diff2(__pyx_v_L, __pyx_v_U, __pyx_v_split, __pyx_v_d, flowstar::Interval(__pyx_t_1, __pyx_t_2));
    goto __pyx_L0;

    /* "reachability.pyx":385
 *         else:
 *             return False
 *     elif al > 0:             # <<<<<<<<<<<<<<
 *         # print("div b")
 *         return int_diff2(L, U, split, d,
 */
  }

  /* "reachability.pyx":390
 *                          Interval(d.inf() if bl == 0 else al/bl,
 *                                   d.sup() if bu == 0 else al/bu))
 *     elif au < 0:             # <<<<<<<<<<<<<<
 *         # print("div c")
 *         return int_diff2(L, U, split, d,
 */
  __Pyx_TraceLine(390,0,__PYX_ERR(0, 390, __pyx_L1_error))
  __pyx_t_4 = ((__pyx_v_au < 0.0) != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":393
 *         # print("div c")
 *         return int_diff2(L, U, split, d,
 *                          Interval(d.inf() if bu == 0 else au/bu,             # <<<<<<<<<<<<<<
 *                                   d.sup() if bl == 0 else au/bl))
 *     else:
 */
    __Pyx_TraceLine(393,0,__PYX_ERR(0, 393, __pyx_L1_error))
    if (((__pyx_v_bu == 0.0) != 0)) {
      __pyx_t_2 = __pyx_v_d.inf();
    } else {
      if (unlikely(__pyx_v_bu == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 393, __pyx_L1_error)
      }
      __pyx_t_2 = (__pyx_v_au / __pyx_v_bu);
    }

    /* "reachability.pyx":394
 *         return int_diff2(L, U, split, d,
 *                          Interval(d.inf() if bu == 0 else au/bu,
 *                                   d.sup() if bl == 0 else au/bl))             # <<<<<<<<<<<<<<
 *     else:
 *         # print("div d")
 */
    __Pyx_TraceLine(394,0,__PYX_ERR(0, 394, __pyx_L1_error))
    if (((__pyx_v_bl == 0.0) != 0)) {
      __pyx_t_1 = __pyx_v_d.sup();
    } else {
      if (unlikely(__pyx_v_bl == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 394, __pyx_L1_error)
      }
      __pyx_t_1 = (__pyx_v_au / __pyx_v_bl);
    }

    /* "reachability.pyx":392
 *     elif au < 0:
 *         # print("div c")
 *         return int_diff2(L, U, split, d,             # <<<<<<<<<<<<<<
 *                          Interval(d.inf() if bu == 0 else au/bu,
 *                                   d.sup() if bl == 0 else au/bl))
 */
    __Pyx_TraceLine(392,0,__PYX_ERR(0, 392, __pyx_L1_error))
    __pyx_r = __pyx_f_12reachability_int_diff2(__pyx_v_L, __pyx_v_U, __pyx_v_split, __pyx_v_d, flowstar::Interval(__pyx_t_2, __pyx_t_1));
    goto __pyx_L0;

    /* "reachability.pyx":390
 *                          Interval(d.inf() if bl == 0 else al/bl,
 *                                   d.sup() if bu == 0 else al/bu))
 *     elif au < 0:             # <<<<<<<<<<<<<<
 *         # print("div c")
 *         return int_diff2(L, U, split, d,
 */
  }

  /* "reachability.pyx":397
 *     else:
 *         # print("div d")
 *         (&L)[0] = (&U)[0] = d             # <<<<<<<<<<<<<<
 *         (&split)[0] = False
 *         return True
 */
  __Pyx_TraceLine(397,0,__PYX_ERR(0, 397, __pyx_L1_error))
  /*else*/ {
    ((&__pyx_v_L)[0]) = __pyx_v_d;
    ((&__pyx_v_U)[0]) = __pyx_v_d;

    /* "reachability.pyx":398
 *         # print("div d")
 *         (&L)[0] = (&U)[0] = d
 *         (&split)[0] = False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    __Pyx_TraceLine(398,0,__PYX_ERR(0, 398, __pyx_L1_error))
    ((&__pyx_v_split)[0]) = 0;

    /* "reachability.pyx":399
 *         (&L)[0] = (&U)[0] = d
 *         (&split)[0] = False
 *         return True             # <<<<<<<<<<<<<<
 * 
 * # Store result in D
 */
    __Pyx_TraceLine(399,0,__PYX_ERR(0, 399, __pyx_L1_error))
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "reachability.pyx":369
 *             (U.inf(), U.sup()))
 * 
 * cdef cbool extdiv2(Interval & L, Interval & U, cbool & split, Interval & d, const Interval & a, const Interval & b):             # <<<<<<<<<<<<<<
 *     cdef double al, au, bl, bu
 *     cdef Interval ratio
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.extdiv2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":402
 * 
 * # Store result in D
 * cdef cbool extdiv(Interval & d, const Interval & a, const Interval & b) nogil:             # <<<<<<<<<<<<<<
 *     cdef double al, au, bl, bu
 *     cdef Interval ratio
 */

static bool __pyx_f_12reachability_extdiv(flowstar::Interval &__pyx_v_d, flowstar::Interval const &__pyx_v_a, flowstar::Interval const &__pyx_v_b) {
  double __pyx_v_al;
  double __pyx_v_au;
  double __pyx_v_bl;
  double __pyx_v_bu;
  flowstar::Interval __pyx_v_ratio;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_TraceCall("extdiv", __pyx_f[0], 402, 1, __PYX_ERR(0, 402, __pyx_L1_error));

  /* "reachability.pyx":405
 *     cdef double al, au, bl, bu
 *     cdef Interval ratio
 *     al, au = a.inf(), a.sup()             # <<<<<<<<<<<<<<
 *     bl, bu = b.inf(), b.sup()
 *     if not (bl <= 0 <= bu):
 */
  __Pyx_TraceLine(405,1,__PYX_ERR(0, 405, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_a.inf();
  __pyx_t_2 = __pyx_v_a.sup();
  __pyx_v_al = __pyx_t_1;
  __pyx_v_au = __pyx_t_2;

  /* "reachability.pyx":406
 *     cdef Interval ratio
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()             # <<<<<<<<<<<<<<
 *     if not (bl <= 0 <= bu):
 *         ratio = a / b
 */
  __Pyx_TraceLine(406,1,__PYX_ERR(0, 406, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_b.inf();
  __pyx_t_1 = __pyx_v_b.sup();
  __pyx_v_bl = __pyx_t_2;
  __pyx_v_bu = __pyx_t_1;

  /* "reachability.pyx":407
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()
 *     if not (bl <= 0 <= bu):             # <<<<<<<<<<<<<<
 *         ratio = a / b
 *         if overlaps(ratio, d):
 */
  __Pyx_TraceLine(407,1,__PYX_ERR(0, 407, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_bl <= 0.0);
  if (__pyx_t_3) {
    __pyx_t_3 = (0.0 <= __pyx_v_bu);
  }
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":408
 *     bl, bu = b.inf(), b.sup()
 *     if not (bl <= 0 <= bu):
 *         ratio = a / b             # <<<<<<<<<<<<<<
 *         if overlaps(ratio, d):
 *             d.intersect_assign(ratio)
 */
    __Pyx_TraceLine(408,1,__PYX_ERR(0, 408, __pyx_L1_error))
    __pyx_v_ratio = (((flowstar::Interval const )__pyx_v_a) / ((flowstar::Interval const )__pyx_v_b));

    /* "reachability.pyx":409
 *     if not (bl <= 0 <= bu):
 *         ratio = a / b
 *         if overlaps(ratio, d):             # <<<<<<<<<<<<<<
 *             d.intersect_assign(ratio)
 *             return True
 */
    __Pyx_TraceLine(409,1,__PYX_ERR(0, 409, __pyx_L1_error))
    __pyx_t_4 = (__pyx_f_12reachability_overlaps(__pyx_v_ratio, __pyx_v_d) != 0);
    if (__pyx_t_4) {

      /* "reachability.pyx":410
 *         ratio = a / b
 *         if overlaps(ratio, d):
 *             d.intersect_assign(ratio)             # <<<<<<<<<<<<<<
 *             return True
 *         else:
 */
      __Pyx_TraceLine(410,1,__PYX_ERR(0, 410, __pyx_L1_error))
      __pyx_v_d.intersect_assign(__pyx_v_ratio);

      /* "reachability.pyx":411
 *         if overlaps(ratio, d):
 *             d.intersect_assign(ratio)
 *             return True             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
      __Pyx_TraceLine(411,1,__PYX_ERR(0, 411, __pyx_L1_error))
      __pyx_r = 1;
      goto __pyx_L0;

      /* "reachability.pyx":409
 *     if not (bl <= 0 <= bu):
 *         ratio = a / b
 *         if overlaps(ratio, d):             # <<<<<<<<<<<<<<
 *             d.intersect_assign(ratio)
 *             return True
 */
    }

    /* "reachability.pyx":413
 *             return True
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 *     elif bl > 0:
 *         return int_diff_assign(d, Interval(al/bl, al/bu))
 */
    __Pyx_TraceLine(413,1,__PYX_ERR(0, 413, __pyx_L1_error))
    /*else*/ {
      __pyx_r = 0;
      goto __pyx_L0;
    }

    /* "reachability.pyx":407
 *     al, au = a.inf(), a.sup()
 *     bl, bu = b.inf(), b.sup()
 *     if not (bl <= 0 <= bu):             # <<<<<<<<<<<<<<
 *         ratio = a / b
 *         if overlaps(ratio, d):
 */
  }

  /* "reachability.pyx":414
 *         else:
 *             return False
 *     elif bl > 0:             # <<<<<<<<<<<<<<
 *         return int_diff_assign(d, Interval(al/bl, al/bu))
 *     elif bu < 0:
 */
  __Pyx_TraceLine(414,1,__PYX_ERR(0, 414, __pyx_L1_error))
  __pyx_t_4 = ((__pyx_v_bl > 0.0) != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":415
 *             return False
 *     elif bl > 0:
 *         return int_diff_assign(d, Interval(al/bl, al/bu))             # <<<<<<<<<<<<<<
 *     elif bu < 0:
 *         return int_diff_assign(d, Interval(au/bu, au/bl))
 */
    __Pyx_TraceLine(415,1,__PYX_ERR(0, 415, __pyx_L1_error))
    if (unlikely(__pyx_v_bl == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 415, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_bu == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 415, __pyx_L1_error)
    }
    __pyx_r = __pyx_f_12reachability_int_diff_assign(__pyx_v_d, flowstar::Interval((__pyx_v_al / __pyx_v_bl), (__pyx_v_al / __pyx_v_bu)));
    goto __pyx_L0;

    /* "reachability.pyx":414
 *         else:
 *             return False
 *     elif bl > 0:             # <<<<<<<<<<<<<<
 *         return int_diff_assign(d, Interval(al/bl, al/bu))
 *     elif bu < 0:
 */
  }

  /* "reachability.pyx":416
 *     elif bl > 0:
 *         return int_diff_assign(d, Interval(al/bl, al/bu))
 *     elif bu < 0:             # <<<<<<<<<<<<<<
 *         return int_diff_assign(d, Interval(au/bu, au/bl))
 *     else:
 */
  __Pyx_TraceLine(416,1,__PYX_ERR(0, 416, __pyx_L1_error))
  __pyx_t_4 = ((__pyx_v_bu < 0.0) != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":417
 *         return int_diff_assign(d, Interval(al/bl, al/bu))
 *     elif bu < 0:
 *         return int_diff_assign(d, Interval(au/bu, au/bl))             # <<<<<<<<<<<<<<
 *     else:
 *         return True
 */
    __Pyx_TraceLine(417,1,__PYX_ERR(0, 417, __pyx_L1_error))
    if (unlikely(__pyx_v_bu == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 417, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_bl == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 417, __pyx_L1_error)
    }
    __pyx_r = __pyx_f_12reachability_int_diff_assign(__pyx_v_d, flowstar::Interval((__pyx_v_au / __pyx_v_bu), (__pyx_v_au / __pyx_v_bl)));
    goto __pyx_L0;

    /* "reachability.pyx":416
 *     elif bl > 0:
 *         return int_diff_assign(d, Interval(al/bl, al/bu))
 *     elif bu < 0:             # <<<<<<<<<<<<<<
 *         return int_diff_assign(d, Interval(au/bu, au/bl))
 *     else:
 */
  }

  /* "reachability.pyx":419
 *         return int_diff_assign(d, Interval(au/bu, au/bl))
 *     else:
 *         return True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(419,1,__PYX_ERR(0, 419, __pyx_L1_error))
  /*else*/ {
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "reachability.pyx":402
 * 
 * # Store result in D
 * cdef cbool extdiv(Interval & d, const Interval & a, const Interval & b) nogil:             # <<<<<<<<<<<<<<
 *     cdef double al, au, bl, bu
 *     cdef Interval ratio
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.extdiv", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "reachability.pyx":422
 * 
 * 
 * cdef Interval call_f(interval_fn f,             # <<<<<<<<<<<<<<
 *                      TaylorModelVec & tmv,
 *                      vector[Interval] & domain) nogil:
 */

static flowstar::Interval __pyx_f_12reachability_call_f(std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_f, flowstar::TaylorModelVec &__pyx_v_tmv, std::vector<flowstar::Interval>  &__pyx_v_domain) {
  std::vector<flowstar::Interval>  __pyx_v_I;
  flowstar::Interval __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_TraceCall("call_f", __pyx_f[0], 422, 1, __PYX_ERR(0, 422, __pyx_L1_error));

  /* "reachability.pyx":426
 *                      vector[Interval] & domain) nogil:
 *     cdef vector[Interval] I
 *     tmv.intEval(I, domain)             # <<<<<<<<<<<<<<
 *     I.insert(I.begin(), domain[0])
 *     return f.call(I)
 */
  __Pyx_TraceLine(426,1,__PYX_ERR(0, 426, __pyx_L1_error))
  __pyx_v_tmv.intEval(__pyx_v_I, __pyx_v_domain);

  /* "reachability.pyx":427
 *     cdef vector[Interval] I
 *     tmv.intEval(I, domain)
 *     I.insert(I.begin(), domain[0])             # <<<<<<<<<<<<<<
 *     return f.call(I)
 * 
 */
  __Pyx_TraceLine(427,1,__PYX_ERR(0, 427, __pyx_L1_error))
  try {
    __pyx_v_I.insert(__pyx_v_I.begin(), (__pyx_v_domain[0]));
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 427, __pyx_L1_error)
  }

  /* "reachability.pyx":428
 *     tmv.intEval(I, domain)
 *     I.insert(I.begin(), domain[0])
 *     return f.call(I)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(428,1,__PYX_ERR(0, 428, __pyx_L1_error))
  __pyx_r = __pyx_v_f.operator()(__pyx_v_I);
  goto __pyx_L0;

  /* "reachability.pyx":422
 * 
 * 
 * cdef Interval call_f(interval_fn f,             # <<<<<<<<<<<<<<
 *                      TaylorModelVec & tmv,
 *                      vector[Interval] & domain) nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.call_f", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "reachability.pyx":432
 * 
 * # t assumed to be scaled in the same manner as tmv domain
 * cdef cbool search_zero(Interval & t, interval_fn f, interval_fn fprime,             # <<<<<<<<<<<<<<
 *                        TaylorModelVec & tmv, vector[Interval] & domain,
 *                        double epsilon=0.00001, double theta=0.01,
 */

static bool __pyx_f_12reachability_search_zero(flowstar::Interval &__pyx_v_t, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_f, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_fprime, flowstar::TaylorModelVec &__pyx_v_tmv, std::vector<flowstar::Interval>  &__pyx_v_domain, struct __pyx_opt_args_12reachability_search_zero *__pyx_optional_args) {
  double __pyx_v_theta = ((double)0.01);
  double __pyx_v_abs_inf = ((double)0.0001);
  bool __pyx_v_bound_found;
  double __pyx_v_tl0;
  double __pyx_v_tu0;
  double __pyx_v_tl;
  flowstar::Interval __pyx_v_T0;
  flowstar::Interval __pyx_v_fI;
  flowstar::Interval __pyx_v_fP;
  flowstar::Interval __pyx_v_tbak;
  bool __pyx_v_failed;
  double __pyx_v_tu;
  bool __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  __Pyx_TraceCall("search_zero", __pyx_f[0], 432, 1, __PYX_ERR(0, 432, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 1) {
      __pyx_v_theta = __pyx_optional_args->theta;
      if (__pyx_optional_args->__pyx_n > 2) {
        __pyx_v_abs_inf = __pyx_optional_args->abs_inf;
      }
    }
  }

  /* "reachability.pyx":436
 *                        double epsilon=0.00001, double theta=0.01,
 *                        double abs_inf=0.0001) nogil:
 *     cdef cbool bound_found = False             # <<<<<<<<<<<<<<
 *     cdef double tl0 = t.inf()
 *     cdef double tu0 = t.sup()
 */
  __Pyx_TraceLine(436,1,__PYX_ERR(0, 436, __pyx_L1_error))
  __pyx_v_bound_found = 0;

  /* "reachability.pyx":437
 *                        double abs_inf=0.0001) nogil:
 *     cdef cbool bound_found = False
 *     cdef double tl0 = t.inf()             # <<<<<<<<<<<<<<
 *     cdef double tu0 = t.sup()
 *     cdef double tl = t.inf()
 */
  __Pyx_TraceLine(437,1,__PYX_ERR(0, 437, __pyx_L1_error))
  __pyx_v_tl0 = __pyx_v_t.inf();

  /* "reachability.pyx":438
 *     cdef cbool bound_found = False
 *     cdef double tl0 = t.inf()
 *     cdef double tu0 = t.sup()             # <<<<<<<<<<<<<<
 *     cdef double tl = t.inf()
 *     # We will reset the time domain at the end to allow us to pass domain
 */
  __Pyx_TraceLine(438,1,__PYX_ERR(0, 438, __pyx_L1_error))
  __pyx_v_tu0 = __pyx_v_t.sup();

  /* "reachability.pyx":439
 *     cdef double tl0 = t.inf()
 *     cdef double tu0 = t.sup()
 *     cdef double tl = t.inf()             # <<<<<<<<<<<<<<
 *     # We will reset the time domain at the end to allow us to pass domain
 *     # by reference
 */
  __Pyx_TraceLine(439,1,__PYX_ERR(0, 439, __pyx_L1_error))
  __pyx_v_tl = __pyx_v_t.inf();

  /* "reachability.pyx":442
 *     # We will reset the time domain at the end to allow us to pass domain
 *     # by reference
 *     cdef Interval T0 = domain[0]             # <<<<<<<<<<<<<<
 *     # Perform interval evaluation
 *     cdef vector[Interval] I
 */
  __Pyx_TraceLine(442,1,__PYX_ERR(0, 442, __pyx_L1_error))
  __pyx_v_T0 = (__pyx_v_domain[0]);

  /* "reachability.pyx":445
 *     # Perform interval evaluation
 *     cdef vector[Interval] I
 *     domain[0] = Interval(tl)             # <<<<<<<<<<<<<<
 *     cdef Interval fI = call_f(f, tmv, domain)
 *     cdef Interval fP
 */
  __Pyx_TraceLine(445,1,__PYX_ERR(0, 445, __pyx_L1_error))
  (__pyx_v_domain[0]) = flowstar::Interval(__pyx_v_tl);

  /* "reachability.pyx":446
 *     cdef vector[Interval] I
 *     domain[0] = Interval(tl)
 *     cdef Interval fI = call_f(f, tmv, domain)             # <<<<<<<<<<<<<<
 *     cdef Interval fP
 *     cdef Interval tbak
 */
  __Pyx_TraceLine(446,1,__PYX_ERR(0, 446, __pyx_L1_error))
  __pyx_v_fI = __pyx_f_12reachability_call_f(__pyx_v_f, __pyx_v_tmv, __pyx_v_domain);

  /* "reachability.pyx":452
 *     cdef cbool failed
 * 
 *     bound_found = fI.inf() <= 0 <= fI.sup()             # <<<<<<<<<<<<<<
 *     while not bound_found:
 *         # print("tl = {}".format(tl))
 */
  __Pyx_TraceLine(452,1,__PYX_ERR(0, 452, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_fI.inf() <= 0.0);
  if (__pyx_t_1) {
    __pyx_t_1 = (0.0 <= __pyx_v_fI.sup());
  }
  __pyx_v_bound_found = __pyx_t_1;

  /* "reachability.pyx":453
 * 
 *     bound_found = fI.inf() <= 0 <= fI.sup()
 *     while not bound_found:             # <<<<<<<<<<<<<<
 *         # print("tl = {}".format(tl))
 *         # print("t = {}".format(t.as_str()))
 */
  __Pyx_TraceLine(453,1,__PYX_ERR(0, 453, __pyx_L1_error))
  while (1) {
    __pyx_t_1 = ((!(__pyx_v_bound_found != 0)) != 0);
    if (!__pyx_t_1) break;

    /* "reachability.pyx":456
 *         # print("tl = {}".format(tl))
 *         # print("t = {}".format(t.as_str()))
 *         tbak = t             # <<<<<<<<<<<<<<
 *         tl = t.inf()
 *         domain[0] = Interval(tl)
 */
    __Pyx_TraceLine(456,1,__PYX_ERR(0, 456, __pyx_L1_error))
    __pyx_v_tbak = __pyx_v_t;

    /* "reachability.pyx":457
 *         # print("t = {}".format(t.as_str()))
 *         tbak = t
 *         tl = t.inf()             # <<<<<<<<<<<<<<
 *         domain[0] = Interval(tl)
 *         fI = call_f(f, tmv, domain)
 */
    __Pyx_TraceLine(457,1,__PYX_ERR(0, 457, __pyx_L1_error))
    __pyx_v_tl = __pyx_v_t.inf();

    /* "reachability.pyx":458
 *         tbak = t
 *         tl = t.inf()
 *         domain[0] = Interval(tl)             # <<<<<<<<<<<<<<
 *         fI = call_f(f, tmv, domain)
 *         fI.inv_assign()
 */
    __Pyx_TraceLine(458,1,__PYX_ERR(0, 458, __pyx_L1_error))
    (__pyx_v_domain[0]) = flowstar::Interval(__pyx_v_tl);

    /* "reachability.pyx":459
 *         tl = t.inf()
 *         domain[0] = Interval(tl)
 *         fI = call_f(f, tmv, domain)             # <<<<<<<<<<<<<<
 *         fI.inv_assign()
 *         t.add_assign(-tl)
 */
    __Pyx_TraceLine(459,1,__PYX_ERR(0, 459, __pyx_L1_error))
    __pyx_v_fI = __pyx_f_12reachability_call_f(__pyx_v_f, __pyx_v_tmv, __pyx_v_domain);

    /* "reachability.pyx":460
 *         domain[0] = Interval(tl)
 *         fI = call_f(f, tmv, domain)
 *         fI.inv_assign()             # <<<<<<<<<<<<<<
 *         t.add_assign(-tl)
 *         domain[0] = t
 */
    __Pyx_TraceLine(460,1,__PYX_ERR(0, 460, __pyx_L1_error))
    __pyx_v_fI.inv_assign();

    /* "reachability.pyx":461
 *         fI = call_f(f, tmv, domain)
 *         fI.inv_assign()
 *         t.add_assign(-tl)             # <<<<<<<<<<<<<<
 *         domain[0] = t
 *         fP = call_f(fprime, tmv, domain)
 */
    __Pyx_TraceLine(461,1,__PYX_ERR(0, 461, __pyx_L1_error))
    __pyx_v_t.operator+=((-__pyx_v_tl));

    /* "reachability.pyx":462
 *         fI.inv_assign()
 *         t.add_assign(-tl)
 *         domain[0] = t             # <<<<<<<<<<<<<<
 *         fP = call_f(fprime, tmv, domain)
 *         failed = not extdiv(t, fI, fP)
 */
    __Pyx_TraceLine(462,1,__PYX_ERR(0, 462, __pyx_L1_error))
    (__pyx_v_domain[0]) = __pyx_v_t;

    /* "reachability.pyx":463
 *         t.add_assign(-tl)
 *         domain[0] = t
 *         fP = call_f(fprime, tmv, domain)             # <<<<<<<<<<<<<<
 *         failed = not extdiv(t, fI, fP)
 *         # print("t' = {} ({})".format(t.as_str(), failed))
 */
    __Pyx_TraceLine(463,1,__PYX_ERR(0, 463, __pyx_L1_error))
    __pyx_v_fP = __pyx_f_12reachability_call_f(__pyx_v_fprime, __pyx_v_tmv, __pyx_v_domain);

    /* "reachability.pyx":464
 *         domain[0] = t
 *         fP = call_f(fprime, tmv, domain)
 *         failed = not extdiv(t, fI, fP)             # <<<<<<<<<<<<<<
 *         # print("t' = {} ({})".format(t.as_str(), failed))
 *         if failed:
 */
    __Pyx_TraceLine(464,1,__PYX_ERR(0, 464, __pyx_L1_error))
    __pyx_v_failed = (!(__pyx_f_12reachability_extdiv(__pyx_v_t, __pyx_v_fI, __pyx_v_fP) != 0));

    /* "reachability.pyx":466
 *         failed = not extdiv(t, fI, fP)
 *         # print("t' = {} ({})".format(t.as_str(), failed))
 *         if failed:             # <<<<<<<<<<<<<<
 *             domain[0] = T0  # Restore TMV domain
 *             return False
 */
    __Pyx_TraceLine(466,1,__PYX_ERR(0, 466, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_failed != 0);
    if (__pyx_t_1) {

      /* "reachability.pyx":467
 *         # print("t' = {} ({})".format(t.as_str(), failed))
 *         if failed:
 *             domain[0] = T0  # Restore TMV domain             # <<<<<<<<<<<<<<
 *             return False
 *         t.add_assign(tl)
 */
      __Pyx_TraceLine(467,1,__PYX_ERR(0, 467, __pyx_L1_error))
      (__pyx_v_domain[0]) = __pyx_v_T0;

      /* "reachability.pyx":468
 *         if failed:
 *             domain[0] = T0  # Restore TMV domain
 *             return False             # <<<<<<<<<<<<<<
 *         t.add_assign(tl)
 *         t.intersect_assign(tbak)
 */
      __Pyx_TraceLine(468,1,__PYX_ERR(0, 468, __pyx_L1_error))
      __pyx_r = 0;
      goto __pyx_L0;

      /* "reachability.pyx":466
 *         failed = not extdiv(t, fI, fP)
 *         # print("t' = {} ({})".format(t.as_str(), failed))
 *         if failed:             # <<<<<<<<<<<<<<
 *             domain[0] = T0  # Restore TMV domain
 *             return False
 */
    }

    /* "reachability.pyx":469
 *             domain[0] = T0  # Restore TMV domain
 *             return False
 *         t.add_assign(tl)             # <<<<<<<<<<<<<<
 *         t.intersect_assign(tbak)
 *         bound_found = int_dist(tbak, t) <= 0.00001
 */
    __Pyx_TraceLine(469,1,__PYX_ERR(0, 469, __pyx_L1_error))
    __pyx_v_t.operator+=(__pyx_v_tl);

    /* "reachability.pyx":470
 *             return False
 *         t.add_assign(tl)
 *         t.intersect_assign(tbak)             # <<<<<<<<<<<<<<
 *         bound_found = int_dist(tbak, t) <= 0.00001
 * 
 */
    __Pyx_TraceLine(470,1,__PYX_ERR(0, 470, __pyx_L1_error))
    __pyx_v_t.intersect_assign(__pyx_v_tbak);

    /* "reachability.pyx":471
 *         t.add_assign(tl)
 *         t.intersect_assign(tbak)
 *         bound_found = int_dist(tbak, t) <= 0.00001             # <<<<<<<<<<<<<<
 * 
 *     tl = t.inf()
 */
    __Pyx_TraceLine(471,1,__PYX_ERR(0, 471, __pyx_L1_error))
    __pyx_v_bound_found = (__pyx_f_12reachability_int_dist(__pyx_v_tbak, __pyx_v_t) <= 0.00001);
  }

  /* "reachability.pyx":473
 *         bound_found = int_dist(tbak, t) <= 0.00001
 * 
 *     tl = t.inf()             # <<<<<<<<<<<<<<
 *     cdef double tu = tl + 1e-6
 * 
 */
  __Pyx_TraceLine(473,1,__PYX_ERR(0, 473, __pyx_L1_error))
  __pyx_v_tl = __pyx_v_t.inf();

  /* "reachability.pyx":474
 * 
 *     tl = t.inf()
 *     cdef double tu = tl + 1e-6             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __Pyx_TraceLine(474,1,__PYX_ERR(0, 474, __pyx_L1_error))
  __pyx_v_tu = (__pyx_v_tl + 1e-6);

  /* "reachability.pyx":476
 *     cdef double tu = tl + 1e-6
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         domain[0] = Interval(tu)
 *         fI = call_f(f, tmv, domain)
 */
  __Pyx_TraceLine(476,1,__PYX_ERR(0, 476, __pyx_L1_error))
  while (1) {

    /* "reachability.pyx":477
 * 
 *     while True:
 *         domain[0] = Interval(tu)             # <<<<<<<<<<<<<<
 *         fI = call_f(f, tmv, domain)
 *         if (fI.inf() > 0 or fI.sup() < 0 or tu >= tu0):
 */
    __Pyx_TraceLine(477,1,__PYX_ERR(0, 477, __pyx_L1_error))
    (__pyx_v_domain[0]) = flowstar::Interval(__pyx_v_tu);

    /* "reachability.pyx":478
 *     while True:
 *         domain[0] = Interval(tu)
 *         fI = call_f(f, tmv, domain)             # <<<<<<<<<<<<<<
 *         if (fI.inf() > 0 or fI.sup() < 0 or tu >= tu0):
 *             break
 */
    __Pyx_TraceLine(478,1,__PYX_ERR(0, 478, __pyx_L1_error))
    __pyx_v_fI = __pyx_f_12reachability_call_f(__pyx_v_f, __pyx_v_tmv, __pyx_v_domain);

    /* "reachability.pyx":479
 *         domain[0] = Interval(tu)
 *         fI = call_f(f, tmv, domain)
 *         if (fI.inf() > 0 or fI.sup() < 0 or tu >= tu0):             # <<<<<<<<<<<<<<
 *             break
 *         tu = cmin((1 + theta)*tu + abs_inf, tu0)
 */
    __Pyx_TraceLine(479,1,__PYX_ERR(0, 479, __pyx_L1_error))
    __pyx_t_2 = ((__pyx_v_fI.inf() > 0.0) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_fI.sup() < 0.0) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_tu >= __pyx_v_tu0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_1) {

      /* "reachability.pyx":480
 *         fI = call_f(f, tmv, domain)
 *         if (fI.inf() > 0 or fI.sup() < 0 or tu >= tu0):
 *             break             # <<<<<<<<<<<<<<
 *         tu = cmin((1 + theta)*tu + abs_inf, tu0)
 *         # print("tu = {} (finding upper)".format(tu))
 */
      __Pyx_TraceLine(480,1,__PYX_ERR(0, 480, __pyx_L1_error))
      goto __pyx_L7_break;

      /* "reachability.pyx":479
 *         domain[0] = Interval(tu)
 *         fI = call_f(f, tmv, domain)
 *         if (fI.inf() > 0 or fI.sup() < 0 or tu >= tu0):             # <<<<<<<<<<<<<<
 *             break
 *         tu = cmin((1 + theta)*tu + abs_inf, tu0)
 */
    }

    /* "reachability.pyx":481
 *         if (fI.inf() > 0 or fI.sup() < 0 or tu >= tu0):
 *             break
 *         tu = cmin((1 + theta)*tu + abs_inf, tu0)             # <<<<<<<<<<<<<<
 *         # print("tu = {} (finding upper)".format(tu))
 * 
 */
    __Pyx_TraceLine(481,1,__PYX_ERR(0, 481, __pyx_L1_error))
    __pyx_v_tu = std::min<double>((((1.0 + __pyx_v_theta) * __pyx_v_tu) + __pyx_v_abs_inf), __pyx_v_tu0);
  }
  __pyx_L7_break:;

  /* "reachability.pyx":484
 *         # print("tu = {} (finding upper)".format(tu))
 * 
 *     (&t)[0] = Interval(tl0, tu)             # <<<<<<<<<<<<<<
 *     bound_found = False
 *     while tu <= tu0 and not bound_found:
 */
  __Pyx_TraceLine(484,1,__PYX_ERR(0, 484, __pyx_L1_error))
  ((&__pyx_v_t)[0]) = flowstar::Interval(__pyx_v_tl0, __pyx_v_tu);

  /* "reachability.pyx":485
 * 
 *     (&t)[0] = Interval(tl0, tu)
 *     bound_found = False             # <<<<<<<<<<<<<<
 *     while tu <= tu0 and not bound_found:
 *         # print("tu = {} (refining upper)".format(tu))
 */
  __Pyx_TraceLine(485,1,__PYX_ERR(0, 485, __pyx_L1_error))
  __pyx_v_bound_found = 0;

  /* "reachability.pyx":486
 *     (&t)[0] = Interval(tl0, tu)
 *     bound_found = False
 *     while tu <= tu0 and not bound_found:             # <<<<<<<<<<<<<<
 *         # print("tu = {} (refining upper)".format(tu))
 *         tbak = t
 */
  __Pyx_TraceLine(486,1,__PYX_ERR(0, 486, __pyx_L1_error))
  while (1) {
    __pyx_t_2 = ((__pyx_v_tu <= __pyx_v_tu0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_bound_found != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "reachability.pyx":488
 *     while tu <= tu0 and not bound_found:
 *         # print("tu = {} (refining upper)".format(tu))
 *         tbak = t             # <<<<<<<<<<<<<<
 *         tu = t.sup()
 *         domain[0] = Interval(tu)
 */
    __Pyx_TraceLine(488,1,__PYX_ERR(0, 488, __pyx_L1_error))
    __pyx_v_tbak = __pyx_v_t;

    /* "reachability.pyx":489
 *         # print("tu = {} (refining upper)".format(tu))
 *         tbak = t
 *         tu = t.sup()             # <<<<<<<<<<<<<<
 *         domain[0] = Interval(tu)
 *         fI = call_f(f, tmv, domain)
 */
    __Pyx_TraceLine(489,1,__PYX_ERR(0, 489, __pyx_L1_error))
    __pyx_v_tu = __pyx_v_t.sup();

    /* "reachability.pyx":490
 *         tbak = t
 *         tu = t.sup()
 *         domain[0] = Interval(tu)             # <<<<<<<<<<<<<<
 *         fI = call_f(f, tmv, domain)
 *         t.inv_assign()
 */
    __Pyx_TraceLine(490,1,__PYX_ERR(0, 490, __pyx_L1_error))
    (__pyx_v_domain[0]) = flowstar::Interval(__pyx_v_tu);

    /* "reachability.pyx":491
 *         tu = t.sup()
 *         domain[0] = Interval(tu)
 *         fI = call_f(f, tmv, domain)             # <<<<<<<<<<<<<<
 *         t.inv_assign()
 *         t.add_assign(tu)
 */
    __Pyx_TraceLine(491,1,__PYX_ERR(0, 491, __pyx_L1_error))
    __pyx_v_fI = __pyx_f_12reachability_call_f(__pyx_v_f, __pyx_v_tmv, __pyx_v_domain);

    /* "reachability.pyx":492
 *         domain[0] = Interval(tu)
 *         fI = call_f(f, tmv, domain)
 *         t.inv_assign()             # <<<<<<<<<<<<<<
 *         t.add_assign(tu)
 *         domain[0] = t
 */
    __Pyx_TraceLine(492,1,__PYX_ERR(0, 492, __pyx_L1_error))
    __pyx_v_t.inv_assign();

    /* "reachability.pyx":493
 *         fI = call_f(f, tmv, domain)
 *         t.inv_assign()
 *         t.add_assign(tu)             # <<<<<<<<<<<<<<
 *         domain[0] = t
 *         fP = call_f(fprime, tmv, domain)
 */
    __Pyx_TraceLine(493,1,__PYX_ERR(0, 493, __pyx_L1_error))
    __pyx_v_t.operator+=(__pyx_v_tu);

    /* "reachability.pyx":494
 *         t.inv_assign()
 *         t.add_assign(tu)
 *         domain[0] = t             # <<<<<<<<<<<<<<
 *         fP = call_f(fprime, tmv, domain)
 *         failed = not extdiv(t, fI, fP)
 */
    __Pyx_TraceLine(494,1,__PYX_ERR(0, 494, __pyx_L1_error))
    (__pyx_v_domain[0]) = __pyx_v_t;

    /* "reachability.pyx":495
 *         t.add_assign(tu)
 *         domain[0] = t
 *         fP = call_f(fprime, tmv, domain)             # <<<<<<<<<<<<<<
 *         failed = not extdiv(t, fI, fP)
 *         t.inv_assign()
 */
    __Pyx_TraceLine(495,1,__PYX_ERR(0, 495, __pyx_L1_error))
    __pyx_v_fP = __pyx_f_12reachability_call_f(__pyx_v_fprime, __pyx_v_tmv, __pyx_v_domain);

    /* "reachability.pyx":496
 *         domain[0] = t
 *         fP = call_f(fprime, tmv, domain)
 *         failed = not extdiv(t, fI, fP)             # <<<<<<<<<<<<<<
 *         t.inv_assign()
 *         t.add_assign(tu)
 */
    __Pyx_TraceLine(496,1,__PYX_ERR(0, 496, __pyx_L1_error))
    __pyx_v_failed = (!(__pyx_f_12reachability_extdiv(__pyx_v_t, __pyx_v_fI, __pyx_v_fP) != 0));

    /* "reachability.pyx":497
 *         fP = call_f(fprime, tmv, domain)
 *         failed = not extdiv(t, fI, fP)
 *         t.inv_assign()             # <<<<<<<<<<<<<<
 *         t.add_assign(tu)
 *         t.intersect_assign(tbak)
 */
    __Pyx_TraceLine(497,1,__PYX_ERR(0, 497, __pyx_L1_error))
    __pyx_v_t.inv_assign();

    /* "reachability.pyx":498
 *         failed = not extdiv(t, fI, fP)
 *         t.inv_assign()
 *         t.add_assign(tu)             # <<<<<<<<<<<<<<
 *         t.intersect_assign(tbak)
 *         bound_found = failed or int_dist(tbak, t) <= 0.00001
 */
    __Pyx_TraceLine(498,1,__PYX_ERR(0, 498, __pyx_L1_error))
    __pyx_v_t.operator+=(__pyx_v_tu);

    /* "reachability.pyx":499
 *         t.inv_assign()
 *         t.add_assign(tu)
 *         t.intersect_assign(tbak)             # <<<<<<<<<<<<<<
 *         bound_found = failed or int_dist(tbak, t) <= 0.00001
 * 
 */
    __Pyx_TraceLine(499,1,__PYX_ERR(0, 499, __pyx_L1_error))
    __pyx_v_t.intersect_assign(__pyx_v_tbak);

    /* "reachability.pyx":500
 *         t.add_assign(tu)
 *         t.intersect_assign(tbak)
 *         bound_found = failed or int_dist(tbak, t) <= 0.00001             # <<<<<<<<<<<<<<
 * 
 *     (&t)[0] = Interval(tl, tu)
 */
    __Pyx_TraceLine(500,1,__PYX_ERR(0, 500, __pyx_L1_error))
    if (!__pyx_v_failed) {
    } else {
      __pyx_t_3 = __pyx_v_failed;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_1 = (__pyx_f_12reachability_int_dist(__pyx_v_tbak, __pyx_v_t) <= 0.00001);
    __pyx_t_3 = __pyx_t_1;
    __pyx_L16_bool_binop_done:;
    __pyx_v_bound_found = __pyx_t_3;
  }

  /* "reachability.pyx":502
 *         bound_found = failed or int_dist(tbak, t) <= 0.00001
 * 
 *     (&t)[0] = Interval(tl, tu)             # <<<<<<<<<<<<<<
 *     domain[0] = T0  # Restore TMV domain
 *     return True
 */
  __Pyx_TraceLine(502,1,__PYX_ERR(0, 502, __pyx_L1_error))
  ((&__pyx_v_t)[0]) = flowstar::Interval(__pyx_v_tl, __pyx_v_tu);

  /* "reachability.pyx":503
 * 
 *     (&t)[0] = Interval(tl, tu)
 *     domain[0] = T0  # Restore TMV domain             # <<<<<<<<<<<<<<
 *     return True
 *     # >>> py_detect_roots3(Poly(t - 0.5), Poly(R(1.0)), sage.RIF(0, 1))
 */
  __Pyx_TraceLine(503,1,__PYX_ERR(0, 503, __pyx_L1_error))
  (__pyx_v_domain[0]) = __pyx_v_T0;

  /* "reachability.pyx":504
 *     (&t)[0] = Interval(tl, tu)
 *     domain[0] = T0  # Restore TMV domain
 *     return True             # <<<<<<<<<<<<<<
 *     # >>> py_detect_roots3(Poly(t - 0.5), Poly(R(1.0)), sage.RIF(0, 1))
 *     # verified contractive!
 */
  __Pyx_TraceLine(504,1,__PYX_ERR(0, 504, __pyx_L1_error))
  __pyx_r = 1;
  goto __pyx_L0;

  /* "reachability.pyx":432
 * 
 * # t assumed to be scaled in the same manner as tmv domain
 * cdef cbool search_zero(Interval & t, interval_fn f, interval_fn fprime,             # <<<<<<<<<<<<<<
 *                        TaylorModelVec & tmv, vector[Interval] & domain,
 *                        double epsilon=0.00001, double theta=0.01,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.search_zero", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "reachability.pyx":512
 *     # [(0.4, 0.5)]
 * 
 * def py_detect_roots3(Poly f, Poly fprime, t, double epsilon=1e-6, int verbosity=1):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> R, (t,) = sage.PolynomialRing(sage.RIF, 't').objgens()
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_19py_detect_roots3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12reachability_18py_detect_roots3[] = "\n    >>> R, (t,) = sage.PolynomialRing(sage.RIF, 't').objgens()\n    >>> py_detect_roots3(Poly(t - 0.5), Poly(R(1.0)), sage.RIF(0, 1))\n    verified contractive!\n    [(0.5, 0.5)]\n    >>> py_detect_roots3(Poly(t - sage.RIF(0.4,0.5)), Poly(R(1.0)), sage.RIF(0, 1))\n    verified contractive!\n    [(0.4, 0.5)]\n    >>> py_detect_roots3(Poly(t**2 - 2), Poly(2*t), sage.RIF(1, 2))\n    verified contractive!\n    [(1.4142135623730947, 1.4142135623730954)]\n    >>> py_detect_roots3(Poly(6*(t - 0.5)**2 - sage.RIF(0.4)), Poly(12*t - 6), sage.RIF(0, 1))\n    verified contractive!\n    verified contractive!\n    [(0.7581988897471607, 0.7581988897471615), (0.24180111025283868, 0.24180111025283899)]\n    >>> py_detect_roots3(Poly(t - sage.RIF(-1,1)), Poly(R(1)), sage.RIF(0, 1))\n    root on boundary!\n    [(-0.0, 1.0)]\n    ";
static PyMethodDef __pyx_mdef_12reachability_19py_detect_roots3 = {"py_detect_roots3", (PyCFunction)__pyx_pw_12reachability_19py_detect_roots3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12reachability_18py_detect_roots3};
static PyObject *__pyx_pw_12reachability_19py_detect_roots3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_12reachability_Poly *__pyx_v_f = 0;
  struct __pyx_obj_12reachability_Poly *__pyx_v_fprime = 0;
  PyObject *__pyx_v_t = 0;
  double __pyx_v_epsilon;
  int __pyx_v_verbosity;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_detect_roots3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,&__pyx_n_s_fprime,&__pyx_n_s_t,&__pyx_n_s_epsilon,&__pyx_n_s_verbosity,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fprime)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_detect_roots3", 0, 3, 5, 1); __PYX_ERR(0, 512, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_detect_roots3", 0, 3, 5, 2); __PYX_ERR(0, 512, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbosity);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_detect_roots3") < 0)) __PYX_ERR(0, 512, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_f = ((struct __pyx_obj_12reachability_Poly *)values[0]);
    __pyx_v_fprime = ((struct __pyx_obj_12reachability_Poly *)values[1]);
    __pyx_v_t = values[2];
    if (values[3]) {
      __pyx_v_epsilon = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_epsilon == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
    } else {
      __pyx_v_epsilon = ((double)1e-6);
    }
    if (values[4]) {
      __pyx_v_verbosity = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_verbosity == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L3_error)
    } else {
      __pyx_v_verbosity = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_detect_roots3", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 512, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.py_detect_roots3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_f), __pyx_ptype_12reachability_Poly, 1, "f", 0))) __PYX_ERR(0, 512, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fprime), __pyx_ptype_12reachability_Poly, 1, "fprime", 0))) __PYX_ERR(0, 512, __pyx_L1_error)
  __pyx_r = __pyx_pf_12reachability_18py_detect_roots3(__pyx_self, __pyx_v_f, __pyx_v_fprime, __pyx_v_t, __pyx_v_epsilon, __pyx_v_verbosity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_18py_detect_roots3(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_12reachability_Poly *__pyx_v_f, struct __pyx_obj_12reachability_Poly *__pyx_v_fprime, PyObject *__pyx_v_t, double __pyx_v_epsilon, int __pyx_v_verbosity) {
  flowstar::Interval __pyx_v_T;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_F;
  std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_Fprime;
  std::vector<flowstar::Interval>  __pyx_v_roots;
  flowstar::Interval __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  struct __pyx_opt_args_12reachability_detect_roots3 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<flowstar::Interval> ::iterator __pyx_t_3;
  flowstar::Interval __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__9)
  __Pyx_RefNannySetupContext("py_detect_roots3", 0);
  __Pyx_TraceCall("py_detect_roots3", __pyx_f[0], 512, 0, __PYX_ERR(0, 512, __pyx_L1_error));

  /* "reachability.pyx":533
 *     '''
 * 
 *     cdef Interval T = _interval(t)             # <<<<<<<<<<<<<<
 *     cdef interval_time_fn F = poly_time_fn(f.c_poly)
 *     cdef interval_time_fn Fprime = poly_time_fn(fprime.c_poly)
 */
  __Pyx_TraceLine(533,0,__PYX_ERR(0, 533, __pyx_L1_error))
  __pyx_v_T = __pyx_f_12reachability__interval(__pyx_v_t);

  /* "reachability.pyx":534
 * 
 *     cdef Interval T = _interval(t)
 *     cdef interval_time_fn F = poly_time_fn(f.c_poly)             # <<<<<<<<<<<<<<
 *     cdef interval_time_fn Fprime = poly_time_fn(fprime.c_poly)
 *     cdef vector[Interval] roots
 */
  __Pyx_TraceLine(534,0,__PYX_ERR(0, 534, __pyx_L1_error))
  __pyx_v_F = poly_time_fn(__pyx_v_f->c_poly);

  /* "reachability.pyx":535
 *     cdef Interval T = _interval(t)
 *     cdef interval_time_fn F = poly_time_fn(f.c_poly)
 *     cdef interval_time_fn Fprime = poly_time_fn(fprime.c_poly)             # <<<<<<<<<<<<<<
 *     cdef vector[Interval] roots
 *     # cdef Interval R = F.call(Interval(0.0))
 */
  __Pyx_TraceLine(535,0,__PYX_ERR(0, 535, __pyx_L1_error))
  __pyx_v_Fprime = poly_time_fn(__pyx_v_fprime->c_poly);

  /* "reachability.pyx":543
 *     # print("F'(0) = [{}..{}]".format(Rprime.inf(), Rprime.sup()))
 * 
 *     detect_roots3(roots, F, Fprime, T, epsilon, verbosity)             # <<<<<<<<<<<<<<
 * 
 *     return [(r.inf(), r.sup()) for r in roots]
 */
  __Pyx_TraceLine(543,0,__PYX_ERR(0, 543, __pyx_L1_error))
  __pyx_t_1.__pyx_n = 2;
  __pyx_t_1.epsilon = __pyx_v_epsilon;
  __pyx_t_1.verbosity = __pyx_v_verbosity;
  __pyx_f_12reachability_detect_roots3(__pyx_v_roots, __pyx_v_F, __pyx_v_Fprime, __pyx_v_T, &__pyx_t_1); 

  /* "reachability.pyx":545
 *     detect_roots3(roots, F, Fprime, T, epsilon, verbosity)
 * 
 *     return [(r.inf(), r.sup()) for r in roots]             # <<<<<<<<<<<<<<
 * 
 * cdef void detect_roots3(vector[Interval] & roots,
 */
  __Pyx_TraceLine(545,0,__PYX_ERR(0, 545, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_roots.begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_v_roots.end())) break;
    __pyx_t_4 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_r = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_r.inf()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_r.sup()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":512
 *     # [(0.4, 0.5)]
 * 
 * def py_detect_roots3(Poly f, Poly fprime, t, double epsilon=1e-6, int verbosity=1):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> R, (t,) = sage.PolynomialRing(sage.RIF, 't').objgens()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("reachability.py_detect_roots3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":547
 *     return [(r.inf(), r.sup()) for r in roots]
 * 
 * cdef void detect_roots3(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                         interval_time_fn f, interval_time_fn fprime,
 *                         Interval & T0,
 */

static void __pyx_f_12reachability_detect_roots3(std::vector<flowstar::Interval>  &__pyx_v_roots, std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_f, std::function<flowstar::Interval(const flowstar::Interval &)> __pyx_v_fprime, flowstar::Interval &__pyx_v_T0, struct __pyx_opt_args_12reachability_detect_roots3 *__pyx_optional_args) {
  double __pyx_v_epsilon = ((double)0.00001);
  int __pyx_v_verbosity = ((int)1);
  flowstar::Interval __pyx_v_T;
  flowstar::Interval __pyx_v_Tbak;
  flowstar::Interval __pyx_v_M;
  flowstar::Interval __pyx_v_Tu;
  bool __pyx_v_bound_found;
  bool __pyx_v_failed;
  bool __pyx_v_contractive;
  bool __pyx_v_split;
  flowstar::Interval __pyx_v_Told;
  flowstar::Interval __pyx_v_fI;
  flowstar::Interval __pyx_v_fP;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  bool __pyx_t_19;
  struct __pyx_opt_args_12reachability_detect_roots3 __pyx_t_20;
  __Pyx_RefNannySetupContext("detect_roots3", 0);
  __Pyx_TraceCall("detect_roots3", __pyx_f[0], 547, 0, __PYX_ERR(0, 547, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_epsilon = __pyx_optional_args->epsilon;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_verbosity = __pyx_optional_args->verbosity;
      }
    }
  }

  /* "reachability.pyx":554
 *     cdef:
 *         # Interval T0 = domain[0]
 *         Interval T = T0             # <<<<<<<<<<<<<<
 *         Interval Tbak
 *         Interval fT
 */
  __Pyx_TraceLine(554,0,__PYX_ERR(0, 554, __pyx_L1_error))
  __pyx_v_T = __pyx_v_T0;

  /* "reachability.pyx":561
 *         Interval Tl
 *         Interval Tu
 *         cbool bound_found = False             # <<<<<<<<<<<<<<
 *         cbool failed = False
 *         cbool contractive = False
 */
  __Pyx_TraceLine(561,0,__PYX_ERR(0, 561, __pyx_L1_error))
  __pyx_v_bound_found = 0;

  /* "reachability.pyx":562
 *         Interval Tu
 *         cbool bound_found = False
 *         cbool failed = False             # <<<<<<<<<<<<<<
 *         cbool contractive = False
 *         cbool split = False
 */
  __Pyx_TraceLine(562,0,__PYX_ERR(0, 562, __pyx_L1_error))
  __pyx_v_failed = 0;

  /* "reachability.pyx":563
 *         cbool bound_found = False
 *         cbool failed = False
 *         cbool contractive = False             # <<<<<<<<<<<<<<
 *         cbool split = False
 *         Interval Told
 */
  __Pyx_TraceLine(563,0,__PYX_ERR(0, 563, __pyx_L1_error))
  __pyx_v_contractive = 0;

  /* "reachability.pyx":564
 *         cbool failed = False
 *         cbool contractive = False
 *         cbool split = False             # <<<<<<<<<<<<<<
 *         Interval Told
 * 
 */
  __Pyx_TraceLine(564,0,__PYX_ERR(0, 564, __pyx_L1_error))
  __pyx_v_split = 0;

  /* "reachability.pyx":567
 *         Interval Told
 * 
 *     if verbosity >= 3:             # <<<<<<<<<<<<<<
 *         print("T = [{}..{}]".format(T.inf(), T.sup()))
 *     while not (failed or bound_found):
 */
  __Pyx_TraceLine(567,0,__PYX_ERR(0, 567, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_verbosity >= 3) != 0);
  if (__pyx_t_1) {

    /* "reachability.pyx":568
 * 
 *     if verbosity >= 3:
 *         print("T = [{}..{}]".format(T.inf(), T.sup()))             # <<<<<<<<<<<<<<
 *     while not (failed or bound_found):
 *         Tbak = T
 */
    __Pyx_TraceLine(568,0,__PYX_ERR(0, 568, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_T, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_T.inf()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_T.sup()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "reachability.pyx":567
 *         Interval Told
 * 
 *     if verbosity >= 3:             # <<<<<<<<<<<<<<
 *         print("T = [{}..{}]".format(T.inf(), T.sup()))
 *     while not (failed or bound_found):
 */
  }

  /* "reachability.pyx":569
 *     if verbosity >= 3:
 *         print("T = [{}..{}]".format(T.inf(), T.sup()))
 *     while not (failed or bound_found):             # <<<<<<<<<<<<<<
 *         Tbak = T
 *         T.midpoint(M)
 */
  __Pyx_TraceLine(569,0,__PYX_ERR(0, 569, __pyx_L1_error))
  while (1) {
    __pyx_t_9 = (__pyx_v_failed != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_1 = __pyx_t_9;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_bound_found != 0);
    __pyx_t_1 = __pyx_t_9;
    __pyx_L6_bool_binop_done:;
    __pyx_t_9 = ((!__pyx_t_1) != 0);
    if (!__pyx_t_9) break;

    /* "reachability.pyx":570
 *         print("T = [{}..{}]".format(T.inf(), T.sup()))
 *     while not (failed or bound_found):
 *         Tbak = T             # <<<<<<<<<<<<<<
 *         T.midpoint(M)
 *         fI = f.call(M)
 */
    __Pyx_TraceLine(570,0,__PYX_ERR(0, 570, __pyx_L1_error))
    __pyx_v_Tbak = __pyx_v_T;

    /* "reachability.pyx":571
 *     while not (failed or bound_found):
 *         Tbak = T
 *         T.midpoint(M)             # <<<<<<<<<<<<<<
 *         fI = f.call(M)
 *         fP = fprime.call(T)
 */
    __Pyx_TraceLine(571,0,__PYX_ERR(0, 571, __pyx_L1_error))
    __pyx_v_T.midpoint(__pyx_v_M);

    /* "reachability.pyx":572
 *         Tbak = T
 *         T.midpoint(M)
 *         fI = f.call(M)             # <<<<<<<<<<<<<<
 *         fP = fprime.call(T)
 *         T.inv_assign()
 */
    __Pyx_TraceLine(572,0,__PYX_ERR(0, 572, __pyx_L1_error))
    __pyx_v_fI = __pyx_v_f.operator()(__pyx_v_M);

    /* "reachability.pyx":573
 *         T.midpoint(M)
 *         fI = f.call(M)
 *         fP = fprime.call(T)             # <<<<<<<<<<<<<<
 *         T.inv_assign()
 *         T.add_assign(M)
 */
    __Pyx_TraceLine(573,0,__PYX_ERR(0, 573, __pyx_L1_error))
    __pyx_v_fP = __pyx_v_fprime.operator()(__pyx_v_T);

    /* "reachability.pyx":574
 *         fI = f.call(M)
 *         fP = fprime.call(T)
 *         T.inv_assign()             # <<<<<<<<<<<<<<
 *         T.add_assign(M)
 *         Told=T
 */
    __Pyx_TraceLine(574,0,__PYX_ERR(0, 574, __pyx_L1_error))
    __pyx_v_T.inv_assign();

    /* "reachability.pyx":575
 *         fP = fprime.call(T)
 *         T.inv_assign()
 *         T.add_assign(M)             # <<<<<<<<<<<<<<
 *         Told=T
 *         failed = not extdiv2(T, Tu, split, T, fI, fP)
 */
    __Pyx_TraceLine(575,0,__PYX_ERR(0, 575, __pyx_L1_error))
    (void)(__pyx_v_T.operator+=(__pyx_v_M));

    /* "reachability.pyx":576
 *         T.inv_assign()
 *         T.add_assign(M)
 *         Told=T             # <<<<<<<<<<<<<<
 *         failed = not extdiv2(T, Tu, split, T, fI, fP)
 *         if failed:
 */
    __Pyx_TraceLine(576,0,__PYX_ERR(0, 576, __pyx_L1_error))
    __pyx_v_Told = __pyx_v_T;

    /* "reachability.pyx":577
 *         T.add_assign(M)
 *         Told=T
 *         failed = not extdiv2(T, Tu, split, T, fI, fP)             # <<<<<<<<<<<<<<
 *         if failed:
 *             if verbosity >= 2:
 */
    __Pyx_TraceLine(577,0,__PYX_ERR(0, 577, __pyx_L1_error))
    __pyx_v_failed = (!(__pyx_f_12reachability_extdiv2(__pyx_v_T, __pyx_v_Tu, __pyx_v_split, __pyx_v_T, __pyx_v_fI, __pyx_v_fP) != 0));

    /* "reachability.pyx":578
 *         Told=T
 *         failed = not extdiv2(T, Tu, split, T, fI, fP)
 *         if failed:             # <<<<<<<<<<<<<<
 *             if verbosity >= 2:
 *                 print("failed! on:")
 */
    __Pyx_TraceLine(578,0,__PYX_ERR(0, 578, __pyx_L1_error))
    __pyx_t_9 = (__pyx_v_failed != 0);
    if (__pyx_t_9) {

      /* "reachability.pyx":579
 *         failed = not extdiv2(T, Tu, split, T, fI, fP)
 *         if failed:
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("failed! on:")
 *                 print("M=[{}..{}]".format(M.inf(), M.sup()))
 */
      __Pyx_TraceLine(579,0,__PYX_ERR(0, 579, __pyx_L1_error))
      __pyx_t_9 = ((__pyx_v_verbosity >= 2) != 0);
      if (__pyx_t_9) {

        /* "reachability.pyx":580
 *         if failed:
 *             if verbosity >= 2:
 *                 print("failed! on:")             # <<<<<<<<<<<<<<
 *                 print("M=[{}..{}]".format(M.inf(), M.sup()))
 *                 print("extdiv2(T=[{}..{}], Tu=[{}..{}], split={}, T=[{}..{}], fI=[{}..{}], fP=[{}..{}])".format(
 */
        __Pyx_TraceLine(580,0,__PYX_ERR(0, 580, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "reachability.pyx":581
 *             if verbosity >= 2:
 *                 print("failed! on:")
 *                 print("M=[{}..{}]".format(M.inf(), M.sup()))             # <<<<<<<<<<<<<<
 *                 print("extdiv2(T=[{}..{}], Tu=[{}..{}], split={}, T=[{}..{}], fI=[{}..{}], fP=[{}..{}])".format(
 *                     T.inf(), T.sup(),
 */
        __Pyx_TraceLine(581,0,__PYX_ERR(0, 581, __pyx_L1_error))
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_M, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_M.inf()); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_M.sup()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_8, __pyx_t_5};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 581, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_8, __pyx_t_5};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 581, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 581, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_5);
          __pyx_t_8 = 0;
          __pyx_t_5 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 581, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "reachability.pyx":582
 *                 print("failed! on:")
 *                 print("M=[{}..{}]".format(M.inf(), M.sup()))
 *                 print("extdiv2(T=[{}..{}], Tu=[{}..{}], split={}, T=[{}..{}], fI=[{}..{}], fP=[{}..{}])".format(             # <<<<<<<<<<<<<<
 *                     T.inf(), T.sup(),
 *                     Tu.inf(), Tu.sup(),
 */
        __Pyx_TraceLine(582,0,__PYX_ERR(0, 582, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_extdiv2_T_Tu_split_T_fI_fP, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "reachability.pyx":583
 *                 print("M=[{}..{}]".format(M.inf(), M.sup()))
 *                 print("extdiv2(T=[{}..{}], Tu=[{}..{}], split={}, T=[{}..{}], fI=[{}..{}], fP=[{}..{}])".format(
 *                     T.inf(), T.sup(),             # <<<<<<<<<<<<<<
 *                     Tu.inf(), Tu.sup(),
 *                     split,
 */
        __Pyx_TraceLine(583,0,__PYX_ERR(0, 583, __pyx_L1_error))
        __pyx_t_6 = PyFloat_FromDouble(__pyx_v_T.inf()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_T.sup()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);

        /* "reachability.pyx":584
 *                 print("extdiv2(T=[{}..{}], Tu=[{}..{}], split={}, T=[{}..{}], fI=[{}..{}], fP=[{}..{}])".format(
 *                     T.inf(), T.sup(),
 *                     Tu.inf(), Tu.sup(),             # <<<<<<<<<<<<<<
 *                     split,
 *                     Told.inf(), Told.sup(),
 */
        __Pyx_TraceLine(584,0,__PYX_ERR(0, 584, __pyx_L1_error))
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_Tu.inf()); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_Tu.sup()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 584, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "reachability.pyx":585
 *                     T.inf(), T.sup(),
 *                     Tu.inf(), Tu.sup(),
 *                     split,             # <<<<<<<<<<<<<<
 *                     Told.inf(), Told.sup(),
 *                     fI.inf(), fI.sup(),
 */
        __Pyx_TraceLine(585,0,__PYX_ERR(0, 585, __pyx_L1_error))
        __pyx_t_10 = __Pyx_PyBool_FromLong(__pyx_v_split); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 585, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);

        /* "reachability.pyx":586
 *                     Tu.inf(), Tu.sup(),
 *                     split,
 *                     Told.inf(), Told.sup(),             # <<<<<<<<<<<<<<
 *                     fI.inf(), fI.sup(),
 *                     fP.inf(), fP.sup()
 */
        __Pyx_TraceLine(586,0,__PYX_ERR(0, 586, __pyx_L1_error))
        __pyx_t_11 = PyFloat_FromDouble(__pyx_v_Told.inf()); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyFloat_FromDouble(__pyx_v_Told.sup()); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 586, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);

        /* "reachability.pyx":587
 *                     split,
 *                     Told.inf(), Told.sup(),
 *                     fI.inf(), fI.sup(),             # <<<<<<<<<<<<<<
 *                     fP.inf(), fP.sup()
 *                 ))
 */
        __Pyx_TraceLine(587,0,__PYX_ERR(0, 587, __pyx_L1_error))
        __pyx_t_13 = PyFloat_FromDouble(__pyx_v_fI.inf()); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 587, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = PyFloat_FromDouble(__pyx_v_fI.sup()); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 587, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);

        /* "reachability.pyx":588
 *                     Told.inf(), Told.sup(),
 *                     fI.inf(), fI.sup(),
 *                     fP.inf(), fP.sup()             # <<<<<<<<<<<<<<
 *                 ))
 *             return #  No roots here!
 */
        __Pyx_TraceLine(588,0,__PYX_ERR(0, 588, __pyx_L1_error))
        __pyx_t_15 = PyFloat_FromDouble(__pyx_v_fP.inf()); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 588, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = PyFloat_FromDouble(__pyx_v_fP.sup()); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 588, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_17 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[12] = {__pyx_t_17, __pyx_t_6, __pyx_t_5, __pyx_t_8, __pyx_t_4, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 11+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[12] = {__pyx_t_17, __pyx_t_6, __pyx_t_5, __pyx_t_8, __pyx_t_4, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 11+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        } else
        #endif
        {
          __pyx_t_18 = PyTuple_New(11+__pyx_t_7); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 582, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          if (__pyx_t_17) {
            __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17); __pyx_t_17 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_7, __pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_7, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_18, 2+__pyx_t_7, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_18, 3+__pyx_t_7, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_18, 4+__pyx_t_7, __pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_18, 5+__pyx_t_7, __pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_18, 6+__pyx_t_7, __pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_18, 7+__pyx_t_7, __pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_14);
          PyTuple_SET_ITEM(__pyx_t_18, 8+__pyx_t_7, __pyx_t_14);
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_18, 9+__pyx_t_7, __pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_18, 10+__pyx_t_7, __pyx_t_16);
          __pyx_t_6 = 0;
          __pyx_t_5 = 0;
          __pyx_t_8 = 0;
          __pyx_t_4 = 0;
          __pyx_t_10 = 0;
          __pyx_t_11 = 0;
          __pyx_t_12 = 0;
          __pyx_t_13 = 0;
          __pyx_t_14 = 0;
          __pyx_t_15 = 0;
          __pyx_t_16 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "reachability.pyx":582
 *                 print("failed! on:")
 *                 print("M=[{}..{}]".format(M.inf(), M.sup()))
 *                 print("extdiv2(T=[{}..{}], Tu=[{}..{}], split={}, T=[{}..{}], fI=[{}..{}], fP=[{}..{}])".format(             # <<<<<<<<<<<<<<
 *                     T.inf(), T.sup(),
 *                     Tu.inf(), Tu.sup(),
 */
        __Pyx_TraceLine(582,0,__PYX_ERR(0, 582, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "reachability.pyx":579
 *         failed = not extdiv2(T, Tu, split, T, fI, fP)
 *         if failed:
 *             if verbosity >= 2:             # <<<<<<<<<<<<<<
 *                 print("failed! on:")
 *                 print("M=[{}..{}]".format(M.inf(), M.sup()))
 */
      }

      /* "reachability.pyx":590
 *                     fP.inf(), fP.sup()
 *                 ))
 *             return #  No roots here!             # <<<<<<<<<<<<<<
 *         T.inv_assign()
 *         T.add_assign(M)
 */
      __Pyx_TraceLine(590,0,__PYX_ERR(0, 590, __pyx_L1_error))
      goto __pyx_L0;

      /* "reachability.pyx":578
 *         Told=T
 *         failed = not extdiv2(T, Tu, split, T, fI, fP)
 *         if failed:             # <<<<<<<<<<<<<<
 *             if verbosity >= 2:
 *                 print("failed! on:")
 */
    }

    /* "reachability.pyx":591
 *                 ))
 *             return #  No roots here!
 *         T.inv_assign()             # <<<<<<<<<<<<<<
 *         T.add_assign(M)
 *         T.intersect_assign(Tbak)
 */
    __Pyx_TraceLine(591,0,__PYX_ERR(0, 591, __pyx_L1_error))
    __pyx_v_T.inv_assign();

    /* "reachability.pyx":592
 *             return #  No roots here!
 *         T.inv_assign()
 *         T.add_assign(M)             # <<<<<<<<<<<<<<
 *         T.intersect_assign(Tbak)
 *         if split:
 */
    __Pyx_TraceLine(592,0,__PYX_ERR(0, 592, __pyx_L1_error))
    (void)(__pyx_v_T.operator+=(__pyx_v_M));

    /* "reachability.pyx":593
 *         T.inv_assign()
 *         T.add_assign(M)
 *         T.intersect_assign(Tbak)             # <<<<<<<<<<<<<<
 *         if split:
 *             break
 */
    __Pyx_TraceLine(593,0,__PYX_ERR(0, 593, __pyx_L1_error))
    __pyx_v_T.intersect_assign(__pyx_v_Tbak);

    /* "reachability.pyx":594
 *         T.add_assign(M)
 *         T.intersect_assign(Tbak)
 *         if split:             # <<<<<<<<<<<<<<
 *             break
 *         contractive = (contractive
 */
    __Pyx_TraceLine(594,0,__PYX_ERR(0, 594, __pyx_L1_error))
    __pyx_t_9 = (__pyx_v_split != 0);
    if (__pyx_t_9) {

      /* "reachability.pyx":595
 *         T.intersect_assign(Tbak)
 *         if split:
 *             break             # <<<<<<<<<<<<<<
 *         contractive = (contractive
 *                     or Tbak.inf() < T.inf()
 */
      __Pyx_TraceLine(595,0,__PYX_ERR(0, 595, __pyx_L1_error))
      goto __pyx_L5_break;

      /* "reachability.pyx":594
 *         T.add_assign(M)
 *         T.intersect_assign(Tbak)
 *         if split:             # <<<<<<<<<<<<<<
 *             break
 *         contractive = (contractive
 */
    }

    /* "reachability.pyx":596
 *         if split:
 *             break
 *         contractive = (contractive             # <<<<<<<<<<<<<<
 *                     or Tbak.inf() < T.inf()
 *                     and T.sup() < Tbak.sup())
 */
    __Pyx_TraceLine(596,0,__PYX_ERR(0, 596, __pyx_L1_error))
    if (!__pyx_v_contractive) {
    } else {
      __pyx_t_19 = __pyx_v_contractive;
      goto __pyx_L11_bool_binop_done;
    }

    /* "reachability.pyx":597
 *             break
 *         contractive = (contractive
 *                     or Tbak.inf() < T.inf()             # <<<<<<<<<<<<<<
 *                     and T.sup() < Tbak.sup())
 *         bound_found = int_dist(Tbak, T) <= epsilon
 */
    __Pyx_TraceLine(597,0,__PYX_ERR(0, 597, __pyx_L1_error))
    __pyx_t_9 = (__pyx_v_Tbak.inf() < __pyx_v_T.inf());
    if (__pyx_t_9) {
    } else {
      __pyx_t_19 = __pyx_t_9;
      goto __pyx_L11_bool_binop_done;
    }

    /* "reachability.pyx":598
 *         contractive = (contractive
 *                     or Tbak.inf() < T.inf()
 *                     and T.sup() < Tbak.sup())             # <<<<<<<<<<<<<<
 *         bound_found = int_dist(Tbak, T) <= epsilon
 *         if verbosity >= 2:
 */
    __Pyx_TraceLine(598,0,__PYX_ERR(0, 598, __pyx_L1_error))
    __pyx_t_9 = (__pyx_v_T.sup() < __pyx_v_Tbak.sup());
    __pyx_t_19 = __pyx_t_9;
    __pyx_L11_bool_binop_done:;
    __pyx_v_contractive = __pyx_t_19;

    /* "reachability.pyx":599
 *                     or Tbak.inf() < T.inf()
 *                     and T.sup() < Tbak.sup())
 *         bound_found = int_dist(Tbak, T) <= epsilon             # <<<<<<<<<<<<<<
 *         if verbosity >= 2:
 *             print("T = [{}..{}]".format(T.inf(), T.sup()))
 */
    __Pyx_TraceLine(599,0,__PYX_ERR(0, 599, __pyx_L1_error))
    __pyx_v_bound_found = (__pyx_f_12reachability_int_dist(__pyx_v_Tbak, __pyx_v_T) <= __pyx_v_epsilon);

    /* "reachability.pyx":600
 *                     and T.sup() < Tbak.sup())
 *         bound_found = int_dist(Tbak, T) <= epsilon
 *         if verbosity >= 2:             # <<<<<<<<<<<<<<
 *             print("T = [{}..{}]".format(T.inf(), T.sup()))
 * 
 */
    __Pyx_TraceLine(600,0,__PYX_ERR(0, 600, __pyx_L1_error))
    __pyx_t_9 = ((__pyx_v_verbosity >= 2) != 0);
    if (__pyx_t_9) {

      /* "reachability.pyx":601
 *         bound_found = int_dist(Tbak, T) <= epsilon
 *         if verbosity >= 2:
 *             print("T = [{}..{}]".format(T.inf(), T.sup()))             # <<<<<<<<<<<<<<
 * 
 *     if split:
 */
      __Pyx_TraceLine(601,0,__PYX_ERR(0, 601, __pyx_L1_error))
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_T, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_18 = PyFloat_FromDouble(__pyx_v_T.inf()); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_16 = PyFloat_FromDouble(__pyx_v_T.sup()); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_15 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_18, __pyx_t_16};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_18, __pyx_t_16};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (__pyx_t_15) {
          __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_15); __pyx_t_15 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_18);
        PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_7, __pyx_t_18);
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_7, __pyx_t_16);
        __pyx_t_18 = 0;
        __pyx_t_16 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 601, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "reachability.pyx":600
 *                     and T.sup() < Tbak.sup())
 *         bound_found = int_dist(Tbak, T) <= epsilon
 *         if verbosity >= 2:             # <<<<<<<<<<<<<<
 *             print("T = [{}..{}]".format(T.inf(), T.sup()))
 * 
 */
    }
  }
  __pyx_L5_break:;

  /* "reachability.pyx":603
 *             print("T = [{}..{}]".format(T.inf(), T.sup()))
 * 
 *     if split:             # <<<<<<<<<<<<<<
 *         Tu.inv_assign()
 *         Tu.add_assign(M)
 */
  __Pyx_TraceLine(603,0,__PYX_ERR(0, 603, __pyx_L1_error))
  __pyx_t_9 = (__pyx_v_split != 0);
  if (__pyx_t_9) {

    /* "reachability.pyx":604
 * 
 *     if split:
 *         Tu.inv_assign()             # <<<<<<<<<<<<<<
 *         Tu.add_assign(M)
 *         Tu.intersect_assign(Tbak)
 */
    __Pyx_TraceLine(604,0,__PYX_ERR(0, 604, __pyx_L1_error))
    __pyx_v_Tu.inv_assign();

    /* "reachability.pyx":605
 *     if split:
 *         Tu.inv_assign()
 *         Tu.add_assign(M)             # <<<<<<<<<<<<<<
 *         Tu.intersect_assign(Tbak)
 *         if verbosity >= 2:
 */
    __Pyx_TraceLine(605,0,__PYX_ERR(0, 605, __pyx_L1_error))
    (void)(__pyx_v_Tu.operator+=(__pyx_v_M));

    /* "reachability.pyx":606
 *         Tu.inv_assign()
 *         Tu.add_assign(M)
 *         Tu.intersect_assign(Tbak)             # <<<<<<<<<<<<<<
 *         if verbosity >= 2:
 *             print("splitting! [{}..{}] -> [{}..{}] + [{}..{}]".format(
 */
    __Pyx_TraceLine(606,0,__PYX_ERR(0, 606, __pyx_L1_error))
    __pyx_v_Tu.intersect_assign(__pyx_v_Tbak);

    /* "reachability.pyx":607
 *         Tu.add_assign(M)
 *         Tu.intersect_assign(Tbak)
 *         if verbosity >= 2:             # <<<<<<<<<<<<<<
 *             print("splitting! [{}..{}] -> [{}..{}] + [{}..{}]".format(
 *                 T0.inf(), T0.sup(),
 */
    __Pyx_TraceLine(607,0,__PYX_ERR(0, 607, __pyx_L1_error))
    __pyx_t_9 = ((__pyx_v_verbosity >= 2) != 0);
    if (__pyx_t_9) {

      /* "reachability.pyx":608
 *         Tu.intersect_assign(Tbak)
 *         if verbosity >= 2:
 *             print("splitting! [{}..{}] -> [{}..{}] + [{}..{}]".format(             # <<<<<<<<<<<<<<
 *                 T0.inf(), T0.sup(),
 *                 T.inf(), T.sup(),
 */
      __Pyx_TraceLine(608,0,__PYX_ERR(0, 608, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_splitting, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "reachability.pyx":609
 *         if verbosity >= 2:
 *             print("splitting! [{}..{}] -> [{}..{}] + [{}..{}]".format(
 *                 T0.inf(), T0.sup(),             # <<<<<<<<<<<<<<
 *                 T.inf(), T.sup(),
 *                 Tu.inf(), Tu.sup(),
 */
      __Pyx_TraceLine(609,0,__PYX_ERR(0, 609, __pyx_L1_error))
      __pyx_t_14 = PyFloat_FromDouble(__pyx_v_T0.inf()); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_16 = PyFloat_FromDouble(__pyx_v_T0.sup()); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);

      /* "reachability.pyx":610
 *             print("splitting! [{}..{}] -> [{}..{}] + [{}..{}]".format(
 *                 T0.inf(), T0.sup(),
 *                 T.inf(), T.sup(),             # <<<<<<<<<<<<<<
 *                 Tu.inf(), Tu.sup(),
 *             ))
 */
      __Pyx_TraceLine(610,0,__PYX_ERR(0, 610, __pyx_L1_error))
      __pyx_t_18 = PyFloat_FromDouble(__pyx_v_T.inf()); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_15 = PyFloat_FromDouble(__pyx_v_T.sup()); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);

      /* "reachability.pyx":611
 *                 T0.inf(), T0.sup(),
 *                 T.inf(), T.sup(),
 *                 Tu.inf(), Tu.sup(),             # <<<<<<<<<<<<<<
 *             ))
 *         detect_roots3(roots, f, fprime, T, epsilon)
 */
      __Pyx_TraceLine(611,0,__PYX_ERR(0, 611, __pyx_L1_error))
      __pyx_t_13 = PyFloat_FromDouble(__pyx_v_Tu.inf()); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = PyFloat_FromDouble(__pyx_v_Tu.sup()); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[7] = {__pyx_t_11, __pyx_t_14, __pyx_t_16, __pyx_t_18, __pyx_t_15, __pyx_t_13, __pyx_t_12};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[7] = {__pyx_t_11, __pyx_t_14, __pyx_t_16, __pyx_t_18, __pyx_t_15, __pyx_t_13, __pyx_t_12};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 6+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(6+__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_7, __pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_7, __pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_18);
        PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_7, __pyx_t_18);
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_7, __pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_7, __pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_10, 5+__pyx_t_7, __pyx_t_12);
        __pyx_t_14 = 0;
        __pyx_t_16 = 0;
        __pyx_t_18 = 0;
        __pyx_t_15 = 0;
        __pyx_t_13 = 0;
        __pyx_t_12 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "reachability.pyx":608
 *         Tu.intersect_assign(Tbak)
 *         if verbosity >= 2:
 *             print("splitting! [{}..{}] -> [{}..{}] + [{}..{}]".format(             # <<<<<<<<<<<<<<
 *                 T0.inf(), T0.sup(),
 *                 T.inf(), T.sup(),
 */
      __Pyx_TraceLine(608,0,__PYX_ERR(0, 608, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 608, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "reachability.pyx":607
 *         Tu.add_assign(M)
 *         Tu.intersect_assign(Tbak)
 *         if verbosity >= 2:             # <<<<<<<<<<<<<<
 *             print("splitting! [{}..{}] -> [{}..{}] + [{}..{}]".format(
 *                 T0.inf(), T0.sup(),
 */
    }

    /* "reachability.pyx":613
 *                 Tu.inf(), Tu.sup(),
 *             ))
 *         detect_roots3(roots, f, fprime, T, epsilon)             # <<<<<<<<<<<<<<
 *         detect_roots3(roots, f, fprime, Tu, epsilon)
 *         return
 */
    __Pyx_TraceLine(613,0,__PYX_ERR(0, 613, __pyx_L1_error))
    __pyx_t_20.__pyx_n = 1;
    __pyx_t_20.epsilon = __pyx_v_epsilon;
    __pyx_f_12reachability_detect_roots3(__pyx_v_roots, __pyx_v_f, __pyx_v_fprime, __pyx_v_T, &__pyx_t_20); 

    /* "reachability.pyx":614
 *             ))
 *         detect_roots3(roots, f, fprime, T, epsilon)
 *         detect_roots3(roots, f, fprime, Tu, epsilon)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __Pyx_TraceLine(614,0,__PYX_ERR(0, 614, __pyx_L1_error))
    __pyx_t_20.__pyx_n = 1;
    __pyx_t_20.epsilon = __pyx_v_epsilon;
    __pyx_f_12reachability_detect_roots3(__pyx_v_roots, __pyx_v_f, __pyx_v_fprime, __pyx_v_Tu, &__pyx_t_20); 

    /* "reachability.pyx":615
 *         detect_roots3(roots, f, fprime, T, epsilon)
 *         detect_roots3(roots, f, fprime, Tu, epsilon)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     if bound_found:
 */
    __Pyx_TraceLine(615,0,__PYX_ERR(0, 615, __pyx_L1_error))
    goto __pyx_L0;

    /* "reachability.pyx":603
 *             print("T = [{}..{}]".format(T.inf(), T.sup()))
 * 
 *     if split:             # <<<<<<<<<<<<<<
 *         Tu.inv_assign()
 *         Tu.add_assign(M)
 */
  }

  /* "reachability.pyx":617
 *         return
 * 
 *     if bound_found:             # <<<<<<<<<<<<<<
 *         # T is a subset of Tbak by construction
 *         # -- we check for strict contractiveness
 */
  __Pyx_TraceLine(617,0,__PYX_ERR(0, 617, __pyx_L1_error))
  __pyx_t_9 = (__pyx_v_bound_found != 0);
  if (__pyx_t_9) {

    /* "reachability.pyx":621
 *         # -- we check for strict contractiveness
 *         # Tbak.inf() <= T.inf() and and T.sup() <= Tbak.sup()
 *         if T0.inf() == T.inf() or T0.sup() == T.sup():             # <<<<<<<<<<<<<<
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 */
    __Pyx_TraceLine(621,0,__PYX_ERR(0, 621, __pyx_L1_error))
    __pyx_t_1 = ((__pyx_v_T0.inf() == __pyx_v_T.inf()) != 0);
    if (!__pyx_t_1) {
    } else {
      __pyx_t_9 = __pyx_t_1;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_T0.sup() == __pyx_v_T.sup()) != 0);
    __pyx_t_9 = __pyx_t_1;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_9) {

      /* "reachability.pyx":623
 *         if T0.inf() == T.inf() or T0.sup() == T.sup():
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:             # <<<<<<<<<<<<<<
 *                 print("root on boundary!")
 *         elif contractive:
 */
      __Pyx_TraceLine(623,0,__PYX_ERR(0, 623, __pyx_L1_error))
      __pyx_t_9 = ((__pyx_v_verbosity >= 1) != 0);
      if (__pyx_t_9) {

        /* "reachability.pyx":624
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 *                 print("root on boundary!")             # <<<<<<<<<<<<<<
 *         elif contractive:
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 */
        __Pyx_TraceLine(624,0,__PYX_ERR(0, 624, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 624, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "reachability.pyx":623
 *         if T0.inf() == T.inf() or T0.sup() == T.sup():
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:             # <<<<<<<<<<<<<<
 *                 print("root on boundary!")
 *         elif contractive:
 */
      }

      /* "reachability.pyx":621
 *         # -- we check for strict contractiveness
 *         # Tbak.inf() <= T.inf() and and T.sup() <= Tbak.sup()
 *         if T0.inf() == T.inf() or T0.sup() == T.sup():             # <<<<<<<<<<<<<<
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 */
      goto __pyx_L18;
    }

    /* "reachability.pyx":625
 *             if verbosity >= 1:
 *                 print("root on boundary!")
 *         elif contractive:             # <<<<<<<<<<<<<<
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 */
    __Pyx_TraceLine(625,0,__PYX_ERR(0, 625, __pyx_L1_error))
    __pyx_t_9 = (__pyx_v_contractive != 0);
    if (__pyx_t_9) {

      /* "reachability.pyx":627
 *         elif contractive:
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:             # <<<<<<<<<<<<<<
 *                 print("verified contractive!")
 *         else:
 */
      __Pyx_TraceLine(627,0,__PYX_ERR(0, 627, __pyx_L1_error))
      __pyx_t_9 = ((__pyx_v_verbosity >= 1) != 0);
      if (__pyx_t_9) {

        /* "reachability.pyx":628
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 *                 print("verified contractive!")             # <<<<<<<<<<<<<<
 *         else:
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 */
        __Pyx_TraceLine(628,0,__PYX_ERR(0, 628, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "reachability.pyx":627
 *         elif contractive:
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:             # <<<<<<<<<<<<<<
 *                 print("verified contractive!")
 *         else:
 */
      }

      /* "reachability.pyx":625
 *             if verbosity >= 1:
 *                 print("root on boundary!")
 *         elif contractive:             # <<<<<<<<<<<<<<
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 */
      goto __pyx_L18;
    }

    /* "reachability.pyx":631
 *         else:
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:             # <<<<<<<<<<<<<<
 *                 print("failed to verify contractive!")
 *         roots.push_back(T)
 */
    __Pyx_TraceLine(631,0,__PYX_ERR(0, 631, __pyx_L1_error))
    /*else*/ {
      __pyx_t_9 = ((__pyx_v_verbosity >= 1) != 0);
      if (__pyx_t_9) {

        /* "reachability.pyx":632
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 *                 print("failed to verify contractive!")             # <<<<<<<<<<<<<<
 *         roots.push_back(T)
 *         # elif T.width() > epsilon:
 */
        __Pyx_TraceLine(632,0,__PYX_ERR(0, 632, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "reachability.pyx":631
 *         else:
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:             # <<<<<<<<<<<<<<
 *                 print("failed to verify contractive!")
 *         roots.push_back(T)
 */
      }
    }
    __pyx_L18:;

    /* "reachability.pyx":633
 *             if verbosity >= 1:
 *                 print("failed to verify contractive!")
 *         roots.push_back(T)             # <<<<<<<<<<<<<<
 *         # elif T.width() > epsilon:
 *         #     # Bisect T into Tl and Tu
 */
    __Pyx_TraceLine(633,0,__PYX_ERR(0, 633, __pyx_L1_error))
    try {
      __pyx_v_roots.push_back(__pyx_v_T);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 633, __pyx_L1_error)
    }

    /* "reachability.pyx":617
 *         return
 * 
 *     if bound_found:             # <<<<<<<<<<<<<<
 *         # T is a subset of Tbak by construction
 *         # -- we check for strict contractiveness
 */
  }

  /* "reachability.pyx":547
 *     return [(r.inf(), r.sup()) for r in roots]
 * 
 * cdef void detect_roots3(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                         interval_time_fn f, interval_time_fn fprime,
 *                         Interval & T0,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_WriteUnraisable("reachability.detect_roots3", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "reachability.pyx":654
 *         #     print("stopping!")
 * 
 * cdef void detect_roots2(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                         interval_fn f, interval_fn fprime,
 *                         TaylorModelVec & tmv,
 */

static void __pyx_f_12reachability_detect_roots2(std::vector<flowstar::Interval>  &__pyx_v_roots, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_f, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_fprime, flowstar::TaylorModelVec &__pyx_v_tmv, std::vector<flowstar::Interval>  &__pyx_v_domain, struct __pyx_opt_args_12reachability_detect_roots2 *__pyx_optional_args) {
  double __pyx_v_epsilon = ((double)0.00001);
  flowstar::Interval __pyx_v_T0;
  flowstar::Interval __pyx_v_T;
  flowstar::Interval __pyx_v_Tbak;
  flowstar::Interval __pyx_v_M;
  flowstar::Interval __pyx_v_Tl;
  flowstar::Interval __pyx_v_Tu;
  bool __pyx_v_bound_found;
  bool __pyx_v_failed;
  bool __pyx_v_contractive;
  flowstar::Interval __pyx_v_fI;
  flowstar::Interval __pyx_v_fP;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  struct __pyx_opt_args_12reachability_detect_roots2 __pyx_t_4;
  __Pyx_RefNannySetupContext("detect_roots2", 0);
  __Pyx_TraceCall("detect_roots2", __pyx_f[0], 654, 0, __PYX_ERR(0, 654, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_epsilon = __pyx_optional_args->epsilon;
    }
  }

  /* "reachability.pyx":660
 *                         double epsilon=0.00001):
 *     cdef:
 *         Interval T0 = domain[0]             # <<<<<<<<<<<<<<
 *         Interval T = T0
 *         Interval Tbak
 */
  __Pyx_TraceLine(660,0,__PYX_ERR(0, 660, __pyx_L1_error))
  __pyx_v_T0 = (__pyx_v_domain[0]);

  /* "reachability.pyx":661
 *     cdef:
 *         Interval T0 = domain[0]
 *         Interval T = T0             # <<<<<<<<<<<<<<
 *         Interval Tbak
 *         Interval fT
 */
  __Pyx_TraceLine(661,0,__PYX_ERR(0, 661, __pyx_L1_error))
  __pyx_v_T = __pyx_v_T0;

  /* "reachability.pyx":668
 *         Interval Tl
 *         Interval Tu
 *         cbool bound_found = False             # <<<<<<<<<<<<<<
 *         cbool failed = False
 *         cbool contractive = False
 */
  __Pyx_TraceLine(668,0,__PYX_ERR(0, 668, __pyx_L1_error))
  __pyx_v_bound_found = 0;

  /* "reachability.pyx":669
 *         Interval Tu
 *         cbool bound_found = False
 *         cbool failed = False             # <<<<<<<<<<<<<<
 *         cbool contractive = False
 * 
 */
  __Pyx_TraceLine(669,0,__PYX_ERR(0, 669, __pyx_L1_error))
  __pyx_v_failed = 0;

  /* "reachability.pyx":670
 *         cbool bound_found = False
 *         cbool failed = False
 *         cbool contractive = False             # <<<<<<<<<<<<<<
 * 
 *     # print("T = [{}..{}]".format(T.inf(), T.sup()))
 */
  __Pyx_TraceLine(670,0,__PYX_ERR(0, 670, __pyx_L1_error))
  __pyx_v_contractive = 0;

  /* "reachability.pyx":673
 * 
 *     # print("T = [{}..{}]".format(T.inf(), T.sup()))
 *     while not (failed or bound_found):             # <<<<<<<<<<<<<<
 *         Tbak = T
 *         T.midpoint(M)
 */
  __Pyx_TraceLine(673,0,__PYX_ERR(0, 673, __pyx_L1_error))
  while (1) {
    __pyx_t_2 = (__pyx_v_failed != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_bound_found != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    __pyx_t_2 = ((!__pyx_t_1) != 0);
    if (!__pyx_t_2) break;

    /* "reachability.pyx":674
 *     # print("T = [{}..{}]".format(T.inf(), T.sup()))
 *     while not (failed or bound_found):
 *         Tbak = T             # <<<<<<<<<<<<<<
 *         T.midpoint(M)
 *         domain[0] = M
 */
    __Pyx_TraceLine(674,0,__PYX_ERR(0, 674, __pyx_L1_error))
    __pyx_v_Tbak = __pyx_v_T;

    /* "reachability.pyx":675
 *     while not (failed or bound_found):
 *         Tbak = T
 *         T.midpoint(M)             # <<<<<<<<<<<<<<
 *         domain[0] = M
 *         fI = call_f(f, tmv, domain)
 */
    __Pyx_TraceLine(675,0,__PYX_ERR(0, 675, __pyx_L1_error))
    __pyx_v_T.midpoint(__pyx_v_M);

    /* "reachability.pyx":676
 *         Tbak = T
 *         T.midpoint(M)
 *         domain[0] = M             # <<<<<<<<<<<<<<
 *         fI = call_f(f, tmv, domain)
 *         T.inv_assign()
 */
    __Pyx_TraceLine(676,0,__PYX_ERR(0, 676, __pyx_L1_error))
    (__pyx_v_domain[0]) = __pyx_v_M;

    /* "reachability.pyx":677
 *         T.midpoint(M)
 *         domain[0] = M
 *         fI = call_f(f, tmv, domain)             # <<<<<<<<<<<<<<
 *         T.inv_assign()
 *         T.add_assign(M)
 */
    __Pyx_TraceLine(677,0,__PYX_ERR(0, 677, __pyx_L1_error))
    __pyx_v_fI = __pyx_f_12reachability_call_f(__pyx_v_f, __pyx_v_tmv, __pyx_v_domain);

    /* "reachability.pyx":678
 *         domain[0] = M
 *         fI = call_f(f, tmv, domain)
 *         T.inv_assign()             # <<<<<<<<<<<<<<
 *         T.add_assign(M)
 *         domain[0] = T
 */
    __Pyx_TraceLine(678,0,__PYX_ERR(0, 678, __pyx_L1_error))
    __pyx_v_T.inv_assign();

    /* "reachability.pyx":679
 *         fI = call_f(f, tmv, domain)
 *         T.inv_assign()
 *         T.add_assign(M)             # <<<<<<<<<<<<<<
 *         domain[0] = T
 *         fP = call_f(fprime, tmv, domain)
 */
    __Pyx_TraceLine(679,0,__PYX_ERR(0, 679, __pyx_L1_error))
    (void)(__pyx_v_T.operator+=(__pyx_v_M));

    /* "reachability.pyx":680
 *         T.inv_assign()
 *         T.add_assign(M)
 *         domain[0] = T             # <<<<<<<<<<<<<<
 *         fP = call_f(fprime, tmv, domain)
 *         failed = not extdiv(T, fI, fP)
 */
    __Pyx_TraceLine(680,0,__PYX_ERR(0, 680, __pyx_L1_error))
    (__pyx_v_domain[0]) = __pyx_v_T;

    /* "reachability.pyx":681
 *         T.add_assign(M)
 *         domain[0] = T
 *         fP = call_f(fprime, tmv, domain)             # <<<<<<<<<<<<<<
 *         failed = not extdiv(T, fI, fP)
 *         if failed:
 */
    __Pyx_TraceLine(681,0,__PYX_ERR(0, 681, __pyx_L1_error))
    __pyx_v_fP = __pyx_f_12reachability_call_f(__pyx_v_fprime, __pyx_v_tmv, __pyx_v_domain);

    /* "reachability.pyx":682
 *         domain[0] = T
 *         fP = call_f(fprime, tmv, domain)
 *         failed = not extdiv(T, fI, fP)             # <<<<<<<<<<<<<<
 *         if failed:
 *             domain[0] = T0
 */
    __Pyx_TraceLine(682,0,__PYX_ERR(0, 682, __pyx_L1_error))
    __pyx_v_failed = (!(__pyx_f_12reachability_extdiv(__pyx_v_T, __pyx_v_fI, __pyx_v_fP) != 0));

    /* "reachability.pyx":683
 *         fP = call_f(fprime, tmv, domain)
 *         failed = not extdiv(T, fI, fP)
 *         if failed:             # <<<<<<<<<<<<<<
 *             domain[0] = T0
 *             return #  No roots here!
 */
    __Pyx_TraceLine(683,0,__PYX_ERR(0, 683, __pyx_L1_error))
    __pyx_t_2 = (__pyx_v_failed != 0);
    if (__pyx_t_2) {

      /* "reachability.pyx":684
 *         failed = not extdiv(T, fI, fP)
 *         if failed:
 *             domain[0] = T0             # <<<<<<<<<<<<<<
 *             return #  No roots here!
 *         T.inv_assign()
 */
      __Pyx_TraceLine(684,0,__PYX_ERR(0, 684, __pyx_L1_error))
      (__pyx_v_domain[0]) = __pyx_v_T0;

      /* "reachability.pyx":685
 *         if failed:
 *             domain[0] = T0
 *             return #  No roots here!             # <<<<<<<<<<<<<<
 *         T.inv_assign()
 *         T.add_assign(M)
 */
      __Pyx_TraceLine(685,0,__PYX_ERR(0, 685, __pyx_L1_error))
      goto __pyx_L0;

      /* "reachability.pyx":683
 *         fP = call_f(fprime, tmv, domain)
 *         failed = not extdiv(T, fI, fP)
 *         if failed:             # <<<<<<<<<<<<<<
 *             domain[0] = T0
 *             return #  No roots here!
 */
    }

    /* "reachability.pyx":686
 *             domain[0] = T0
 *             return #  No roots here!
 *         T.inv_assign()             # <<<<<<<<<<<<<<
 *         T.add_assign(M)
 *         T.intersect_assign(Tbak)
 */
    __Pyx_TraceLine(686,0,__PYX_ERR(0, 686, __pyx_L1_error))
    __pyx_v_T.inv_assign();

    /* "reachability.pyx":687
 *             return #  No roots here!
 *         T.inv_assign()
 *         T.add_assign(M)             # <<<<<<<<<<<<<<
 *         T.intersect_assign(Tbak)
 *         contractive = (contractive
 */
    __Pyx_TraceLine(687,0,__PYX_ERR(0, 687, __pyx_L1_error))
    (void)(__pyx_v_T.operator+=(__pyx_v_M));

    /* "reachability.pyx":688
 *         T.inv_assign()
 *         T.add_assign(M)
 *         T.intersect_assign(Tbak)             # <<<<<<<<<<<<<<
 *         contractive = (contractive
 *                     or Tbak.inf() < T.inf()
 */
    __Pyx_TraceLine(688,0,__PYX_ERR(0, 688, __pyx_L1_error))
    __pyx_v_T.intersect_assign(__pyx_v_Tbak);

    /* "reachability.pyx":689
 *         T.add_assign(M)
 *         T.intersect_assign(Tbak)
 *         contractive = (contractive             # <<<<<<<<<<<<<<
 *                     or Tbak.inf() < T.inf()
 *                     or T.sup() < Tbak.sup())
 */
    __Pyx_TraceLine(689,0,__PYX_ERR(0, 689, __pyx_L1_error))
    if (!__pyx_v_contractive) {
    } else {
      __pyx_t_3 = __pyx_v_contractive;
      goto __pyx_L8_bool_binop_done;
    }

    /* "reachability.pyx":690
 *         T.intersect_assign(Tbak)
 *         contractive = (contractive
 *                     or Tbak.inf() < T.inf()             # <<<<<<<<<<<<<<
 *                     or T.sup() < Tbak.sup())
 *         bound_found = int_dist(Tbak, T) <= epsilon
 */
    __Pyx_TraceLine(690,0,__PYX_ERR(0, 690, __pyx_L1_error))
    __pyx_t_2 = (__pyx_v_Tbak.inf() < __pyx_v_T.inf());
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }

    /* "reachability.pyx":691
 *         contractive = (contractive
 *                     or Tbak.inf() < T.inf()
 *                     or T.sup() < Tbak.sup())             # <<<<<<<<<<<<<<
 *         bound_found = int_dist(Tbak, T) <= epsilon
 *         # print("T = [{}..{}]".format(T.inf(), T.sup()))
 */
    __Pyx_TraceLine(691,0,__PYX_ERR(0, 691, __pyx_L1_error))
    __pyx_t_2 = (__pyx_v_T.sup() < __pyx_v_Tbak.sup());
    __pyx_t_3 = __pyx_t_2;
    __pyx_L8_bool_binop_done:;
    __pyx_v_contractive = __pyx_t_3;

    /* "reachability.pyx":692
 *                     or Tbak.inf() < T.inf()
 *                     or T.sup() < Tbak.sup())
 *         bound_found = int_dist(Tbak, T) <= epsilon             # <<<<<<<<<<<<<<
 *         # print("T = [{}..{}]".format(T.inf(), T.sup()))
 * 
 */
    __Pyx_TraceLine(692,0,__PYX_ERR(0, 692, __pyx_L1_error))
    __pyx_v_bound_found = (__pyx_f_12reachability_int_dist(__pyx_v_Tbak, __pyx_v_T) <= __pyx_v_epsilon);
  }

  /* "reachability.pyx":695
 *         # print("T = [{}..{}]".format(T.inf(), T.sup()))
 * 
 *     if bound_found:             # <<<<<<<<<<<<<<
 *         # T is a subset of Tbak by construction
 *         # -- we check for strict contractiveness
 */
  __Pyx_TraceLine(695,0,__PYX_ERR(0, 695, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_bound_found != 0);
  if (__pyx_t_2) {

    /* "reachability.pyx":699
 *         # -- we check for strict contractiveness
 *         # Tbak.inf() <= T.inf() and and T.sup() <= Tbak.sup()
 *         if contractive:             # <<<<<<<<<<<<<<
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             roots.push_back(T)
 */
    __Pyx_TraceLine(699,0,__PYX_ERR(0, 699, __pyx_L1_error))
    __pyx_t_2 = (__pyx_v_contractive != 0);
    if (__pyx_t_2) {

      /* "reachability.pyx":701
 *         if contractive:
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             roots.push_back(T)             # <<<<<<<<<<<<<<
 *         elif T.width() > epsilon:
 *             # Bisect T into Tl and Tu
 */
      __Pyx_TraceLine(701,0,__PYX_ERR(0, 701, __pyx_L1_error))
      try {
        __pyx_v_roots.push_back(__pyx_v_T);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 701, __pyx_L1_error)
      }

      /* "reachability.pyx":699
 *         # -- we check for strict contractiveness
 *         # Tbak.inf() <= T.inf() and and T.sup() <= Tbak.sup()
 *         if contractive:             # <<<<<<<<<<<<<<
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             roots.push_back(T)
 */
      goto __pyx_L12;
    }

    /* "reachability.pyx":702
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             roots.push_back(T)
 *         elif T.width() > epsilon:             # <<<<<<<<<<<<<<
 *             # Bisect T into Tl and Tu
 *             Tl.setInf(T)
 */
    __Pyx_TraceLine(702,0,__PYX_ERR(0, 702, __pyx_L1_error))
    __pyx_t_2 = ((__pyx_v_T.width() > __pyx_v_epsilon) != 0);
    if (__pyx_t_2) {

      /* "reachability.pyx":704
 *         elif T.width() > epsilon:
 *             # Bisect T into Tl and Tu
 *             Tl.setInf(T)             # <<<<<<<<<<<<<<
 *             Tl.setSup(M)
 *             Tu.setInf(M)
 */
      __Pyx_TraceLine(704,0,__PYX_ERR(0, 704, __pyx_L1_error))
      __pyx_v_Tl.setInf(__pyx_v_T);

      /* "reachability.pyx":705
 *             # Bisect T into Tl and Tu
 *             Tl.setInf(T)
 *             Tl.setSup(M)             # <<<<<<<<<<<<<<
 *             Tu.setInf(M)
 *             Tu.setSup(T)
 */
      __Pyx_TraceLine(705,0,__PYX_ERR(0, 705, __pyx_L1_error))
      __pyx_v_Tl.setSup(__pyx_v_M);

      /* "reachability.pyx":706
 *             Tl.setInf(T)
 *             Tl.setSup(M)
 *             Tu.setInf(M)             # <<<<<<<<<<<<<<
 *             Tu.setSup(T)
 *             # print("bisecting!: [{}..{}] -> [{}..{}] + [{}..{}]".format(
 */
      __Pyx_TraceLine(706,0,__PYX_ERR(0, 706, __pyx_L1_error))
      __pyx_v_Tu.setInf(__pyx_v_M);

      /* "reachability.pyx":707
 *             Tl.setSup(M)
 *             Tu.setInf(M)
 *             Tu.setSup(T)             # <<<<<<<<<<<<<<
 *             # print("bisecting!: [{}..{}] -> [{}..{}] + [{}..{}]".format(
 *             #     T.inf(), T.sup(),
 */
      __Pyx_TraceLine(707,0,__PYX_ERR(0, 707, __pyx_L1_error))
      __pyx_v_Tu.setSup(__pyx_v_T);

      /* "reachability.pyx":715
 * 
 *             # Add roots from each
 *             domain[0] = Tl             # <<<<<<<<<<<<<<
 *             detect_roots2(roots, f, fprime, tmv, domain, epsilon)
 *             domain[0] = Tu
 */
      __Pyx_TraceLine(715,0,__PYX_ERR(0, 715, __pyx_L1_error))
      (__pyx_v_domain[0]) = __pyx_v_Tl;

      /* "reachability.pyx":716
 *             # Add roots from each
 *             domain[0] = Tl
 *             detect_roots2(roots, f, fprime, tmv, domain, epsilon)             # <<<<<<<<<<<<<<
 *             domain[0] = Tu
 *             detect_roots2(roots, f, fprime, tmv, domain, epsilon)
 */
      __Pyx_TraceLine(716,0,__PYX_ERR(0, 716, __pyx_L1_error))
      __pyx_t_4.__pyx_n = 1;
      __pyx_t_4.epsilon = __pyx_v_epsilon;
      __pyx_f_12reachability_detect_roots2(__pyx_v_roots, __pyx_v_f, __pyx_v_fprime, __pyx_v_tmv, __pyx_v_domain, &__pyx_t_4); 

      /* "reachability.pyx":717
 *             domain[0] = Tl
 *             detect_roots2(roots, f, fprime, tmv, domain, epsilon)
 *             domain[0] = Tu             # <<<<<<<<<<<<<<
 *             detect_roots2(roots, f, fprime, tmv, domain, epsilon)
 *         # else:
 */
      __Pyx_TraceLine(717,0,__PYX_ERR(0, 717, __pyx_L1_error))
      (__pyx_v_domain[0]) = __pyx_v_Tu;

      /* "reachability.pyx":718
 *             detect_roots2(roots, f, fprime, tmv, domain, epsilon)
 *             domain[0] = Tu
 *             detect_roots2(roots, f, fprime, tmv, domain, epsilon)             # <<<<<<<<<<<<<<
 *         # else:
 *         #     print("stopping!")
 */
      __Pyx_TraceLine(718,0,__PYX_ERR(0, 718, __pyx_L1_error))
      __pyx_t_4.__pyx_n = 1;
      __pyx_t_4.epsilon = __pyx_v_epsilon;
      __pyx_f_12reachability_detect_roots2(__pyx_v_roots, __pyx_v_f, __pyx_v_fprime, __pyx_v_tmv, __pyx_v_domain, &__pyx_t_4); 

      /* "reachability.pyx":702
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             roots.push_back(T)
 *         elif T.width() > epsilon:             # <<<<<<<<<<<<<<
 *             # Bisect T into Tl and Tu
 *             Tl.setInf(T)
 */
    }
    __pyx_L12:;

    /* "reachability.pyx":695
 *         # print("T = [{}..{}]".format(T.inf(), T.sup()))
 * 
 *     if bound_found:             # <<<<<<<<<<<<<<
 *         # T is a subset of Tbak by construction
 *         # -- we check for strict contractiveness
 */
  }

  /* "reachability.pyx":722
 *         #     print("stopping!")
 * 
 *     domain[0] = T0             # <<<<<<<<<<<<<<
 * 
 * # Append result to roots
 */
  __Pyx_TraceLine(722,0,__PYX_ERR(0, 722, __pyx_L1_error))
  (__pyx_v_domain[0]) = __pyx_v_T0;

  /* "reachability.pyx":654
 *         #     print("stopping!")
 * 
 * cdef void detect_roots2(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                         interval_fn f, interval_fn fprime,
 *                         TaylorModelVec & tmv,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.detect_roots2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "reachability.pyx":725
 * 
 * # Append result to roots
 * cdef void detect_roots(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                        interval_fn f, interval_fn fprime,
 *                        TaylorModelVec & tmv,
 */

static void __pyx_f_12reachability_detect_roots(std::vector<flowstar::Interval>  &__pyx_v_roots, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_f, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_fprime, flowstar::TaylorModelVec &__pyx_v_tmv, std::vector<flowstar::Interval>  &__pyx_v_domain, struct __pyx_opt_args_12reachability_detect_roots *__pyx_optional_args) {
  double __pyx_v_epsilon = ((double)0.00001);
  double __pyx_v_theta = ((double)0.01);
  double __pyx_v_abs_inf = ((double)0.0001);
  double __pyx_v_nudge = ((double)0.001);
  flowstar::Interval __pyx_v_T0;
  double __pyx_v_tl;
  double __pyx_v_tu;
  flowstar::Interval __pyx_v_T;
  flowstar::Interval __pyx_v_fI;
  bool __pyx_v_res;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  struct __pyx_opt_args_12reachability_search_zero __pyx_t_4;
  __Pyx_TraceCall("detect_roots", __pyx_f[0], 725, 1, __PYX_ERR(0, 725, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_epsilon = __pyx_optional_args->epsilon;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_theta = __pyx_optional_args->theta;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_abs_inf = __pyx_optional_args->abs_inf;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_nudge = __pyx_optional_args->nudge;
          }
        }
      }
    }
  }

  /* "reachability.pyx":731
 *                        double epsilon=0.00001, double theta=0.01,
 *                        double abs_inf=0.0001, double nudge=0.001) nogil:
 *     cdef Interval T0 = domain[0]             # <<<<<<<<<<<<<<
 *     cdef double tl = T0.inf()
 *     cdef double tu = T0.sup()
 */
  __Pyx_TraceLine(731,1,__PYX_ERR(0, 731, __pyx_L1_error))
  __pyx_v_T0 = (__pyx_v_domain[0]);

  /* "reachability.pyx":732
 *                        double abs_inf=0.0001, double nudge=0.001) nogil:
 *     cdef Interval T0 = domain[0]
 *     cdef double tl = T0.inf()             # <<<<<<<<<<<<<<
 *     cdef double tu = T0.sup()
 *     cdef Interval T
 */
  __Pyx_TraceLine(732,1,__PYX_ERR(0, 732, __pyx_L1_error))
  __pyx_v_tl = __pyx_v_T0.inf();

  /* "reachability.pyx":733
 *     cdef Interval T0 = domain[0]
 *     cdef double tl = T0.inf()
 *     cdef double tu = T0.sup()             # <<<<<<<<<<<<<<
 *     cdef Interval T
 *     cdef Interval fI
 */
  __Pyx_TraceLine(733,1,__PYX_ERR(0, 733, __pyx_L1_error))
  __pyx_v_tu = __pyx_v_T0.sup();

  /* "reachability.pyx":738
 *     cdef Interval fprimeI
 * 
 *     while tl <= tu:             # <<<<<<<<<<<<<<
 *         T.setInf(tl)
 *         T.setSup(tu)
 */
  __Pyx_TraceLine(738,1,__PYX_ERR(0, 738, __pyx_L1_error))
  while (1) {
    __pyx_t_1 = ((__pyx_v_tl <= __pyx_v_tu) != 0);
    if (!__pyx_t_1) break;

    /* "reachability.pyx":739
 * 
 *     while tl <= tu:
 *         T.setInf(tl)             # <<<<<<<<<<<<<<
 *         T.setSup(tu)
 * 
 */
    __Pyx_TraceLine(739,1,__PYX_ERR(0, 739, __pyx_L1_error))
    __pyx_v_T.setInf(__pyx_v_tl);

    /* "reachability.pyx":740
 *     while tl <= tu:
 *         T.setInf(tl)
 *         T.setSup(tu)             # <<<<<<<<<<<<<<
 * 
 *         # Terminatre prematurly if we are past the root
 */
    __Pyx_TraceLine(740,1,__PYX_ERR(0, 740, __pyx_L1_error))
    __pyx_v_T.setSup(__pyx_v_tu);

    /* "reachability.pyx":743
 * 
 *         # Terminatre prematurly if we are past the root
 *         domain[0] = T             # <<<<<<<<<<<<<<
 *         fI = call_f(f, tmv, domain)
 *         domain[0] = T0
 */
    __Pyx_TraceLine(743,1,__PYX_ERR(0, 743, __pyx_L1_error))
    (__pyx_v_domain[0]) = __pyx_v_T;

    /* "reachability.pyx":744
 *         # Terminatre prematurly if we are past the root
 *         domain[0] = T
 *         fI = call_f(f, tmv, domain)             # <<<<<<<<<<<<<<
 *         domain[0] = T0
 *         if 0 < fI.inf() or fI.sup() < 0:
 */
    __Pyx_TraceLine(744,1,__PYX_ERR(0, 744, __pyx_L1_error))
    __pyx_v_fI = __pyx_f_12reachability_call_f(__pyx_v_f, __pyx_v_tmv, __pyx_v_domain);

    /* "reachability.pyx":745
 *         domain[0] = T
 *         fI = call_f(f, tmv, domain)
 *         domain[0] = T0             # <<<<<<<<<<<<<<
 *         if 0 < fI.inf() or fI.sup() < 0:
 *             # print("skipping [{}..{}] given fI = [{}..{}]".format(T.inf(), T.sup(), fI.inf(), fI.sup()))
 */
    __Pyx_TraceLine(745,1,__PYX_ERR(0, 745, __pyx_L1_error))
    (__pyx_v_domain[0]) = __pyx_v_T0;

    /* "reachability.pyx":746
 *         fI = call_f(f, tmv, domain)
 *         domain[0] = T0
 *         if 0 < fI.inf() or fI.sup() < 0:             # <<<<<<<<<<<<<<
 *             # print("skipping [{}..{}] given fI = [{}..{}]".format(T.inf(), T.sup(), fI.inf(), fI.sup()))
 *             return
 */
    __Pyx_TraceLine(746,1,__PYX_ERR(0, 746, __pyx_L1_error))
    __pyx_t_2 = ((0.0 < __pyx_v_fI.inf()) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_fI.sup() < 0.0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "reachability.pyx":748
 *         if 0 < fI.inf() or fI.sup() < 0:
 *             # print("skipping [{}..{}] given fI = [{}..{}]".format(T.inf(), T.sup(), fI.inf(), fI.sup()))
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # Isolate root
 */
      __Pyx_TraceLine(748,1,__PYX_ERR(0, 748, __pyx_L1_error))
      goto __pyx_L0;

      /* "reachability.pyx":746
 *         fI = call_f(f, tmv, domain)
 *         domain[0] = T0
 *         if 0 < fI.inf() or fI.sup() < 0:             # <<<<<<<<<<<<<<
 *             # print("skipping [{}..{}] given fI = [{}..{}]".format(T.inf(), T.sup(), fI.inf(), fI.sup()))
 *             return
 */
    }

    /* "reachability.pyx":751
 * 
 *         # Isolate root
 *         res = search_zero(T, f, fprime, tmv, domain,             # <<<<<<<<<<<<<<
 *                           epsilon, theta, abs_inf)
 *         domain[0] = T0
 */
    __Pyx_TraceLine(751,1,__PYX_ERR(0, 751, __pyx_L1_error))
    __pyx_t_4.__pyx_n = 3;
    __pyx_t_4.epsilon = __pyx_v_epsilon;
    __pyx_t_4.theta = __pyx_v_theta;
    __pyx_t_4.abs_inf = __pyx_v_abs_inf;
    __pyx_t_3 = __pyx_f_12reachability_search_zero(__pyx_v_T, __pyx_v_f, __pyx_v_fprime, __pyx_v_tmv, __pyx_v_domain, &__pyx_t_4); 
    __pyx_v_res = __pyx_t_3;

    /* "reachability.pyx":753
 *         res = search_zero(T, f, fprime, tmv, domain,
 *                           epsilon, theta, abs_inf)
 *         domain[0] = T0             # <<<<<<<<<<<<<<
 * 
 *         # Add root to list or stop
 */
    __Pyx_TraceLine(753,1,__PYX_ERR(0, 753, __pyx_L1_error))
    (__pyx_v_domain[0]) = __pyx_v_T0;

    /* "reachability.pyx":756
 * 
 *         # Add root to list or stop
 *         if res:             # <<<<<<<<<<<<<<
 *             # print("got back [{}..{}]".format(T.inf(), T.sup()))
 *             roots.push_back(T)
 */
    __Pyx_TraceLine(756,1,__PYX_ERR(0, 756, __pyx_L1_error))
    __pyx_t_1 = (__pyx_v_res != 0);
    if (__pyx_t_1) {

      /* "reachability.pyx":758
 *         if res:
 *             # print("got back [{}..{}]".format(T.inf(), T.sup()))
 *             roots.push_back(T)             # <<<<<<<<<<<<<<
 *             tl = tu + nudge
 *         else:
 */
      __Pyx_TraceLine(758,1,__PYX_ERR(0, 758, __pyx_L1_error))
      try {
        __pyx_v_roots.push_back(__pyx_v_T);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 758, __pyx_L1_error)
      }

      /* "reachability.pyx":759
 *             # print("got back [{}..{}]".format(T.inf(), T.sup()))
 *             roots.push_back(T)
 *             tl = tu + nudge             # <<<<<<<<<<<<<<
 *         else:
 *             return
 */
      __Pyx_TraceLine(759,1,__PYX_ERR(0, 759, __pyx_L1_error))
      __pyx_v_tl = (__pyx_v_tu + __pyx_v_nudge);

      /* "reachability.pyx":756
 * 
 *         # Add root to list or stop
 *         if res:             # <<<<<<<<<<<<<<
 *             # print("got back [{}..{}]".format(T.inf(), T.sup()))
 *             roots.push_back(T)
 */
      goto __pyx_L8;
    }

    /* "reachability.pyx":761
 *             tl = tu + nudge
 *         else:
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(761,1,__PYX_ERR(0, 761, __pyx_L1_error))
    /*else*/ {
      goto __pyx_L0;
    }
    __pyx_L8:;
  }

  /* "reachability.pyx":725
 * 
 * # Append result to roots
 * cdef void detect_roots(vector[Interval] & roots,             # <<<<<<<<<<<<<<
 *                        interval_fn f, interval_fn fprime,
 *                        TaylorModelVec & tmv,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.detect_roots", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "reachability.pyx":766
 * cdef class Reach:
 *     # initials :: [(lower, upper)]
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */

/* Python wrapper */
static int __pyx_pw_12reachability_5Reach_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_12reachability_5Reach_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_odes = 0;
  PyObject *__pyx_v_initials = 0;
  PyObject *__pyx_v_time = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_precondition = 0;
  PyObject *__pyx_v_order = 0;
  PyObject *__pyx_v_orders = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_integrationScheme = 0;
  PyObject *__pyx_v_cutoff_threshold = 0;
  PyObject *__pyx_v_estimation = 0;
  PyObject *__pyx_v_max_remainder_queue = 0;
  PyObject *__pyx_v_maxNumSteps = 0;
  PyObject *__pyx_v_vars = 0;
  PyObject *__pyx_v_run = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_odes,&__pyx_n_s_initials,&__pyx_n_s_time,&__pyx_n_s_step,&__pyx_n_s_precondition,&__pyx_n_s_order,&__pyx_n_s_orders,&__pyx_n_s_verbose,&__pyx_n_s_integrationScheme,&__pyx_n_s_cutoff_threshold,&__pyx_n_s_estimation,&__pyx_n_s_max_remainder_queue,&__pyx_n_s_maxNumSteps,&__pyx_n_s_vars,&__pyx_n_s_run,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_float_0_01);
    values[4] = ((PyObject *)__pyx_int_0);
    values[5] = ((PyObject *)__pyx_int_2);

    /* "reachability.pyx":774
 *         precondition=0,
 *         order=2,
 *         orders=None,             # <<<<<<<<<<<<<<
 *         verbose=True,
 *         integrationScheme=2,
 */
    values[6] = ((PyObject *)Py_None);

    /* "reachability.pyx":775
 *         order=2,
 *         orders=None,
 *         verbose=True,             # <<<<<<<<<<<<<<
 *         integrationScheme=2,
 *         cutoff_threshold=1e-7,
 */
    values[7] = ((PyObject *)Py_True);
    values[8] = ((PyObject *)__pyx_int_2);
    values[9] = ((PyObject *)__pyx_float_1eneg_7);
    values[10] = ((PyObject *)__pyx_float_1eneg_3);
    values[11] = ((PyObject *)__pyx_int_200);
    values[12] = ((PyObject *)__pyx_int_100);

    /* "reachability.pyx":781
 *         max_remainder_queue=200,
 *         maxNumSteps=100,
 *         vars=None,             # <<<<<<<<<<<<<<
 *         run=True):
 *         cdef ContinuousReachability * C = &self.c_reach
 */
    values[13] = ((PyObject *)Py_None);

    /* "reachability.pyx":782
 *         maxNumSteps=100,
 *         vars=None,
 *         run=True):             # <<<<<<<<<<<<<<
 *         cdef ContinuousReachability * C = &self.c_reach
 *         self.ran = False
 */
    values[14] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_odes)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 15, 1); __PYX_ERR(0, 766, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 15, 2); __PYX_ERR(0, 766, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_precondition);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orders);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_integrationScheme);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cutoff_threshold);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_estimation);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_remainder_queue);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxNumSteps);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vars);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_run);
          if (value) { values[14] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 766, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_odes = values[0];
    __pyx_v_initials = values[1];
    __pyx_v_time = values[2];
    __pyx_v_step = values[3];
    __pyx_v_precondition = values[4];
    __pyx_v_order = values[5];
    __pyx_v_orders = values[6];
    __pyx_v_verbose = values[7];
    __pyx_v_integrationScheme = values[8];
    __pyx_v_cutoff_threshold = values[9];
    __pyx_v_estimation = values[10];
    __pyx_v_max_remainder_queue = values[11];
    __pyx_v_maxNumSteps = values[12];
    __pyx_v_vars = values[13];
    __pyx_v_run = values[14];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 766, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_5Reach___cinit__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_odes, __pyx_v_initials, __pyx_v_time, __pyx_v_step, __pyx_v_precondition, __pyx_v_order, __pyx_v_orders, __pyx_v_verbose, __pyx_v_integrationScheme, __pyx_v_cutoff_threshold, __pyx_v_estimation, __pyx_v_max_remainder_queue, __pyx_v_maxNumSteps, __pyx_v_vars, __pyx_v_run);

  /* "reachability.pyx":766
 * cdef class Reach:
 *     # initials :: [(lower, upper)]
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_12reachability_5Reach_9__cinit___2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "reachability.pyx":835
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */

static PyObject *__pyx_pf_12reachability_5Reach_9__cinit___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *)__pyx_tp_new_12reachability___pyx_scope_struct_6_genexpr(__pyx_ptype_12reachability___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 835, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_12reachability_5Reach_9__cinit___2generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_cinit___locals_genexpr, __pyx_n_s_reachability); if (unlikely(!gen)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.Reach.__cinit__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_12reachability_5Reach_9__cinit___2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 835, 0, __PYX_ERR(0, 835, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 835, __pyx_L1_error)

  /* "reachability.pyx":836
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)             # <<<<<<<<<<<<<<
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)
 */
  __Pyx_TraceLine(836,0,__PYX_ERR(0, 836, __pyx_L1_error))
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) { __Pyx_RaiseClosureNameError("orders"); __PYX_ERR(0, 836, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 836, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 836, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 836, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 836, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "reachability.pyx":835
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */
    __Pyx_TraceLine(835,0,__PYX_ERR(0, 835, __pyx_L1_error))
    __pyx_t_5 = PyTuple_Check(__pyx_cur_scope->__pyx_v_order); 
    if ((__pyx_t_5 != 0)) {
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_order, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order);
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_order;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 835, __pyx_L1_error)

    /* "reachability.pyx":836
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)             # <<<<<<<<<<<<<<
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)
 */
    __Pyx_TraceLine(836,0,__PYX_ERR(0, 836, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "reachability.pyx":835
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_12reachability_5Reach_9__cinit___5generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "reachability.pyx":837
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */

static PyObject *__pyx_pf_12reachability_5Reach_9__cinit___3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *)__pyx_tp_new_12reachability___pyx_scope_struct_7_genexpr(__pyx_ptype_12reachability___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 837, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_12reachability_5Reach_9__cinit___5generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_cinit___locals_genexpr, __pyx_n_s_reachability); if (unlikely(!gen)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.Reach.__cinit__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_12reachability_5Reach_9__cinit___5generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __Pyx_TraceCall("genexpr", __pyx_f[0], 837, 0, __PYX_ERR(0, 837, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 837, __pyx_L1_error)

  /* "reachability.pyx":838
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)             # <<<<<<<<<<<<<<
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 */
  __Pyx_TraceLine(838,0,__PYX_ERR(0, 838, __pyx_L1_error))
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) { __Pyx_RaiseClosureNameError("orders"); __PYX_ERR(0, 838, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 838, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 838, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 838, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 838, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "reachability.pyx":837
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */
    __Pyx_TraceLine(837,0,__PYX_ERR(0, 837, __pyx_L1_error))
    __pyx_t_5 = PyTuple_Check(__pyx_cur_scope->__pyx_v_order); 
    if ((__pyx_t_5 != 0)) {
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_order, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
    } else {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order);
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_order;
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 837, __pyx_L1_error)

    /* "reachability.pyx":838
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)             # <<<<<<<<<<<<<<
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 */
    __Pyx_TraceLine(838,0,__PYX_ERR(0, 838, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "reachability.pyx":837
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":766
 * cdef class Reach:
 *     # initials :: [(lower, upper)]
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */

static int __pyx_pf_12reachability_5Reach___cinit__(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_odes, PyObject *__pyx_v_initials, PyObject *__pyx_v_time, PyObject *__pyx_v_step, PyObject *__pyx_v_precondition, PyObject *__pyx_v_order, PyObject *__pyx_v_orders, PyObject *__pyx_v_verbose, PyObject *__pyx_v_integrationScheme, PyObject *__pyx_v_cutoff_threshold, PyObject *__pyx_v_estimation, PyObject *__pyx_v_max_remainder_queue, PyObject *__pyx_v_maxNumSteps, PyObject *__pyx_v_vars, PyObject *__pyx_v_run) {
  struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *__pyx_cur_scope;
  flowstar::ContinuousReachability *__pyx_v_C;
  std::vector<flowstar::TaylorModel>  __pyx_v_odes_tms;
  PyObject *__pyx_v_ode = NULL;
  flowstar::TaylorModelVec __pyx_v_odes_tmv;
  std::vector<flowstar::Interval>  __pyx_v_initials_vect;
  PyObject *__pyx_v_initial = NULL;
  flowstar::Interval __pyx_v_zero_int;
  std::vector<flowstar::Flowpipe>  __pyx_v_initials_fpvect;
  PyObject *__pyx_v_step_lo = NULL;
  PyObject *__pyx_v_step_hi = NULL;
  PyObject *__pyx_v_order_lo = NULL;
  PyObject *__pyx_v_order_hi = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_x = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  double __pyx_t_15;
  bool __pyx_t_16;
  int __pyx_t_17;
  double __pyx_t_18;
  std::string __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *)__pyx_tp_new_12reachability___pyx_scope_struct_5___cinit__(__pyx_ptype_12reachability___pyx_scope_struct_5___cinit__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 766, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 766, 0, __PYX_ERR(0, 766, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_orders = __pyx_v_orders;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_orders);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_orders);
  __Pyx_INCREF(__pyx_v_order);
  __Pyx_INCREF(__pyx_v_vars);

  /* "reachability.pyx":783
 *         vars=None,
 *         run=True):
 *         cdef ContinuousReachability * C = &self.c_reach             # <<<<<<<<<<<<<<
 *         self.ran = False
 *         self.prepared = False
 */
  __Pyx_TraceLine(783,0,__PYX_ERR(0, 783, __pyx_L1_error))
  __pyx_v_C = (&__pyx_v_self->c_reach);

  /* "reachability.pyx":784
 *         run=True):
 *         cdef ContinuousReachability * C = &self.c_reach
 *         self.ran = False             # <<<<<<<<<<<<<<
 *         self.prepared = False
 *         self.result = 0
 */
  __Pyx_TraceLine(784,0,__PYX_ERR(0, 784, __pyx_L1_error))
  __pyx_v_self->ran = 0;

  /* "reachability.pyx":785
 *         cdef ContinuousReachability * C = &self.c_reach
 *         self.ran = False
 *         self.prepared = False             # <<<<<<<<<<<<<<
 *         self.result = 0
 * 
 */
  __Pyx_TraceLine(785,0,__PYX_ERR(0, 785, __pyx_L1_error))
  __pyx_v_self->prepared = 0;

  /* "reachability.pyx":786
 *         self.ran = False
 *         self.prepared = False
 *         self.result = 0             # <<<<<<<<<<<<<<
 * 
 *         # --- Creating the continuous system ---
 */
  __Pyx_TraceLine(786,0,__PYX_ERR(0, 786, __pyx_L1_error))
  __pyx_v_self->result = 0;

  /* "reachability.pyx":789
 * 
 *         # --- Creating the continuous system ---
 *         assert len(odes) == len(initials)             # <<<<<<<<<<<<<<
 *         assert len(odes) > 0
 * 
 */
  __Pyx_TraceLine(789,0,__PYX_ERR(0, 789, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_Length(__pyx_v_odes); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 789, __pyx_L1_error)
    __pyx_t_2 = PyObject_Length(__pyx_v_initials); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 789, __pyx_L1_error)
    if (unlikely(!((__pyx_t_1 == __pyx_t_2) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 789, __pyx_L1_error)
    }
  }
  #endif

  /* "reachability.pyx":790
 *         # --- Creating the continuous system ---
 *         assert len(odes) == len(initials)
 *         assert len(odes) > 0             # <<<<<<<<<<<<<<
 * 
 *         if vars is None:
 */
  __Pyx_TraceLine(790,0,__PYX_ERR(0, 790, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyObject_Length(__pyx_v_odes); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 790, __pyx_L1_error)
    if (unlikely(!((__pyx_t_2 > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 790, __pyx_L1_error)
    }
  }
  #endif

  /* "reachability.pyx":792
 *         assert len(odes) > 0
 * 
 *         if vars is None:             # <<<<<<<<<<<<<<
 *             vars = [str(x) for x in odes[0].parent().gens()]
 * 
 */
  __Pyx_TraceLine(792,0,__PYX_ERR(0, 792, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_vars == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":793
 * 
 *         if vars is None:
 *             vars = [str(x) for x in odes[0].parent().gens()]             # <<<<<<<<<<<<<<
 * 
 *         assert len(vars) == len(odes)
 */
    __Pyx_TraceLine(793,0,__PYX_ERR(0, 793, __pyx_L1_error))
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_odes, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_parent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_8) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 793, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_gens); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 793, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_9 = __pyx_t_6; __Pyx_INCREF(__pyx_t_9); __pyx_t_2 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 793, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 793, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_9, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 793, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 793, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_9, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 793, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_10(__pyx_t_9);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 793, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 793, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_vars, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "reachability.pyx":792
 *         assert len(odes) > 0
 * 
 *         if vars is None:             # <<<<<<<<<<<<<<
 *             vars = [str(x) for x in odes[0].parent().gens()]
 * 
 */
  }

  /* "reachability.pyx":795
 *             vars = [str(x) for x in odes[0].parent().gens()]
 * 
 *         assert len(vars) == len(odes)             # <<<<<<<<<<<<<<
 * 
 *         # Create Taylor Models for polynomials
 */
  __Pyx_TraceLine(795,0,__PYX_ERR(0, 795, __pyx_L1_error))
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyObject_Length(__pyx_v_vars); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 795, __pyx_L1_error)
    __pyx_t_1 = PyObject_Length(__pyx_v_odes); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 795, __pyx_L1_error)
    if (unlikely(!((__pyx_t_2 == __pyx_t_1) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 795, __pyx_L1_error)
    }
  }
  #endif

  /* "reachability.pyx":799
 *         # Create Taylor Models for polynomials
 *         cdef vector[TaylorModel] odes_tms
 *         for ode in odes:             # <<<<<<<<<<<<<<
 *             odes_tms.push_back(TaylorModel(Poly(ode).c_poly))
 * 
 */
  __Pyx_TraceLine(799,0,__PYX_ERR(0, 799, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_odes)) || PyTuple_CheckExact(__pyx_v_odes)) {
    __pyx_t_5 = __pyx_v_odes; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_odes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 799, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_9); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 799, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_9); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 799, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_10(__pyx_t_5);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 799, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_ode, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "reachability.pyx":800
 *         cdef vector[TaylorModel] odes_tms
 *         for ode in odes:
 *             odes_tms.push_back(TaylorModel(Poly(ode).c_poly))             # <<<<<<<<<<<<<<
 * 
 *         cdef TaylorModelVec odes_tmv = TaylorModelVec(odes_tms)
 */
    __Pyx_TraceLine(800,0,__PYX_ERR(0, 800, __pyx_L1_error))
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_v_ode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    try {
      __pyx_v_odes_tms.push_back(flowstar::TaylorModel(((struct __pyx_obj_12reachability_Poly *)__pyx_t_9)->c_poly));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 800, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "reachability.pyx":799
 *         # Create Taylor Models for polynomials
 *         cdef vector[TaylorModel] odes_tms
 *         for ode in odes:             # <<<<<<<<<<<<<<
 *             odes_tms.push_back(TaylorModel(Poly(ode).c_poly))
 * 
 */
    __Pyx_TraceLine(799,0,__PYX_ERR(0, 799, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "reachability.pyx":802
 *             odes_tms.push_back(TaylorModel(Poly(ode).c_poly))
 * 
 *         cdef TaylorModelVec odes_tmv = TaylorModelVec(odes_tms)             # <<<<<<<<<<<<<<
 * 
 *         # Create initial conditions
 */
  __Pyx_TraceLine(802,0,__PYX_ERR(0, 802, __pyx_L1_error))
  __pyx_v_odes_tmv = flowstar::TaylorModelVec(__pyx_v_odes_tms);

  /* "reachability.pyx":806
 *         # Create initial conditions
 *         cdef vector[Interval] initials_vect
 *         for initial in initials:             # <<<<<<<<<<<<<<
 *             initials_vect.push_back(_interval(initial))
 * 
 */
  __Pyx_TraceLine(806,0,__PYX_ERR(0, 806, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_initials)) || PyTuple_CheckExact(__pyx_v_initials)) {
    __pyx_t_5 = __pyx_v_initials; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_initials); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 806, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_9); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 806, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_9); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 806, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_10(__pyx_t_5);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 806, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_initial, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "reachability.pyx":807
 *         cdef vector[Interval] initials_vect
 *         for initial in initials:
 *             initials_vect.push_back(_interval(initial))             # <<<<<<<<<<<<<<
 * 
 *         cdef Interval zero_int
 */
    __Pyx_TraceLine(807,0,__PYX_ERR(0, 807, __pyx_L1_error))
    try {
      __pyx_v_initials_vect.push_back(__pyx_f_12reachability__interval(__pyx_v_initial));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 807, __pyx_L1_error)
    }

    /* "reachability.pyx":806
 *         # Create initial conditions
 *         cdef vector[Interval] initials_vect
 *         for initial in initials:             # <<<<<<<<<<<<<<
 *             initials_vect.push_back(_interval(initial))
 * 
 */
    __Pyx_TraceLine(806,0,__PYX_ERR(0, 806, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "reachability.pyx":811
 *         cdef Interval zero_int
 *         cdef vector[Flowpipe] initials_fpvect
 *         initials_fpvect.push_back(Flowpipe(initials_vect, zero_int))             # <<<<<<<<<<<<<<
 * 
 *         # Create system object
 */
  __Pyx_TraceLine(811,0,__PYX_ERR(0, 811, __pyx_L1_error))
  try {
    __pyx_v_initials_fpvect.push_back(flowstar::Flowpipe(__pyx_v_initials_vect, __pyx_v_zero_int));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 811, __pyx_L1_error)
  }

  /* "reachability.pyx":814
 * 
 *         # Create system object
 *         C.system = ContinuousSystem(odes_tmv, initials_fpvect)             # <<<<<<<<<<<<<<
 * 
 *         # === Set properties ===
 */
  __Pyx_TraceLine(814,0,__PYX_ERR(0, 814, __pyx_L1_error))
  __pyx_v_C->system = flowstar::ContinuousSystem(__pyx_v_odes_tmv, __pyx_v_initials_fpvect);

  /* "reachability.pyx":819
 * 
 *         # --- Steps
 *         try:             # <<<<<<<<<<<<<<
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True
 */
  __Pyx_TraceLine(819,0,__PYX_ERR(0, 819, __pyx_L10_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_13);
    /*try:*/ {

      /* "reachability.pyx":820
 *         # --- Steps
 *         try:
 *             (step_lo, step_hi) = step             # <<<<<<<<<<<<<<
 *             C.bAdaptiveSteps = True
 *         except:
 */
      __Pyx_TraceLine(820,0,__PYX_ERR(0, 820, __pyx_L10_error))
      if ((likely(PyTuple_CheckExact(__pyx_v_step))) || (PyList_CheckExact(__pyx_v_step))) {
        PyObject* sequence = __pyx_v_step;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 820, __pyx_L10_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_9);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 820, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 820, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_v_step); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 820, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_14 = Py_TYPE(__pyx_t_6)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_14(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L16_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_9 = __pyx_t_14(__pyx_t_6); if (unlikely(!__pyx_t_9)) goto __pyx_L16_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_6), 2) < 0) __PYX_ERR(0, 820, __pyx_L10_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L17_unpacking_done;
        __pyx_L16_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 820, __pyx_L10_error)
        __pyx_L17_unpacking_done:;
      }
      __pyx_v_step_lo = __pyx_t_5;
      __pyx_t_5 = 0;
      __pyx_v_step_hi = __pyx_t_9;
      __pyx_t_9 = 0;

      /* "reachability.pyx":821
 *         try:
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True             # <<<<<<<<<<<<<<
 *         except:
 *             step_lo = step_hi = step
 */
      __Pyx_TraceLine(821,0,__PYX_ERR(0, 821, __pyx_L10_error))
      __pyx_v_C->bAdaptiveSteps = 1;

      /* "reachability.pyx":819
 * 
 *         # --- Steps
 *         try:             # <<<<<<<<<<<<<<
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True
 */
    }
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    goto __pyx_L15_try_end;
    __pyx_L10_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "reachability.pyx":822
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True
 *         except:             # <<<<<<<<<<<<<<
 *             step_lo = step_hi = step
 *             C.bAdaptiveSteps = False
 */
    __Pyx_TraceLine(822,0,__PYX_ERR(0, 822, __pyx_L12_except_error))
    /*except:*/ {
      __Pyx_AddTraceback("reachability.Reach.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 822, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "reachability.pyx":823
 *             C.bAdaptiveSteps = True
 *         except:
 *             step_lo = step_hi = step             # <<<<<<<<<<<<<<
 *             C.bAdaptiveSteps = False
 *         C.miniStep = <double>step_lo
 */
      __Pyx_TraceLine(823,0,__PYX_ERR(0, 823, __pyx_L12_except_error))
      __Pyx_INCREF(__pyx_v_step);
      __Pyx_XDECREF_SET(__pyx_v_step_lo, __pyx_v_step);
      __Pyx_INCREF(__pyx_v_step);
      __Pyx_XDECREF_SET(__pyx_v_step_hi, __pyx_v_step);

      /* "reachability.pyx":824
 *         except:
 *             step_lo = step_hi = step
 *             C.bAdaptiveSteps = False             # <<<<<<<<<<<<<<
 *         C.miniStep = <double>step_lo
 *         C.step = <double>step_hi
 */
      __Pyx_TraceLine(824,0,__PYX_ERR(0, 824, __pyx_L12_except_error))
      __pyx_v_C->bAdaptiveSteps = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L11_exception_handled;
    }
    __pyx_L12_except_error:;

    /* "reachability.pyx":819
 * 
 *         # --- Steps
 *         try:             # <<<<<<<<<<<<<<
 *             (step_lo, step_hi) = step
 *             C.bAdaptiveSteps = True
 */
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    goto __pyx_L1_error;
    __pyx_L11_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
    __pyx_L15_try_end:;
  }

  /* "reachability.pyx":825
 *             step_lo = step_hi = step
 *             C.bAdaptiveSteps = False
 *         C.miniStep = <double>step_lo             # <<<<<<<<<<<<<<
 *         C.step = <double>step_hi
 * 
 */
  __Pyx_TraceLine(825,0,__PYX_ERR(0, 825, __pyx_L1_error))
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_step_lo); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 825, __pyx_L1_error)
  __pyx_v_C->miniStep = ((double)__pyx_t_15);

  /* "reachability.pyx":826
 *             C.bAdaptiveSteps = False
 *         C.miniStep = <double>step_lo
 *         C.step = <double>step_hi             # <<<<<<<<<<<<<<
 * 
 *         # --- Orders
 */
  __Pyx_TraceLine(826,0,__PYX_ERR(0, 826, __pyx_L1_error))
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_step_hi); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 826, __pyx_L1_error)
  __pyx_v_C->step = ((double)__pyx_t_15);

  /* "reachability.pyx":830
 *         # --- Orders
 *         # The orders and order kwargs are mutually exclusive
 *         if orders is None:             # <<<<<<<<<<<<<<
 *             orders = [order if isinstance(order, tuple) else (order, order)]
 *             C.orderType = 0
 */
  __Pyx_TraceLine(830,0,__PYX_ERR(0, 830, __pyx_L1_error))
  __pyx_t_4 = (__pyx_cur_scope->__pyx_v_orders == Py_None);
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "reachability.pyx":831
 *         # The orders and order kwargs are mutually exclusive
 *         if orders is None:
 *             orders = [order if isinstance(order, tuple) else (order, order)]             # <<<<<<<<<<<<<<
 *             C.orderType = 0
 *         else:
 */
    __Pyx_TraceLine(831,0,__PYX_ERR(0, 831, __pyx_L1_error))
    __pyx_t_3 = PyTuple_Check(__pyx_v_order); 
    if ((__pyx_t_3 != 0)) {
      __Pyx_INCREF(__pyx_v_order);
      __pyx_t_6 = __pyx_v_order;
    } else {
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_order);
      __Pyx_GIVEREF(__pyx_v_order);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_order);
      __Pyx_INCREF(__pyx_v_order);
      __Pyx_GIVEREF(__pyx_v_order);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_order);
      __pyx_t_6 = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_orders);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_orders, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "reachability.pyx":832
 *         if orders is None:
 *             orders = [order if isinstance(order, tuple) else (order, order)]
 *             C.orderType = 0             # <<<<<<<<<<<<<<
 *         else:
 *             C.orderType = 1
 */
    __Pyx_TraceLine(832,0,__PYX_ERR(0, 832, __pyx_L1_error))
    __pyx_v_C->orderType = 0;

    /* "reachability.pyx":830
 *         # --- Orders
 *         # The orders and order kwargs are mutually exclusive
 *         if orders is None:             # <<<<<<<<<<<<<<
 *             orders = [order if isinstance(order, tuple) else (order, order)]
 *             C.orderType = 0
 */
    goto __pyx_L20;
  }

  /* "reachability.pyx":834
 *             C.orderType = 0
 *         else:
 *             C.orderType = 1             # <<<<<<<<<<<<<<
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 */
  __Pyx_TraceLine(834,0,__PYX_ERR(0, 834, __pyx_L1_error))
  /*else*/ {
    __pyx_v_C->orderType = 1;
  }
  __pyx_L20:;

  /* "reachability.pyx":835
 *         else:
 *             C.orderType = 1
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 */
  __Pyx_TraceLine(835,0,__PYX_ERR(0, 835, __pyx_L1_error))
  __pyx_t_5 = __pyx_pf_12reachability_5Reach_9__cinit___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_order_lo = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "reachability.pyx":837
 *         order_lo = min((order[0] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)             # <<<<<<<<<<<<<<
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 */
  __Pyx_TraceLine(837,0,__PYX_ERR(0, 837, __pyx_L1_error))
  __pyx_t_6 = __pyx_pf_12reachability_5Reach_9__cinit___3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_order_hi = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "reachability.pyx":839
 *         order_hi = max((order[1] if isinstance(order, tuple) else order)
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi             # <<<<<<<<<<<<<<
 *         for order in orders:
 *             try:
 */
  __Pyx_TraceLine(839,0,__PYX_ERR(0, 839, __pyx_L1_error))
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_order_lo, __pyx_v_order_hi, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_16 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_C->bAdaptiveOrders = __pyx_t_16;

  /* "reachability.pyx":840
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:             # <<<<<<<<<<<<<<
 *             try:
 *                 (order_lo, order_hi) = order
 */
  __Pyx_TraceLine(840,0,__PYX_ERR(0, 840, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_orders)) {
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_orders; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_orders); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 840, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 840, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 840, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 840, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_10(__pyx_t_5);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 840, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_DECREF_SET(__pyx_v_order, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "reachability.pyx":841
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 *             try:             # <<<<<<<<<<<<<<
 *                 (order_lo, order_hi) = order
 *             except:
 */
    __Pyx_TraceLine(841,0,__PYX_ERR(0, 841, __pyx_L23_error))
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "reachability.pyx":842
 *         for order in orders:
 *             try:
 *                 (order_lo, order_hi) = order             # <<<<<<<<<<<<<<
 *             except:
 *                 order_lo = order_hi = order
 */
        __Pyx_TraceLine(842,0,__PYX_ERR(0, 842, __pyx_L23_error))
        if ((likely(PyTuple_CheckExact(__pyx_v_order))) || (PyList_CheckExact(__pyx_v_order))) {
          PyObject* sequence = __pyx_v_order;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 842, __pyx_L23_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          #else
          __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 842, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 842, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          Py_ssize_t index = -1;
          __pyx_t_7 = PyObject_GetIter(__pyx_v_order); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 842, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_14 = Py_TYPE(__pyx_t_7)->tp_iternext;
          index = 0; __pyx_t_6 = __pyx_t_14(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L31_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_6);
          index = 1; __pyx_t_9 = __pyx_t_14(__pyx_t_7); if (unlikely(!__pyx_t_9)) goto __pyx_L31_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_9);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_7), 2) < 0) __PYX_ERR(0, 842, __pyx_L23_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L32_unpacking_done;
          __pyx_L31_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 842, __pyx_L23_error)
          __pyx_L32_unpacking_done:;
        }
        __Pyx_DECREF_SET(__pyx_v_order_lo, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_order_hi, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "reachability.pyx":841
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 *             try:             # <<<<<<<<<<<<<<
 *                 (order_lo, order_hi) = order
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L30_try_end;
      __pyx_L23_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "reachability.pyx":843
 *             try:
 *                 (order_lo, order_hi) = order
 *             except:             # <<<<<<<<<<<<<<
 *                 order_lo = order_hi = order
 *             C.orders.push_back(order_lo)
 */
      __Pyx_TraceLine(843,0,__PYX_ERR(0, 843, __pyx_L25_except_error))
      /*except:*/ {
        __Pyx_AddTraceback("reachability.Reach.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 843, __pyx_L25_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);

        /* "reachability.pyx":844
 *                 (order_lo, order_hi) = order
 *             except:
 *                 order_lo = order_hi = order             # <<<<<<<<<<<<<<
 *             C.orders.push_back(order_lo)
 *             C.maxOrders.push_back(order_hi)
 */
        __Pyx_TraceLine(844,0,__PYX_ERR(0, 844, __pyx_L25_except_error))
        __Pyx_INCREF(__pyx_v_order);
        __Pyx_DECREF_SET(__pyx_v_order_lo, __pyx_v_order);
        __Pyx_INCREF(__pyx_v_order);
        __Pyx_DECREF_SET(__pyx_v_order_hi, __pyx_v_order);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L24_exception_handled;
      }
      __pyx_L25_except_error:;

      /* "reachability.pyx":841
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:
 *             try:             # <<<<<<<<<<<<<<
 *                 (order_lo, order_hi) = order
 *             except:
 */
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L24_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_12, __pyx_t_11);
      __pyx_L30_try_end:;
    }

    /* "reachability.pyx":845
 *             except:
 *                 order_lo = order_hi = order
 *             C.orders.push_back(order_lo)             # <<<<<<<<<<<<<<
 *             C.maxOrders.push_back(order_hi)
 *         C.globalMaxOrder = order_hi
 */
    __Pyx_TraceLine(845,0,__PYX_ERR(0, 845, __pyx_L1_error))
    __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_order_lo); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 845, __pyx_L1_error)
    try {
      __pyx_v_C->orders.push_back(__pyx_t_17);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 845, __pyx_L1_error)
    }

    /* "reachability.pyx":846
 *                 order_lo = order_hi = order
 *             C.orders.push_back(order_lo)
 *             C.maxOrders.push_back(order_hi)             # <<<<<<<<<<<<<<
 *         C.globalMaxOrder = order_hi
 * 
 */
    __Pyx_TraceLine(846,0,__PYX_ERR(0, 846, __pyx_L1_error))
    __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_order_hi); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 846, __pyx_L1_error)
    try {
      __pyx_v_C->maxOrders.push_back(__pyx_t_17);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 846, __pyx_L1_error)
    }

    /* "reachability.pyx":840
 *                        for order in orders)
 *         C.bAdaptiveOrders = order_lo < order_hi
 *         for order in orders:             # <<<<<<<<<<<<<<
 *             try:
 *                 (order_lo, order_hi) = order
 */
    __Pyx_TraceLine(840,0,__PYX_ERR(0, 840, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "reachability.pyx":847
 *             C.orders.push_back(order_lo)
 *             C.maxOrders.push_back(order_hi)
 *         C.globalMaxOrder = order_hi             # <<<<<<<<<<<<<<
 * 
 *         # --- The rest
 */
  __Pyx_TraceLine(847,0,__PYX_ERR(0, 847, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_order_hi); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 847, __pyx_L1_error)
  __pyx_v_C->globalMaxOrder = __pyx_t_17;

  /* "reachability.pyx":850
 * 
 *         # --- The rest
 *         C.time = <double>time             # <<<<<<<<<<<<<<
 *         C.precondition = precondition
 *         C.plotSetting = 1  # We have to set this to something, but should be
 */
  __Pyx_TraceLine(850,0,__PYX_ERR(0, 850, __pyx_L1_error))
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_time); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 850, __pyx_L1_error)
  __pyx_v_C->time = ((double)__pyx_t_15);

  /* "reachability.pyx":851
 *         # --- The rest
 *         C.time = <double>time
 *         C.precondition = precondition             # <<<<<<<<<<<<<<
 *         C.plotSetting = 1  # We have to set this to something, but should be
 *         # set by plot method
 */
  __Pyx_TraceLine(851,0,__PYX_ERR(0, 851, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_precondition); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 851, __pyx_L1_error)
  __pyx_v_C->precondition = __pyx_t_17;

  /* "reachability.pyx":852
 *         C.time = <double>time
 *         C.precondition = precondition
 *         C.plotSetting = 1  # We have to set this to something, but should be             # <<<<<<<<<<<<<<
 *         # set by plot method
 *         C.bPrint = verbose
 */
  __Pyx_TraceLine(852,0,__PYX_ERR(0, 852, __pyx_L1_error))
  __pyx_v_C->plotSetting = 1;

  /* "reachability.pyx":854
 *         C.plotSetting = 1  # We have to set this to something, but should be
 *         # set by plot method
 *         C.bPrint = verbose             # <<<<<<<<<<<<<<
 *         C.bSafetyChecking = False
 *         C.bPlot = True
 */
  __Pyx_TraceLine(854,0,__PYX_ERR(0, 854, __pyx_L1_error))
  __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_16 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 854, __pyx_L1_error)
  __pyx_v_C->bPrint = __pyx_t_16;

  /* "reachability.pyx":855
 *         # set by plot method
 *         C.bPrint = verbose
 *         C.bSafetyChecking = False             # <<<<<<<<<<<<<<
 *         C.bPlot = True
 *         C.bDump = False
 */
  __Pyx_TraceLine(855,0,__PYX_ERR(0, 855, __pyx_L1_error))
  __pyx_v_C->bSafetyChecking = 0;

  /* "reachability.pyx":856
 *         C.bPrint = verbose
 *         C.bSafetyChecking = False
 *         C.bPlot = True             # <<<<<<<<<<<<<<
 *         C.bDump = False
 *         C.integrationScheme = integrationScheme
 */
  __Pyx_TraceLine(856,0,__PYX_ERR(0, 856, __pyx_L1_error))
  __pyx_v_C->bPlot = 1;

  /* "reachability.pyx":857
 *         C.bSafetyChecking = False
 *         C.bPlot = True
 *         C.bDump = False             # <<<<<<<<<<<<<<
 *         C.integrationScheme = integrationScheme
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 */
  __Pyx_TraceLine(857,0,__PYX_ERR(0, 857, __pyx_L1_error))
  __pyx_v_C->bDump = 0;

  /* "reachability.pyx":858
 *         C.bPlot = True
 *         C.bDump = False
 *         C.integrationScheme = integrationScheme             # <<<<<<<<<<<<<<
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 *         for _ in odes:
 */
  __Pyx_TraceLine(858,0,__PYX_ERR(0, 858, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_integrationScheme); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 858, __pyx_L1_error)
  __pyx_v_C->integrationScheme = __pyx_t_17;

  /* "reachability.pyx":859
 *         C.bDump = False
 *         C.integrationScheme = integrationScheme
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)             # <<<<<<<<<<<<<<
 *         for _ in odes:
 *             C.estimation.push_back(Interval(-estimation,estimation))
 */
  __Pyx_TraceLine(859,0,__PYX_ERR(0, 859, __pyx_L1_error))
  __pyx_t_5 = PyNumber_Negative(__pyx_v_cutoff_threshold); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_v_cutoff_threshold); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L1_error)
  __pyx_v_C->cutoff_threshold = flowstar::Interval(__pyx_t_15, __pyx_t_18);

  /* "reachability.pyx":860
 *         C.integrationScheme = integrationScheme
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 *         for _ in odes:             # <<<<<<<<<<<<<<
 *             C.estimation.push_back(Interval(-estimation,estimation))
 *         C.maxNumSteps = maxNumSteps
 */
  __Pyx_TraceLine(860,0,__PYX_ERR(0, 860, __pyx_L1_error))
  if (likely(PyList_CheckExact(__pyx_v_odes)) || PyTuple_CheckExact(__pyx_v_odes)) {
    __pyx_t_5 = __pyx_v_odes; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_odes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 860, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 860, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 860, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 860, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 860, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_10(__pyx_t_5);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 860, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "reachability.pyx":861
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 *         for _ in odes:
 *             C.estimation.push_back(Interval(-estimation,estimation))             # <<<<<<<<<<<<<<
 *         C.maxNumSteps = maxNumSteps
 *         C.max_remainder_queue = max_remainder_queue
 */
    __Pyx_TraceLine(861,0,__PYX_ERR(0, 861, __pyx_L1_error))
    __pyx_t_7 = PyNumber_Negative(__pyx_v_estimation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_estimation); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 861, __pyx_L1_error)
    try {
      __pyx_v_C->estimation.push_back(flowstar::Interval(__pyx_t_18, __pyx_t_15));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 861, __pyx_L1_error)
    }

    /* "reachability.pyx":860
 *         C.integrationScheme = integrationScheme
 *         C.cutoff_threshold = Interval(-cutoff_threshold,cutoff_threshold)
 *         for _ in odes:             # <<<<<<<<<<<<<<
 *             C.estimation.push_back(Interval(-estimation,estimation))
 *         C.maxNumSteps = maxNumSteps
 */
    __Pyx_TraceLine(860,0,__PYX_ERR(0, 860, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "reachability.pyx":862
 *         for _ in odes:
 *             C.estimation.push_back(Interval(-estimation,estimation))
 *         C.maxNumSteps = maxNumSteps             # <<<<<<<<<<<<<<
 *         C.max_remainder_queue = max_remainder_queue
 * 
 */
  __Pyx_TraceLine(862,0,__PYX_ERR(0, 862, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_maxNumSteps); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 862, __pyx_L1_error)
  __pyx_v_C->maxNumSteps = __pyx_t_17;

  /* "reachability.pyx":863
 *             C.estimation.push_back(Interval(-estimation,estimation))
 *         C.maxNumSteps = maxNumSteps
 *         C.max_remainder_queue = max_remainder_queue             # <<<<<<<<<<<<<<
 * 
 *         # Declare state/taylor model variables
 */
  __Pyx_TraceLine(863,0,__PYX_ERR(0, 863, __pyx_L1_error))
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_max_remainder_queue); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 863, __pyx_L1_error)
  __pyx_v_C->max_remainder_queue = __pyx_t_17;

  /* "reachability.pyx":866
 * 
 *         # Declare state/taylor model variables
 *         C.declareTMVar("local_t")             # <<<<<<<<<<<<<<
 *         for i, var in enumerate(vars, 1):
 *             C.declareStateVar(<string>var)
 */
  __Pyx_TraceLine(866,0,__PYX_ERR(0, 866, __pyx_L1_error))
  (void)(__pyx_v_C->declareTMVar(__pyx_k_local_t));

  /* "reachability.pyx":867
 *         # Declare state/taylor model variables
 *         C.declareTMVar("local_t")
 *         for i, var in enumerate(vars, 1):             # <<<<<<<<<<<<<<
 *             C.declareStateVar(<string>var)
 *             assert i == C.getIDForStateVar(<string>var) + 1
 */
  __Pyx_TraceLine(867,0,__PYX_ERR(0, 867, __pyx_L1_error))
  __Pyx_INCREF(__pyx_int_1);
  __pyx_t_5 = __pyx_int_1;
  if (likely(PyList_CheckExact(__pyx_v_vars)) || PyTuple_CheckExact(__pyx_v_vars)) {
    __pyx_t_7 = __pyx_v_vars; __Pyx_INCREF(__pyx_t_7); __pyx_t_1 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_vars); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 867, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 867, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 867, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_7, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_10(__pyx_t_7);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 867, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "reachability.pyx":868
 *         C.declareTMVar("local_t")
 *         for i, var in enumerate(vars, 1):
 *             C.declareStateVar(<string>var)             # <<<<<<<<<<<<<<
 *             assert i == C.getIDForStateVar(<string>var) + 1
 *             C.declareTMVar(<string>"local_var_{}".format(i))
 */
    __Pyx_TraceLine(868,0,__PYX_ERR(0, 868, __pyx_L1_error))
    __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_v_var); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 868, __pyx_L1_error)
    (void)(__pyx_v_C->declareStateVar(((std::string)__pyx_t_19)));

    /* "reachability.pyx":869
 *         for i, var in enumerate(vars, 1):
 *             C.declareStateVar(<string>var)
 *             assert i == C.getIDForStateVar(<string>var) + 1             # <<<<<<<<<<<<<<
 *             C.declareTMVar(<string>"local_var_{}".format(i))
 * 
 */
    __Pyx_TraceLine(869,0,__PYX_ERR(0, 869, __pyx_L1_error))
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_v_var); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 869, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyInt_From_long((__pyx_v_C->getIDForStateVar(((std::string)__pyx_t_19)) + 1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = PyObject_RichCompare(__pyx_v_i, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 869, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 869, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 869, __pyx_L1_error)
      }
    }
    #endif

    /* "reachability.pyx":870
 *             C.declareStateVar(<string>var)
 *             assert i == C.getIDForStateVar(<string>var) + 1
 *             C.declareTMVar(<string>"local_var_{}".format(i))             # <<<<<<<<<<<<<<
 * 
 *         # Run immediately?
 */
    __Pyx_TraceLine(870,0,__PYX_ERR(0, 870, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_local_var, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_i};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_v_i};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      {
        __pyx_t_20 = PyTuple_New(1+1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_20, 0+1, __pyx_v_i);
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_20, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    (void)(__pyx_v_C->declareTMVar(((std::string)__pyx_t_19)));

    /* "reachability.pyx":867
 *         # Declare state/taylor model variables
 *         C.declareTMVar("local_t")
 *         for i, var in enumerate(vars, 1):             # <<<<<<<<<<<<<<
 *             C.declareStateVar(<string>var)
 *             assert i == C.getIDForStateVar(<string>var) + 1
 */
    __Pyx_TraceLine(867,0,__PYX_ERR(0, 867, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "reachability.pyx":873
 * 
 *         # Run immediately?
 *         if run:             # <<<<<<<<<<<<<<
 *             self.run()
 * 
 */
  __Pyx_TraceLine(873,0,__PYX_ERR(0, 873, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_run); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 873, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "reachability.pyx":874
 *         # Run immediately?
 *         if run:
 *             self.run()             # <<<<<<<<<<<<<<
 * 
 *     def plot(self, x, y, bytes filename, plot_type=1):
 */
    __Pyx_TraceLine(874,0,__PYX_ERR(0, 874, __pyx_L1_error))
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_run); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_9) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 874, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 874, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "reachability.pyx":873
 * 
 *         # Run immediately?
 *         if run:             # <<<<<<<<<<<<<<
 *             self.run()
 * 
 */
  }

  /* "reachability.pyx":766
 * cdef class Reach:
 *     # initials :: [(lower, upper)]
 *     def __cinit__(             # <<<<<<<<<<<<<<
 *         self,
 *         odes,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("reachability.Reach.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ode);
  __Pyx_XDECREF(__pyx_v_initial);
  __Pyx_XDECREF(__pyx_v_step_lo);
  __Pyx_XDECREF(__pyx_v_step_hi);
  __Pyx_XDECREF(__pyx_v_order_lo);
  __Pyx_XDECREF(__pyx_v_order_hi);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_v_vars);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":876
 *             self.run()
 * 
 *     def plot(self, x, y, bytes filename, plot_type=1):             # <<<<<<<<<<<<<<
 *         if not self.ran:
 *             raise Exception('Not ran!')
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_3plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_3plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_plot_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("plot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_filename,&__pyx_n_s_plot_type,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("plot", 0, 3, 4, 1); __PYX_ERR(0, 876, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("plot", 0, 3, 4, 2); __PYX_ERR(0, 876, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plot_type);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "plot") < 0)) __PYX_ERR(0, 876, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_filename = ((PyObject*)values[2]);
    __pyx_v_plot_type = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("plot", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 876, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) __PYX_ERR(0, 876, __pyx_L1_error)
  __pyx_r = __pyx_pf_12reachability_5Reach_2plot(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_filename, __pyx_v_plot_type);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_2plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, PyObject *__pyx_v_filename, PyObject *__pyx_v_plot_type) {
  flowstar::ContinuousReachability *__pyx_v_C;
  char *__pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  std::string __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("plot", 0);
  __Pyx_TraceCall("plot", __pyx_f[0], 876, 0, __PYX_ERR(0, 876, __pyx_L1_error));

  /* "reachability.pyx":877
 * 
 *     def plot(self, x, y, bytes filename, plot_type=1):
 *         if not self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Not ran!')
 * 
 */
  __Pyx_TraceLine(877,0,__PYX_ERR(0, 877, __pyx_L1_error))
  __pyx_t_1 = ((!(__pyx_v_self->ran != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "reachability.pyx":878
 *     def plot(self, x, y, bytes filename, plot_type=1):
 *         if not self.ran:
 *             raise Exception('Not ran!')             # <<<<<<<<<<<<<<
 * 
 *         cdef ContinuousReachability * C = &self.c_reach
 */
    __Pyx_TraceLine(878,0,__PYX_ERR(0, 878, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 878, __pyx_L1_error)

    /* "reachability.pyx":877
 * 
 *     def plot(self, x, y, bytes filename, plot_type=1):
 *         if not self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Not ran!')
 * 
 */
  }

  /* "reachability.pyx":880
 *             raise Exception('Not ran!')
 * 
 *         cdef ContinuousReachability * C = &self.c_reach             # <<<<<<<<<<<<<<
 * 
 *         C.plotFormat = 0 # GNUPLOT format
 */
  __Pyx_TraceLine(880,0,__PYX_ERR(0, 880, __pyx_L1_error))
  __pyx_v_C = (&__pyx_v_self->c_reach);

  /* "reachability.pyx":882
 *         cdef ContinuousReachability * C = &self.c_reach
 * 
 *         C.plotFormat = 0 # GNUPLOT format             # <<<<<<<<<<<<<<
 *         C.plotSetting = plot_type
 *         cdef char * c_filename = filename
 */
  __Pyx_TraceLine(882,0,__PYX_ERR(0, 882, __pyx_L1_error))
  __pyx_v_C->plotFormat = 0;

  /* "reachability.pyx":883
 * 
 *         C.plotFormat = 0 # GNUPLOT format
 *         C.plotSetting = plot_type             # <<<<<<<<<<<<<<
 *         cdef char * c_filename = filename
 *         if len(filename) >= 100:
 */
  __Pyx_TraceLine(883,0,__PYX_ERR(0, 883, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_plot_type); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 883, __pyx_L1_error)
  __pyx_v_C->plotSetting = __pyx_t_3;

  /* "reachability.pyx":884
 *         C.plotFormat = 0 # GNUPLOT format
 *         C.plotSetting = plot_type
 *         cdef char * c_filename = filename             # <<<<<<<<<<<<<<
 *         if len(filename) >= 100:
 *             raise Exception('Filename too long!')
 */
  __Pyx_TraceLine(884,0,__PYX_ERR(0, 884, __pyx_L1_error))
  if (unlikely(__pyx_v_filename == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 884, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 884, __pyx_L1_error)
  __pyx_v_c_filename = __pyx_t_4;

  /* "reachability.pyx":885
 *         C.plotSetting = plot_type
 *         cdef char * c_filename = filename
 *         if len(filename) >= 100:             # <<<<<<<<<<<<<<
 *             raise Exception('Filename too long!')
 *         strcpy(C.outputFileName, c_filename)
 */
  __Pyx_TraceLine(885,0,__PYX_ERR(0, 885, __pyx_L1_error))
  if (unlikely(__pyx_v_filename == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 885, __pyx_L1_error)
  }
  __pyx_t_5 = PyBytes_GET_SIZE(__pyx_v_filename); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 885, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_5 >= 0x64) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "reachability.pyx":886
 *         cdef char * c_filename = filename
 *         if len(filename) >= 100:
 *             raise Exception('Filename too long!')             # <<<<<<<<<<<<<<
 *         strcpy(C.outputFileName, c_filename)
 * 
 */
    __Pyx_TraceLine(886,0,__PYX_ERR(0, 886, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 886, __pyx_L1_error)

    /* "reachability.pyx":885
 *         C.plotSetting = plot_type
 *         cdef char * c_filename = filename
 *         if len(filename) >= 100:             # <<<<<<<<<<<<<<
 *             raise Exception('Filename too long!')
 *         strcpy(C.outputFileName, c_filename)
 */
  }

  /* "reachability.pyx":887
 *         if len(filename) >= 100:
 *             raise Exception('Filename too long!')
 *         strcpy(C.outputFileName, c_filename)             # <<<<<<<<<<<<<<
 * 
 *         # prepare for plotting -- must be done here, not in run since this
 */
  __Pyx_TraceLine(887,0,__PYX_ERR(0, 887, __pyx_L1_error))
  (void)(strcpy(__pyx_v_C->outputFileName, __pyx_v_c_filename));

  /* "reachability.pyx":891
 *         # prepare for plotting -- must be done here, not in run since this
 *         # depends on the output axes
 *         self.prepare()             # <<<<<<<<<<<<<<
 *         # set bProjected = True since apparently prepareForPlotting has
 *         # already projected the flowpipes to the correct dimensions
 */
  __Pyx_TraceLine(891,0,__PYX_ERR(0, 891, __pyx_L1_error))
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_prepare); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 891, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":895
 *         # already projected the flowpipes to the correct dimensions
 * 
 *         self.c_reach.outputAxes.clear()             # <<<<<<<<<<<<<<
 *         self.c_reach.outputAxes.push_back(self.c_reach.getIDForStateVar(x))
 *         self.c_reach.outputAxes.push_back(self.c_reach.getIDForStateVar(y))
 */
  __Pyx_TraceLine(895,0,__PYX_ERR(0, 895, __pyx_L1_error))
  __pyx_v_self->c_reach.outputAxes.clear();

  /* "reachability.pyx":896
 * 
 *         self.c_reach.outputAxes.clear()
 *         self.c_reach.outputAxes.push_back(self.c_reach.getIDForStateVar(x))             # <<<<<<<<<<<<<<
 *         self.c_reach.outputAxes.push_back(self.c_reach.getIDForStateVar(y))
 * 
 */
  __Pyx_TraceLine(896,0,__PYX_ERR(0, 896, __pyx_L1_error))
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 896, __pyx_L1_error)
  try {
    __pyx_v_self->c_reach.outputAxes.push_back(__pyx_v_self->c_reach.getIDForStateVar(__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 896, __pyx_L1_error)
  }

  /* "reachability.pyx":897
 *         self.c_reach.outputAxes.clear()
 *         self.c_reach.outputAxes.push_back(self.c_reach.getIDForStateVar(x))
 *         self.c_reach.outputAxes.push_back(self.c_reach.getIDForStateVar(y))             # <<<<<<<<<<<<<<
 * 
 *         with self:  # Use class's version of flowstar global variables
 */
  __Pyx_TraceLine(897,0,__PYX_ERR(0, 897, __pyx_L1_error))
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 897, __pyx_L1_error)
  try {
    __pyx_v_self->c_reach.outputAxes.push_back(__pyx_v_self->c_reach.getIDForStateVar(__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 897, __pyx_L1_error)
  }

  /* "reachability.pyx":899
 *         self.c_reach.outputAxes.push_back(self.c_reach.getIDForStateVar(y))
 * 
 *         with self:  # Use class's version of flowstar global variables             # <<<<<<<<<<<<<<
 *             # We set projected to False since we use prepareForDumping
 *             # which does not project the flowpipes to the output
 */
  __Pyx_TraceLine(899,0,__PYX_ERR(0, 899, __pyx_L1_error))
  /*with:*/ {
    __pyx_t_9 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self), __pyx_n_s_exit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self), __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 899, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 899, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 899, __pyx_L5_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "reachability.pyx":903
 *             # which does not project the flowpipes to the output
 *             # dimensions for us
 *             C.plot_2D(False)             # <<<<<<<<<<<<<<
 * 
 *         # note: filename is unsanitized
 */
          __Pyx_TraceLine(903,0,__PYX_ERR(0, 903, __pyx_L9_error))
          __pyx_v_C->plot_2D(0);

          /* "reachability.pyx":899
 *         self.c_reach.outputAxes.push_back(self.c_reach.getIDForStateVar(y))
 * 
 *         with self:  # Use class's version of flowstar global variables             # <<<<<<<<<<<<<<
 *             # We set projected to False since we use prepareForDumping
 *             # which does not project the flowpipes to the output
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L14_try_end;
        __pyx_L9_error:;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("reachability.Reach.plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 899, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_13 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 899, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_13, NULL);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 899, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__pyx_t_1 < 0) __PYX_ERR(0, 899, __pyx_L11_except_error)
          __pyx_t_15 = ((!(__pyx_t_1 != 0)) != 0);
          if (__pyx_t_15) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_XGIVEREF(__pyx_t_7);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_6, __pyx_t_7);
            __pyx_t_2 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; 
            __PYX_ERR(0, 899, __pyx_L11_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L10_exception_handled;
        }
        __pyx_L11_except_error:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L10_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_9) {
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__16, NULL);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 899, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        goto __pyx_L8;
      }
      __pyx_L8:;
    }
    goto __pyx_L18;
    __pyx_L5_error:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L1_error;
    __pyx_L18:;
  }

  /* "reachability.pyx":906
 * 
 *         # note: filename is unsanitized
 *         call(['gnuplot', './outputs/{}.plt'.format(filename)])             # <<<<<<<<<<<<<<
 * 
 *     def wplot(self, str x, str y, int plot_type=1, bytes filename = None):
 */
  __Pyx_TraceLine(906,0,__PYX_ERR(0, 906, __pyx_L1_error))
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_call); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_outputs_plt, __pyx_n_s_format); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_16 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
    }
  }
  if (!__pyx_t_16) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_filename); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 906, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_v_filename};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
      PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_v_filename};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_v_filename);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyList_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_n_s_gnuplot);
  __Pyx_GIVEREF(__pyx_n_s_gnuplot);
  PyList_SET_ITEM(__pyx_t_13, 0, __pyx_n_s_gnuplot);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 906, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_13};
      __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_13};
      __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    {
      __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_t_13);
      __pyx_t_13 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_17, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "reachability.pyx":876
 *             self.run()
 * 
 *     def plot(self, x, y, bytes filename, plot_type=1):             # <<<<<<<<<<<<<<
 *         if not self.ran:
 *             raise Exception('Not ran!')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("reachability.Reach.plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":908
 *         call(['gnuplot', './outputs/{}.plt'.format(filename)])
 * 
 *     def wplot(self, str x, str y, int plot_type=1, bytes filename = None):             # <<<<<<<<<<<<<<
 *         from wand.image import Image
 *         import uuid
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_5wplot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_5wplot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_v_plot_type;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wplot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_plot_type,&__pyx_n_s_filename,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("wplot", 0, 2, 4, 1); __PYX_ERR(0, 908, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plot_type);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "wplot") < 0)) __PYX_ERR(0, 908, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = ((PyObject*)values[0]);
    __pyx_v_y = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_plot_type = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_plot_type == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L3_error)
    } else {
      __pyx_v_plot_type = ((int)1);
    }
    __pyx_v_filename = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("wplot", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 908, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.wplot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), (&PyString_Type), 1, "x", 1))) __PYX_ERR(0, 908, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), (&PyString_Type), 1, "y", 1))) __PYX_ERR(0, 908, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) __PYX_ERR(0, 908, __pyx_L1_error)
  __pyx_r = __pyx_pf_12reachability_5Reach_4wplot(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_plot_type, __pyx_v_filename);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_4wplot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_v_plot_type, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_Image = NULL;
  PyObject *__pyx_v_uuid = NULL;
  PyObject *__pyx_v_img = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("wplot", 0);
  __Pyx_TraceCall("wplot", __pyx_f[0], 908, 0, __PYX_ERR(0, 908, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_filename);

  /* "reachability.pyx":909
 * 
 *     def wplot(self, str x, str y, int plot_type=1, bytes filename = None):
 *         from wand.image import Image             # <<<<<<<<<<<<<<
 *         import uuid
 * 
 */
  __Pyx_TraceLine(909,0,__PYX_ERR(0, 909, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Image);
  __Pyx_GIVEREF(__pyx_n_s_Image);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Image);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_wand_image, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Image); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Image = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":910
 *     def wplot(self, str x, str y, int plot_type=1, bytes filename = None):
 *         from wand.image import Image
 *         import uuid             # <<<<<<<<<<<<<<
 * 
 *         if filename is None:
 */
  __Pyx_TraceLine(910,0,__PYX_ERR(0, 910, __pyx_L1_error))
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_uuid, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_uuid = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "reachability.pyx":912
 *         import uuid
 * 
 *         if filename is None:             # <<<<<<<<<<<<<<
 *             filename = bytes(uuid.uuid4())
 *         self.plot(x, y, filename, plot_type)
 */
  __Pyx_TraceLine(912,0,__PYX_ERR(0, 912, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_filename == ((PyObject*)Py_None));
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":913
 * 
 *         if filename is None:
 *             filename = bytes(uuid.uuid4())             # <<<<<<<<<<<<<<
 *         self.plot(x, y, filename, plot_type)
 *         img = Image(filename='./images/{}.eps'.format(filename), format='eps')
 */
    __Pyx_TraceLine(913,0,__PYX_ERR(0, 913, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_uuid, __pyx_n_s_uuid4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_filename, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "reachability.pyx":912
 *         import uuid
 * 
 *         if filename is None:             # <<<<<<<<<<<<<<
 *             filename = bytes(uuid.uuid4())
 *         self.plot(x, y, filename, plot_type)
 */
  }

  /* "reachability.pyx":914
 *         if filename is None:
 *             filename = bytes(uuid.uuid4())
 *         self.plot(x, y, filename, plot_type)             # <<<<<<<<<<<<<<
 *         img = Image(filename='./images/{}.eps'.format(filename), format='eps')
 *         img.rotate(90)
 */
  __Pyx_TraceLine(914,0,__PYX_ERR(0, 914, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_plot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_plot_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_v_x, __pyx_v_y, __pyx_v_filename, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_v_x, __pyx_v_y, __pyx_v_filename, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_y);
    __Pyx_INCREF(__pyx_v_filename);
    __Pyx_GIVEREF(__pyx_v_filename);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_filename);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_7, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":915
 *             filename = bytes(uuid.uuid4())
 *         self.plot(x, y, filename, plot_type)
 *         img = Image(filename='./images/{}.eps'.format(filename), format='eps')             # <<<<<<<<<<<<<<
 *         img.rotate(90)
 *         return img
 */
  __Pyx_TraceLine(915,0,__PYX_ERR(0, 915, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_images_eps, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_filename); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_filename};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_filename};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_filename);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_filename, __pyx_t_2) < 0) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_eps) < 0) __PYX_ERR(0, 915, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_Image, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_img = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "reachability.pyx":916
 *         self.plot(x, y, filename, plot_type)
 *         img = Image(filename='./images/{}.eps'.format(filename), format='eps')
 *         img.rotate(90)             # <<<<<<<<<<<<<<
 *         return img
 * 
 */
  __Pyx_TraceLine(916,0,__PYX_ERR(0, 916, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_img, __pyx_n_s_rotate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":917
 *         img = Image(filename='./images/{}.eps'.format(filename), format='eps')
 *         img.rotate(90)
 *         return img             # <<<<<<<<<<<<<<
 * 
 *     def roots(Reach self, f, fprime):
 */
  __Pyx_TraceLine(917,0,__PYX_ERR(0, 917, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_img);
  __pyx_r = __pyx_v_img;
  goto __pyx_L0;

  /* "reachability.pyx":908
 *         call(['gnuplot', './outputs/{}.plt'.format(filename)])
 * 
 *     def wplot(self, str x, str y, int plot_type=1, bytes filename = None):             # <<<<<<<<<<<<<<
 *         from wand.image import Image
 *         import uuid
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("reachability.Reach.wplot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Image);
  __Pyx_XDECREF(__pyx_v_uuid);
  __Pyx_XDECREF(__pyx_v_img);
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":919
 *         return img
 * 
 *     def roots(Reach self, f, fprime):             # <<<<<<<<<<<<<<
 *         cdef:
 *             interval_fn f_fn = poly_fn(Poly(f).c_poly)
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_7roots(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_7roots(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f = 0;
  PyObject *__pyx_v_fprime = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("roots (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,&__pyx_n_s_fprime,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fprime)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("roots", 1, 2, 2, 1); __PYX_ERR(0, 919, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "roots") < 0)) __PYX_ERR(0, 919, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_f = values[0];
    __pyx_v_fprime = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("roots", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 919, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_5Reach_6roots(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_f, __pyx_v_fprime);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_6roots(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_f, PyObject *__pyx_v_fprime) {
  std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_f_fn;
  std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_fprime_fn;
  std::vector<flowstar::Interval>  __pyx_v_c_res;
  flowstar::Interval __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  std::vector<flowstar::Interval> ::iterator __pyx_t_12;
  flowstar::Interval __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("roots", 0);
  __Pyx_TraceCall("roots", __pyx_f[0], 919, 0, __PYX_ERR(0, 919, __pyx_L1_error));

  /* "reachability.pyx":921
 *     def roots(Reach self, f, fprime):
 *         cdef:
 *             interval_fn f_fn = poly_fn(Poly(f).c_poly)             # <<<<<<<<<<<<<<
 *             interval_fn fprime_fn = poly_fn(Poly(fprime).c_poly)
 *             vector[Interval] c_res
 */
  __Pyx_TraceLine(921,0,__PYX_ERR(0, 921, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_v_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_f_fn = poly_fn(((struct __pyx_obj_12reachability_Poly *)__pyx_t_1)->c_poly);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":922
 *         cdef:
 *             interval_fn f_fn = poly_fn(Poly(f).c_poly)
 *             interval_fn fprime_fn = poly_fn(Poly(fprime).c_poly)             # <<<<<<<<<<<<<<
 *             vector[Interval] c_res
 *         self.prepare()
 */
  __Pyx_TraceLine(922,0,__PYX_ERR(0, 922, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_12reachability_Poly), __pyx_v_fprime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fprime_fn = poly_fn(((struct __pyx_obj_12reachability_Poly *)__pyx_t_1)->c_poly);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":924
 *             interval_fn fprime_fn = poly_fn(Poly(fprime).c_poly)
 *             vector[Interval] c_res
 *         self.prepare()             # <<<<<<<<<<<<<<
 *         with self:
 *             c_res = self.c_roots(f_fn, fprime_fn)
 */
  __Pyx_TraceLine(924,0,__PYX_ERR(0, 924, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_prepare); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":925
 *             vector[Interval] c_res
 *         self.prepare()
 *         with self:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(f_fn, fprime_fn)
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 */
  __Pyx_TraceLine(925,0,__PYX_ERR(0, 925, __pyx_L1_error))
  /*with:*/ {
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self), __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 925, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self), __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 925, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {

          /* "reachability.pyx":926
 *         self.prepare()
 *         with self:
 *             c_res = self.c_roots(f_fn, fprime_fn)             # <<<<<<<<<<<<<<
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 */
          __Pyx_TraceLine(926,0,__PYX_ERR(0, 926, __pyx_L7_error))
          __pyx_v_c_res = ((struct __pyx_vtabstruct_12reachability_Reach *)__pyx_v_self->__pyx_vtab)->c_roots(__pyx_v_self, __pyx_v_f_fn, __pyx_v_fprime_fn);

          /* "reachability.pyx":925
 *             vector[Interval] c_res
 *         self.prepare()
 *         with self:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(f_fn, fprime_fn)
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 */
        }
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("reachability.Reach.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 925, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 925, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 925, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_10 < 0) __PYX_ERR(0, 925, __pyx_L9_except_error)
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_1, __pyx_t_2, __pyx_t_3);
            __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 925, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_4) {
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__18, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 925, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  /* "reachability.pyx":927
 *         with self:
 *             c_res = self.c_roots(f_fn, fprime_fn)
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Interval] c_roots(Reach self, interval_fn f, interval_fn fprime):
 */
  __Pyx_TraceLine(927,0,__PYX_ERR(0, 927, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = __pyx_v_c_res.begin();
  for (;;) {
    if (!(__pyx_t_12 != __pyx_v_c_res.end())) break;
    __pyx_t_13 = *__pyx_t_12;
    ++__pyx_t_12;
    __pyx_v_r = __pyx_t_13;
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sage); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_RIF); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_r.inf()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = PyFloat_FromDouble(__pyx_v_r.sup()); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = NULL;
    __pyx_t_16 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_16 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_1, __pyx_t_14};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_1, __pyx_t_14};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else
    #endif
    {
      __pyx_t_17 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      if (__pyx_t_15) {
        __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_15); __pyx_t_15 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_16, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_16, __pyx_t_14);
      __pyx_t_1 = 0;
      __pyx_t_14 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":919
 *         return img
 * 
 *     def roots(Reach self, f, fprime):             # <<<<<<<<<<<<<<
 *         cdef:
 *             interval_fn f_fn = poly_fn(Poly(f).c_poly)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("reachability.Reach.roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":929
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 *     cdef vector[Interval] c_roots(Reach self, interval_fn f, interval_fn fprime):             # <<<<<<<<<<<<<<
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 */

static std::vector<flowstar::Interval>  __pyx_f_12reachability_5Reach_c_roots(struct __pyx_obj_12reachability_Reach *__pyx_v_self, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_f, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)> __pyx_v_fprime) {
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv_end;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain_end;
  std::vector<flowstar::Interval>  __pyx_v_roots;
  std::vector<flowstar::Interval>  __pyx_v_new_roots;
  std::vector<flowstar::Interval> ::iterator __pyx_v_root_iter;
  flowstar::Interval __pyx_v_T0;
  double __pyx_v_t;
  CYTHON_UNUSED bool __pyx_v_initialized;
  int __pyx_v_var_id_t;
  std::vector<flowstar::Interval>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_FakeReference<flowstar::Interval> __pyx_t_4;
  __Pyx_RefNannySetupContext("c_roots", 0);
  __Pyx_TraceCall("c_roots", __pyx_f[0], 929, 0, __PYX_ERR(0, 929, __pyx_L1_error));

  /* "reachability.pyx":931
 *     cdef vector[Interval] c_roots(Reach self, interval_fn f, interval_fn fprime):
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 */
  __Pyx_TraceLine(931,0,__PYX_ERR(0, 931, __pyx_L1_error))
  __pyx_v_tmv = __pyx_v_self->c_reach.flowpipesCompo.begin();

  /* "reachability.pyx":932
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()
 */
  __Pyx_TraceLine(932,0,__PYX_ERR(0, 932, __pyx_L1_error))
  __pyx_v_tmv_end = __pyx_v_self->c_reach.flowpipesCompo.end();

  /* "reachability.pyx":933
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()
 *             vector[Interval] roots
 */
  __Pyx_TraceLine(933,0,__PYX_ERR(0, 933, __pyx_L1_error))
  __pyx_v_domain = __pyx_v_self->c_reach.domains.begin();

  /* "reachability.pyx":934
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()             # <<<<<<<<<<<<<<
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 */
  __Pyx_TraceLine(934,0,__PYX_ERR(0, 934, __pyx_L1_error))
  __pyx_v_domain_end = __pyx_v_self->c_reach.domains.end();

  /* "reachability.pyx":937
 *             vector[Interval] roots
 *             vector[Interval] new_roots
 *             vector[Interval].iterator root_iter = roots.begin()             # <<<<<<<<<<<<<<
 *             cdef Interval T0
 *             double t = 0.0
 */
  __Pyx_TraceLine(937,0,__PYX_ERR(0, 937, __pyx_L1_error))
  __pyx_v_root_iter = __pyx_v_roots.begin();

  /* "reachability.pyx":939
 *             vector[Interval].iterator root_iter = roots.begin()
 *             cdef Interval T0
 *             double t = 0.0             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[Interval] domainCopy
 */
  __Pyx_TraceLine(939,0,__PYX_ERR(0, 939, __pyx_L1_error))
  __pyx_v_t = 0.0;

  /* "reachability.pyx":943
 *         cdef vector[Interval] domainCopy
 *         cdef vector[Interval] final_res
 *         cdef cbool initialized = False             # <<<<<<<<<<<<<<
 * 
 *         var_id_t = self.c_reach.tmVarTab['local_t']
 */
  __Pyx_TraceLine(943,0,__PYX_ERR(0, 943, __pyx_L1_error))
  __pyx_v_initialized = 0;

  /* "reachability.pyx":945
 *         cdef cbool initialized = False
 * 
 *         var_id_t = self.c_reach.tmVarTab['local_t']             # <<<<<<<<<<<<<<
 * 
 *         while (tmv != tmv_end and domain != domain_end):
 */
  __Pyx_TraceLine(945,0,__PYX_ERR(0, 945, __pyx_L1_error))
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 945, __pyx_L1_error)
  __pyx_v_var_id_t = (__pyx_v_self->c_reach.tmVarTab[__pyx_t_1]);

  /* "reachability.pyx":947
 *         var_id_t = self.c_reach.tmVarTab['local_t']
 * 
 *         while (tmv != tmv_end and domain != domain_end):             # <<<<<<<<<<<<<<
 *             # Isolate roots for current timestep
 *             # print("reached detect roots t={} + {}".format(t,
 */
  __Pyx_TraceLine(947,0,__PYX_ERR(0, 947, __pyx_L1_error))
  while (1) {
    __pyx_t_3 = ((__pyx_v_tmv != __pyx_v_tmv_end) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_domain != __pyx_v_domain_end) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_2) break;

    /* "reachability.pyx":953
 *             # print("f(t) = ")
 *             # root_iter = roots.end()
 *             new_roots.clear()             # <<<<<<<<<<<<<<
 *             T0 = deref(domain)[0]
 *             detect_roots3(new_roots,
 */
    __Pyx_TraceLine(953,0,__PYX_ERR(0, 953, __pyx_L1_error))
    __pyx_v_new_roots.clear();

    /* "reachability.pyx":954
 *             # root_iter = roots.end()
 *             new_roots.clear()
 *             T0 = deref(domain)[0]             # <<<<<<<<<<<<<<
 *             detect_roots3(new_roots,
 *                           compose_interval_fn(f, deref(tmv), deref(domain)),
 */
    __Pyx_TraceLine(954,0,__PYX_ERR(0, 954, __pyx_L1_error))
    __pyx_v_T0 = ((*__pyx_v_domain)[0]);

    /* "reachability.pyx":955
 *             new_roots.clear()
 *             T0 = deref(domain)[0]
 *             detect_roots3(new_roots,             # <<<<<<<<<<<<<<
 *                           compose_interval_fn(f, deref(tmv), deref(domain)),
 *                           compose_interval_fn(fprime, deref(tmv), deref(domain)),
 */
    __Pyx_TraceLine(955,0,__PYX_ERR(0, 955, __pyx_L1_error))
    __pyx_f_12reachability_detect_roots3(__pyx_v_new_roots, compose_interval_fn(__pyx_v_f, (*__pyx_v_tmv), (*__pyx_v_domain)), compose_interval_fn(__pyx_v_fprime, (*__pyx_v_tmv), (*__pyx_v_domain)), __pyx_v_T0, NULL);

    /* "reachability.pyx":959
 *                           compose_interval_fn(fprime, deref(tmv), deref(domain)),
 *                           T0)
 *             deref(domain)[0] = T0             # <<<<<<<<<<<<<<
 *             # print("left detect roots")
 * 
 */
    __Pyx_TraceLine(959,0,__PYX_ERR(0, 959, __pyx_L1_error))
    ((*__pyx_v_domain)[0]) = __pyx_v_T0;

    /* "reachability.pyx":963
 * 
 *             # Shift roots by current time
 *             root_iter = new_roots.begin()             # <<<<<<<<<<<<<<
 *             while root_iter != new_roots.end():
 *                 # print("shifting root")
 */
    __Pyx_TraceLine(963,0,__PYX_ERR(0, 963, __pyx_L1_error))
    __pyx_v_root_iter = __pyx_v_new_roots.begin();

    /* "reachability.pyx":964
 *             # Shift roots by current time
 *             root_iter = new_roots.begin()
 *             while root_iter != new_roots.end():             # <<<<<<<<<<<<<<
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(t)
 */
    __Pyx_TraceLine(964,0,__PYX_ERR(0, 964, __pyx_L1_error))
    while (1) {
      __pyx_t_2 = ((__pyx_v_root_iter != __pyx_v_new_roots.end()) != 0);
      if (!__pyx_t_2) break;

      /* "reachability.pyx":966
 *             while root_iter != new_roots.end():
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(t)             # <<<<<<<<<<<<<<
 *                 if (not roots.empty()
 *                     and abs(deref(root_iter).inf() - roots.back().sup()) < 1e-9):
 */
      __Pyx_TraceLine(966,0,__PYX_ERR(0, 966, __pyx_L1_error))
      (*__pyx_v_root_iter).operator+=(__pyx_v_t);

      /* "reachability.pyx":967
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(t)
 *                 if (not roots.empty()             # <<<<<<<<<<<<<<
 *                     and abs(deref(root_iter).inf() - roots.back().sup()) < 1e-9):
 *                     # print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 */
      __Pyx_TraceLine(967,0,__PYX_ERR(0, 967, __pyx_L1_error))
      __pyx_t_3 = ((!(__pyx_v_roots.empty() != 0)) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L10_bool_binop_done;
      }

      /* "reachability.pyx":968
 *                 deref(root_iter).add_assign(t)
 *                 if (not roots.empty()
 *                     and abs(deref(root_iter).inf() - roots.back().sup()) < 1e-9):             # <<<<<<<<<<<<<<
 *                     # print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 *                     #       deref(root_iter).inf(), deref(root_iter).sup(),
 */
      __Pyx_TraceLine(968,0,__PYX_ERR(0, 968, __pyx_L1_error))
      __pyx_t_3 = ((fabs(((*__pyx_v_root_iter).inf() - __pyx_v_roots.back().sup())) < 1e-9) != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L10_bool_binop_done:;

      /* "reachability.pyx":967
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(t)
 *                 if (not roots.empty()             # <<<<<<<<<<<<<<
 *                     and abs(deref(root_iter).inf() - roots.back().sup()) < 1e-9):
 *                     # print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 */
      __Pyx_TraceLine(967,0,__PYX_ERR(0, 967, __pyx_L1_error))
      if (__pyx_t_2) {

        /* "reachability.pyx":972
 *                     #       deref(root_iter).inf(), deref(root_iter).sup(),
 *                     #       roots.back().inf(), roots.back().sup()))
 *                     roots.back().setSup(deref(root_iter).sup())             # <<<<<<<<<<<<<<
 *                 else:
 *                     roots.push_back(deref(root_iter))
 */
        __Pyx_TraceLine(972,0,__PYX_ERR(0, 972, __pyx_L1_error))
        __pyx_v_roots.back().setSup((*__pyx_v_root_iter).sup());

        /* "reachability.pyx":967
 *                 # print("shifting root")
 *                 deref(root_iter).add_assign(t)
 *                 if (not roots.empty()             # <<<<<<<<<<<<<<
 *                     and abs(deref(root_iter).inf() - roots.back().sup()) < 1e-9):
 *                     # print("merging intervals:\n[{}..{}]\n[{}..{}]".format(
 */
        goto __pyx_L9;
      }

      /* "reachability.pyx":974
 *                     roots.back().setSup(deref(root_iter).sup())
 *                 else:
 *                     roots.push_back(deref(root_iter))             # <<<<<<<<<<<<<<
 *                 inc(root_iter)
 * 
 */
      __Pyx_TraceLine(974,0,__PYX_ERR(0, 974, __pyx_L1_error))
      /*else*/ {
        try {
          __pyx_v_roots.push_back((*__pyx_v_root_iter));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 974, __pyx_L1_error)
        }
      }
      __pyx_L9:;

      /* "reachability.pyx":975
 *                 else:
 *                     roots.push_back(deref(root_iter))
 *                 inc(root_iter)             # <<<<<<<<<<<<<<
 * 
 *             # Increment time and loop iters
 */
      __Pyx_TraceLine(975,0,__PYX_ERR(0, 975, __pyx_L1_error))
      (void)((++__pyx_v_root_iter));
    }

    /* "reachability.pyx":978
 * 
 *             # Increment time and loop iters
 *             t += deref(domain).at(var_id_t).sup()             # <<<<<<<<<<<<<<
 *             inc(tmv)
 *             inc(domain)
 */
    __Pyx_TraceLine(978,0,__PYX_ERR(0, 978, __pyx_L1_error))
    try {
      __pyx_t_4 = (*__pyx_v_domain).at(__pyx_v_var_id_t);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 978, __pyx_L1_error)
    }
    __pyx_v_t = (__pyx_v_t + __pyx_t_4->sup());

    /* "reachability.pyx":979
 *             # Increment time and loop iters
 *             t += deref(domain).at(var_id_t).sup()
 *             inc(tmv)             # <<<<<<<<<<<<<<
 *             inc(domain)
 * 
 */
    __Pyx_TraceLine(979,0,__PYX_ERR(0, 979, __pyx_L1_error))
    (void)((++__pyx_v_tmv));

    /* "reachability.pyx":980
 *             t += deref(domain).at(var_id_t).sup()
 *             inc(tmv)
 *             inc(domain)             # <<<<<<<<<<<<<<
 * 
 *         return roots
 */
    __Pyx_TraceLine(980,0,__PYX_ERR(0, 980, __pyx_L1_error))
    (void)((++__pyx_v_domain));
  }

  /* "reachability.pyx":982
 *             inc(domain)
 * 
 *         return roots             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Interval] eval_interval(Reach self, Interval & I):
 */
  __Pyx_TraceLine(982,0,__PYX_ERR(0, 982, __pyx_L1_error))
  __pyx_r = __pyx_v_roots;
  goto __pyx_L0;

  /* "reachability.pyx":929
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 * 
 *     cdef vector[Interval] c_roots(Reach self, interval_fn f, interval_fn fprime):             # <<<<<<<<<<<<<<
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.Reach.c_roots", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":984
 *         return roots
 * 
 *     cdef vector[Interval] eval_interval(Reach self, Interval & I):             # <<<<<<<<<<<<<<
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 */

static std::vector<flowstar::Interval>  __pyx_f_12reachability_5Reach_eval_interval(struct __pyx_obj_12reachability_Reach *__pyx_v_self, flowstar::Interval &__pyx_v_I) {
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv;
  std::list<flowstar::TaylorModelVec> ::iterator __pyx_v_tmv_end;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain;
  std::list<std::vector<flowstar::Interval> > ::iterator __pyx_v_domain_end;
  std::vector<flowstar::Interval>  __pyx_v_res;
  std::vector<int>  __pyx_v_varIDs;
  double __pyx_v_t;
  flowstar::Interval __pyx_v_T;
  std::pair<std::string,int>  __pyx_v_i;
  std::vector<flowstar::Interval>  __pyx_v_domainCopy;
  std::vector<flowstar::Interval>  __pyx_v_final_res;
  bool __pyx_v_initialized;
  int __pyx_v_var_id_t;
  std::vector<flowstar::Interval>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::map<std::string,int> ::iterator __pyx_t_1;
  std::map<std::string,int>  *__pyx_t_2;
  std::pair<std::string,int>  __pyx_t_3;
  std::string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_FakeReference<flowstar::Interval> __pyx_t_7;
  __Pyx_RefNannySetupContext("eval_interval", 0);
  __Pyx_TraceCall("eval_interval", __pyx_f[0], 984, 0, __PYX_ERR(0, 984, __pyx_L1_error));

  /* "reachability.pyx":986
 *     cdef vector[Interval] eval_interval(Reach self, Interval & I):
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()             # <<<<<<<<<<<<<<
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 */
  __Pyx_TraceLine(986,0,__PYX_ERR(0, 986, __pyx_L1_error))
  __pyx_v_tmv = __pyx_v_self->c_reach.flowpipesCompo.begin();

  /* "reachability.pyx":987
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()
 */
  __Pyx_TraceLine(987,0,__PYX_ERR(0, 987, __pyx_L1_error))
  __pyx_v_tmv_end = __pyx_v_self->c_reach.flowpipesCompo.end();

  /* "reachability.pyx":988
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()             # <<<<<<<<<<<<<<
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()
 *             vector[Interval] res
 */
  __Pyx_TraceLine(988,0,__PYX_ERR(0, 988, __pyx_L1_error))
  __pyx_v_domain = __pyx_v_self->c_reach.domains.begin();

  /* "reachability.pyx":989
 *             clist[TaylorModelVec].iterator tmv_end = self.c_reach.flowpipesCompo.end()
 *             clist[vector[Interval]].iterator domain = self.c_reach.domains.begin()
 *             clist[vector[Interval]].iterator domain_end = self.c_reach.domains.end()             # <<<<<<<<<<<<<<
 *             vector[Interval] res
 *             vector[int] varIDs # state variable ids
 */
  __Pyx_TraceLine(989,0,__PYX_ERR(0, 989, __pyx_L1_error))
  __pyx_v_domain_end = __pyx_v_self->c_reach.domains.end();

  /* "reachability.pyx":993
 *             vector[int] varIDs # state variable ids
 *             # string s1, s2, s3, s4
 *             double t = 0.0             # <<<<<<<<<<<<<<
 *             Interval T
 * 
 */
  __Pyx_TraceLine(993,0,__PYX_ERR(0, 993, __pyx_L1_error))
  __pyx_v_t = 0.0;

  /* "reachability.pyx":996
 *             Interval T
 * 
 *         for i in self.c_reach.stateVarTab:             # <<<<<<<<<<<<<<
 *             varIDs.push_back(i.second)
 *         csort(varIDs.begin(), varIDs.end())
 */
  __Pyx_TraceLine(996,0,__PYX_ERR(0, 996, __pyx_L1_error))
  __pyx_t_2 = &__pyx_v_self->c_reach.stateVarTab;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_v_i = __pyx_t_3;

    /* "reachability.pyx":997
 * 
 *         for i in self.c_reach.stateVarTab:
 *             varIDs.push_back(i.second)             # <<<<<<<<<<<<<<
 *         csort(varIDs.begin(), varIDs.end())
 * 
 */
    __Pyx_TraceLine(997,0,__PYX_ERR(0, 997, __pyx_L1_error))
    try {
      __pyx_v_varIDs.push_back(__pyx_v_i.second);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 997, __pyx_L1_error)
    }

    /* "reachability.pyx":996
 *             Interval T
 * 
 *         for i in self.c_reach.stateVarTab:             # <<<<<<<<<<<<<<
 *             varIDs.push_back(i.second)
 *         csort(varIDs.begin(), varIDs.end())
 */
    __Pyx_TraceLine(996,0,__PYX_ERR(0, 996, __pyx_L1_error))
  }

  /* "reachability.pyx":998
 *         for i in self.c_reach.stateVarTab:
 *             varIDs.push_back(i.second)
 *         csort(varIDs.begin(), varIDs.end())             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[Interval] domainCopy
 */
  __Pyx_TraceLine(998,0,__PYX_ERR(0, 998, __pyx_L1_error))
  std::sort<std::vector<int> ::iterator>(__pyx_v_varIDs.begin(), __pyx_v_varIDs.end());

  /* "reachability.pyx":1002
 *         cdef vector[Interval] domainCopy
 *         cdef vector[Interval] final_res
 *         cdef cbool initialized = False             # <<<<<<<<<<<<<<
 * 
 *         var_id_t = self.c_reach.tmVarTab['local_t']
 */
  __Pyx_TraceLine(1002,0,__PYX_ERR(0, 1002, __pyx_L1_error))
  __pyx_v_initialized = 0;

  /* "reachability.pyx":1004
 *         cdef cbool initialized = False
 * 
 *         var_id_t = self.c_reach.tmVarTab['local_t']             # <<<<<<<<<<<<<<
 * 
 *         while (tmv != tmv_end and domain != domain_end):
 */
  __Pyx_TraceLine(1004,0,__PYX_ERR(0, 1004, __pyx_L1_error))
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_local_t); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1004, __pyx_L1_error)
  __pyx_v_var_id_t = (__pyx_v_self->c_reach.tmVarTab[__pyx_t_4]);

  /* "reachability.pyx":1006
 *         var_id_t = self.c_reach.tmVarTab['local_t']
 * 
 *         while (tmv != tmv_end and domain != domain_end):             # <<<<<<<<<<<<<<
 *             T = deref(domain).at(var_id_t)
 *             T.add_assign(t)
 */
  __Pyx_TraceLine(1006,0,__PYX_ERR(0, 1006, __pyx_L1_error))
  while (1) {
    __pyx_t_6 = ((__pyx_v_tmv != __pyx_v_tmv_end) != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_domain != __pyx_v_domain_end) != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L7_bool_binop_done:;
    if (!__pyx_t_5) break;

    /* "reachability.pyx":1007
 * 
 *         while (tmv != tmv_end and domain != domain_end):
 *             T = deref(domain).at(var_id_t)             # <<<<<<<<<<<<<<
 *             T.add_assign(t)
 *             # print(T.inf(), T.sup(), deref(domain).size())
 */
    __Pyx_TraceLine(1007,0,__PYX_ERR(0, 1007, __pyx_L1_error))
    try {
      __pyx_t_7 = (*__pyx_v_domain).at(__pyx_v_var_id_t);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1007, __pyx_L1_error)
    }
    __pyx_v_T = __pyx_t_7;

    /* "reachability.pyx":1008
 *         while (tmv != tmv_end and domain != domain_end):
 *             T = deref(domain).at(var_id_t)
 *             T.add_assign(t)             # <<<<<<<<<<<<<<
 *             # print(T.inf(), T.sup(), deref(domain).size())
 *             # I.toString(s3)
 */
    __Pyx_TraceLine(1008,0,__PYX_ERR(0, 1008, __pyx_L1_error))
    __pyx_v_T.operator+=(__pyx_v_t);

    /* "reachability.pyx":1012
 *             # I.toString(s3)
 *             # T.toString(s4)
 *             if overlaps(I, T):             # <<<<<<<<<<<<<<
 *                 domainCopy = deref(domain)
 *                 domainCopy[var_id_t] = T.intersect(I) # No bounds checking!
 */
    __Pyx_TraceLine(1012,0,__PYX_ERR(0, 1012, __pyx_L1_error))
    __pyx_t_5 = (__pyx_f_12reachability_overlaps(__pyx_v_I, __pyx_v_T) != 0);
    if (__pyx_t_5) {

      /* "reachability.pyx":1013
 *             # T.toString(s4)
 *             if overlaps(I, T):
 *                 domainCopy = deref(domain)             # <<<<<<<<<<<<<<
 *                 domainCopy[var_id_t] = T.intersect(I) # No bounds checking!
 *                 domainCopy[var_id_t].add_assign(-t)
 */
      __Pyx_TraceLine(1013,0,__PYX_ERR(0, 1013, __pyx_L1_error))
      __pyx_v_domainCopy = (*__pyx_v_domain);

      /* "reachability.pyx":1014
 *             if overlaps(I, T):
 *                 domainCopy = deref(domain)
 *                 domainCopy[var_id_t] = T.intersect(I) # No bounds checking!             # <<<<<<<<<<<<<<
 *                 domainCopy[var_id_t].add_assign(-t)
 *                 deref(tmv).intEval(res, domainCopy, varIDs)
 */
      __Pyx_TraceLine(1014,0,__PYX_ERR(0, 1014, __pyx_L1_error))
      (__pyx_v_domainCopy[__pyx_v_var_id_t]) = __pyx_v_T.intersect(__pyx_v_I);

      /* "reachability.pyx":1015
 *                 domainCopy = deref(domain)
 *                 domainCopy[var_id_t] = T.intersect(I) # No bounds checking!
 *                 domainCopy[var_id_t].add_assign(-t)             # <<<<<<<<<<<<<<
 *                 deref(tmv).intEval(res, domainCopy, varIDs)
 * 
 */
      __Pyx_TraceLine(1015,0,__PYX_ERR(0, 1015, __pyx_L1_error))
      (__pyx_v_domainCopy[__pyx_v_var_id_t]).operator+=((-__pyx_v_t));

      /* "reachability.pyx":1016
 *                 domainCopy[var_id_t] = T.intersect(I) # No bounds checking!
 *                 domainCopy[var_id_t].add_assign(-t)
 *                 deref(tmv).intEval(res, domainCopy, varIDs)             # <<<<<<<<<<<<<<
 * 
 *                 # domainCopy[var_id_t].toString(s1)
 */
      __Pyx_TraceLine(1016,0,__PYX_ERR(0, 1016, __pyx_L1_error))
      (*__pyx_v_tmv).intEval(__pyx_v_res, __pyx_v_domainCopy, __pyx_v_varIDs);

      /* "reachability.pyx":1023
 *                 # print(s1, s2, s3, s4)
 * 
 *                 if initialized:             # <<<<<<<<<<<<<<
 *                     interval_vect_union(final_res, res)
 *                 else:
 */
      __Pyx_TraceLine(1023,0,__PYX_ERR(0, 1023, __pyx_L1_error))
      __pyx_t_5 = (__pyx_v_initialized != 0);
      if (__pyx_t_5) {

        /* "reachability.pyx":1024
 * 
 *                 if initialized:
 *                     interval_vect_union(final_res, res)             # <<<<<<<<<<<<<<
 *                 else:
 *                     final_res = res
 */
        __Pyx_TraceLine(1024,0,__PYX_ERR(0, 1024, __pyx_L1_error))
        __pyx_f_12reachability_interval_vect_union(__pyx_v_final_res, __pyx_v_res);

        /* "reachability.pyx":1023
 *                 # print(s1, s2, s3, s4)
 * 
 *                 if initialized:             # <<<<<<<<<<<<<<
 *                     interval_vect_union(final_res, res)
 *                 else:
 */
        goto __pyx_L10;
      }

      /* "reachability.pyx":1026
 *                     interval_vect_union(final_res, res)
 *                 else:
 *                     final_res = res             # <<<<<<<<<<<<<<
 *                     initialized = True
 *             # else:
 */
      __Pyx_TraceLine(1026,0,__PYX_ERR(0, 1026, __pyx_L1_error))
      /*else*/ {
        __pyx_v_final_res = __pyx_v_res;

        /* "reachability.pyx":1027
 *                 else:
 *                     final_res = res
 *                     initialized = True             # <<<<<<<<<<<<<<
 *             # else:
 *             #     print("no overlap!", s3, s4)
 */
        __Pyx_TraceLine(1027,0,__PYX_ERR(0, 1027, __pyx_L1_error))
        __pyx_v_initialized = 1;
      }
      __pyx_L10:;

      /* "reachability.pyx":1012
 *             # I.toString(s3)
 *             # T.toString(s4)
 *             if overlaps(I, T):             # <<<<<<<<<<<<<<
 *                 domainCopy = deref(domain)
 *                 domainCopy[var_id_t] = T.intersect(I) # No bounds checking!
 */
    }

    /* "reachability.pyx":1031
 *             #     print("no overlap!", s3, s4)
 * 
 *             t = T.sup()             # <<<<<<<<<<<<<<
 *             inc(tmv)
 *             inc(domain)
 */
    __Pyx_TraceLine(1031,0,__PYX_ERR(0, 1031, __pyx_L1_error))
    __pyx_v_t = __pyx_v_T.sup();

    /* "reachability.pyx":1032
 * 
 *             t = T.sup()
 *             inc(tmv)             # <<<<<<<<<<<<<<
 *             inc(domain)
 * 
 */
    __Pyx_TraceLine(1032,0,__PYX_ERR(0, 1032, __pyx_L1_error))
    (void)((++__pyx_v_tmv));

    /* "reachability.pyx":1033
 *             t = T.sup()
 *             inc(tmv)
 *             inc(domain)             # <<<<<<<<<<<<<<
 * 
 *         return final_res
 */
    __Pyx_TraceLine(1033,0,__PYX_ERR(0, 1033, __pyx_L1_error))
    (void)((++__pyx_v_domain));
  }

  /* "reachability.pyx":1035
 *             inc(domain)
 * 
 *         return final_res             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, t):
 */
  __Pyx_TraceLine(1035,0,__PYX_ERR(0, 1035, __pyx_L1_error))
  __pyx_r = __pyx_v_final_res;
  goto __pyx_L0;

  /* "reachability.pyx":984
 *         return roots
 * 
 *     cdef vector[Interval] eval_interval(Reach self, Interval & I):             # <<<<<<<<<<<<<<
 *         cdef:
 *             clist[TaylorModelVec].iterator tmv = self.c_reach.flowpipesCompo.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("reachability.Reach.eval_interval", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1037
 *         return final_res
 * 
 *     def __call__(self, t):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_9__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_9__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(0, 1037, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_t = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1037, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_5Reach_8__call__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_8__call__(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_v_RIF = NULL;
  std::vector<flowstar::Interval>  __pyx_v_res;
  flowstar::Interval __pyx_v_I;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  std::vector<flowstar::Interval> ::iterator __pyx_t_12;
  flowstar::Interval __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("__call__", 0);
  __Pyx_TraceCall("__call__", __pyx_f[0], 1037, 0, __PYX_ERR(0, 1037, __pyx_L1_error));

  /* "reachability.pyx":1038
 * 
 *     def __call__(self, t):
 *         from sage.all import RIF             # <<<<<<<<<<<<<<
 * 
 *         self.prepare()
 */
  __Pyx_TraceLine(1038,0,__PYX_ERR(0, 1038, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_RIF);
  __Pyx_GIVEREF(__pyx_n_s_RIF);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_RIF);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_RIF); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_RIF = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1040
 *         from sage.all import RIF
 * 
 *         self.prepare()             # <<<<<<<<<<<<<<
 * 
 *         # Convert python interval to flow* interval
 */
  __Pyx_TraceLine(1040,0,__PYX_ERR(0, 1040, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_prepare); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1040, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1040, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1044
 *         # Convert python interval to flow* interval
 *         cdef vector[Interval] res
 *         cdef Interval I = _interval(t)             # <<<<<<<<<<<<<<
 * 
 *         with self: #  Use captured globals
 */
  __Pyx_TraceLine(1044,0,__PYX_ERR(0, 1044, __pyx_L1_error))
  __pyx_v_I = __pyx_f_12reachability__interval(__pyx_v_t);

  /* "reachability.pyx":1046
 *         cdef Interval I = _interval(t)
 * 
 *         with self: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I)
 * 
 */
  __Pyx_TraceLine(1046,0,__PYX_ERR(0, 1046, __pyx_L1_error))
  /*with:*/ {
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self), __pyx_n_s_exit); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self), __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {

          /* "reachability.pyx":1047
 * 
 *         with self: #  Use captured globals
 *             res = self.eval_interval(I)             # <<<<<<<<<<<<<<
 * 
 *         return [RIF(I.inf(), I.sup()) for I in res]
 */
          __Pyx_TraceLine(1047,0,__PYX_ERR(0, 1047, __pyx_L7_error))
          __pyx_v_res = ((struct __pyx_vtabstruct_12reachability_Reach *)__pyx_v_self->__pyx_vtab)->eval_interval(__pyx_v_self, __pyx_v_I);

          /* "reachability.pyx":1046
 *         cdef Interval I = _interval(t)
 * 
 *         with self: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I)
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("reachability.Reach.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 1046, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1046, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1046, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_10 < 0) __PYX_ERR(0, 1046, __pyx_L9_except_error)
          __pyx_t_11 = ((!(__pyx_t_10 != 0)) != 0);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_1, __pyx_t_3);
            __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 1046, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_4) {
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__19, NULL);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1046, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  /* "reachability.pyx":1049
 *             res = self.eval_interval(I)
 * 
 *         return [RIF(I.inf(), I.sup()) for I in res]             # <<<<<<<<<<<<<<
 * 
 *     def prepare(self):
 */
  __Pyx_TraceLine(1049,0,__PYX_ERR(0, 1049, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = __pyx_v_res.begin();
  for (;;) {
    if (!(__pyx_t_12 != __pyx_v_res.end())) break;
    __pyx_t_13 = *__pyx_t_12;
    ++__pyx_t_12;
    __pyx_v_I = __pyx_t_13;
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_I.inf()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_I.sup()); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_RIF);
    __pyx_t_14 = __pyx_v_RIF; __pyx_t_15 = NULL;
    __pyx_t_16 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
        __pyx_t_16 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_2, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_2, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_17 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      if (__pyx_t_15) {
        __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_15); __pyx_t_15 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_16, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_16, __pyx_t_8);
      __pyx_t_2 = 0;
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1037
 *         return final_res
 * 
 *     def __call__(self, t):             # <<<<<<<<<<<<<<
 *         from sage.all import RIF
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("reachability.Reach.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_RIF);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1051
 *         return [RIF(I.inf(), I.sup()) for I in res]
 * 
 *     def prepare(self):             # <<<<<<<<<<<<<<
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_11prepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12reachability_5Reach_10prepare[] = "Prepare for plotting / evaluating.";
static PyObject *__pyx_pw_12reachability_5Reach_11prepare(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepare (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_10prepare(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_10prepare(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("prepare", 0);
  __Pyx_TraceCall("prepare", __pyx_f[0], 1051, 0, __PYX_ERR(0, 1051, __pyx_L1_error));

  /* "reachability.pyx":1053
 *     def prepare(self):
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Not ran!')
 * 
 */
  __Pyx_TraceLine(1053,0,__PYX_ERR(0, 1053, __pyx_L1_error))
  __pyx_t_1 = ((!(__pyx_v_self->ran != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "reachability.pyx":1054
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:
 *             raise Exception('Not ran!')             # <<<<<<<<<<<<<<
 * 
 *         if not self.prepared:
 */
    __Pyx_TraceLine(1054,0,__PYX_ERR(0, 1054, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1054, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1054, __pyx_L1_error)

    /* "reachability.pyx":1053
 *     def prepare(self):
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Not ran!')
 * 
 */
  }

  /* "reachability.pyx":1056
 *             raise Exception('Not ran!')
 * 
 *         if not self.prepared:             # <<<<<<<<<<<<<<
 *             with self:  # with local globals
 *                 # if we run prepareForPlotting more than once we crash
 */
  __Pyx_TraceLine(1056,0,__PYX_ERR(0, 1056, __pyx_L1_error))
  __pyx_t_1 = ((!(__pyx_v_self->prepared != 0)) != 0);
  if (__pyx_t_1) {

    /* "reachability.pyx":1057
 * 
 *         if not self.prepared:
 *             with self:  # with local globals             # <<<<<<<<<<<<<<
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()
 */
    __Pyx_TraceLine(1057,0,__PYX_ERR(0, 1057, __pyx_L1_error))
    /*with:*/ {
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self), __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1057, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(((PyObject *)__pyx_v_self), __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1057, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L5_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_6);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_8);
          /*try:*/ {

            /* "reachability.pyx":1059
 *             with self:  # with local globals
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()             # <<<<<<<<<<<<<<
 *             self.prepared = True
 * 
 */
            __Pyx_TraceLine(1059,0,__PYX_ERR(0, 1059, __pyx_L9_error))
            __pyx_v_self->c_reach.prepareForDumping();

            /* "reachability.pyx":1057
 * 
 *         if not self.prepared:
 *             with self:  # with local globals             # <<<<<<<<<<<<<<
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()
 */
          }
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L14_try_end;
          __pyx_L9_error:;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("reachability.Reach.prepare", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 1057, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_9 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1057, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1057, __pyx_L11_except_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 1057, __pyx_L11_except_error)
            __pyx_t_11 = ((!(__pyx_t_1 != 0)) != 0);
            if (__pyx_t_11) {
              __Pyx_GIVEREF(__pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_5);
              __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_4, __pyx_t_5);
              __pyx_t_2 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0; 
              __PYX_ERR(0, 1057, __pyx_L11_except_error)
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L10_exception_handled;
          }
          __pyx_L11_except_error:;
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          goto __pyx_L1_error;
          __pyx_L10_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_6);
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
          __pyx_L14_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_3) {
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__21, NULL);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1057, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          goto __pyx_L8;
        }
        __pyx_L8:;
      }
      goto __pyx_L18;
      __pyx_L5_error:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L1_error;
      __pyx_L18:;
    }

    /* "reachability.pyx":1060
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()
 *             self.prepared = True             # <<<<<<<<<<<<<<
 * 
 *     def sage_plot_manual(self, x, double step=1e-1):
 */
    __Pyx_TraceLine(1060,0,__PYX_ERR(0, 1060, __pyx_L1_error))
    __pyx_v_self->prepared = 1;

    /* "reachability.pyx":1056
 *             raise Exception('Not ran!')
 * 
 *         if not self.prepared:             # <<<<<<<<<<<<<<
 *             with self:  # with local globals
 *                 # if we run prepareForPlotting more than once we crash
 */
  }

  /* "reachability.pyx":1051
 *         return [RIF(I.inf(), I.sup()) for I in res]
 * 
 *     def prepare(self):             # <<<<<<<<<<<<<<
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("reachability.Reach.prepare", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1062
 *             self.prepared = True
 * 
 *     def sage_plot_manual(self, x, double step=1e-1):             # <<<<<<<<<<<<<<
 *         from sage.all import Graphics, line
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_13sage_plot_manual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_13sage_plot_manual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  double __pyx_v_step;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sage_plot_manual (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_step,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sage_plot_manual") < 0)) __PYX_ERR(0, 1062, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    if (values[1]) {
      __pyx_v_step = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_step == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1062, __pyx_L3_error)
    } else {
      __pyx_v_step = ((double)1e-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sage_plot_manual", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1062, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.sage_plot_manual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_5Reach_12sage_plot_manual(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_x, __pyx_v_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_12sage_plot_manual(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, double __pyx_v_step) {
  PyObject *__pyx_v_Graphics = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_p = NULL;
  int __pyx_v_var_id;
  PyObject *__pyx_v_res1 = NULL;
  PyObject *__pyx_v_lo1 = NULL;
  PyObject *__pyx_v_hi1 = NULL;
  double __pyx_v_t;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_v_lo = NULL;
  PyObject *__pyx_v_hi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannySetupContext("sage_plot_manual", 0);
  __Pyx_TraceCall("sage_plot_manual", __pyx_f[0], 1062, 0, __PYX_ERR(0, 1062, __pyx_L1_error));

  /* "reachability.pyx":1063
 * 
 *     def sage_plot_manual(self, x, double step=1e-1):
 *         from sage.all import Graphics, line             # <<<<<<<<<<<<<<
 * 
 *         p = Graphics()
 */
  __Pyx_TraceLine(1063,0,__PYX_ERR(0, 1063, __pyx_L1_error))
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Graphics);
  __Pyx_GIVEREF(__pyx_n_s_Graphics);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Graphics);
  __Pyx_INCREF(__pyx_n_s_line);
  __Pyx_GIVEREF(__pyx_n_s_line);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_line);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Graphics); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Graphics = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_line = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1065
 *         from sage.all import Graphics, line
 * 
 *         p = Graphics()             # <<<<<<<<<<<<<<
 *         cdef int var_id = self.c_reach.getIDForStateVar(x)
 *         res1 = self((-1e-7,1e-7))[var_id]
 */
  __Pyx_TraceLine(1065,0,__PYX_ERR(0, 1065, __pyx_L1_error))
  __Pyx_INCREF(__pyx_v_Graphics);
  __pyx_t_1 = __pyx_v_Graphics; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1065, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_p = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "reachability.pyx":1066
 * 
 *         p = Graphics()
 *         cdef int var_id = self.c_reach.getIDForStateVar(x)             # <<<<<<<<<<<<<<
 *         res1 = self((-1e-7,1e-7))[var_id]
 *         lo1, hi1 = res1.lower(), res1.upper()
 */
  __Pyx_TraceLine(1066,0,__PYX_ERR(0, 1066, __pyx_L1_error))
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L1_error)
  __pyx_v_var_id = __pyx_v_self->c_reach.getIDForStateVar(__pyx_t_4);

  /* "reachability.pyx":1067
 *         p = Graphics()
 *         cdef int var_id = self.c_reach.getIDForStateVar(x)
 *         res1 = self((-1e-7,1e-7))[var_id]             # <<<<<<<<<<<<<<
 *         lo1, hi1 = res1.lower(), res1.upper()
 *         cdef double t = 0
 */
  __Pyx_TraceLine(1067,0,__PYX_ERR(0, 1067, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_self), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_var_id, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_res1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "reachability.pyx":1068
 *         cdef int var_id = self.c_reach.getIDForStateVar(x)
 *         res1 = self((-1e-7,1e-7))[var_id]
 *         lo1, hi1 = res1.lower(), res1.upper()             # <<<<<<<<<<<<<<
 *         cdef double t = 0
 * 
 */
  __Pyx_TraceLine(1068,0,__PYX_ERR(0, 1068, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_res1, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_res1, __pyx_n_s_upper); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_lo1 = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_hi1 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "reachability.pyx":1069
 *         res1 = self((-1e-7,1e-7))[var_id]
 *         lo1, hi1 = res1.lower(), res1.upper()
 *         cdef double t = 0             # <<<<<<<<<<<<<<
 * 
 *         for i in range(int(self.c_reach.time/step)):
 */
  __Pyx_TraceLine(1069,0,__PYX_ERR(0, 1069, __pyx_L1_error))
  __pyx_v_t = 0.0;

  /* "reachability.pyx":1071
 *         cdef double t = 0
 * 
 *         for i in range(int(self.c_reach.time/step)):             # <<<<<<<<<<<<<<
 *             t = step*i
 *             res = self((t, t+step))
 */
  __Pyx_TraceLine(1071,0,__PYX_ERR(0, 1071, __pyx_L1_error))
  if (unlikely(__pyx_v_step == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1071, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_FromDouble((__pyx_v_self->c_reach.time / __pyx_v_step)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1071, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1071, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1071, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1071, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1071, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "reachability.pyx":1072
 * 
 *         for i in range(int(self.c_reach.time/step)):
 *             t = step*i             # <<<<<<<<<<<<<<
 *             res = self((t, t+step))
 *             try:
 */
    __Pyx_TraceLine(1072,0,__PYX_ERR(0, 1072, __pyx_L1_error))
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_t = __pyx_t_8;

    /* "reachability.pyx":1073
 *         for i in range(int(self.c_reach.time/step)):
 *             t = step*i
 *             res = self((t, t+step))             # <<<<<<<<<<<<<<
 *             try:
 *                 (lo, hi) = res[var_id].endpoints()
 */
    __Pyx_TraceLine(1073,0,__PYX_ERR(0, 1073, __pyx_L1_error))
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_t + __pyx_v_step)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_t_5 = ((PyObject *)__pyx_v_self); __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_9};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_9};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_res, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "reachability.pyx":1074
 *             t = step*i
 *             res = self((t, t+step))
 *             try:             # <<<<<<<<<<<<<<
 *                 (lo, hi) = res[var_id].endpoints()
 *             except:
 */
    __Pyx_TraceLine(1074,0,__PYX_ERR(0, 1074, __pyx_L5_error))
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "reachability.pyx":1075
 *             res = self((t, t+step))
 *             try:
 *                 (lo, hi) = res[var_id].endpoints()             # <<<<<<<<<<<<<<
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 */
        __Pyx_TraceLine(1075,0,__PYX_ERR(0, 1075, __pyx_L5_error))
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_res, __pyx_v_var_id, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1075, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_endpoints); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1075, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        if (__pyx_t_5) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else {
          __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L5_error)
        }
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1075, __pyx_L5_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_5);
          #else
          __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1075, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1075, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1075, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext;
          index = 0; __pyx_t_10 = __pyx_t_14(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L13_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_10);
          index = 1; __pyx_t_5 = __pyx_t_14(__pyx_t_9); if (unlikely(!__pyx_t_5)) goto __pyx_L13_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_9), 2) < 0) __PYX_ERR(0, 1075, __pyx_L5_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L14_unpacking_done;
          __pyx_L13_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1075, __pyx_L5_error)
          __pyx_L14_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_lo, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_hi, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "reachability.pyx":1074
 *             t = step*i
 *             res = self((t, t+step))
 *             try:             # <<<<<<<<<<<<<<
 *                 (lo, hi) = res[var_id].endpoints()
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "reachability.pyx":1076
 *             try:
 *                 (lo, hi) = res[var_id].endpoints()
 *             except:             # <<<<<<<<<<<<<<
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             p += line([(t, lo), (t+step, lo)])
 */
      __Pyx_TraceLine(1076,0,__PYX_ERR(0, 1076, __pyx_L7_except_error))
      /*except:*/ {
        __Pyx_AddTraceback("reachability.Reach.sage_plot_manual", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_5, &__pyx_t_10) < 0) __PYX_ERR(0, 1076, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_10);

        /* "reachability.pyx":1077
 *                 (lo, hi) = res[var_id].endpoints()
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))             # <<<<<<<<<<<<<<
 *             p += line([(t, lo), (t+step, lo)])
 *             p += line([(t, lo1), (t, lo)])
 */
        __Pyx_TraceLine(1077,0,__PYX_ERR(0, 1077, __pyx_L7_except_error))
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_warning_eval_failed_for_t_in, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1077, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_15 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1077, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = PyFloat_FromDouble((__pyx_v_t + __pyx_v_step)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1077, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_17 = NULL;
        __pyx_t_18 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_18 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_18, 2+__pyx_t_18); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1077, __pyx_L7_except_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_18, 2+__pyx_t_18); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1077, __pyx_L7_except_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        } else
        #endif
        {
          __pyx_t_19 = PyTuple_New(2+__pyx_t_18); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1077, __pyx_L7_except_error)
          __Pyx_GOTREF(__pyx_t_19);
          if (__pyx_t_17) {
            __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_17); __pyx_t_17 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_18, __pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_18, __pyx_t_16);
          __pyx_t_15 = 0;
          __pyx_t_16 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_19, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1077, __pyx_L7_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1077, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L6_exception_handled;
      }
      __pyx_L7_except_error:;

      /* "reachability.pyx":1074
 *             t = step*i
 *             res = self((t, t+step))
 *             try:             # <<<<<<<<<<<<<<
 *                 (lo, hi) = res[var_id].endpoints()
 *             except:
 */
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __pyx_L12_try_end:;
    }

    /* "reachability.pyx":1078
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             p += line([(t, lo), (t+step, lo)])             # <<<<<<<<<<<<<<
 *             p += line([(t, lo1), (t, lo)])
 *             p += line([(t, hi), (t+step, hi)], color='#3bcc00')
 */
    __Pyx_TraceLine(1078,0,__PYX_ERR(0, 1078, __pyx_L1_error))
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_lo)) { __Pyx_RaiseUnboundLocalError("lo"); __PYX_ERR(0, 1078, __pyx_L1_error) }
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_lo);
    __Pyx_GIVEREF(__pyx_v_lo);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_lo);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_t + __pyx_v_step)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_lo)) { __Pyx_RaiseUnboundLocalError("lo"); __PYX_ERR(0, 1078, __pyx_L1_error) }
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_lo);
    __Pyx_GIVEREF(__pyx_v_lo);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_lo);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v_line);
    __pyx_t_1 = __pyx_v_line; __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1078, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1078, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1078, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1078, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1078, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "reachability.pyx":1079
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             p += line([(t, lo), (t+step, lo)])
 *             p += line([(t, lo1), (t, lo)])             # <<<<<<<<<<<<<<
 *             p += line([(t, hi), (t+step, hi)], color='#3bcc00')
 *             p += line([(t, hi1), (t, hi)], color='#3bcc00')
 */
    __Pyx_TraceLine(1079,0,__PYX_ERR(0, 1079, __pyx_L1_error))
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
    __Pyx_INCREF(__pyx_v_lo1);
    __Pyx_GIVEREF(__pyx_v_lo1);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_lo1);
    __pyx_t_10 = 0;
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (unlikely(!__pyx_v_lo)) { __Pyx_RaiseUnboundLocalError("lo"); __PYX_ERR(0, 1079, __pyx_L1_error) }
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_10);
    __Pyx_INCREF(__pyx_v_lo);
    __Pyx_GIVEREF(__pyx_v_lo);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_lo);
    __pyx_t_10 = 0;
    __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_5);
    __pyx_t_9 = 0;
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_v_line);
    __pyx_t_5 = __pyx_v_line; __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_10};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_10};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1079, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1079, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "reachability.pyx":1080
 *             p += line([(t, lo), (t+step, lo)])
 *             p += line([(t, lo1), (t, lo)])
 *             p += line([(t, hi), (t+step, hi)], color='#3bcc00')             # <<<<<<<<<<<<<<
 *             p += line([(t, hi1), (t, hi)], color='#3bcc00')
 *             lo1 = lo
 */
    __Pyx_TraceLine(1080,0,__PYX_ERR(0, 1080, __pyx_L1_error))
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_hi)) { __Pyx_RaiseUnboundLocalError("hi"); __PYX_ERR(0, 1080, __pyx_L1_error) }
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_hi);
    __Pyx_GIVEREF(__pyx_v_hi);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_hi);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_t + __pyx_v_step)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_hi)) { __Pyx_RaiseUnboundLocalError("hi"); __PYX_ERR(0, 1080, __pyx_L1_error) }
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_hi);
    __Pyx_GIVEREF(__pyx_v_hi);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_hi);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_color, __pyx_kp_s_3bcc00) < 0) __PYX_ERR(0, 1080, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_line, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "reachability.pyx":1081
 *             p += line([(t, lo1), (t, lo)])
 *             p += line([(t, hi), (t+step, hi)], color='#3bcc00')
 *             p += line([(t, hi1), (t, hi)], color='#3bcc00')             # <<<<<<<<<<<<<<
 *             lo1 = lo
 *             hi1 = hi
 */
    __Pyx_TraceLine(1081,0,__PYX_ERR(0, 1081, __pyx_L1_error))
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_hi1);
    __Pyx_GIVEREF(__pyx_v_hi1);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_hi1);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_hi)) { __Pyx_RaiseUnboundLocalError("hi"); __PYX_ERR(0, 1081, __pyx_L1_error) }
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_hi);
    __Pyx_GIVEREF(__pyx_v_hi);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_hi);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_color, __pyx_kp_s_3bcc00) < 0) __PYX_ERR(0, 1081, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_line, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "reachability.pyx":1082
 *             p += line([(t, hi), (t+step, hi)], color='#3bcc00')
 *             p += line([(t, hi1), (t, hi)], color='#3bcc00')
 *             lo1 = lo             # <<<<<<<<<<<<<<
 *             hi1 = hi
 * 
 */
    __Pyx_TraceLine(1082,0,__PYX_ERR(0, 1082, __pyx_L1_error))
    if (unlikely(!__pyx_v_lo)) { __Pyx_RaiseUnboundLocalError("lo"); __PYX_ERR(0, 1082, __pyx_L1_error) }
    __Pyx_INCREF(__pyx_v_lo);
    __Pyx_DECREF_SET(__pyx_v_lo1, __pyx_v_lo);

    /* "reachability.pyx":1083
 *             p += line([(t, hi1), (t, hi)], color='#3bcc00')
 *             lo1 = lo
 *             hi1 = hi             # <<<<<<<<<<<<<<
 * 
 *         return p
 */
    __Pyx_TraceLine(1083,0,__PYX_ERR(0, 1083, __pyx_L1_error))
    if (unlikely(!__pyx_v_hi)) { __Pyx_RaiseUnboundLocalError("hi"); __PYX_ERR(0, 1083, __pyx_L1_error) }
    __Pyx_INCREF(__pyx_v_hi);
    __Pyx_DECREF_SET(__pyx_v_hi1, __pyx_v_hi);

    /* "reachability.pyx":1071
 *         cdef double t = 0
 * 
 *         for i in range(int(self.c_reach.time/step)):             # <<<<<<<<<<<<<<
 *             t = step*i
 *             res = self((t, t+step))
 */
    __Pyx_TraceLine(1071,0,__PYX_ERR(0, 1071, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1085
 *             hi1 = hi
 * 
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     def sage_interval_plot(self, str x, str y, double step=1e-1, **kwargs):
 */
  __Pyx_TraceLine(1085,0,__PYX_ERR(0, 1085, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p);
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "reachability.pyx":1062
 *             self.prepared = True
 * 
 *     def sage_plot_manual(self, x, double step=1e-1):             # <<<<<<<<<<<<<<
 *         from sage.all import Graphics, line
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("reachability.Reach.sage_plot_manual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Graphics);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_res1);
  __Pyx_XDECREF(__pyx_v_lo1);
  __Pyx_XDECREF(__pyx_v_hi1);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XDECREF(__pyx_v_lo);
  __Pyx_XDECREF(__pyx_v_hi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1087
 *         return p
 * 
 *     def sage_interval_plot(self, str x, str y, double step=1e-1, **kwargs):             # <<<<<<<<<<<<<<
 *         from sage.all import Graphics, polygon
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_15sage_interval_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_15sage_interval_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  double __pyx_v_step;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sage_interval_plot (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_step,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sage_interval_plot", 0, 2, 3, 1); __PYX_ERR(0, 1087, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "sage_interval_plot") < 0)) __PYX_ERR(0, 1087, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = ((PyObject*)values[0]);
    __pyx_v_y = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_step = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_step == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1087, __pyx_L3_error)
    } else {
      __pyx_v_step = ((double)1e-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sage_interval_plot", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1087, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("reachability.Reach.sage_interval_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), (&PyString_Type), 1, "x", 1))) __PYX_ERR(0, 1087, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), (&PyString_Type), 1, "y", 1))) __PYX_ERR(0, 1087, __pyx_L1_error)
  __pyx_r = __pyx_pf_12reachability_5Reach_14sage_interval_plot(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_step, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_14sage_interval_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, double __pyx_v_step, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_Graphics = NULL;
  PyObject *__pyx_v_polygon = NULL;
  PyObject *__pyx_v_p = NULL;
  int __pyx_v_var_id_x;
  int __pyx_v_var_id_y;
  double __pyx_v_t;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_v_xlo = NULL;
  PyObject *__pyx_v_xhi = NULL;
  PyObject *__pyx_v_ylo = NULL;
  PyObject *__pyx_v_yhi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannySetupContext("sage_interval_plot", 0);
  __Pyx_TraceCall("sage_interval_plot", __pyx_f[0], 1087, 0, __PYX_ERR(0, 1087, __pyx_L1_error));

  /* "reachability.pyx":1088
 * 
 *     def sage_interval_plot(self, str x, str y, double step=1e-1, **kwargs):
 *         from sage.all import Graphics, polygon             # <<<<<<<<<<<<<<
 * 
 *         p = Graphics()
 */
  __Pyx_TraceLine(1088,0,__PYX_ERR(0, 1088, __pyx_L1_error))
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Graphics);
  __Pyx_GIVEREF(__pyx_n_s_Graphics);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Graphics);
  __Pyx_INCREF(__pyx_n_s_polygon);
  __Pyx_GIVEREF(__pyx_n_s_polygon);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_polygon);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Graphics); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Graphics = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_polygon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_polygon = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1090
 *         from sage.all import Graphics, polygon
 * 
 *         p = Graphics()             # <<<<<<<<<<<<<<
 *         cdef int var_id_x = self.c_reach.getIDForStateVar(x)
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)
 */
  __Pyx_TraceLine(1090,0,__PYX_ERR(0, 1090, __pyx_L1_error))
  __Pyx_INCREF(__pyx_v_Graphics);
  __pyx_t_1 = __pyx_v_Graphics; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1090, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1090, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_p = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "reachability.pyx":1091
 * 
 *         p = Graphics()
 *         cdef int var_id_x = self.c_reach.getIDForStateVar(x)             # <<<<<<<<<<<<<<
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)
 *         cdef double t = 0
 */
  __Pyx_TraceLine(1091,0,__PYX_ERR(0, 1091, __pyx_L1_error))
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1091, __pyx_L1_error)
  __pyx_v_var_id_x = __pyx_v_self->c_reach.getIDForStateVar(__pyx_t_4);

  /* "reachability.pyx":1092
 *         p = Graphics()
 *         cdef int var_id_x = self.c_reach.getIDForStateVar(x)
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)             # <<<<<<<<<<<<<<
 *         cdef double t = 0
 * 
 */
  __Pyx_TraceLine(1092,0,__PYX_ERR(0, 1092, __pyx_L1_error))
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1092, __pyx_L1_error)
  __pyx_v_var_id_y = __pyx_v_self->c_reach.getIDForStateVar(__pyx_t_4);

  /* "reachability.pyx":1093
 *         cdef int var_id_x = self.c_reach.getIDForStateVar(x)
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)
 *         cdef double t = 0             # <<<<<<<<<<<<<<
 * 
 *         for i in range(int(self.c_reach.time/step)):
 */
  __Pyx_TraceLine(1093,0,__PYX_ERR(0, 1093, __pyx_L1_error))
  __pyx_v_t = 0.0;

  /* "reachability.pyx":1095
 *         cdef double t = 0
 * 
 *         for i in range(int(self.c_reach.time/step)):             # <<<<<<<<<<<<<<
 *             t = step*i
 *             res = self((t, t+step))
 */
  __Pyx_TraceLine(1095,0,__PYX_ERR(0, 1095, __pyx_L1_error))
  if (unlikely(__pyx_v_step == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1095, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_FromDouble((__pyx_v_self->c_reach.time / __pyx_v_step)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1095, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1095, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1095, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1095, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1095, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1095, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "reachability.pyx":1096
 * 
 *         for i in range(int(self.c_reach.time/step)):
 *             t = step*i             # <<<<<<<<<<<<<<
 *             res = self((t, t+step))
 *             try:
 */
    __Pyx_TraceLine(1096,0,__PYX_ERR(0, 1096, __pyx_L1_error))
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1096, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1096, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_t = __pyx_t_7;

    /* "reachability.pyx":1097
 *         for i in range(int(self.c_reach.time/step)):
 *             t = step*i
 *             res = self((t, t+step))             # <<<<<<<<<<<<<<
 *             try:
 *                 (xlo, xhi) = res[var_id_x].endpoints()
 */
    __Pyx_TraceLine(1097,0,__PYX_ERR(0, 1097, __pyx_L1_error))
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyFloat_FromDouble((__pyx_v_t + __pyx_v_step)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
    __pyx_t_1 = 0;
    __pyx_t_8 = 0;
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_t_8 = ((PyObject *)__pyx_v_self); __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1097, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_9};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1097, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_9};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1097, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1097, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1097, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_res, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "reachability.pyx":1098
 *             t = step*i
 *             res = self((t, t+step))
 *             try:             # <<<<<<<<<<<<<<
 *                 (xlo, xhi) = res[var_id_x].endpoints()
 *                 (ylo, yhi) = res[var_id_y].endpoints()
 */
    __Pyx_TraceLine(1098,0,__PYX_ERR(0, 1098, __pyx_L5_error))
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "reachability.pyx":1099
 *             res = self((t, t+step))
 *             try:
 *                 (xlo, xhi) = res[var_id_x].endpoints()             # <<<<<<<<<<<<<<
 *                 (ylo, yhi) = res[var_id_y].endpoints()
 *             except:
 */
        __Pyx_TraceLine(1099,0,__PYX_ERR(0, 1099, __pyx_L5_error))
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_res, __pyx_v_var_id_x, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1099, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_endpoints); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1099, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        if (__pyx_t_8) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1099, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else {
          __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1099, __pyx_L5_error)
        }
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1099, __pyx_L5_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_8);
          #else
          __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1099, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1099, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1099, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext;
          index = 0; __pyx_t_10 = __pyx_t_14(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L13_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_10);
          index = 1; __pyx_t_8 = __pyx_t_14(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L13_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_9), 2) < 0) __PYX_ERR(0, 1099, __pyx_L5_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L14_unpacking_done;
          __pyx_L13_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1099, __pyx_L5_error)
          __pyx_L14_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_xlo, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_xhi, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "reachability.pyx":1100
 *             try:
 *                 (xlo, xhi) = res[var_id_x].endpoints()
 *                 (ylo, yhi) = res[var_id_y].endpoints()             # <<<<<<<<<<<<<<
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 */
        __Pyx_TraceLine(1100,0,__PYX_ERR(0, 1100, __pyx_L5_error))
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_res, __pyx_v_var_id_y, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1100, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_endpoints); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1100, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        if (__pyx_t_8) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else {
          __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L5_error)
        }
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1100, __pyx_L5_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_8);
          #else
          __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1100, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1100, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1100, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext;
          index = 0; __pyx_t_10 = __pyx_t_14(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L15_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_10);
          index = 1; __pyx_t_8 = __pyx_t_14(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L15_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_9), 2) < 0) __PYX_ERR(0, 1100, __pyx_L5_error)
          __pyx_t_14 = NULL;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L16_unpacking_done;
          __pyx_L15_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_14 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1100, __pyx_L5_error)
          __pyx_L16_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_ylo, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_yhi, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "reachability.pyx":1098
 *             t = step*i
 *             res = self((t, t+step))
 *             try:             # <<<<<<<<<<<<<<
 *                 (xlo, xhi) = res[var_id_x].endpoints()
 *                 (ylo, yhi) = res[var_id_y].endpoints()
 */
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "reachability.pyx":1101
 *                 (xlo, xhi) = res[var_id_x].endpoints()
 *                 (ylo, yhi) = res[var_id_y].endpoints()
 *             except:             # <<<<<<<<<<<<<<
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             p += polygon([(xlo, ylo), (xlo, yhi), (xhi, yhi), (xhi, ylo)],
 */
      __Pyx_TraceLine(1101,0,__PYX_ERR(0, 1101, __pyx_L7_except_error))
      /*except:*/ {
        __Pyx_AddTraceback("reachability.Reach.sage_interval_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_8, &__pyx_t_10) < 0) __PYX_ERR(0, 1101, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_10);

        /* "reachability.pyx":1102
 *                 (ylo, yhi) = res[var_id_y].endpoints()
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))             # <<<<<<<<<<<<<<
 *             p += polygon([(xlo, ylo), (xlo, yhi), (xhi, yhi), (xhi, ylo)],
 *                          fill=False, **kwargs)
 */
        __Pyx_TraceLine(1102,0,__PYX_ERR(0, 1102, __pyx_L7_except_error))
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_warning_eval_failed_for_t_in, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1102, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_15 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1102, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = PyFloat_FromDouble((__pyx_v_t + __pyx_v_step)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1102, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_17 = NULL;
        __pyx_t_18 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_18 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_18, 2+__pyx_t_18); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1102, __pyx_L7_except_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_18, 2+__pyx_t_18); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1102, __pyx_L7_except_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        } else
        #endif
        {
          __pyx_t_19 = PyTuple_New(2+__pyx_t_18); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1102, __pyx_L7_except_error)
          __Pyx_GOTREF(__pyx_t_19);
          if (__pyx_t_17) {
            __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_17); __pyx_t_17 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_18, __pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_18, __pyx_t_16);
          __pyx_t_15 = 0;
          __pyx_t_16 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_19, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1102, __pyx_L7_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1102, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L6_exception_handled;
      }
      __pyx_L7_except_error:;

      /* "reachability.pyx":1098
 *             t = step*i
 *             res = self((t, t+step))
 *             try:             # <<<<<<<<<<<<<<
 *                 (xlo, xhi) = res[var_id_x].endpoints()
 *                 (ylo, yhi) = res[var_id_y].endpoints()
 */
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __pyx_L12_try_end:;
    }

    /* "reachability.pyx":1103
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             p += polygon([(xlo, ylo), (xlo, yhi), (xhi, yhi), (xhi, ylo)],             # <<<<<<<<<<<<<<
 *                          fill=False, **kwargs)
 * 
 */
    __Pyx_TraceLine(1103,0,__PYX_ERR(0, 1103, __pyx_L1_error))
    if (unlikely(!__pyx_v_xlo)) { __Pyx_RaiseUnboundLocalError("xlo"); __PYX_ERR(0, 1103, __pyx_L1_error) }
    if (unlikely(!__pyx_v_ylo)) { __Pyx_RaiseUnboundLocalError("ylo"); __PYX_ERR(0, 1103, __pyx_L1_error) }
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v_xlo);
    __Pyx_GIVEREF(__pyx_v_xlo);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_xlo);
    __Pyx_INCREF(__pyx_v_ylo);
    __Pyx_GIVEREF(__pyx_v_ylo);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_ylo);
    if (unlikely(!__pyx_v_xlo)) { __Pyx_RaiseUnboundLocalError("xlo"); __PYX_ERR(0, 1103, __pyx_L1_error) }
    if (unlikely(!__pyx_v_yhi)) { __Pyx_RaiseUnboundLocalError("yhi"); __PYX_ERR(0, 1103, __pyx_L1_error) }
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_xlo);
    __Pyx_GIVEREF(__pyx_v_xlo);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_xlo);
    __Pyx_INCREF(__pyx_v_yhi);
    __Pyx_GIVEREF(__pyx_v_yhi);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_yhi);
    if (unlikely(!__pyx_v_xhi)) { __Pyx_RaiseUnboundLocalError("xhi"); __PYX_ERR(0, 1103, __pyx_L1_error) }
    if (unlikely(!__pyx_v_yhi)) { __Pyx_RaiseUnboundLocalError("yhi"); __PYX_ERR(0, 1103, __pyx_L1_error) }
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_xhi);
    __Pyx_GIVEREF(__pyx_v_xhi);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_xhi);
    __Pyx_INCREF(__pyx_v_yhi);
    __Pyx_GIVEREF(__pyx_v_yhi);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_yhi);
    if (unlikely(!__pyx_v_xhi)) { __Pyx_RaiseUnboundLocalError("xhi"); __PYX_ERR(0, 1103, __pyx_L1_error) }
    if (unlikely(!__pyx_v_ylo)) { __Pyx_RaiseUnboundLocalError("ylo"); __PYX_ERR(0, 1103, __pyx_L1_error) }
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_xhi);
    __Pyx_GIVEREF(__pyx_v_xhi);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_xhi);
    __Pyx_INCREF(__pyx_v_ylo);
    __Pyx_GIVEREF(__pyx_v_ylo);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_ylo);
    __pyx_t_9 = PyList_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_9, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_9, 3, __pyx_t_1);
    __pyx_t_10 = 0;
    __pyx_t_8 = 0;
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "reachability.pyx":1104
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             p += polygon([(xlo, ylo), (xlo, yhi), (xhi, yhi), (xhi, ylo)],
 *                          fill=False, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         return p
 */
    __Pyx_TraceLine(1104,0,__PYX_ERR(0, 1104, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_fill, Py_False) < 0) __PYX_ERR(0, 1104, __pyx_L1_error)
    __pyx_t_9 = __pyx_t_3;
    __pyx_t_3 = 0;
    if (__Pyx_MergeKeywords(__pyx_t_9, __pyx_v_kwargs) < 0) __PYX_ERR(0, 1104, __pyx_L1_error)

    /* "reachability.pyx":1103
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             p += polygon([(xlo, ylo), (xlo, yhi), (xhi, yhi), (xhi, ylo)],             # <<<<<<<<<<<<<<
 *                          fill=False, **kwargs)
 * 
 */
    __Pyx_TraceLine(1103,0,__PYX_ERR(0, 1103, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_polygon, __pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "reachability.pyx":1095
 *         cdef double t = 0
 * 
 *         for i in range(int(self.c_reach.time/step)):             # <<<<<<<<<<<<<<
 *             t = step*i
 *             res = self((t, t+step))
 */
    __Pyx_TraceLine(1095,0,__PYX_ERR(0, 1095, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1106
 *                          fill=False, **kwargs)
 * 
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     def sage_time_tube_plot(self, str x, double step=1e-1,joins=True):
 */
  __Pyx_TraceLine(1106,0,__PYX_ERR(0, 1106, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p);
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "reachability.pyx":1087
 *         return p
 * 
 *     def sage_interval_plot(self, str x, str y, double step=1e-1, **kwargs):             # <<<<<<<<<<<<<<
 *         from sage.all import Graphics, polygon
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("reachability.Reach.sage_interval_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Graphics);
  __Pyx_XDECREF(__pyx_v_polygon);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XDECREF(__pyx_v_xlo);
  __Pyx_XDECREF(__pyx_v_xhi);
  __Pyx_XDECREF(__pyx_v_ylo);
  __Pyx_XDECREF(__pyx_v_yhi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1108
 *         return p
 * 
 *     def sage_time_tube_plot(self, str x, double step=1e-1,joins=True):             # <<<<<<<<<<<<<<
 *         return self.sage_tube_plot('t', x, step, straight=True, joins=joins)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_17sage_time_tube_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_17sage_time_tube_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  double __pyx_v_step;
  PyObject *__pyx_v_joins = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sage_time_tube_plot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_step,&__pyx_n_s_joins,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_joins);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sage_time_tube_plot") < 0)) __PYX_ERR(0, 1108, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_step = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_step == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1108, __pyx_L3_error)
    } else {
      __pyx_v_step = ((double)1e-1);
    }
    __pyx_v_joins = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sage_time_tube_plot", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.sage_time_tube_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), (&PyString_Type), 1, "x", 1))) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_r = __pyx_pf_12reachability_5Reach_16sage_time_tube_plot(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_x, __pyx_v_step, __pyx_v_joins);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_16sage_time_tube_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, double __pyx_v_step, PyObject *__pyx_v_joins) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("sage_time_tube_plot", 0);
  __Pyx_TraceCall("sage_time_tube_plot", __pyx_f[0], 1108, 0, __PYX_ERR(0, 1108, __pyx_L1_error));

  /* "reachability.pyx":1109
 * 
 *     def sage_time_tube_plot(self, str x, double step=1e-1,joins=True):
 *         return self.sage_tube_plot('t', x, step, straight=True, joins=joins)             # <<<<<<<<<<<<<<
 * 
 *     def sage_tube_plot(self, str x, str y, double step=1e-1, bint arrows=False, straight=False, tight=False, boundaries=True, joins=True, **kwargs):
 */
  __Pyx_TraceLine(1109,0,__PYX_ERR(0, 1109, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sage_tube_plot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_step); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_t);
  __Pyx_GIVEREF(__pyx_n_s_t);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_t);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_x);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_straight, Py_True) < 0) __PYX_ERR(0, 1109, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_joins, __pyx_v_joins) < 0) __PYX_ERR(0, 1109, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1108
 *         return p
 * 
 *     def sage_time_tube_plot(self, str x, double step=1e-1,joins=True):             # <<<<<<<<<<<<<<
 *         return self.sage_tube_plot('t', x, step, straight=True, joins=joins)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("reachability.Reach.sage_time_tube_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1111
 *         return self.sage_tube_plot('t', x, step, straight=True, joins=joins)
 * 
 *     def sage_tube_plot(self, str x, str y, double step=1e-1, bint arrows=False, straight=False, tight=False, boundaries=True, joins=True, **kwargs):             # <<<<<<<<<<<<<<
 *         from sage.all import line, Graphics, RIF, sqrt, arctan, tan, cos, sin, arrow, point, pi, vector
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_19sage_tube_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_19sage_tube_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  double __pyx_v_step;
  int __pyx_v_arrows;
  PyObject *__pyx_v_straight = 0;
  PyObject *__pyx_v_tight = 0;
  PyObject *__pyx_v_boundaries = 0;
  PyObject *__pyx_v_joins = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sage_tube_plot (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_step,&__pyx_n_s_arrows,&__pyx_n_s_straight,&__pyx_n_s_tight,&__pyx_n_s_boundaries,&__pyx_n_s_joins,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_True);
    values[7] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sage_tube_plot", 0, 2, 8, 1); __PYX_ERR(0, 1111, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arrows);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_straight);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tight);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boundaries);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_joins);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "sage_tube_plot") < 0)) __PYX_ERR(0, 1111, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = ((PyObject*)values[0]);
    __pyx_v_y = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_step = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_step == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1111, __pyx_L3_error)
    } else {
      __pyx_v_step = ((double)1e-1);
    }
    if (values[3]) {
      __pyx_v_arrows = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_arrows == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1111, __pyx_L3_error)
    } else {
      __pyx_v_arrows = ((int)0);
    }
    __pyx_v_straight = values[4];
    __pyx_v_tight = values[5];
    __pyx_v_boundaries = values[6];
    __pyx_v_joins = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sage_tube_plot", 0, 2, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1111, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("reachability.Reach.sage_tube_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), (&PyString_Type), 1, "x", 1))) __PYX_ERR(0, 1111, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), (&PyString_Type), 1, "y", 1))) __PYX_ERR(0, 1111, __pyx_L1_error)
  __pyx_r = __pyx_pf_12reachability_5Reach_18sage_tube_plot(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_step, __pyx_v_arrows, __pyx_v_straight, __pyx_v_tight, __pyx_v_boundaries, __pyx_v_joins, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_18sage_tube_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, double __pyx_v_step, int __pyx_v_arrows, PyObject *__pyx_v_straight, PyObject *__pyx_v_tight, PyObject *__pyx_v_boundaries, PyObject *__pyx_v_joins, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_Graphics = NULL;
  PyObject *__pyx_v_RIF = NULL;
  PyObject *__pyx_v_sqrt = NULL;
  PyObject *__pyx_v_arctan = NULL;
  PyObject *__pyx_v_tan = NULL;
  PyObject *__pyx_v_cos = NULL;
  PyObject *__pyx_v_sin = NULL;
  PyObject *__pyx_v_arrow = NULL;
  PyObject *__pyx_v_point = NULL;
  PyObject *__pyx_v_pi = NULL;
  PyObject *__pyx_v_vector = NULL;
  PyObject *__pyx_v_p = NULL;
  int __pyx_v_var_id_x;
  int __pyx_v_var_id_y;
  PyObject *__pyx_v_cx0 = NULL;
  PyObject *__pyx_v_cy0 = NULL;
  PyObject *__pyx_v_cx = NULL;
  PyObject *__pyx_v_cy = NULL;
  PyObject *__pyx_v_tx = NULL;
  PyObject *__pyx_v_ty = NULL;
  PyObject *__pyx_v_rx = NULL;
  PyObject *__pyx_v_ry = NULL;
  PyObject *__pyx_v_dx = NULL;
  PyObject *__pyx_v_dy = NULL;
  PyObject *__pyx_v_r00 = NULL;
  PyObject *__pyx_v_r0 = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_v_Ix = NULL;
  PyObject *__pyx_v_Iy = NULL;
  PyObject *__pyx_v_cx00 = NULL;
  PyObject *__pyx_v_cy00 = NULL;
  PyObject *__pyx_v_tx0 = NULL;
  PyObject *__pyx_v_ty0 = NULL;
  PyObject *__pyx_v_dx0 = NULL;
  PyObject *__pyx_v_dy0 = NULL;
  PyObject *__pyx_v_theta = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_r000 = NULL;
  PyObject *__pyx_v_rx0 = NULL;
  PyObject *__pyx_v_ry0 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("sage_tube_plot", 0);
  __Pyx_TraceCall("sage_tube_plot", __pyx_f[0], 1111, 0, __PYX_ERR(0, 1111, __pyx_L1_error));

  /* "reachability.pyx":1112
 * 
 *     def sage_tube_plot(self, str x, str y, double step=1e-1, bint arrows=False, straight=False, tight=False, boundaries=True, joins=True, **kwargs):
 *         from sage.all import line, Graphics, RIF, sqrt, arctan, tan, cos, sin, arrow, point, pi, vector             # <<<<<<<<<<<<<<
 * 
 *         p = Graphics()
 */
  __Pyx_TraceLine(1112,0,__PYX_ERR(0, 1112, __pyx_L1_error))
  __pyx_t_1 = PyList_New(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_line);
  __Pyx_GIVEREF(__pyx_n_s_line);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_line);
  __Pyx_INCREF(__pyx_n_s_Graphics);
  __Pyx_GIVEREF(__pyx_n_s_Graphics);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_Graphics);
  __Pyx_INCREF(__pyx_n_s_RIF);
  __Pyx_GIVEREF(__pyx_n_s_RIF);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_RIF);
  __Pyx_INCREF(__pyx_n_s_sqrt);
  __Pyx_GIVEREF(__pyx_n_s_sqrt);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_sqrt);
  __Pyx_INCREF(__pyx_n_s_arctan);
  __Pyx_GIVEREF(__pyx_n_s_arctan);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_arctan);
  __Pyx_INCREF(__pyx_n_s_tan);
  __Pyx_GIVEREF(__pyx_n_s_tan);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_tan);
  __Pyx_INCREF(__pyx_n_s_cos);
  __Pyx_GIVEREF(__pyx_n_s_cos);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_cos);
  __Pyx_INCREF(__pyx_n_s_sin);
  __Pyx_GIVEREF(__pyx_n_s_sin);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_sin);
  __Pyx_INCREF(__pyx_n_s_arrow);
  __Pyx_GIVEREF(__pyx_n_s_arrow);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_arrow);
  __Pyx_INCREF(__pyx_n_s_point);
  __Pyx_GIVEREF(__pyx_n_s_point);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_point);
  __Pyx_INCREF(__pyx_n_s_pi);
  __Pyx_GIVEREF(__pyx_n_s_pi);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_pi);
  __Pyx_INCREF(__pyx_n_s_vector);
  __Pyx_GIVEREF(__pyx_n_s_vector);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_vector);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_line = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Graphics); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Graphics = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_RIF); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_RIF = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_sqrt = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_arctan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_arctan = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_tan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_tan = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_cos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_cos = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_sin = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_arrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_arrow = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_point); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_point = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_pi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_pi = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_vector = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1114
 *         from sage.all import line, Graphics, RIF, sqrt, arctan, tan, cos, sin, arrow, point, pi, vector
 * 
 *         p = Graphics()             # <<<<<<<<<<<<<<
 *         var_id_x = self.c_reach.getIDForStateVar(x)
 *         var_id_y = self.c_reach.getIDForStateVar(y)
 */
  __Pyx_TraceLine(1114,0,__PYX_ERR(0, 1114, __pyx_L1_error))
  __Pyx_INCREF(__pyx_v_Graphics);
  __pyx_t_1 = __pyx_v_Graphics; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1114, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_p = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "reachability.pyx":1115
 * 
 *         p = Graphics()
 *         var_id_x = self.c_reach.getIDForStateVar(x)             # <<<<<<<<<<<<<<
 *         var_id_y = self.c_reach.getIDForStateVar(y)
 *         cx0 = cy0 = None
 */
  __Pyx_TraceLine(1115,0,__PYX_ERR(0, 1115, __pyx_L1_error))
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1115, __pyx_L1_error)
  __pyx_v_var_id_x = __pyx_v_self->c_reach.getIDForStateVar(__pyx_t_4);

  /* "reachability.pyx":1116
 *         p = Graphics()
 *         var_id_x = self.c_reach.getIDForStateVar(x)
 *         var_id_y = self.c_reach.getIDForStateVar(y)             # <<<<<<<<<<<<<<
 *         cx0 = cy0 = None
 *         cx = cy = None
 */
  __Pyx_TraceLine(1116,0,__PYX_ERR(0, 1116, __pyx_L1_error))
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1116, __pyx_L1_error)
  __pyx_v_var_id_y = __pyx_v_self->c_reach.getIDForStateVar(__pyx_t_4);

  /* "reachability.pyx":1117
 *         var_id_x = self.c_reach.getIDForStateVar(x)
 *         var_id_y = self.c_reach.getIDForStateVar(y)
 *         cx0 = cy0 = None             # <<<<<<<<<<<<<<
 *         cx = cy = None
 *         tx = ty = None
 */
  __Pyx_TraceLine(1117,0,__PYX_ERR(0, 1117, __pyx_L1_error))
  __Pyx_INCREF(Py_None);
  __pyx_v_cx0 = Py_None;
  __Pyx_INCREF(Py_None);
  __pyx_v_cy0 = Py_None;

  /* "reachability.pyx":1118
 *         var_id_y = self.c_reach.getIDForStateVar(y)
 *         cx0 = cy0 = None
 *         cx = cy = None             # <<<<<<<<<<<<<<
 *         tx = ty = None
 *         rx = ry = None
 */
  __Pyx_TraceLine(1118,0,__PYX_ERR(0, 1118, __pyx_L1_error))
  __Pyx_INCREF(Py_None);
  __pyx_v_cx = Py_None;
  __Pyx_INCREF(Py_None);
  __pyx_v_cy = Py_None;

  /* "reachability.pyx":1119
 *         cx0 = cy0 = None
 *         cx = cy = None
 *         tx = ty = None             # <<<<<<<<<<<<<<
 *         rx = ry = None
 *         dx = dy = None
 */
  __Pyx_TraceLine(1119,0,__PYX_ERR(0, 1119, __pyx_L1_error))
  __Pyx_INCREF(Py_None);
  __pyx_v_tx = Py_None;
  __Pyx_INCREF(Py_None);
  __pyx_v_ty = Py_None;

  /* "reachability.pyx":1120
 *         cx = cy = None
 *         tx = ty = None
 *         rx = ry = None             # <<<<<<<<<<<<<<
 *         dx = dy = None
 *         r00 = r0 = r = None
 */
  __Pyx_TraceLine(1120,0,__PYX_ERR(0, 1120, __pyx_L1_error))
  __Pyx_INCREF(Py_None);
  __pyx_v_rx = Py_None;
  __Pyx_INCREF(Py_None);
  __pyx_v_ry = Py_None;

  /* "reachability.pyx":1121
 *         tx = ty = None
 *         rx = ry = None
 *         dx = dy = None             # <<<<<<<<<<<<<<
 *         r00 = r0 = r = None
 * 
 */
  __Pyx_TraceLine(1121,0,__PYX_ERR(0, 1121, __pyx_L1_error))
  __Pyx_INCREF(Py_None);
  __pyx_v_dx = Py_None;
  __Pyx_INCREF(Py_None);
  __pyx_v_dy = Py_None;

  /* "reachability.pyx":1122
 *         rx = ry = None
 *         dx = dy = None
 *         r00 = r0 = r = None             # <<<<<<<<<<<<<<
 * 
 *         n = int(self.c_reach.time//step)
 */
  __Pyx_TraceLine(1122,0,__PYX_ERR(0, 1122, __pyx_L1_error))
  __Pyx_INCREF(Py_None);
  __pyx_v_r00 = Py_None;
  __Pyx_INCREF(Py_None);
  __pyx_v_r0 = Py_None;
  __Pyx_INCREF(Py_None);
  __pyx_v_r = Py_None;

  /* "reachability.pyx":1124
 *         r00 = r0 = r = None
 * 
 *         n = int(self.c_reach.time//step)             # <<<<<<<<<<<<<<
 *         for i in range(n + 1):
 *             t = step*i
 */
  __Pyx_TraceLine(1124,0,__PYX_ERR(0, 1124, __pyx_L1_error))
  if (unlikely(__pyx_v_step == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1124, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_FromDouble(floor(__pyx_v_self->c_reach.time / __pyx_v_step)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_n = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "reachability.pyx":1125
 * 
 *         n = int(self.c_reach.time//step)
 *         for i in range(n + 1):             # <<<<<<<<<<<<<<
 *             t = step*i
 *             if i < n:
 */
  __Pyx_TraceLine(1125,0,__PYX_ERR(0, 1125, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_n, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1125, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1125, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1125, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1125, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "reachability.pyx":1126
 *         n = int(self.c_reach.time//step)
 *         for i in range(n + 1):
 *             t = step*i             # <<<<<<<<<<<<<<
 *             if i < n:
 *                 res = self((t, t+step))
 */
    __Pyx_TraceLine(1126,0,__PYX_ERR(0, 1126, __pyx_L1_error))
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "reachability.pyx":1127
 *         for i in range(n + 1):
 *             t = step*i
 *             if i < n:             # <<<<<<<<<<<<<<
 *                 res = self((t, t+step))
 *             try:
 */
    __Pyx_TraceLine(1127,0,__PYX_ERR(0, 1127, __pyx_L1_error))
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_i, __pyx_v_n, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {

      /* "reachability.pyx":1128
 *             t = step*i
 *             if i < n:
 *                 res = self((t, t+step))             # <<<<<<<<<<<<<<
 *             try:
 *                 Ix = RIF(res[var_id_x])
 */
      __Pyx_TraceLine(1128,0,__PYX_ERR(0, 1128, __pyx_L1_error))
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyNumber_Add(__pyx_v_t, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_t);
      __Pyx_GIVEREF(__pyx_v_t);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_t);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __pyx_t_8 = ((PyObject *)__pyx_v_self); __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_1};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_1};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1128, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1128, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_res, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "reachability.pyx":1127
 *         for i in range(n + 1):
 *             t = step*i
 *             if i < n:             # <<<<<<<<<<<<<<
 *                 res = self((t, t+step))
 *             try:
 */
    }

    /* "reachability.pyx":1129
 *             if i < n:
 *                 res = self((t, t+step))
 *             try:             # <<<<<<<<<<<<<<
 *                 Ix = RIF(res[var_id_x])
 *                 Iy = RIF(res[var_id_y])
 */
    __Pyx_TraceLine(1129,0,__PYX_ERR(0, 1129, __pyx_L6_error))
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      /*try:*/ {

        /* "reachability.pyx":1130
 *                 res = self((t, t+step))
 *             try:
 *                 Ix = RIF(res[var_id_x])             # <<<<<<<<<<<<<<
 *                 Iy = RIF(res[var_id_y])
 *             except:
 */
        __Pyx_TraceLine(1130,0,__PYX_ERR(0, 1130, __pyx_L6_error))
        if (unlikely(!__pyx_v_res)) { __Pyx_RaiseUnboundLocalError("res"); __PYX_ERR(0, 1130, __pyx_L6_error) }
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_res, __pyx_v_var_id_x, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1130, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_RIF);
        __pyx_t_10 = __pyx_v_RIF; __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        if (!__pyx_t_1) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L6_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_8};
            __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L6_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_8};
            __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L6_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          } else
          #endif
          {
            __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1130, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;
            __Pyx_GIVEREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_8);
            __pyx_t_8 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_Ix, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "reachability.pyx":1131
 *             try:
 *                 Ix = RIF(res[var_id_x])
 *                 Iy = RIF(res[var_id_y])             # <<<<<<<<<<<<<<
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 */
        __Pyx_TraceLine(1131,0,__PYX_ERR(0, 1131, __pyx_L6_error))
        if (unlikely(!__pyx_v_res)) { __Pyx_RaiseUnboundLocalError("res"); __PYX_ERR(0, 1131, __pyx_L6_error) }
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_res, __pyx_v_var_id_y, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1131, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_v_RIF);
        __pyx_t_9 = __pyx_v_RIF; __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        if (!__pyx_t_8) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L6_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_10};
            __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L6_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_10};
            __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L6_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else
          #endif
          {
            __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8); __pyx_t_8 = NULL;
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_10);
            __pyx_t_10 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_Iy, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "reachability.pyx":1129
 *             if i < n:
 *                 res = self((t, t+step))
 *             try:             # <<<<<<<<<<<<<<
 *                 Ix = RIF(res[var_id_x])
 *                 Iy = RIF(res[var_id_y])
 */
      }
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L13_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "reachability.pyx":1132
 *                 Ix = RIF(res[var_id_x])
 *                 Iy = RIF(res[var_id_y])
 *             except:             # <<<<<<<<<<<<<<
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             cx00, cy00 = cx0, cy0
 */
      __Pyx_TraceLine(1132,0,__PYX_ERR(0, 1132, __pyx_L8_except_error))
      /*except:*/ {
        __Pyx_AddTraceback("reachability.Reach.sage_tube_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_9, &__pyx_t_1) < 0) __PYX_ERR(0, 1132, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_1);

        /* "reachability.pyx":1133
 *                 Iy = RIF(res[var_id_y])
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))             # <<<<<<<<<<<<<<
 *             cx00, cy00 = cx0, cy0
 *             cx0, cy0 = cx, cy
 */
        __Pyx_TraceLine(1133,0,__PYX_ERR(0, 1133, __pyx_L8_except_error))
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_warning_eval_failed_for_t_in, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1133, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = PyFloat_FromDouble(__pyx_v_step); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1133, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = PyNumber_Add(__pyx_v_t, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1133, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = NULL;
        __pyx_t_16 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_16 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_v_t, __pyx_t_15};
          __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1133, __pyx_L8_except_error)
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_v_t, __pyx_t_15};
          __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1133, __pyx_L8_except_error)
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } else
        #endif
        {
          __pyx_t_17 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1133, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          if (__pyx_t_14) {
            __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_14); __pyx_t_14 = NULL;
          }
          __Pyx_INCREF(__pyx_v_t);
          __Pyx_GIVEREF(__pyx_v_t);
          PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_16, __pyx_v_t);
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_16, __pyx_t_15);
          __pyx_t_15 = 0;
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_17, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1133, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1133, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L7_exception_handled;
      }
      __pyx_L8_except_error:;

      /* "reachability.pyx":1129
 *             if i < n:
 *                 res = self((t, t+step))
 *             try:             # <<<<<<<<<<<<<<
 *                 Ix = RIF(res[var_id_x])
 *                 Iy = RIF(res[var_id_y])
 */
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      goto __pyx_L1_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __pyx_L13_try_end:;
    }

    /* "reachability.pyx":1134
 *             except:
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             cx00, cy00 = cx0, cy0             # <<<<<<<<<<<<<<
 *             cx0, cy0 = cx, cy
 *             tx0, ty0 = tx, ty
 */
    __Pyx_TraceLine(1134,0,__PYX_ERR(0, 1134, __pyx_L1_error))
    __pyx_t_1 = __pyx_v_cx0;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_9 = __pyx_v_cy0;
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_cx00, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cy00, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "reachability.pyx":1135
 *                 print("warning: eval failed for t in [{}, {}]".format(t, t+step))
 *             cx00, cy00 = cx0, cy0
 *             cx0, cy0 = cx, cy             # <<<<<<<<<<<<<<
 *             tx0, ty0 = tx, ty
 *             if i < n:
 */
    __Pyx_TraceLine(1135,0,__PYX_ERR(0, 1135, __pyx_L1_error))
    __pyx_t_9 = __pyx_v_cx;
    __Pyx_INCREF(__pyx_t_9);
    __pyx_t_1 = __pyx_v_cy;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_cx0, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_cy0, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "reachability.pyx":1136
 *             cx00, cy00 = cx0, cy0
 *             cx0, cy0 = cx, cy
 *             tx0, ty0 = tx, ty             # <<<<<<<<<<<<<<
 *             if i < n:
 *                 cx, cy = Ix.center(), Iy.center()
 */
    __Pyx_TraceLine(1136,0,__PYX_ERR(0, 1136, __pyx_L1_error))
    __pyx_t_1 = __pyx_v_tx;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_9 = __pyx_v_ty;
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_tx0, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ty0, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "reachability.pyx":1137
 *             cx0, cy0 = cx, cy
 *             tx0, ty0 = tx, ty
 *             if i < n:             # <<<<<<<<<<<<<<
 *                 cx, cy = Ix.center(), Iy.center()
 *                 if cx0 is not None:
 */
    __Pyx_TraceLine(1137,0,__PYX_ERR(0, 1137, __pyx_L1_error))
    __pyx_t_9 = PyObject_RichCompare(__pyx_v_i, __pyx_v_n, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_7) {

      /* "reachability.pyx":1138
 *             tx0, ty0 = tx, ty
 *             if i < n:
 *                 cx, cy = Ix.center(), Iy.center()             # <<<<<<<<<<<<<<
 *                 if cx0 is not None:
 *                     dx0, dy0 = dx, dy
 */
      __Pyx_TraceLine(1138,0,__PYX_ERR(0, 1138, __pyx_L1_error))
      if (unlikely(!__pyx_v_Ix)) { __Pyx_RaiseUnboundLocalError("Ix"); __PYX_ERR(0, 1138, __pyx_L1_error) }
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Ix, __pyx_n_s_center); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1138, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1138, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_v_Iy)) { __Pyx_RaiseUnboundLocalError("Iy"); __PYX_ERR(0, 1138, __pyx_L1_error) }
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_Iy, __pyx_n_s_center); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_8) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_cx, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_DECREF_SET(__pyx_v_cy, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "reachability.pyx":1139
 *             if i < n:
 *                 cx, cy = Ix.center(), Iy.center()
 *                 if cx0 is not None:             # <<<<<<<<<<<<<<
 *                     dx0, dy0 = dx, dy
 *                     dx, dy = (cx - cx0), (cy - cy0)
 */
      __Pyx_TraceLine(1139,0,__PYX_ERR(0, 1139, __pyx_L1_error))
      __pyx_t_7 = (__pyx_v_cx0 != Py_None);
      __pyx_t_18 = (__pyx_t_7 != 0);
      if (__pyx_t_18) {

        /* "reachability.pyx":1140
 *                 cx, cy = Ix.center(), Iy.center()
 *                 if cx0 is not None:
 *                     dx0, dy0 = dx, dy             # <<<<<<<<<<<<<<
 *                     dx, dy = (cx - cx0), (cy - cy0)
 *                     theta = pi/2 - arctan(dy/dx)
 */
        __Pyx_TraceLine(1140,0,__PYX_ERR(0, 1140, __pyx_L1_error))
        __pyx_t_1 = __pyx_v_dx;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_9 = __pyx_v_dy;
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_dx0, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_dy0, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "reachability.pyx":1141
 *                 if cx0 is not None:
 *                     dx0, dy0 = dx, dy
 *                     dx, dy = (cx - cx0), (cy - cy0)             # <<<<<<<<<<<<<<
 *                     theta = pi/2 - arctan(dy/dx)
 * 
 */
        __Pyx_TraceLine(1141,0,__PYX_ERR(0, 1141, __pyx_L1_error))
        __pyx_t_9 = PyNumber_Subtract(__pyx_v_cx, __pyx_v_cx0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_1 = PyNumber_Subtract(__pyx_v_cy, __pyx_v_cy0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_dx, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_dy, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "reachability.pyx":1142
 *                     dx0, dy0 = dx, dy
 *                     dx, dy = (cx - cx0), (cy - cy0)
 *                     theta = pi/2 - arctan(dy/dx)             # <<<<<<<<<<<<<<
 * 
 *             r000 = r00
 */
        __Pyx_TraceLine(1142,0,__PYX_ERR(0, 1142, __pyx_L1_error))
        __pyx_t_1 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_pi, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_dy, __pyx_v_dx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1142, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_v_arctan);
        __pyx_t_8 = __pyx_v_arctan; __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (!__pyx_t_10) {
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1142, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_9);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_8)) {
            PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_3};
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1142, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
            PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_3};
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1142, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1142, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_t_3);
            __pyx_t_3 = 0;
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_17, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1142, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Subtract(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1142, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_theta, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "reachability.pyx":1139
 *             if i < n:
 *                 cx, cy = Ix.center(), Iy.center()
 *                 if cx0 is not None:             # <<<<<<<<<<<<<<
 *                     dx0, dy0 = dx, dy
 *                     dx, dy = (cx - cx0), (cy - cy0)
 */
      }

      /* "reachability.pyx":1137
 *             cx0, cy0 = cx, cy
 *             tx0, ty0 = tx, ty
 *             if i < n:             # <<<<<<<<<<<<<<
 *                 cx, cy = Ix.center(), Iy.center()
 *                 if cx0 is not None:
 */
    }

    /* "reachability.pyx":1144
 *                     theta = pi/2 - arctan(dy/dx)
 * 
 *             r000 = r00             # <<<<<<<<<<<<<<
 *             r00 = r0
 *             r0 = r
 */
    __Pyx_TraceLine(1144,0,__PYX_ERR(0, 1144, __pyx_L1_error))
    __Pyx_INCREF(__pyx_v_r00);
    __Pyx_XDECREF_SET(__pyx_v_r000, __pyx_v_r00);

    /* "reachability.pyx":1145
 * 
 *             r000 = r00
 *             r00 = r0             # <<<<<<<<<<<<<<
 *             r0 = r
 *             rx0, ry0 = rx, ry
 */
    __Pyx_TraceLine(1145,0,__PYX_ERR(0, 1145, __pyx_L1_error))
    __Pyx_INCREF(__pyx_v_r0);
    __Pyx_DECREF_SET(__pyx_v_r00, __pyx_v_r0);

    /* "reachability.pyx":1146
 *             r000 = r00
 *             r00 = r0
 *             r0 = r             # <<<<<<<<<<<<<<
 *             rx0, ry0 = rx, ry
 *             rx, ry = Ix.absolute_diameter()/2, Iy.absolute_diameter()/2
 */
    __Pyx_TraceLine(1146,0,__PYX_ERR(0, 1146, __pyx_L1_error))
    __Pyx_INCREF(__pyx_v_r);
    __Pyx_DECREF_SET(__pyx_v_r0, __pyx_v_r);

    /* "reachability.pyx":1147
 *             r00 = r0
 *             r0 = r
 *             rx0, ry0 = rx, ry             # <<<<<<<<<<<<<<
 *             rx, ry = Ix.absolute_diameter()/2, Iy.absolute_diameter()/2
 *             r = sqrt(rx**2 + ry**2)
 */
    __Pyx_TraceLine(1147,0,__PYX_ERR(0, 1147, __pyx_L1_error))
    __pyx_t_8 = __pyx_v_rx;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_9 = __pyx_v_ry;
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_rx0, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ry0, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "reachability.pyx":1148
 *             r0 = r
 *             rx0, ry0 = rx, ry
 *             rx, ry = Ix.absolute_diameter()/2, Iy.absolute_diameter()/2             # <<<<<<<<<<<<<<
 *             r = sqrt(rx**2 + ry**2)
 * 
 */
    __Pyx_TraceLine(1148,0,__PYX_ERR(0, 1148, __pyx_L1_error))
    if (unlikely(!__pyx_v_Ix)) { __Pyx_RaiseUnboundLocalError("Ix"); __PYX_ERR(0, 1148, __pyx_L1_error) }
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_Ix, __pyx_n_s_absolute_diameter); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1148, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1148, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_9, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_v_Iy)) { __Pyx_RaiseUnboundLocalError("Iy"); __PYX_ERR(0, 1148, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_Iy, __pyx_n_s_absolute_diameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_17) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_17); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1148, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    } else {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1148, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_9, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_rx, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_DECREF_SET(__pyx_v_ry, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "reachability.pyx":1149
 *             rx0, ry0 = rx, ry
 *             rx, ry = Ix.absolute_diameter()/2, Iy.absolute_diameter()/2
 *             r = sqrt(rx**2 + ry**2)             # <<<<<<<<<<<<<<
 * 
 *             if rx0 is None:
 */
    __Pyx_TraceLine(1149,0,__PYX_ERR(0, 1149, __pyx_L1_error))
    __pyx_t_8 = PyNumber_Power(__pyx_v_rx, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Power(__pyx_v_ry, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_17 = PyNumber_Add(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_v_sqrt);
    __pyx_t_9 = __pyx_v_sqrt; __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_17); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1149, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_17};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1149, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_17};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1149, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_17);
        __pyx_t_17 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_r, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "reachability.pyx":1151
 *             r = sqrt(rx**2 + ry**2)
 * 
 *             if rx0 is None:             # <<<<<<<<<<<<<<
 *                 pass
 *             elif straight:
 */
    __Pyx_TraceLine(1151,0,__PYX_ERR(0, 1151, __pyx_L1_error))
    __pyx_t_18 = (__pyx_v_rx0 == Py_None);
    __pyx_t_7 = (__pyx_t_18 != 0);
    if (__pyx_t_7) {
      goto __pyx_L18;
    }

    /* "reachability.pyx":1153
 *             if rx0 is None:
 *                 pass
 *             elif straight:             # <<<<<<<<<<<<<<
 *                 tx = 0
 *                 ty = ry0
 */
    __Pyx_TraceLine(1153,0,__PYX_ERR(0, 1153, __pyx_L1_error))
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_straight); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1153, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "reachability.pyx":1154
 *                 pass
 *             elif straight:
 *                 tx = 0             # <<<<<<<<<<<<<<
 *                 ty = ry0
 *             elif tight:
 */
      __Pyx_TraceLine(1154,0,__PYX_ERR(0, 1154, __pyx_L1_error))
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_DECREF_SET(__pyx_v_tx, __pyx_int_0);

      /* "reachability.pyx":1155
 *             elif straight:
 *                 tx = 0
 *                 ty = ry0             # <<<<<<<<<<<<<<
 *             elif tight:
 *                 # This finds where we hit the bounding box -- does not work
 */
      __Pyx_TraceLine(1155,0,__PYX_ERR(0, 1155, __pyx_L1_error))
      __Pyx_INCREF(__pyx_v_ry0);
      __Pyx_DECREF_SET(__pyx_v_ty, __pyx_v_ry0);

      /* "reachability.pyx":1153
 *             if rx0 is None:
 *                 pass
 *             elif straight:             # <<<<<<<<<<<<<<
 *                 tx = 0
 *                 ty = ry0
 */
      goto __pyx_L18;
    }

    /* "reachability.pyx":1156
 *                 tx = 0
 *                 ty = ry0
 *             elif tight:             # <<<<<<<<<<<<<<
 *                 # This finds where we hit the bounding box -- does not work
 *                 # well due to the edges interseTruecting
 */
    __Pyx_TraceLine(1156,0,__PYX_ERR(0, 1156, __pyx_L1_error))
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_tight); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1156, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "reachability.pyx":1159
 *                 # This finds where we hit the bounding box -- does not work
 *                 # well due to the edges interseTruecting
 *                 if abs(tan(theta)) < 100 and (rx0 < ry0 or abs(tan(theta)) < 0.01):             # <<<<<<<<<<<<<<
 *                     print("A:", rx0, ry0, float(tan(theta)))
 *                     tx = rx0
 */
      __Pyx_TraceLine(1159,0,__PYX_ERR(0, 1159, __pyx_L1_error))
      if (unlikely(!__pyx_v_theta)) { __Pyx_RaiseUnboundLocalError("theta"); __PYX_ERR(0, 1159, __pyx_L1_error) }
      __Pyx_INCREF(__pyx_v_tan);
      __pyx_t_9 = __pyx_v_tan; __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_theta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_theta};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_theta};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3); __pyx_t_3 = NULL;
          __Pyx_INCREF(__pyx_v_theta);
          __Pyx_GIVEREF(__pyx_v_theta);
          PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_v_theta);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_9, __pyx_int_100, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_18) {
      } else {
        __pyx_t_7 = __pyx_t_18;
        goto __pyx_L20_bool_binop_done;
      }
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_rx0, __pyx_v_ry0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_18) {
      } else {
        __pyx_t_7 = __pyx_t_18;
        goto __pyx_L20_bool_binop_done;
      }
      if (unlikely(!__pyx_v_theta)) { __Pyx_RaiseUnboundLocalError("theta"); __PYX_ERR(0, 1159, __pyx_L1_error) }
      __Pyx_INCREF(__pyx_v_tan);
      __pyx_t_9 = __pyx_v_tan; __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (!__pyx_t_17) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_theta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_v_theta};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_v_theta};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_17); __pyx_t_17 = NULL;
          __Pyx_INCREF(__pyx_v_theta);
          __Pyx_GIVEREF(__pyx_v_theta);
          PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_theta);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_9, __pyx_float_0_01, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __pyx_t_18;
      __pyx_L20_bool_binop_done:;
      if (__pyx_t_7) {

        /* "reachability.pyx":1160
 *                 # well due to the edges interseTruecting
 *                 if abs(tan(theta)) < 100 and (rx0 < ry0 or abs(tan(theta)) < 0.01):
 *                     print("A:", rx0, ry0, float(tan(theta)))             # <<<<<<<<<<<<<<
 *                     tx = rx0
 *                     ty = tx*tan(theta)
 */
        __Pyx_TraceLine(1160,0,__PYX_ERR(0, 1160, __pyx_L1_error))
        if (unlikely(!__pyx_v_theta)) { __Pyx_RaiseUnboundLocalError("theta"); __PYX_ERR(0, 1160, __pyx_L1_error) }
        __Pyx_INCREF(__pyx_v_tan);
        __pyx_t_9 = __pyx_v_tan; __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        if (!__pyx_t_3) {
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_theta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_theta};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_theta};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1160, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3); __pyx_t_3 = NULL;
            __Pyx_INCREF(__pyx_v_theta);
            __Pyx_GIVEREF(__pyx_v_theta);
            PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_v_theta);
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyNumber_Float(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_kp_s_A);
        __Pyx_GIVEREF(__pyx_kp_s_A);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_A);
        __Pyx_INCREF(__pyx_v_rx0);
        __Pyx_GIVEREF(__pyx_v_rx0);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_rx0);
        __Pyx_INCREF(__pyx_v_ry0);
        __Pyx_GIVEREF(__pyx_v_ry0);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_ry0);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "reachability.pyx":1161
 *                 if abs(tan(theta)) < 100 and (rx0 < ry0 or abs(tan(theta)) < 0.01):
 *                     print("A:", rx0, ry0, float(tan(theta)))
 *                     tx = rx0             # <<<<<<<<<<<<<<
 *                     ty = tx*tan(theta)
 *                 else:
 */
        __Pyx_TraceLine(1161,0,__PYX_ERR(0, 1161, __pyx_L1_error))
        __Pyx_INCREF(__pyx_v_rx0);
        __Pyx_DECREF_SET(__pyx_v_tx, __pyx_v_rx0);

        /* "reachability.pyx":1162
 *                     print("A:", rx0, ry0, float(tan(theta)))
 *                     tx = rx0
 *                     ty = tx*tan(theta)             # <<<<<<<<<<<<<<
 *                 else:
 *                     print("B:", rx0, ry0, float(tan(theta)))
 */
        __Pyx_TraceLine(1162,0,__PYX_ERR(0, 1162, __pyx_L1_error))
        if (unlikely(!__pyx_v_theta)) { __Pyx_RaiseUnboundLocalError("theta"); __PYX_ERR(0, 1162, __pyx_L1_error) }
        __Pyx_INCREF(__pyx_v_tan);
        __pyx_t_1 = __pyx_v_tan; __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        if (!__pyx_t_17) {
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_theta); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1162, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_1)) {
            PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_v_theta};
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1162, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_9);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
            PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_v_theta};
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1162, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_9);
          } else
          #endif
          {
            __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_17); __pyx_t_17 = NULL;
            __Pyx_INCREF(__pyx_v_theta);
            __Pyx_GIVEREF(__pyx_v_theta);
            PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_theta);
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1162, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Multiply(__pyx_v_tx, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_ty, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "reachability.pyx":1159
 *                 # This finds where we hit the bounding box -- does not work
 *                 # well due to the edges interseTruecting
 *                 if abs(tan(theta)) < 100 and (rx0 < ry0 or abs(tan(theta)) < 0.01):             # <<<<<<<<<<<<<<
 *                     print("A:", rx0, ry0, float(tan(theta)))
 *                     tx = rx0
 */
        goto __pyx_L19;
      }

      /* "reachability.pyx":1164
 *                     ty = tx*tan(theta)
 *                 else:
 *                     print("B:", rx0, ry0, float(tan(theta)))             # <<<<<<<<<<<<<<
 *                     ty = ry0
 *                     tx = ty*tan(theta)
 */
      __Pyx_TraceLine(1164,0,__PYX_ERR(0, 1164, __pyx_L1_error))
      /*else*/ {
        if (unlikely(!__pyx_v_theta)) { __Pyx_RaiseUnboundLocalError("theta"); __PYX_ERR(0, 1164, __pyx_L1_error) }
        __Pyx_INCREF(__pyx_v_tan);
        __pyx_t_9 = __pyx_v_tan; __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        if (!__pyx_t_3) {
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_theta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_theta};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_theta};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1164, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3); __pyx_t_3 = NULL;
            __Pyx_INCREF(__pyx_v_theta);
            __Pyx_GIVEREF(__pyx_v_theta);
            PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_v_theta);
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyNumber_Float(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_kp_s_B);
        __Pyx_GIVEREF(__pyx_kp_s_B);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_B);
        __Pyx_INCREF(__pyx_v_rx0);
        __Pyx_GIVEREF(__pyx_v_rx0);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_rx0);
        __Pyx_INCREF(__pyx_v_ry0);
        __Pyx_GIVEREF(__pyx_v_ry0);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_ry0);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "reachability.pyx":1165
 *                 else:
 *                     print("B:", rx0, ry0, float(tan(theta)))
 *                     ty = ry0             # <<<<<<<<<<<<<<
 *                     tx = ty*tan(theta)
 *             else:
 */
        __Pyx_TraceLine(1165,0,__PYX_ERR(0, 1165, __pyx_L1_error))
        __Pyx_INCREF(__pyx_v_ry0);
        __Pyx_DECREF_SET(__pyx_v_ty, __pyx_v_ry0);

        /* "reachability.pyx":1166
 *                     print("B:", rx0, ry0, float(tan(theta)))
 *                     ty = ry0
 *                     tx = ty*tan(theta)             # <<<<<<<<<<<<<<
 *             else:
 *                 tx = r0 * cos(theta)
 */
        __Pyx_TraceLine(1166,0,__PYX_ERR(0, 1166, __pyx_L1_error))
        if (unlikely(!__pyx_v_theta)) { __Pyx_RaiseUnboundLocalError("theta"); __PYX_ERR(0, 1166, __pyx_L1_error) }
        __Pyx_INCREF(__pyx_v_tan);
        __pyx_t_1 = __pyx_v_tan; __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        if (!__pyx_t_17) {
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_theta); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1166, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_1)) {
            PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_v_theta};
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1166, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_9);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
            PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_v_theta};
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1166, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_9);
          } else
          #endif
          {
            __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1166, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_17); __pyx_t_17 = NULL;
            __Pyx_INCREF(__pyx_v_theta);
            __Pyx_GIVEREF(__pyx_v_theta);
            PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_theta);
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1166, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Multiply(__pyx_v_ty, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_tx, __pyx_t_1);
        __pyx_t_1 = 0;
      }
      __pyx_L19:;

      /* "reachability.pyx":1156
 *                 tx = 0
 *                 ty = ry0
 *             elif tight:             # <<<<<<<<<<<<<<
 *                 # This finds where we hit the bounding box -- does not work
 *                 # well due to the edges interseTruecting
 */
      goto __pyx_L18;
    }

    /* "reachability.pyx":1168
 *                     tx = ty*tan(theta)
 *             else:
 *                 tx = r0 * cos(theta)             # <<<<<<<<<<<<<<
 *                 ty = r0 * sin(theta)
 *             # if theta > pi/2:
 */
    __Pyx_TraceLine(1168,0,__PYX_ERR(0, 1168, __pyx_L1_error))
    /*else*/ {
      if (unlikely(!__pyx_v_theta)) { __Pyx_RaiseUnboundLocalError("theta"); __PYX_ERR(0, 1168, __pyx_L1_error) }
      __Pyx_INCREF(__pyx_v_cos);
      __pyx_t_9 = __pyx_v_cos; __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_theta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_theta};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_theta};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3); __pyx_t_3 = NULL;
          __Pyx_INCREF(__pyx_v_theta);
          __Pyx_GIVEREF(__pyx_v_theta);
          PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_v_theta);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyNumber_Multiply(__pyx_v_r0, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_tx, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "reachability.pyx":1169
 *             else:
 *                 tx = r0 * cos(theta)
 *                 ty = r0 * sin(theta)             # <<<<<<<<<<<<<<
 *             # if theta > pi/2:
 *             #     tx = -tx
 */
      __Pyx_TraceLine(1169,0,__PYX_ERR(0, 1169, __pyx_L1_error))
      if (unlikely(!__pyx_v_theta)) { __Pyx_RaiseUnboundLocalError("theta"); __PYX_ERR(0, 1169, __pyx_L1_error) }
      __Pyx_INCREF(__pyx_v_sin);
      __pyx_t_1 = __pyx_v_sin; __pyx_t_17 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_17) {
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_theta); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1169, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_v_theta};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1169, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_9);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_17, __pyx_v_theta};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1169, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_GOTREF(__pyx_t_9);
        } else
        #endif
        {
          __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1169, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_17); __pyx_t_17 = NULL;
          __Pyx_INCREF(__pyx_v_theta);
          __Pyx_GIVEREF(__pyx_v_theta);
          PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_theta);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1169, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Multiply(__pyx_v_r0, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF_SET(__pyx_v_ty, __pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L18:;

    /* "reachability.pyx":1180
 *             #     tx = ty/tan(theta)
 * 
 *             if cx00 is not None:             # <<<<<<<<<<<<<<
 *                 # Draw width
 *                 if joins:
 */
    __Pyx_TraceLine(1180,0,__PYX_ERR(0, 1180, __pyx_L1_error))
    __pyx_t_7 = (__pyx_v_cx00 != Py_None);
    __pyx_t_18 = (__pyx_t_7 != 0);
    if (__pyx_t_18) {

      /* "reachability.pyx":1182
 *             if cx00 is not None:
 *                 # Draw width
 *                 if joins:             # <<<<<<<<<<<<<<
 *                     p += line([(cx00 - tx0, cy00 + ty0),
 *                                (cx00 + tx0, cy00 - ty0)], linestyle='--',
 */
      __Pyx_TraceLine(1182,0,__PYX_ERR(0, 1182, __pyx_L1_error))
      __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_v_joins); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1182, __pyx_L1_error)
      if (__pyx_t_18) {

        /* "reachability.pyx":1183
 *                 # Draw width
 *                 if joins:
 *                     p += line([(cx00 - tx0, cy00 + ty0),             # <<<<<<<<<<<<<<
 *                                (cx00 + tx0, cy00 - ty0)], linestyle='--',
 *                                **kwargs)
 */
        __Pyx_TraceLine(1183,0,__PYX_ERR(0, 1183, __pyx_L1_error))
        __pyx_t_1 = PyNumber_Subtract(__pyx_v_cx00, __pyx_v_tx0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = PyNumber_Add(__pyx_v_cy00, __pyx_v_ty0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_9);
        __pyx_t_1 = 0;
        __pyx_t_9 = 0;

        /* "reachability.pyx":1184
 *                 if joins:
 *                     p += line([(cx00 - tx0, cy00 + ty0),
 *                                (cx00 + tx0, cy00 - ty0)], linestyle='--',             # <<<<<<<<<<<<<<
 *                                **kwargs)
 * 
 */
        __Pyx_TraceLine(1184,0,__PYX_ERR(0, 1184, __pyx_L1_error))
        __pyx_t_9 = PyNumber_Add(__pyx_v_cx00, __pyx_v_tx0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_1 = PyNumber_Subtract(__pyx_v_cy00, __pyx_v_ty0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_1);
        __pyx_t_9 = 0;
        __pyx_t_1 = 0;

        /* "reachability.pyx":1183
 *                 # Draw width
 *                 if joins:
 *                     p += line([(cx00 - tx0, cy00 + ty0),             # <<<<<<<<<<<<<<
 *                                (cx00 + tx0, cy00 - ty0)], linestyle='--',
 *                                **kwargs)
 */
        __Pyx_TraceLine(1183,0,__PYX_ERR(0, 1183, __pyx_L1_error))
        __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_3);
        PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_17);
        PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_17);
        __pyx_t_3 = 0;
        __pyx_t_17 = 0;
        __pyx_t_17 = PyTuple_New(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "reachability.pyx":1184
 *                 if joins:
 *                     p += line([(cx00 - tx0, cy00 + ty0),
 *                                (cx00 + tx0, cy00 - ty0)], linestyle='--',             # <<<<<<<<<<<<<<
 *                                **kwargs)
 * 
 */
        __Pyx_TraceLine(1184,0,__PYX_ERR(0, 1184, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_linestyle, __pyx_kp_s__24) < 0) __PYX_ERR(0, 1184, __pyx_L1_error)
        __pyx_t_1 = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "reachability.pyx":1185
 *                     p += line([(cx00 - tx0, cy00 + ty0),
 *                                (cx00 + tx0, cy00 - ty0)], linestyle='--',
 *                                **kwargs)             # <<<<<<<<<<<<<<
 * 
 *                 # Connect subsequent lines (draw lines between their endpoints
 */
        __Pyx_TraceLine(1185,0,__PYX_ERR(0, 1185, __pyx_L1_error))
        if (__Pyx_MergeKeywords(__pyx_t_1, __pyx_v_kwargs) < 0) __PYX_ERR(0, 1185, __pyx_L1_error)

        /* "reachability.pyx":1183
 *                 # Draw width
 *                 if joins:
 *                     p += line([(cx00 - tx0, cy00 + ty0),             # <<<<<<<<<<<<<<
 *                                (cx00 + tx0, cy00 - ty0)], linestyle='--',
 *                                **kwargs)
 */
        __Pyx_TraceLine(1183,0,__PYX_ERR(0, 1183, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_line, __pyx_t_17, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "reachability.pyx":1182
 *             if cx00 is not None:
 *                 # Draw width
 *                 if joins:             # <<<<<<<<<<<<<<
 *                     p += line([(cx00 - tx0, cy00 + ty0),
 *                                (cx00 + tx0, cy00 - ty0)], linestyle='--',
 */
      }

      /* "reachability.pyx":1190
 *                 # chosing the pairs of endpoints which make the most
 *                 # parallel lines)
 *                 if boundaries:             # <<<<<<<<<<<<<<
 *                     if ( vector([tx0-tx, ty-ty0])*vector([tx-tx0, ty0-ty])
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 */
      __Pyx_TraceLine(1190,0,__PYX_ERR(0, 1190, __pyx_L1_error))
      __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_v_boundaries); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1190, __pyx_L1_error)
      if (__pyx_t_18) {

        /* "reachability.pyx":1191
 *                 # parallel lines)
 *                 if boundaries:
 *                     if ( vector([tx0-tx, ty-ty0])*vector([tx-tx0, ty0-ty])             # <<<<<<<<<<<<<<
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 */
        __Pyx_TraceLine(1191,0,__PYX_ERR(0, 1191, __pyx_L1_error))
        __pyx_t_3 = PyNumber_Subtract(__pyx_v_tx0, __pyx_v_tx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_17 = PyNumber_Subtract(__pyx_v_ty, __pyx_v_ty0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_9 = PyList_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_3);
        PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_17);
        PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_17);
        __pyx_t_3 = 0;
        __pyx_t_17 = 0;
        __Pyx_INCREF(__pyx_v_vector);
        __pyx_t_17 = __pyx_v_vector; __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_17);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_17, function);
          }
        }
        if (!__pyx_t_3) {
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_9};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_9};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else
          #endif
          {
            __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1191, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3); __pyx_t_3 = NULL;
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
            __pyx_t_9 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_8 = PyNumber_Subtract(__pyx_v_tx, __pyx_v_tx0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyNumber_Subtract(__pyx_v_ty0, __pyx_v_ty); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_8);
        PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_9);
        PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_9);
        __pyx_t_8 = 0;
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_v_vector);
        __pyx_t_9 = __pyx_v_vector; __pyx_t_8 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        if (!__pyx_t_8) {
          __pyx_t_17 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1191, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_17);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_3};
            __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1191, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_3};
            __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1191, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else
          #endif
          {
            __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1191, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_3);
            __pyx_t_3 = 0;
            __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1191, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyNumber_Multiply(__pyx_t_1, __pyx_t_17); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

        /* "reachability.pyx":1192
 *                 if boundaries:
 *                     if ( vector([tx0-tx, ty-ty0])*vector([tx-tx0, ty0-ty])
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):             # <<<<<<<<<<<<<<
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 */
        __Pyx_TraceLine(1192,0,__PYX_ERR(0, 1192, __pyx_L1_error))
        __pyx_t_1 = PyNumber_Add(__pyx_v_tx0, __pyx_v_tx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = PyNumber_Negative(__pyx_v_ty); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_3 = PyNumber_Subtract(__pyx_t_10, __pyx_v_ty0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_1);
        PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_3);
        PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
        __pyx_t_1 = 0;
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_v_vector);
        __pyx_t_3 = __pyx_v_vector; __pyx_t_1 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_1) {
          __pyx_t_17 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1192, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_GOTREF(__pyx_t_17);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_10};
            __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1192, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_10};
            __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1192, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else
          #endif
          {
            __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1192, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_10);
            __pyx_t_10 = 0;
            __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1192, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = PyNumber_Negative(__pyx_v_tx); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = PyNumber_Subtract(__pyx_t_8, __pyx_v_tx0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_v_ty, __pyx_v_ty0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_10);
        PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_8);
        PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
        __pyx_t_10 = 0;
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_v_vector);
        __pyx_t_8 = __pyx_v_vector; __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (!__pyx_t_10) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_8)) {
            PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_1};
            __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
            PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_1};
            __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          } else
          #endif
          {
            __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1192, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_10); __pyx_t_10 = NULL;
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Multiply(__pyx_t_17, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_9, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1192, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "reachability.pyx":1191
 *                 # parallel lines)
 *                 if boundaries:
 *                     if ( vector([tx0-tx, ty-ty0])*vector([tx-tx0, ty0-ty])             # <<<<<<<<<<<<<<
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 */
        __Pyx_TraceLine(1191,0,__PYX_ERR(0, 1191, __pyx_L1_error))
        if (__pyx_t_18) {

          /* "reachability.pyx":1193
 *                     if ( vector([tx0-tx, ty-ty0])*vector([tx-tx0, ty0-ty])
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 *                         p += line([(cx00 - tx0, cy00 + ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 */
          __Pyx_TraceLine(1193,0,__PYX_ERR(0, 1193, __pyx_L1_error))
          __pyx_t_3 = PyNumber_Subtract(__pyx_v_cx00, __pyx_v_tx0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1193, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = PyNumber_Add(__pyx_v_cy00, __pyx_v_ty0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1193, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1193, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
          __pyx_t_3 = 0;
          __pyx_t_8 = 0;

          /* "reachability.pyx":1194
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)             # <<<<<<<<<<<<<<
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 */
          __Pyx_TraceLine(1194,0,__PYX_ERR(0, 1194, __pyx_L1_error))
          __pyx_t_8 = PyNumber_Subtract(__pyx_v_cx0, __pyx_v_tx); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1194, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_3 = PyNumber_Add(__pyx_v_cy0, __pyx_v_ty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1194, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1194, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_3);
          __pyx_t_8 = 0;
          __pyx_t_3 = 0;

          /* "reachability.pyx":1193
 *                     if ( vector([tx0-tx, ty-ty0])*vector([tx-tx0, ty0-ty])
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 *                         p += line([(cx00 - tx0, cy00 + ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 */
          __Pyx_TraceLine(1193,0,__PYX_ERR(0, 1193, __pyx_L1_error))
          __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1193, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_9);
          PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_17);
          PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_17);
          __pyx_t_9 = 0;
          __pyx_t_17 = 0;
          __pyx_t_17 = PyTuple_New(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1193, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "reachability.pyx":1194
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)             # <<<<<<<<<<<<<<
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 */
          __Pyx_TraceLine(1194,0,__PYX_ERR(0, 1194, __pyx_L1_error))
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_line, __pyx_t_17, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1193, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

          /* "reachability.pyx":1193
 *                     if ( vector([tx0-tx, ty-ty0])*vector([tx-tx0, ty0-ty])
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 *                         p += line([(cx00 - tx0, cy00 + ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 */
          __Pyx_TraceLine(1193,0,__PYX_ERR(0, 1193, __pyx_L1_error))
          __pyx_t_17 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_3); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1193, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "reachability.pyx":1195
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                     else:
 */
          __Pyx_TraceLine(1195,0,__PYX_ERR(0, 1195, __pyx_L1_error))
          __pyx_t_17 = PyNumber_Add(__pyx_v_cx00, __pyx_v_tx0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_3 = PyNumber_Subtract(__pyx_v_cy00, __pyx_v_ty0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
          __pyx_t_17 = 0;
          __pyx_t_3 = 0;

          /* "reachability.pyx":1196
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)             # <<<<<<<<<<<<<<
 *                     else:
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 */
          __Pyx_TraceLine(1196,0,__PYX_ERR(0, 1196, __pyx_L1_error))
          __pyx_t_3 = PyNumber_Add(__pyx_v_cx0, __pyx_v_tx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1196, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_17 = PyNumber_Subtract(__pyx_v_cy0, __pyx_v_ty); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1196, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1196, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_17);
          __pyx_t_3 = 0;
          __pyx_t_17 = 0;

          /* "reachability.pyx":1195
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                     else:
 */
          __Pyx_TraceLine(1195,0,__PYX_ERR(0, 1195, __pyx_L1_error))
          __pyx_t_17 = PyList_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_9);
          PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_8);
          PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_8);
          __pyx_t_9 = 0;
          __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "reachability.pyx":1196
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)             # <<<<<<<<<<<<<<
 *                     else:
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 */
          __Pyx_TraceLine(1196,0,__PYX_ERR(0, 1196, __pyx_L1_error))
          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_v_line, __pyx_t_8, __pyx_v_kwargs); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "reachability.pyx":1195
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                     else:
 */
          __Pyx_TraceLine(1195,0,__PYX_ERR(0, 1195, __pyx_L1_error))
          __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "reachability.pyx":1191
 *                 # parallel lines)
 *                 if boundaries:
 *                     if ( vector([tx0-tx, ty-ty0])*vector([tx-tx0, ty0-ty])             # <<<<<<<<<<<<<<
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 */
          goto __pyx_L26;
        }

        /* "reachability.pyx":1198
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                     else:
 *                         p += line([(cx00 - tx0, cy00 + ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 */
        __Pyx_TraceLine(1198,0,__PYX_ERR(0, 1198, __pyx_L1_error))
        /*else*/ {
          __pyx_t_8 = PyNumber_Subtract(__pyx_v_cx00, __pyx_v_tx0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1198, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_17 = PyNumber_Add(__pyx_v_cy00, __pyx_v_ty0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1198, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1198, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_17);
          __pyx_t_8 = 0;
          __pyx_t_17 = 0;

          /* "reachability.pyx":1199
 *                     else:
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)             # <<<<<<<<<<<<<<
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 */
          __Pyx_TraceLine(1199,0,__PYX_ERR(0, 1199, __pyx_L1_error))
          __pyx_t_17 = PyNumber_Add(__pyx_v_cx0, __pyx_v_tx); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1199, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_8 = PyNumber_Subtract(__pyx_v_cy0, __pyx_v_ty); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1199, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1199, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_8);
          __pyx_t_17 = 0;
          __pyx_t_8 = 0;

          /* "reachability.pyx":1198
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                     else:
 *                         p += line([(cx00 - tx0, cy00 + ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 */
          __Pyx_TraceLine(1198,0,__PYX_ERR(0, 1198, __pyx_L1_error))
          __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1198, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_9);
          PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_3);
          PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
          __pyx_t_9 = 0;
          __pyx_t_3 = 0;
          __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1198, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
          __pyx_t_8 = 0;

          /* "reachability.pyx":1199
 *                     else:
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)             # <<<<<<<<<<<<<<
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 */
          __Pyx_TraceLine(1199,0,__PYX_ERR(0, 1199, __pyx_L1_error))
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_v_line, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1198, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "reachability.pyx":1198
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                     else:
 *                         p += line([(cx00 - tx0, cy00 + ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 */
          __Pyx_TraceLine(1198,0,__PYX_ERR(0, 1198, __pyx_L1_error))
          __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1198, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "reachability.pyx":1200
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 * 
 */
          __Pyx_TraceLine(1200,0,__PYX_ERR(0, 1200, __pyx_L1_error))
          __pyx_t_3 = PyNumber_Add(__pyx_v_cx00, __pyx_v_tx0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = PyNumber_Subtract(__pyx_v_cy00, __pyx_v_ty0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
          __pyx_t_3 = 0;
          __pyx_t_8 = 0;

          /* "reachability.pyx":1201
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)             # <<<<<<<<<<<<<<
 * 
 *                 # Draw arrows in the plotting direction
 */
          __Pyx_TraceLine(1201,0,__PYX_ERR(0, 1201, __pyx_L1_error))
          __pyx_t_8 = PyNumber_Subtract(__pyx_v_cx0, __pyx_v_tx); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1201, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_3 = PyNumber_Add(__pyx_v_cy0, __pyx_v_ty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1201, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1201, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_3);
          __pyx_t_8 = 0;
          __pyx_t_3 = 0;

          /* "reachability.pyx":1200
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 * 
 */
          __Pyx_TraceLine(1200,0,__PYX_ERR(0, 1200, __pyx_L1_error))
          __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_9);
          PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_17);
          PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_17);
          __pyx_t_9 = 0;
          __pyx_t_17 = 0;
          __pyx_t_17 = PyTuple_New(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "reachability.pyx":1201
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)             # <<<<<<<<<<<<<<
 * 
 *                 # Draw arrows in the plotting direction
 */
          __Pyx_TraceLine(1201,0,__PYX_ERR(0, 1201, __pyx_L1_error))
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_line, __pyx_t_17, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

          /* "reachability.pyx":1200
 *                         p += line([(cx00 - tx0, cy00 + ty0),
 *                                    (cx0 + tx, cy0 - ty)], **kwargs)
 *                         p += line([(cx00 + tx0, cy00 - ty0),             # <<<<<<<<<<<<<<
 *                                    (cx0 - tx, cy0 + ty)], **kwargs)
 * 
 */
          __Pyx_TraceLine(1200,0,__PYX_ERR(0, 1200, __pyx_L1_error))
          __pyx_t_17 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_3); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1200, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_17);
          __pyx_t_17 = 0;
        }
        __pyx_L26:;

        /* "reachability.pyx":1190
 *                 # chosing the pairs of endpoints which make the most
 *                 # parallel lines)
 *                 if boundaries:             # <<<<<<<<<<<<<<
 *                     if ( vector([tx0-tx, ty-ty0])*vector([tx-tx0, ty0-ty])
 *                        > vector([tx0 + tx, -ty-ty0])*vector([-tx-tx0, ty+ty0])):
 */
      }

      /* "reachability.pyx":1204
 * 
 *                 # Draw arrows in the plotting direction
 *                 if arrows:             # <<<<<<<<<<<<<<
 *                     p += point((cx00, cy00), size=100, **kwargs)
 *                     p += arrow((cx00, cy00),
 */
      __Pyx_TraceLine(1204,0,__PYX_ERR(0, 1204, __pyx_L1_error))
      __pyx_t_18 = (__pyx_v_arrows != 0);
      if (__pyx_t_18) {

        /* "reachability.pyx":1205
 *                 # Draw arrows in the plotting direction
 *                 if arrows:
 *                     p += point((cx00, cy00), size=100, **kwargs)             # <<<<<<<<<<<<<<
 *                     p += arrow((cx00, cy00),
 *                                (cx00 + 2*dx0/3, cy00 + 2*dy0/3),
 */
        __Pyx_TraceLine(1205,0,__PYX_ERR(0, 1205, __pyx_L1_error))
        __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_INCREF(__pyx_v_cx00);
        __Pyx_GIVEREF(__pyx_v_cx00);
        PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_v_cx00);
        __Pyx_INCREF(__pyx_v_cy00);
        __Pyx_GIVEREF(__pyx_v_cy00);
        PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_v_cy00);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_17);
        __pyx_t_17 = 0;
        __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_size, __pyx_int_100) < 0) __PYX_ERR(0, 1205, __pyx_L1_error)
        __pyx_t_17 = __pyx_t_9;
        __pyx_t_9 = 0;
        if (__Pyx_MergeKeywords(__pyx_t_17, __pyx_v_kwargs) < 0) __PYX_ERR(0, 1205, __pyx_L1_error)
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_v_point, __pyx_t_3, __pyx_t_17); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_9); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1205, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_17);
        __pyx_t_17 = 0;

        /* "reachability.pyx":1206
 *                 if arrows:
 *                     p += point((cx00, cy00), size=100, **kwargs)
 *                     p += arrow((cx00, cy00),             # <<<<<<<<<<<<<<
 *                                (cx00 + 2*dx0/3, cy00 + 2*dy0/3),
 *                                **kwargs)
 */
        __Pyx_TraceLine(1206,0,__PYX_ERR(0, 1206, __pyx_L1_error))
        __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1206, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_INCREF(__pyx_v_cx00);
        __Pyx_GIVEREF(__pyx_v_cx00);
        PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_v_cx00);
        __Pyx_INCREF(__pyx_v_cy00);
        __Pyx_GIVEREF(__pyx_v_cy00);
        PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_v_cy00);

        /* "reachability.pyx":1207
 *                     p += point((cx00, cy00), size=100, **kwargs)
 *                     p += arrow((cx00, cy00),
 *                                (cx00 + 2*dx0/3, cy00 + 2*dy0/3),             # <<<<<<<<<<<<<<
 *                                **kwargs)
 * 
 */
        __Pyx_TraceLine(1207,0,__PYX_ERR(0, 1207, __pyx_L1_error))
        if (unlikely(!__pyx_v_dx0)) { __Pyx_RaiseUnboundLocalError("dx0"); __PYX_ERR(0, 1207, __pyx_L1_error) }
        __pyx_t_9 = PyNumber_Multiply(__pyx_int_2, __pyx_v_dx0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_9, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyNumber_Add(__pyx_v_cx00, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_v_dy0)) { __Pyx_RaiseUnboundLocalError("dy0"); __PYX_ERR(0, 1207, __pyx_L1_error) }
        __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_v_dy0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_3, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_v_cy00, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1207, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
        __pyx_t_9 = 0;
        __pyx_t_3 = 0;

        /* "reachability.pyx":1206
 *                 if arrows:
 *                     p += point((cx00, cy00), size=100, **kwargs)
 *                     p += arrow((cx00, cy00),             # <<<<<<<<<<<<<<
 *                                (cx00 + 2*dx0/3, cy00 + 2*dy0/3),
 *                                **kwargs)
 */
        __Pyx_TraceLine(1206,0,__PYX_ERR(0, 1206, __pyx_L1_error))
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_8);
        __pyx_t_17 = 0;
        __pyx_t_8 = 0;

        /* "reachability.pyx":1208
 *                     p += arrow((cx00, cy00),
 *                                (cx00 + 2*dx0/3, cy00 + 2*dy0/3),
 *                                **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if joins:
 */
        __Pyx_TraceLine(1208,0,__PYX_ERR(0, 1208, __pyx_L1_error))
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_v_arrow, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1206, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "reachability.pyx":1206
 *                 if arrows:
 *                     p += point((cx00, cy00), size=100, **kwargs)
 *                     p += arrow((cx00, cy00),             # <<<<<<<<<<<<<<
 *                                (cx00 + 2*dx0/3, cy00 + 2*dy0/3),
 *                                **kwargs)
 */
        __Pyx_TraceLine(1206,0,__PYX_ERR(0, 1206, __pyx_L1_error))
        __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "reachability.pyx":1204
 * 
 *                 # Draw arrows in the plotting direction
 *                 if arrows:             # <<<<<<<<<<<<<<
 *                     p += point((cx00, cy00), size=100, **kwargs)
 *                     p += arrow((cx00, cy00),
 */
      }

      /* "reachability.pyx":1180
 *             #     tx = ty/tan(theta)
 * 
 *             if cx00 is not None:             # <<<<<<<<<<<<<<
 *                 # Draw width
 *                 if joins:
 */
    }

    /* "reachability.pyx":1125
 * 
 *         n = int(self.c_reach.time//step)
 *         for i in range(n + 1):             # <<<<<<<<<<<<<<
 *             t = step*i
 *             if i < n:
 */
    __Pyx_TraceLine(1125,0,__PYX_ERR(0, 1125, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1210
 *                                **kwargs)
 * 
 *         if joins:             # <<<<<<<<<<<<<<
 *             p += line([(cx0 - tx, cy0 + ty),
 *                        (cx0 + tx, cy0 - ty)], linestyle='--', **kwargs)
 */
  __Pyx_TraceLine(1210,0,__PYX_ERR(0, 1210, __pyx_L1_error))
  __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_v_joins); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 1210, __pyx_L1_error)
  if (__pyx_t_18) {

    /* "reachability.pyx":1211
 * 
 *         if joins:
 *             p += line([(cx0 - tx, cy0 + ty),             # <<<<<<<<<<<<<<
 *                        (cx0 + tx, cy0 - ty)], linestyle='--', **kwargs)
 * 
 */
    __Pyx_TraceLine(1211,0,__PYX_ERR(0, 1211, __pyx_L1_error))
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_cx0, __pyx_v_tx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_v_cy0, __pyx_v_ty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;

    /* "reachability.pyx":1212
 *         if joins:
 *             p += line([(cx0 - tx, cy0 + ty),
 *                        (cx0 + tx, cy0 - ty)], linestyle='--', **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         return p
 */
    __Pyx_TraceLine(1212,0,__PYX_ERR(0, 1212, __pyx_L1_error))
    __pyx_t_3 = PyNumber_Add(__pyx_v_cx0, __pyx_v_tx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_cy0, __pyx_v_ty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;

    /* "reachability.pyx":1211
 * 
 *         if joins:
 *             p += line([(cx0 - tx, cy0 + ty),             # <<<<<<<<<<<<<<
 *                        (cx0 + tx, cy0 - ty)], linestyle='--', **kwargs)
 * 
 */
    __Pyx_TraceLine(1211,0,__PYX_ERR(0, 1211, __pyx_L1_error))
    __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_17);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_17);
    __pyx_t_8 = 0;
    __pyx_t_17 = 0;
    __pyx_t_17 = PyTuple_New(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "reachability.pyx":1212
 *         if joins:
 *             p += line([(cx0 - tx, cy0 + ty),
 *                        (cx0 + tx, cy0 - ty)], linestyle='--', **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         return p
 */
    __Pyx_TraceLine(1212,0,__PYX_ERR(0, 1212, __pyx_L1_error))
    __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_linestyle, __pyx_kp_s__24) < 0) __PYX_ERR(0, 1212, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_8;
    __pyx_t_8 = 0;
    if (__Pyx_MergeKeywords(__pyx_t_2, __pyx_v_kwargs) < 0) __PYX_ERR(0, 1212, __pyx_L1_error)

    /* "reachability.pyx":1211
 * 
 *         if joins:
 *             p += line([(cx0 - tx, cy0 + ty),             # <<<<<<<<<<<<<<
 *                        (cx0 + tx, cy0 - ty)], linestyle='--', **kwargs)
 * 
 */
    __Pyx_TraceLine(1211,0,__PYX_ERR(0, 1211, __pyx_L1_error))
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_v_line, __pyx_t_17, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_p, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF_SET(__pyx_v_p, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "reachability.pyx":1210
 *                                **kwargs)
 * 
 *         if joins:             # <<<<<<<<<<<<<<
 *             p += line([(cx0 - tx, cy0 + ty),
 *                        (cx0 + tx, cy0 - ty)], linestyle='--', **kwargs)
 */
  }

  /* "reachability.pyx":1214
 *                        (cx0 + tx, cy0 - ty)], linestyle='--', **kwargs)
 * 
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     def sage_plot(self, x, duration=None, double step=1e-2):
 */
  __Pyx_TraceLine(1214,0,__PYX_ERR(0, 1214, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p);
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "reachability.pyx":1111
 *         return self.sage_tube_plot('t', x, step, straight=True, joins=joins)
 * 
 *     def sage_tube_plot(self, str x, str y, double step=1e-1, bint arrows=False, straight=False, tight=False, boundaries=True, joins=True, **kwargs):             # <<<<<<<<<<<<<<
 *         from sage.all import line, Graphics, RIF, sqrt, arctan, tan, cos, sin, arrow, point, pi, vector
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("reachability.Reach.sage_tube_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_Graphics);
  __Pyx_XDECREF(__pyx_v_RIF);
  __Pyx_XDECREF(__pyx_v_sqrt);
  __Pyx_XDECREF(__pyx_v_arctan);
  __Pyx_XDECREF(__pyx_v_tan);
  __Pyx_XDECREF(__pyx_v_cos);
  __Pyx_XDECREF(__pyx_v_sin);
  __Pyx_XDECREF(__pyx_v_arrow);
  __Pyx_XDECREF(__pyx_v_point);
  __Pyx_XDECREF(__pyx_v_pi);
  __Pyx_XDECREF(__pyx_v_vector);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_cx0);
  __Pyx_XDECREF(__pyx_v_cy0);
  __Pyx_XDECREF(__pyx_v_cx);
  __Pyx_XDECREF(__pyx_v_cy);
  __Pyx_XDECREF(__pyx_v_tx);
  __Pyx_XDECREF(__pyx_v_ty);
  __Pyx_XDECREF(__pyx_v_rx);
  __Pyx_XDECREF(__pyx_v_ry);
  __Pyx_XDECREF(__pyx_v_dx);
  __Pyx_XDECREF(__pyx_v_dy);
  __Pyx_XDECREF(__pyx_v_r00);
  __Pyx_XDECREF(__pyx_v_r0);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XDECREF(__pyx_v_Ix);
  __Pyx_XDECREF(__pyx_v_Iy);
  __Pyx_XDECREF(__pyx_v_cx00);
  __Pyx_XDECREF(__pyx_v_cy00);
  __Pyx_XDECREF(__pyx_v_tx0);
  __Pyx_XDECREF(__pyx_v_ty0);
  __Pyx_XDECREF(__pyx_v_dx0);
  __Pyx_XDECREF(__pyx_v_dy0);
  __Pyx_XDECREF(__pyx_v_theta);
  __Pyx_XDECREF(__pyx_v_r000);
  __Pyx_XDECREF(__pyx_v_rx0);
  __Pyx_XDECREF(__pyx_v_ry0);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1216
 *         return p
 * 
 *     def sage_plot(self, x, duration=None, double step=1e-2):             # <<<<<<<<<<<<<<
 *         from sage.all import plot
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_21sage_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_21sage_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_duration = 0;
  double __pyx_v_step;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sage_plot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_duration,&__pyx_n_s_step,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_duration);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sage_plot") < 0)) __PYX_ERR(0, 1216, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = values[0];
    __pyx_v_duration = values[1];
    if (values[2]) {
      __pyx_v_step = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_step == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1216, __pyx_L3_error)
    } else {
      __pyx_v_step = ((double)1e-2);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sage_plot", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1216, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.sage_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_5Reach_20sage_plot(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_x, __pyx_v_duration, __pyx_v_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1226
 *         ress = dict()
 * 
 *         def fl(t):             # <<<<<<<<<<<<<<
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_9sage_plot_1fl(PyObject *__pyx_self, PyObject *__pyx_v_t); /*proto*/
static PyMethodDef __pyx_mdef_12reachability_5Reach_9sage_plot_1fl = {"fl", (PyCFunction)__pyx_pw_12reachability_5Reach_9sage_plot_1fl, METH_O, 0};
static PyObject *__pyx_pw_12reachability_5Reach_9sage_plot_1fl(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fl (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_9sage_plot_fl(__pyx_self, ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_9sage_plot_fl(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *__pyx_cur_scope;
  struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("fl", 0);
  __pyx_outer_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_TraceCall("fl", __pyx_f[0], 1226, 0, __PYX_ERR(0, 1226, __pyx_L1_error));

  /* "reachability.pyx":1227
 * 
 *         def fl(t):
 *             if t not in ress:             # <<<<<<<<<<<<<<
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].lower()
 */
  __Pyx_TraceLine(1227,0,__PYX_ERR(0, 1227, __pyx_L1_error))
  if (unlikely(!__pyx_cur_scope->__pyx_v_ress)) { __Pyx_RaiseClosureNameError("ress"); __PYX_ERR(0, 1227, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_ress == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1227, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_t, __pyx_cur_scope->__pyx_v_ress, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1227, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "reachability.pyx":1228
 *         def fl(t):
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]             # <<<<<<<<<<<<<<
 *             return ress[t].lower()
 *         def fu(t):
 */
    __Pyx_TraceLine(1228,0,__PYX_ERR(0, 1228, __pyx_L1_error))
    if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1228, __pyx_L1_error) }
    __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_step); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_t, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_step); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_v_t, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_t_6 = ((PyObject *)__pyx_cur_scope->__pyx_v_self); __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1228, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1228, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1228, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_cur_scope->__pyx_v_var_id, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_v_ress)) { __Pyx_RaiseClosureNameError("ress"); __PYX_ERR(0, 1228, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_v_ress == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1228, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_ress, __pyx_v_t, __pyx_t_6) < 0)) __PYX_ERR(0, 1228, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "reachability.pyx":1227
 * 
 *         def fl(t):
 *             if t not in ress:             # <<<<<<<<<<<<<<
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].lower()
 */
  }

  /* "reachability.pyx":1229
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].lower()             # <<<<<<<<<<<<<<
 *         def fu(t):
 *             if t not in ress:
 */
  __Pyx_TraceLine(1229,0,__PYX_ERR(0, 1229, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_ress)) { __Pyx_RaiseClosureNameError("ress"); __PYX_ERR(0, 1229, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_ress == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1229, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_ress, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_lower); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1229, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1226
 *         ress = dict()
 * 
 *         def fl(t):             # <<<<<<<<<<<<<<
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("reachability.Reach.sage_plot.fl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1230
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].lower()
 *         def fu(t):             # <<<<<<<<<<<<<<
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_9sage_plot_3fu(PyObject *__pyx_self, PyObject *__pyx_v_t); /*proto*/
static PyMethodDef __pyx_mdef_12reachability_5Reach_9sage_plot_3fu = {"fu", (PyCFunction)__pyx_pw_12reachability_5Reach_9sage_plot_3fu, METH_O, 0};
static PyObject *__pyx_pw_12reachability_5Reach_9sage_plot_3fu(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fu (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_9sage_plot_2fu(__pyx_self, ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_9sage_plot_2fu(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *__pyx_cur_scope;
  struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("fu", 0);
  __pyx_outer_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_TraceCall("fu", __pyx_f[0], 1230, 0, __PYX_ERR(0, 1230, __pyx_L1_error));

  /* "reachability.pyx":1231
 *             return ress[t].lower()
 *         def fu(t):
 *             if t not in ress:             # <<<<<<<<<<<<<<
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].upper()
 */
  __Pyx_TraceLine(1231,0,__PYX_ERR(0, 1231, __pyx_L1_error))
  if (unlikely(!__pyx_cur_scope->__pyx_v_ress)) { __Pyx_RaiseClosureNameError("ress"); __PYX_ERR(0, 1231, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_ress == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1231, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_t, __pyx_cur_scope->__pyx_v_ress, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1231, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "reachability.pyx":1232
 *         def fu(t):
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]             # <<<<<<<<<<<<<<
 *             return ress[t].upper()
 * 
 */
    __Pyx_TraceLine(1232,0,__PYX_ERR(0, 1232, __pyx_L1_error))
    if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1232, __pyx_L1_error) }
    __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_step); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_t, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_step); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_v_t, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_t_6 = ((PyObject *)__pyx_cur_scope->__pyx_v_self); __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_cur_scope->__pyx_v_var_id, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_v_ress)) { __Pyx_RaiseClosureNameError("ress"); __PYX_ERR(0, 1232, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_v_ress == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1232, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_cur_scope->__pyx_v_ress, __pyx_v_t, __pyx_t_6) < 0)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "reachability.pyx":1231
 *             return ress[t].lower()
 *         def fu(t):
 *             if t not in ress:             # <<<<<<<<<<<<<<
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].upper()
 */
  }

  /* "reachability.pyx":1233
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].upper()             # <<<<<<<<<<<<<<
 * 
 *         return plot([fl, fu],
 */
  __Pyx_TraceLine(1233,0,__PYX_ERR(0, 1233, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_ress)) { __Pyx_RaiseClosureNameError("ress"); __PYX_ERR(0, 1233, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_ress == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1233, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_ress, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_upper); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1233, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1230
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].lower()
 *         def fu(t):             # <<<<<<<<<<<<<<
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("reachability.Reach.sage_plot.fu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1216
 *         return p
 * 
 *     def sage_plot(self, x, duration=None, double step=1e-2):             # <<<<<<<<<<<<<<
 *         from sage.all import plot
 * 
 */

static PyObject *__pyx_pf_12reachability_5Reach_20sage_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_duration, double __pyx_v_step) {
  struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *__pyx_cur_scope;
  PyObject *__pyx_v_plot = NULL;
  PyObject *__pyx_v_fl = 0;
  PyObject *__pyx_v_fu = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("sage_plot", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *)__pyx_tp_new_12reachability___pyx_scope_struct_8_sage_plot(__pyx_ptype_12reachability___pyx_scope_struct_8_sage_plot, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1216, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("sage_plot", __pyx_f[0], 1216, 0, __PYX_ERR(0, 1216, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_step = __pyx_v_step;
  __Pyx_INCREF(__pyx_v_duration);

  /* "reachability.pyx":1217
 * 
 *     def sage_plot(self, x, duration=None, double step=1e-2):
 *         from sage.all import plot             # <<<<<<<<<<<<<<
 * 
 *         if duration is None:
 */
  __Pyx_TraceLine(1217,0,__PYX_ERR(0, 1217, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_plot);
  __Pyx_GIVEREF(__pyx_n_s_plot);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_plot);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_plot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_plot = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1219
 *         from sage.all import plot
 * 
 *         if duration is None:             # <<<<<<<<<<<<<<
 *             duration = (0, float(self.c_reach.time))
 * 
 */
  __Pyx_TraceLine(1219,0,__PYX_ERR(0, 1219, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_duration == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "reachability.pyx":1220
 * 
 *         if duration is None:
 *             duration = (0, float(self.c_reach.time))             # <<<<<<<<<<<<<<
 * 
 *         cdef int var_id = self.c_reach.getIDForStateVar(x)
 */
    __Pyx_TraceLine(1220,0,__PYX_ERR(0, 1220, __pyx_L1_error))
    __pyx_t_2 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->c_reach.time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_duration, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "reachability.pyx":1219
 *         from sage.all import plot
 * 
 *         if duration is None:             # <<<<<<<<<<<<<<
 *             duration = (0, float(self.c_reach.time))
 * 
 */
  }

  /* "reachability.pyx":1222
 *             duration = (0, float(self.c_reach.time))
 * 
 *         cdef int var_id = self.c_reach.getIDForStateVar(x)             # <<<<<<<<<<<<<<
 *         # Cache the evaluations
 *         ress = dict()
 */
  __Pyx_TraceLine(1222,0,__PYX_ERR(0, 1222, __pyx_L1_error))
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1222, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_var_id = __pyx_cur_scope->__pyx_v_self->c_reach.getIDForStateVar(__pyx_t_5);

  /* "reachability.pyx":1224
 *         cdef int var_id = self.c_reach.getIDForStateVar(x)
 *         # Cache the evaluations
 *         ress = dict()             # <<<<<<<<<<<<<<
 * 
 *         def fl(t):
 */
  __Pyx_TraceLine(1224,0,__PYX_ERR(0, 1224, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_ress = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "reachability.pyx":1226
 *         ress = dict()
 * 
 *         def fl(t):             # <<<<<<<<<<<<<<
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 */
  __Pyx_TraceLine(1226,0,__PYX_ERR(0, 1226, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_12reachability_5Reach_9sage_plot_1fl, 0, __pyx_n_s_sage_plot_locals_fl, ((PyObject*)__pyx_cur_scope), __pyx_n_s_reachability, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fl = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "reachability.pyx":1230
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].lower()
 *         def fu(t):             # <<<<<<<<<<<<<<
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 */
  __Pyx_TraceLine(1230,0,__PYX_ERR(0, 1230, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_12reachability_5Reach_9sage_plot_3fu, 0, __pyx_n_s_sage_plot_locals_fu, ((PyObject*)__pyx_cur_scope), __pyx_n_s_reachability, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fu = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "reachability.pyx":1235
 *             return ress[t].upper()
 * 
 *         return plot([fl, fu],             # <<<<<<<<<<<<<<
 *                     duration,
 *                     plot_points=self.c_reach.time//step)
 */
  __Pyx_TraceLine(1235,0,__PYX_ERR(0, 1235, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_fl);
  __Pyx_GIVEREF(__pyx_v_fl);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_fl);
  __Pyx_INCREF(__pyx_v_fu);
  __Pyx_GIVEREF(__pyx_v_fu);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_fu);

  /* "reachability.pyx":1236
 * 
 *         return plot([fl, fu],
 *                     duration,             # <<<<<<<<<<<<<<
 *                     plot_points=self.c_reach.time//step)
 * 
 */
  __Pyx_TraceLine(1236,0,__PYX_ERR(0, 1236, __pyx_L1_error))
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_duration);
  __Pyx_GIVEREF(__pyx_v_duration);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_duration);
  __pyx_t_1 = 0;

  /* "reachability.pyx":1237
 *         return plot([fl, fu],
 *                     duration,
 *                     plot_points=self.c_reach.time//step)             # <<<<<<<<<<<<<<
 * 
 *     def sage_parametric_plot(self, str x, str y, double step=1e-2):
 */
  __Pyx_TraceLine(1237,0,__PYX_ERR(0, 1237, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_cur_scope->__pyx_v_step == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1237, __pyx_L1_error)
  }
  __pyx_t_6 = PyFloat_FromDouble(floor(__pyx_cur_scope->__pyx_v_self->c_reach.time / __pyx_cur_scope->__pyx_v_step)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_plot_points, __pyx_t_6) < 0) __PYX_ERR(0, 1237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "reachability.pyx":1235
 *             return ress[t].upper()
 * 
 *         return plot([fl, fu],             # <<<<<<<<<<<<<<
 *                     duration,
 *                     plot_points=self.c_reach.time//step)
 */
  __Pyx_TraceLine(1235,0,__PYX_ERR(0, 1235, __pyx_L1_error))
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_v_plot, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1216
 *         return p
 * 
 *     def sage_plot(self, x, duration=None, double step=1e-2):             # <<<<<<<<<<<<<<
 *         from sage.all import plot
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("reachability.Reach.sage_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_plot);
  __Pyx_XDECREF(__pyx_v_fl);
  __Pyx_XDECREF(__pyx_v_fu);
  __Pyx_XDECREF(__pyx_v_duration);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1239
 *                     plot_points=self.c_reach.time//step)
 * 
 *     def sage_parametric_plot(self, str x, str y, double step=1e-2):             # <<<<<<<<<<<<<<
 *         from sage.all import parametric_plot, RIF
 *         from functools import partial
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_23sage_parametric_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_23sage_parametric_plot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  double __pyx_v_step;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sage_parametric_plot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_step,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sage_parametric_plot", 0, 2, 3, 1); __PYX_ERR(0, 1239, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sage_parametric_plot") < 0)) __PYX_ERR(0, 1239, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x = ((PyObject*)values[0]);
    __pyx_v_y = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_step = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_step == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1239, __pyx_L3_error)
    } else {
      __pyx_v_step = ((double)1e-2);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sage_parametric_plot", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1239, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.sage_parametric_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), (&PyString_Type), 1, "x", 1))) __PYX_ERR(0, 1239, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), (&PyString_Type), 1, "y", 1))) __PYX_ERR(0, 1239, __pyx_L1_error)
  __pyx_r = __pyx_pf_12reachability_5Reach_22sage_parametric_plot(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_step);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1246
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)
 * 
 *         def f(t):             # <<<<<<<<<<<<<<
 *             return self((t, t+step))[var_id_x].center()
 *         def g(t):
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_20sage_parametric_plot_1f(PyObject *__pyx_self, PyObject *__pyx_v_t); /*proto*/
static PyMethodDef __pyx_mdef_12reachability_5Reach_20sage_parametric_plot_1f = {"f", (PyCFunction)__pyx_pw_12reachability_5Reach_20sage_parametric_plot_1f, METH_O, 0};
static PyObject *__pyx_pw_12reachability_5Reach_20sage_parametric_plot_1f(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("f (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_20sage_parametric_plot_f(__pyx_self, ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_20sage_parametric_plot_f(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *__pyx_cur_scope;
  struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("f", 0);
  __pyx_outer_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_TraceCall("f", __pyx_f[0], 1246, 0, __PYX_ERR(0, 1246, __pyx_L1_error));

  /* "reachability.pyx":1247
 * 
 *         def f(t):
 *             return self((t, t+step))[var_id_x].center()             # <<<<<<<<<<<<<<
 *         def g(t):
 *             return self((t, t+step))[var_id_y].center()
 */
  __Pyx_TraceLine(1247,0,__PYX_ERR(0, 1247, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1247, __pyx_L1_error) }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_step); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_v_t, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_t);
  __Pyx_GIVEREF(__pyx_v_t);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_t);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __pyx_t_4 = ((PyObject *)__pyx_cur_scope->__pyx_v_self); __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, __pyx_cur_scope->__pyx_v_var_id_x, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_center); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1247, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1246
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)
 * 
 *         def f(t):             # <<<<<<<<<<<<<<
 *             return self((t, t+step))[var_id_x].center()
 *         def g(t):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("reachability.Reach.sage_parametric_plot.f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1248
 *         def f(t):
 *             return self((t, t+step))[var_id_x].center()
 *         def g(t):             # <<<<<<<<<<<<<<
 *             return self((t, t+step))[var_id_y].center()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_20sage_parametric_plot_3g(PyObject *__pyx_self, PyObject *__pyx_v_t); /*proto*/
static PyMethodDef __pyx_mdef_12reachability_5Reach_20sage_parametric_plot_3g = {"g", (PyCFunction)__pyx_pw_12reachability_5Reach_20sage_parametric_plot_3g, METH_O, 0};
static PyObject *__pyx_pw_12reachability_5Reach_20sage_parametric_plot_3g(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("g (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_20sage_parametric_plot_2g(__pyx_self, ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_20sage_parametric_plot_2g(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *__pyx_cur_scope;
  struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("g", 0);
  __pyx_outer_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_TraceCall("g", __pyx_f[0], 1248, 0, __PYX_ERR(0, 1248, __pyx_L1_error));

  /* "reachability.pyx":1249
 *             return self((t, t+step))[var_id_x].center()
 *         def g(t):
 *             return self((t, t+step))[var_id_y].center()             # <<<<<<<<<<<<<<
 * 
 *         return parametric_plot((f, g), (0, float(self.c_reach.time)))
 */
  __Pyx_TraceLine(1249,0,__PYX_ERR(0, 1249, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1249, __pyx_L1_error) }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_step); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Add(__pyx_v_t, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_t);
  __Pyx_GIVEREF(__pyx_v_t);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_t);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
  __pyx_t_4 = ((PyObject *)__pyx_cur_scope->__pyx_v_self); __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, __pyx_cur_scope->__pyx_v_var_id_y, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_center); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1249, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1248
 *         def f(t):
 *             return self((t, t+step))[var_id_x].center()
 *         def g(t):             # <<<<<<<<<<<<<<
 *             return self((t, t+step))[var_id_y].center()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("reachability.Reach.sage_parametric_plot.g", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1239
 *                     plot_points=self.c_reach.time//step)
 * 
 *     def sage_parametric_plot(self, str x, str y, double step=1e-2):             # <<<<<<<<<<<<<<
 *         from sage.all import parametric_plot, RIF
 *         from functools import partial
 */

static PyObject *__pyx_pf_12reachability_5Reach_22sage_parametric_plot(struct __pyx_obj_12reachability_Reach *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, double __pyx_v_step) {
  struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *__pyx_cur_scope;
  PyObject *__pyx_v_parametric_plot = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_RIF = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_partial = NULL;
  PyObject *__pyx_v_f = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("sage_parametric_plot", 0);
  __pyx_cur_scope = (struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *)__pyx_tp_new_12reachability___pyx_scope_struct_9_sage_parametric_plot(__pyx_ptype_12reachability___pyx_scope_struct_9_sage_parametric_plot, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1239, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __Pyx_TraceCall("sage_parametric_plot", __pyx_f[0], 1239, 0, __PYX_ERR(0, 1239, __pyx_L1_error));
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_step = __pyx_v_step;

  /* "reachability.pyx":1240
 * 
 *     def sage_parametric_plot(self, str x, str y, double step=1e-2):
 *         from sage.all import parametric_plot, RIF             # <<<<<<<<<<<<<<
 *         from functools import partial
 * 
 */
  __Pyx_TraceLine(1240,0,__PYX_ERR(0, 1240, __pyx_L1_error))
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_parametric_plot);
  __Pyx_GIVEREF(__pyx_n_s_parametric_plot);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_parametric_plot);
  __Pyx_INCREF(__pyx_n_s_RIF);
  __Pyx_GIVEREF(__pyx_n_s_RIF);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_RIF);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_parametric_plot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parametric_plot = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_RIF); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_RIF = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1241
 *     def sage_parametric_plot(self, str x, str y, double step=1e-2):
 *         from sage.all import parametric_plot, RIF
 *         from functools import partial             # <<<<<<<<<<<<<<
 * 
 *         cdef int var_id_x = self.c_reach.getIDForStateVar(x)
 */
  __Pyx_TraceLine(1241,0,__PYX_ERR(0, 1241, __pyx_L1_error))
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_partial);
  __Pyx_GIVEREF(__pyx_n_s_partial);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_partial);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_functools, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_partial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_partial = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":1243
 *         from functools import partial
 * 
 *         cdef int var_id_x = self.c_reach.getIDForStateVar(x)             # <<<<<<<<<<<<<<
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)
 * 
 */
  __Pyx_TraceLine(1243,0,__PYX_ERR(0, 1243, __pyx_L1_error))
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1243, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_var_id_x = __pyx_cur_scope->__pyx_v_self->c_reach.getIDForStateVar(__pyx_t_3);

  /* "reachability.pyx":1244
 * 
 *         cdef int var_id_x = self.c_reach.getIDForStateVar(x)
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)             # <<<<<<<<<<<<<<
 * 
 *         def f(t):
 */
  __Pyx_TraceLine(1244,0,__PYX_ERR(0, 1244, __pyx_L1_error))
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1244, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_var_id_y = __pyx_cur_scope->__pyx_v_self->c_reach.getIDForStateVar(__pyx_t_3);

  /* "reachability.pyx":1246
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)
 * 
 *         def f(t):             # <<<<<<<<<<<<<<
 *             return self((t, t+step))[var_id_x].center()
 *         def g(t):
 */
  __Pyx_TraceLine(1246,0,__PYX_ERR(0, 1246, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_12reachability_5Reach_20sage_parametric_plot_1f, 0, __pyx_n_s_sage_parametric_plot_locals_f, ((PyObject*)__pyx_cur_scope), __pyx_n_s_reachability, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_f = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "reachability.pyx":1248
 *         def f(t):
 *             return self((t, t+step))[var_id_x].center()
 *         def g(t):             # <<<<<<<<<<<<<<
 *             return self((t, t+step))[var_id_y].center()
 * 
 */
  __Pyx_TraceLine(1248,0,__PYX_ERR(0, 1248, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_12reachability_5Reach_20sage_parametric_plot_3g, 0, __pyx_n_s_sage_parametric_plot_locals_g, ((PyObject*)__pyx_cur_scope), __pyx_n_s_reachability, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "reachability.pyx":1251
 *             return self((t, t+step))[var_id_y].center()
 * 
 *         return parametric_plot((f, g), (0, float(self.c_reach.time)))             # <<<<<<<<<<<<<<
 * 
 *             # [partial(f, 0, var_id_x),
 */
  __Pyx_TraceLine(1251,0,__PYX_ERR(0, 1251, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_f);
  __Pyx_GIVEREF(__pyx_v_f);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_f);
  __Pyx_INCREF(__pyx_v_g);
  __Pyx_GIVEREF(__pyx_v_g);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_g);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->c_reach.time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_v_parametric_plot);
  __pyx_t_4 = __pyx_v_parametric_plot; __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1239
 *                     plot_points=self.c_reach.time//step)
 * 
 *     def sage_parametric_plot(self, str x, str y, double step=1e-2):             # <<<<<<<<<<<<<<
 *         from sage.all import parametric_plot, RIF
 *         from functools import partial
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("reachability.Reach.sage_parametric_plot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parametric_plot);
  __Pyx_XDECREF(__pyx_v_RIF);
  __Pyx_XDECREF(__pyx_v_partial);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1255
 *             # [partial(f, 0, var_id_x),
 *             #                     partial(f, 0, var_id_y)],
 *     def run(self):             # <<<<<<<<<<<<<<
 *         if self.ran:
 *             raise Exception('Already ran')
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_25run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_25run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_24run(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_24run(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("run", 0);
  __Pyx_TraceCall("run", __pyx_f[0], 1255, 0, __PYX_ERR(0, 1255, __pyx_L1_error));

  /* "reachability.pyx":1256
 *             #                     partial(f, 0, var_id_y)],
 *     def run(self):
 *         if self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Already ran')
 *         try:
 */
  __Pyx_TraceLine(1256,0,__PYX_ERR(0, 1256, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_self->ran != 0);
  if (unlikely(__pyx_t_1)) {

    /* "reachability.pyx":1257
 *     def run(self):
 *         if self.ran:
 *             raise Exception('Already ran')             # <<<<<<<<<<<<<<
 *         try:
 *             clear_globals()
 */
    __Pyx_TraceLine(1257,0,__PYX_ERR(0, 1257, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1257, __pyx_L1_error)

    /* "reachability.pyx":1256
 *             #                     partial(f, 0, var_id_y)],
 *     def run(self):
 *         if self.ran:             # <<<<<<<<<<<<<<
 *             raise Exception('Already ran')
 *         try:
 */
  }

  /* "reachability.pyx":1258
 *         if self.ran:
 *             raise Exception('Already ran')
 *         try:             # <<<<<<<<<<<<<<
 *             clear_globals()
 *             try:
 */
  __Pyx_TraceLine(1258,0,__PYX_ERR(0, 1258, __pyx_L5_error))
  /*try:*/ {

    /* "reachability.pyx":1259
 *             raise Exception('Already ran')
 *         try:
 *             clear_globals()             # <<<<<<<<<<<<<<
 *             try:
 *                 self.result = int(self.c_reach.run())
 */
    __Pyx_TraceLine(1259,0,__PYX_ERR(0, 1259, __pyx_L5_error))
    __pyx_t_2 = __pyx_f_12reachability_clear_globals(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1259, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "reachability.pyx":1260
 *         try:
 *             clear_globals()
 *             try:             # <<<<<<<<<<<<<<
 *                 self.result = int(self.c_reach.run())
 *                 self.capture_globals()
 */
    __Pyx_TraceLine(1260,0,__PYX_ERR(0, 1260, __pyx_L7_error))
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "reachability.pyx":1261
 *             clear_globals()
 *             try:
 *                 self.result = int(self.c_reach.run())             # <<<<<<<<<<<<<<
 *                 self.capture_globals()
 *             except:
 */
        __Pyx_TraceLine(1261,0,__PYX_ERR(0, 1261, __pyx_L7_error))
        __pyx_v_self->result = __pyx_v_self->c_reach.run();

        /* "reachability.pyx":1262
 *             try:
 *                 self.result = int(self.c_reach.run())
 *                 self.capture_globals()             # <<<<<<<<<<<<<<
 *             except:
 *                 clear_globals()
 */
        __Pyx_TraceLine(1262,0,__PYX_ERR(0, 1262, __pyx_L7_error))
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_capture_globals); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1262, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        if (__pyx_t_7) {
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1262, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1262, __pyx_L7_error)
        }
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "reachability.pyx":1260
 *         try:
 *             clear_globals()
 *             try:             # <<<<<<<<<<<<<<
 *                 self.result = int(self.c_reach.run())
 *                 self.capture_globals()
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L12_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "reachability.pyx":1263
 *                 self.result = int(self.c_reach.run())
 *                 self.capture_globals()
 *             except:             # <<<<<<<<<<<<<<
 *                 clear_globals()
 *                 raise
 */
      __Pyx_TraceLine(1263,0,__PYX_ERR(0, 1263, __pyx_L9_except_error))
      /*except:*/ {
        __Pyx_AddTraceback("reachability.Reach.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 1263, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);

        /* "reachability.pyx":1264
 *                 self.capture_globals()
 *             except:
 *                 clear_globals()             # <<<<<<<<<<<<<<
 *                 raise
 *             return self.result
 */
        __Pyx_TraceLine(1264,0,__PYX_ERR(0, 1264, __pyx_L9_except_error))
        __pyx_t_8 = __pyx_f_12reachability_clear_globals(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1264, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "reachability.pyx":1265
 *             except:
 *                 clear_globals()
 *                 raise             # <<<<<<<<<<<<<<
 *             return self.result
 *         finally:
 */
        __Pyx_TraceLine(1265,0,__PYX_ERR(0, 1265, __pyx_L9_except_error))
        __Pyx_GIVEREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_6, __pyx_t_7);
        __pyx_t_2 = 0; __pyx_t_6 = 0; __pyx_t_7 = 0; 
        __PYX_ERR(0, 1265, __pyx_L9_except_error)
      }
      __pyx_L9_except_error:;

      /* "reachability.pyx":1260
 *         try:
 *             clear_globals()
 *             try:             # <<<<<<<<<<<<<<
 *                 self.result = int(self.c_reach.run())
 *                 self.capture_globals()
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L5_error;
      __pyx_L12_try_end:;
    }

    /* "reachability.pyx":1266
 *                 clear_globals()
 *                 raise
 *             return self.result             # <<<<<<<<<<<<<<
 *         finally:
 *             self.ran = self.num_flowpipes > 0
 */
    __Pyx_TraceLine(1266,0,__PYX_ERR(0, 1266, __pyx_L5_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->result); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1266, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L4_return;
  }

  /* "reachability.pyx":1268
 *             return self.result
 *         finally:
 *             self.ran = self.num_flowpipes > 0             # <<<<<<<<<<<<<<
 * 
 *     # Make a local copy of flowstar global variables
 */
  __Pyx_TraceLine(1268,0,__PYX_ERR(0, 1268, __pyx_L1_error))
  /*finally:*/ {
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3) < 0)) __Pyx_ErrFetch(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __pyx_t_9 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
      {
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_flowpipes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1268, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1268, __pyx_L16_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1268, __pyx_L16_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_self->ran = __pyx_t_1;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ErrRestore(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
      goto __pyx_L1_error;
      __pyx_L16_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_14 = __pyx_r;
      __pyx_r = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_flowpipes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1268, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1268, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_self->ran = __pyx_t_1;
      __pyx_r = __pyx_t_14;
      __pyx_t_14 = 0;
      goto __pyx_L0;
    }
  }

  /* "reachability.pyx":1255
 *             # [partial(f, 0, var_id_x),
 *             #                     partial(f, 0, var_id_y)],
 *     def run(self):             # <<<<<<<<<<<<<<
 *         if self.ran:
 *             raise Exception('Already ran')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("reachability.Reach.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1271
 * 
 *     # Make a local copy of flowstar global variables
 *     def capture_globals(self):             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_27capture_globals(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_27capture_globals(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("capture_globals (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_26capture_globals(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_26capture_globals(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("capture_globals", 0);
  __Pyx_TraceCall("capture_globals", __pyx_f[0], 1271, 0, __PYX_ERR(0, 1271, __pyx_L1_error));

  /* "reachability.pyx":1277
 *         global domainVarNames
 * 
 *         self.domainVarNames = domainVarNames             # <<<<<<<<<<<<<<
 *         self.factorial_rec = factorial_rec
 *         self.power_4 = power_4
 */
  __Pyx_TraceLine(1277,0,__PYX_ERR(0, 1277, __pyx_L1_error))
  __pyx_v_self->domainVarNames = flowstar::domainVarNames;

  /* "reachability.pyx":1278
 * 
 *         self.domainVarNames = domainVarNames
 *         self.factorial_rec = factorial_rec             # <<<<<<<<<<<<<<
 *         self.power_4 = power_4
 *         self.double_factorial = double_factorial
 */
  __Pyx_TraceLine(1278,0,__PYX_ERR(0, 1278, __pyx_L1_error))
  __pyx_v_self->factorial_rec = flowstar::factorial_rec;

  /* "reachability.pyx":1279
 *         self.domainVarNames = domainVarNames
 *         self.factorial_rec = factorial_rec
 *         self.power_4 = power_4             # <<<<<<<<<<<<<<
 *         self.double_factorial = double_factorial
 * 
 */
  __Pyx_TraceLine(1279,0,__PYX_ERR(0, 1279, __pyx_L1_error))
  __pyx_v_self->power_4 = flowstar::power_4;

  /* "reachability.pyx":1280
 *         self.factorial_rec = factorial_rec
 *         self.power_4 = power_4
 *         self.double_factorial = double_factorial             # <<<<<<<<<<<<<<
 * 
 *     def clear_captured_globals(self):
 */
  __Pyx_TraceLine(1280,0,__PYX_ERR(0, 1280, __pyx_L1_error))
  __pyx_v_self->double_factorial = flowstar::double_factorial;

  /* "reachability.pyx":1271
 * 
 *     # Make a local copy of flowstar global variables
 *     def capture_globals(self):             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.Reach.capture_globals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1282
 *         self.double_factorial = double_factorial
 * 
 *     def clear_captured_globals(self):             # <<<<<<<<<<<<<<
 *         self.domainVarNames.clear()
 *         self.factorial_rec.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_29clear_captured_globals(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_29clear_captured_globals(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_captured_globals (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_28clear_captured_globals(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_28clear_captured_globals(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_captured_globals", 0);
  __Pyx_TraceCall("clear_captured_globals", __pyx_f[0], 1282, 0, __PYX_ERR(0, 1282, __pyx_L1_error));

  /* "reachability.pyx":1283
 * 
 *     def clear_captured_globals(self):
 *         self.domainVarNames.clear()             # <<<<<<<<<<<<<<
 *         self.factorial_rec.clear()
 *         self.power_4.clear()
 */
  __Pyx_TraceLine(1283,0,__PYX_ERR(0, 1283, __pyx_L1_error))
  __pyx_v_self->domainVarNames.clear();

  /* "reachability.pyx":1284
 *     def clear_captured_globals(self):
 *         self.domainVarNames.clear()
 *         self.factorial_rec.clear()             # <<<<<<<<<<<<<<
 *         self.power_4.clear()
 *         self.double_factorial.clear()
 */
  __Pyx_TraceLine(1284,0,__PYX_ERR(0, 1284, __pyx_L1_error))
  __pyx_v_self->factorial_rec.clear();

  /* "reachability.pyx":1285
 *         self.domainVarNames.clear()
 *         self.factorial_rec.clear()
 *         self.power_4.clear()             # <<<<<<<<<<<<<<
 *         self.double_factorial.clear()
 * 
 */
  __Pyx_TraceLine(1285,0,__PYX_ERR(0, 1285, __pyx_L1_error))
  __pyx_v_self->power_4.clear();

  /* "reachability.pyx":1286
 *         self.factorial_rec.clear()
 *         self.power_4.clear()
 *         self.double_factorial.clear()             # <<<<<<<<<<<<<<
 * 
 *     # Restore local copy of flowstar global variables
 */
  __Pyx_TraceLine(1286,0,__PYX_ERR(0, 1286, __pyx_L1_error))
  __pyx_v_self->double_factorial.clear();

  /* "reachability.pyx":1282
 *         self.double_factorial = double_factorial
 * 
 *     def clear_captured_globals(self):             # <<<<<<<<<<<<<<
 *         self.domainVarNames.clear()
 *         self.factorial_rec.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.Reach.clear_captured_globals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1289
 * 
 *     # Restore local copy of flowstar global variables
 *     def restore_globals(self):             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_31restore_globals(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_31restore_globals(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_globals (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_30restore_globals(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_30restore_globals(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  std::vector<flowstar::Interval>  __pyx_t_2;
  __Pyx_RefNannySetupContext("restore_globals", 0);
  __Pyx_TraceCall("restore_globals", __pyx_f[0], 1289, 0, __PYX_ERR(0, 1289, __pyx_L1_error));

  /* "reachability.pyx":1295
 *         global domainVarNames
 * 
 *         domainVarNames = self.domainVarNames             # <<<<<<<<<<<<<<
 *         factorial_rec = self.factorial_rec
 *         power_4 = self.power_4
 */
  __Pyx_TraceLine(1295,0,__PYX_ERR(0, 1295, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_self->domainVarNames;
  flowstar::domainVarNames = __pyx_t_1;

  /* "reachability.pyx":1296
 * 
 *         domainVarNames = self.domainVarNames
 *         factorial_rec = self.factorial_rec             # <<<<<<<<<<<<<<
 *         power_4 = self.power_4
 *         double_factorial = self.double_factorial
 */
  __Pyx_TraceLine(1296,0,__PYX_ERR(0, 1296, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->factorial_rec;
  flowstar::factorial_rec = __pyx_t_2;

  /* "reachability.pyx":1297
 *         domainVarNames = self.domainVarNames
 *         factorial_rec = self.factorial_rec
 *         power_4 = self.power_4             # <<<<<<<<<<<<<<
 *         double_factorial = self.double_factorial
 * 
 */
  __Pyx_TraceLine(1297,0,__PYX_ERR(0, 1297, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->power_4;
  flowstar::power_4 = __pyx_t_2;

  /* "reachability.pyx":1298
 *         factorial_rec = self.factorial_rec
 *         power_4 = self.power_4
 *         double_factorial = self.double_factorial             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __Pyx_TraceLine(1298,0,__PYX_ERR(0, 1298, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->double_factorial;
  flowstar::double_factorial = __pyx_t_2;

  /* "reachability.pyx":1289
 * 
 *     # Restore local copy of flowstar global variables
 *     def restore_globals(self):             # <<<<<<<<<<<<<<
 *         global factorial_rec
 *         global power_4
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("reachability.Reach.restore_globals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1300
 *         double_factorial = self.double_factorial
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         # sig_on()
 *         self.restore_globals()
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_33__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_33__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_32__enter__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_32__enter__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__enter__", 0);
  __Pyx_TraceCall("__enter__", __pyx_f[0], 1300, 0, __PYX_ERR(0, 1300, __pyx_L1_error));

  /* "reachability.pyx":1302
 *     def __enter__(self):
 *         # sig_on()
 *         self.restore_globals()             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */
  __Pyx_TraceLine(1302,0,__PYX_ERR(0, 1302, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_restore_globals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":1300
 *         double_factorial = self.double_factorial
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         # sig_on()
 *         self.restore_globals()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("reachability.Reach.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1304
 *         self.restore_globals()
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         # sig_off()
 *         clear_globals()
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_35__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_35__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 1304, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 1304, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) __PYX_ERR(0, 1304, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1304, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("reachability.Reach.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12reachability_5Reach_34__exit__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_34__exit__(CYTHON_UNUSED struct __pyx_obj_12reachability_Reach *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__exit__", 0);
  __Pyx_TraceCall("__exit__", __pyx_f[0], 1304, 0, __PYX_ERR(0, 1304, __pyx_L1_error));

  /* "reachability.pyx":1306
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         # sig_off()
 *         clear_globals()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1306,0,__PYX_ERR(0, 1306, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_12reachability_clear_globals(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":1304
 *         self.restore_globals()
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         # sig_off()
 *         clear_globals()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.Reach.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1309
 * 
 *     @property
 *     def res(self):             # <<<<<<<<<<<<<<
 *         return self.result
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_3res_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_3res_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_3res___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_3res___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1309, 0, __PYX_ERR(0, 1309, __pyx_L1_error));

  /* "reachability.pyx":1310
 *     @property
 *     def res(self):
 *         return self.result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1310,0,__PYX_ERR(0, 1310, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1309
 * 
 *     @property
 *     def res(self):             # <<<<<<<<<<<<<<
 *         return self.result
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.Reach.res.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1313
 * 
 *     @property
 *     def cutoff_threshold(self):             # <<<<<<<<<<<<<<
 *         i = self.c_reach.cutoff_threshold
 *         return (i.inf(), i.sup())
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_16cutoff_threshold_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_16cutoff_threshold_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_16cutoff_threshold___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_16cutoff_threshold___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  flowstar::Interval __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  flowstar::Interval __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1313, 0, __PYX_ERR(0, 1313, __pyx_L1_error));

  /* "reachability.pyx":1314
 *     @property
 *     def cutoff_threshold(self):
 *         i = self.c_reach.cutoff_threshold             # <<<<<<<<<<<<<<
 *         return (i.inf(), i.sup())
 * 
 */
  __Pyx_TraceLine(1314,0,__PYX_ERR(0, 1314, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_self->c_reach.cutoff_threshold;
  __pyx_v_i = __pyx_t_1;

  /* "reachability.pyx":1315
 *     def cutoff_threshold(self):
 *         i = self.c_reach.cutoff_threshold
 *         return (i.inf(), i.sup())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1315,0,__PYX_ERR(0, 1315, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_i.inf()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_i.sup()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1313
 * 
 *     @property
 *     def cutoff_threshold(self):             # <<<<<<<<<<<<<<
 *         i = self.c_reach.cutoff_threshold
 *         return (i.inf(), i.sup())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("reachability.Reach.cutoff_threshold.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1318
 * 
 *     @property
 *     def estimation(self):             # <<<<<<<<<<<<<<
 *         return [(i.inf(), i.sup()) for i in self.c_reach.estimation]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_10estimation_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_10estimation_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_10estimation___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_10estimation___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  flowstar::Interval __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<flowstar::Interval> ::iterator __pyx_t_2;
  std::vector<flowstar::Interval>  *__pyx_t_3;
  flowstar::Interval __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1318, 0, __PYX_ERR(0, 1318, __pyx_L1_error));

  /* "reachability.pyx":1319
 *     @property
 *     def estimation(self):
 *         return [(i.inf(), i.sup()) for i in self.c_reach.estimation]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1319,0,__PYX_ERR(0, 1319, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = &__pyx_v_self->c_reach.estimation;
  __pyx_t_2 = __pyx_t_3->begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_t_3->end())) break;
    __pyx_t_4 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_i.inf()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_i.sup()); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1318
 * 
 *     @property
 *     def estimation(self):             # <<<<<<<<<<<<<<
 *         return [(i.inf(), i.sup()) for i in self.c_reach.estimation]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("reachability.Reach.estimation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1322
 * 
 *     @property
 *     def num_flowpipes(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.numOfFlowpipes())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_13num_flowpipes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_13num_flowpipes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_13num_flowpipes___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_13num_flowpipes___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1322, 0, __PYX_ERR(0, 1322, __pyx_L1_error));

  /* "reachability.pyx":1323
 *     @property
 *     def num_flowpipes(self):
 *         return int(self.c_reach.numOfFlowpipes())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1323,0,__PYX_ERR(0, 1323, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_reach.numOfFlowpipes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1322
 * 
 *     @property
 *     def num_flowpipes(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.numOfFlowpipes())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("reachability.Reach.num_flowpipes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1326
 * 
 *     @property
 *     def num_state_vars(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.stateVarNames.size())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_14num_state_vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_14num_state_vars_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_14num_state_vars___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_14num_state_vars___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1326, 0, __PYX_ERR(0, 1326, __pyx_L1_error));

  /* "reachability.pyx":1327
 *     @property
 *     def num_state_vars(self):
 *         return int(self.c_reach.stateVarNames.size())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1327,0,__PYX_ERR(0, 1327, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_reach.stateVarNames.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1326
 * 
 *     @property
 *     def num_state_vars(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.stateVarNames.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("reachability.Reach.num_state_vars.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1330
 * 
 *     @property
 *     def state_vars(self):             # <<<<<<<<<<<<<<
 *         return [str(v) for v in self.c_reach.stateVarNames]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_10state_vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_10state_vars_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_10state_vars___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_10state_vars___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  std::string __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string> ::iterator __pyx_t_2;
  std::vector<std::string>  *__pyx_t_3;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1330, 0, __PYX_ERR(0, 1330, __pyx_L1_error));

  /* "reachability.pyx":1331
 *     @property
 *     def state_vars(self):
 *         return [str(v) for v in self.c_reach.stateVarNames]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1331,0,__PYX_ERR(0, 1331, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = &__pyx_v_self->c_reach.stateVarNames;
  __pyx_t_2 = __pyx_t_3->begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_t_3->end())) break;
    __pyx_t_4 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_v = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1330
 * 
 *     @property
 *     def state_vars(self):             # <<<<<<<<<<<<<<
 *         return [str(v) for v in self.c_reach.stateVarNames]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("reachability.Reach.state_vars.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1334
 * 
 *     @property
 *     def num_initials(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.system.initialSets.size())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_12num_initials_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_12num_initials_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_12num_initials___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_12num_initials___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1334, 0, __PYX_ERR(0, 1334, __pyx_L1_error));

  /* "reachability.pyx":1335
 *     @property
 *     def num_initials(self):
 *         return int(self.c_reach.system.initialSets.size())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1335,0,__PYX_ERR(0, 1335, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_reach.system.initialSets.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1334
 * 
 *     @property
 *     def num_initials(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.system.initialSets.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("reachability.Reach.num_initials.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1338
 * 
 *     @property
 *     def step(self):             # <<<<<<<<<<<<<<
 *         return float(self.c_reach.step)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_4step_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_4step_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_4step___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_4step___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1338, 0, __PYX_ERR(0, 1338, __pyx_L1_error));

  /* "reachability.pyx":1339
 *     @property
 *     def step(self):
 *         return float(self.c_reach.step)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1339,0,__PYX_ERR(0, 1339, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_reach.step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1338
 * 
 *     @property
 *     def step(self):             # <<<<<<<<<<<<<<
 *         return float(self.c_reach.step)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.Reach.step.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1342
 * 
 *     @property
 *     def time(self):             # <<<<<<<<<<<<<<
 *         return float(self.c_reach.time)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_4time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_4time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_4time___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_4time___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1342, 0, __PYX_ERR(0, 1342, __pyx_L1_error));

  /* "reachability.pyx":1343
 *     @property
 *     def time(self):
 *         return float(self.c_reach.time)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1343,0,__PYX_ERR(0, 1343, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_reach.time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1342
 * 
 *     @property
 *     def time(self):             # <<<<<<<<<<<<<<
 *         return float(self.c_reach.time)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.Reach.time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1346
 * 
 *     @property
 *     def ode_strs(self):             # <<<<<<<<<<<<<<
 *         res = []
 *         cdef string ode_str
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_8ode_strs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_8ode_strs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_8ode_strs___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_8ode_strs___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_v_res = NULL;
  std::string __pyx_v_ode_str;
  std::string __pyx_v_interval_str;
  std::vector<std::string>  __pyx_v_names;
  flowstar::TaylorModel __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string>  __pyx_t_2;
  std::vector<flowstar::TaylorModel> ::iterator __pyx_t_3;
  std::vector<flowstar::TaylorModel>  *__pyx_t_4;
  flowstar::TaylorModel __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1346, 0, __PYX_ERR(0, 1346, __pyx_L1_error));

  /* "reachability.pyx":1347
 *     @property
 *     def ode_strs(self):
 *         res = []             # <<<<<<<<<<<<<<
 *         cdef string ode_str
 *         cdef string interval_str
 */
  __Pyx_TraceLine(1347,0,__PYX_ERR(0, 1347, __pyx_L1_error))
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "reachability.pyx":1350
 *         cdef string ode_str
 *         cdef string interval_str
 *         cdef vector[string] names = self.c_reach.stateVarNames             # <<<<<<<<<<<<<<
 *         names.insert(names.begin(), "local_t")
 *         for v in self.c_reach.system.tmvOde.tms:
 */
  __Pyx_TraceLine(1350,0,__PYX_ERR(0, 1350, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_self->c_reach.stateVarNames;
  __pyx_v_names = __pyx_t_2;

  /* "reachability.pyx":1351
 *         cdef string interval_str
 *         cdef vector[string] names = self.c_reach.stateVarNames
 *         names.insert(names.begin(), "local_t")             # <<<<<<<<<<<<<<
 *         for v in self.c_reach.system.tmvOde.tms:
 *             v.expansion.toString(ode_str, names)
 */
  __Pyx_TraceLine(1351,0,__PYX_ERR(0, 1351, __pyx_L1_error))
  try {
    __pyx_v_names.insert(__pyx_v_names.begin(), __pyx_k_local_t);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1351, __pyx_L1_error)
  }

  /* "reachability.pyx":1352
 *         cdef vector[string] names = self.c_reach.stateVarNames
 *         names.insert(names.begin(), "local_t")
 *         for v in self.c_reach.system.tmvOde.tms:             # <<<<<<<<<<<<<<
 *             v.expansion.toString(ode_str, names)
 *             v.remainder.toString(interval_str)
 */
  __Pyx_TraceLine(1352,0,__PYX_ERR(0, 1352, __pyx_L1_error))
  __pyx_t_4 = &__pyx_v_self->c_reach.system.tmvOde.tms;
  __pyx_t_3 = __pyx_t_4->begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_t_4->end())) break;
    __pyx_t_5 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_v = __pyx_t_5;

    /* "reachability.pyx":1353
 *         names.insert(names.begin(), "local_t")
 *         for v in self.c_reach.system.tmvOde.tms:
 *             v.expansion.toString(ode_str, names)             # <<<<<<<<<<<<<<
 *             v.remainder.toString(interval_str)
 *             res.append("({}, {})".format(ode_str, interval_str))
 */
    __Pyx_TraceLine(1353,0,__PYX_ERR(0, 1353, __pyx_L1_error))
    __pyx_v_v.expansion.toString(__pyx_v_ode_str, __pyx_v_names);

    /* "reachability.pyx":1354
 *         for v in self.c_reach.system.tmvOde.tms:
 *             v.expansion.toString(ode_str, names)
 *             v.remainder.toString(interval_str)             # <<<<<<<<<<<<<<
 *             res.append("({}, {})".format(ode_str, interval_str))
 *         return res
 */
    __Pyx_TraceLine(1354,0,__PYX_ERR(0, 1354, __pyx_L1_error))
    __pyx_v_v.remainder.toString(__pyx_v_interval_str);

    /* "reachability.pyx":1355
 *             v.expansion.toString(ode_str, names)
 *             v.remainder.toString(interval_str)
 *             res.append("({}, {})".format(ode_str, interval_str))             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
    __Pyx_TraceLine(1355,0,__PYX_ERR(0, 1355, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__34, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_ode_str); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_interval_str); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1355, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1355, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_8);
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "reachability.pyx":1352
 *         cdef vector[string] names = self.c_reach.stateVarNames
 *         names.insert(names.begin(), "local_t")
 *         for v in self.c_reach.system.tmvOde.tms:             # <<<<<<<<<<<<<<
 *             v.expansion.toString(ode_str, names)
 *             v.remainder.toString(interval_str)
 */
    __Pyx_TraceLine(1352,0,__PYX_ERR(0, 1352, __pyx_L1_error))
  }

  /* "reachability.pyx":1356
 *             v.remainder.toString(interval_str)
 *             res.append("({}, {})".format(ode_str, interval_str))
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(1356,0,__PYX_ERR(0, 1356, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "reachability.pyx":1346
 * 
 *     @property
 *     def ode_strs(self):             # <<<<<<<<<<<<<<
 *         res = []
 *         cdef string ode_str
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("reachability.Reach.ode_strs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "reachability.pyx":1359
 * 
 *     @property
 *     def num_odes(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.system.tmvOde.tms.size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_8num_odes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_8num_odes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_8num_odes___get__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_8num_odes___get__(struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[0], 1359, 0, __PYX_ERR(0, 1359, __pyx_L1_error));

  /* "reachability.pyx":1360
 *     @property
 *     def num_odes(self):
 *         return int(self.c_reach.system.tmvOde.tms.size())             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(1360,0,__PYX_ERR(0, 1360, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_reach.system.tmvOde.tms.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "reachability.pyx":1359
 * 
 *     @property
 *     def num_odes(self):             # <<<<<<<<<<<<<<
 *         return int(self.c_reach.system.tmvOde.tms.size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("reachability.Reach.num_odes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_36__reduce_cython__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_12reachability_Reach *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.Reach.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_12reachability_5Reach_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_12reachability_5Reach_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_12reachability_5Reach_38__setstate_cython__(((struct __pyx_obj_12reachability_Reach *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12reachability_5Reach_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_12reachability_Reach *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("reachability.Reach.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cysignals/signals.pxd":49
 * # (PyErr_Occurred() is non-NULL). To Cython, it will look like
 * # cython_check_exception() actually raised the exception.
 * cdef inline void cython_check_exception() nogil except *:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

static CYTHON_INLINE void __pyx_f_9cysignals_7signals_cython_check_exception(void) {
  __Pyx_TraceDeclarations
  __Pyx_TraceCall("cython_check_exception", __pyx_f[2], 49, 1, __PYX_ERR(2, 49, __pyx_L1_error));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("cysignals.signals.cython_check_exception", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
}

/* "cysignals/signals.pxd":64
 * 
 * 
 * cdef inline void __generate_declarations():             # <<<<<<<<<<<<<<
 *     cysigs
 *     _sig_on_interrupt_received
 */

static CYTHON_INLINE void __pyx_f_9cysignals_7signals___generate_declarations(void) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__generate_declarations", 0);
  __Pyx_TraceCall("__generate_declarations", __pyx_f[2], 64, 0, __PYX_ERR(2, 64, __pyx_L1_error));

  /* "cysignals/signals.pxd":65
 * 
 * cdef inline void __generate_declarations():
 *     cysigs             # <<<<<<<<<<<<<<
 *     _sig_on_interrupt_received
 *     _sig_on_recover
 */
  __Pyx_TraceLine(65,0,__PYX_ERR(2, 65, __pyx_L1_error))
  (void)(cysigs);

  /* "cysignals/signals.pxd":66
 * cdef inline void __generate_declarations():
 *     cysigs
 *     _sig_on_interrupt_received             # <<<<<<<<<<<<<<
 *     _sig_on_recover
 *     _sig_off_warning
 */
  __Pyx_TraceLine(66,0,__PYX_ERR(2, 66, __pyx_L1_error))
  (void)(_sig_on_interrupt_received);

  /* "cysignals/signals.pxd":67
 *     cysigs
 *     _sig_on_interrupt_received
 *     _sig_on_recover             # <<<<<<<<<<<<<<
 *     _sig_off_warning
 *     print_backtrace
 */
  __Pyx_TraceLine(67,0,__PYX_ERR(2, 67, __pyx_L1_error))
  (void)(_sig_on_recover);

  /* "cysignals/signals.pxd":68
 *     _sig_on_interrupt_received
 *     _sig_on_recover
 *     _sig_off_warning             # <<<<<<<<<<<<<<
 *     print_backtrace
 */
  __Pyx_TraceLine(68,0,__PYX_ERR(2, 68, __pyx_L1_error))
  (void)(_sig_off_warning);

  /* "cysignals/signals.pxd":69
 *     _sig_on_recover
 *     _sig_off_warning
 *     print_backtrace             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(69,0,__PYX_ERR(2, 69, __pyx_L1_error))
  (void)(print_backtrace);

  /* "cysignals/signals.pxd":64
 * 
 * 
 * cdef inline void __generate_declarations():             # <<<<<<<<<<<<<<
 *     cysigs
 *     _sig_on_interrupt_received
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cysignals.signals.__generate_declarations", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_f[1], 31, 0, __PYX_ERR(1, 31, __pyx_L1_error));

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(1, 32, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_f[1], 37, 0, __PYX_ERR(1, 37, __pyx_L1_error));

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(38,0,__PYX_ERR(1, 38, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_f[1], 43, 0, __PYX_ERR(1, 43, __pyx_L1_error));

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(44,0,__PYX_ERR(1, 44, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_f[1], 49, 0, __PYX_ERR(1, 49, __pyx_L1_error));

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(1, 50, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_f[1], 55, 0, __PYX_ERR(1, 55, __pyx_L1_error));

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_TraceLine(56,0,__PYX_ERR(1, 56, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_string_from_py_std__in_string", __pyx_f[1], 13, 0, __PYX_ERR(1, 13, __pyx_L1_error));

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(1, 15, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(1, 16, __pyx_L1_error))
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_12reachability_Poly(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_12reachability_Poly *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_12reachability_Poly *)o);
  new((void*)&(p->c_poly)) flowstar::Polynomial();
  p->vars = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_12reachability_4Poly_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_12reachability_Poly(PyObject *o) {
  struct __pyx_obj_12reachability_Poly *p = (struct __pyx_obj_12reachability_Poly *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->c_poly);
  Py_CLEAR(p->vars);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_12reachability_Poly(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability_Poly *p = (struct __pyx_obj_12reachability_Poly *)o;
  if (p->vars) {
    e = (*v)(p->vars, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_12reachability_Poly(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_12reachability_Poly *p = (struct __pyx_obj_12reachability_Poly *)o;
  tmp = ((PyObject*)p->vars);
  p->vars = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_12reachability_4Poly_var_names(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_4Poly_9var_names_1__get__(o);
}

static PyMethodDef __pyx_methods_12reachability_Poly[] = {
  {"from_monomial", (PyCFunction)__pyx_pw_12reachability_4Poly_3from_monomial, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_sage", (PyCFunction)__pyx_pw_12reachability_4Poly_5from_sage, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12reachability_4Poly_4from_sage},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_12reachability_4Poly_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_12reachability_4Poly_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_12reachability_Poly[] = {
  {(char *)"var_names", __pyx_getprop_12reachability_4Poly_var_names, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Poly = {
  __pyx_pw_12reachability_4Poly_7__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_12reachability_4Poly_9__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_12reachability_Poly = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.Poly", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability_Poly), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability_Poly, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_12reachability_4Poly_11__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Poly, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability_Poly, /*tp_traverse*/
  __pyx_tp_clear_12reachability_Poly, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12reachability_Poly, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_12reachability_Poly, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability_Poly, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_12reachability_Reach __pyx_vtable_12reachability_Reach;

static PyObject *__pyx_tp_new_12reachability_Reach(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_12reachability_Reach *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_12reachability_Reach *)o);
  p->__pyx_vtab = __pyx_vtabptr_12reachability_Reach;
  new((void*)&(p->factorial_rec)) std::vector<flowstar::Interval> ();
  new((void*)&(p->power_4)) std::vector<flowstar::Interval> ();
  new((void*)&(p->double_factorial)) std::vector<flowstar::Interval> ();
  new((void*)&(p->domainVarNames)) std::vector<std::string> ();
  new((void*)&(p->c_reach)) flowstar::ContinuousReachability();
  if (unlikely(__pyx_pw_12reachability_5Reach_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_12reachability_Reach(PyObject *o) {
  struct __pyx_obj_12reachability_Reach *p = (struct __pyx_obj_12reachability_Reach *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->factorial_rec);
  __Pyx_call_destructor(p->power_4);
  __Pyx_call_destructor(p->double_factorial);
  __Pyx_call_destructor(p->domainVarNames);
  __Pyx_call_destructor(p->c_reach);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_res(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_3res_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_cutoff_threshold(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_16cutoff_threshold_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_estimation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_10estimation_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_num_flowpipes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_13num_flowpipes_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_num_state_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_14num_state_vars_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_state_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_10state_vars_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_num_initials(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_12num_initials_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_step(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_4step_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_4time_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_ode_strs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_8ode_strs_1__get__(o);
}

static PyObject *__pyx_getprop_12reachability_5Reach_num_odes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_12reachability_5Reach_8num_odes_1__get__(o);
}

static PyMethodDef __pyx_methods_12reachability_Reach[] = {
  {"plot", (PyCFunction)__pyx_pw_12reachability_5Reach_3plot, METH_VARARGS|METH_KEYWORDS, 0},
  {"wplot", (PyCFunction)__pyx_pw_12reachability_5Reach_5wplot, METH_VARARGS|METH_KEYWORDS, 0},
  {"roots", (PyCFunction)__pyx_pw_12reachability_5Reach_7roots, METH_VARARGS|METH_KEYWORDS, 0},
  {"prepare", (PyCFunction)__pyx_pw_12reachability_5Reach_11prepare, METH_NOARGS, __pyx_doc_12reachability_5Reach_10prepare},
  {"sage_plot_manual", (PyCFunction)__pyx_pw_12reachability_5Reach_13sage_plot_manual, METH_VARARGS|METH_KEYWORDS, 0},
  {"sage_interval_plot", (PyCFunction)__pyx_pw_12reachability_5Reach_15sage_interval_plot, METH_VARARGS|METH_KEYWORDS, 0},
  {"sage_time_tube_plot", (PyCFunction)__pyx_pw_12reachability_5Reach_17sage_time_tube_plot, METH_VARARGS|METH_KEYWORDS, 0},
  {"sage_tube_plot", (PyCFunction)__pyx_pw_12reachability_5Reach_19sage_tube_plot, METH_VARARGS|METH_KEYWORDS, 0},
  {"sage_plot", (PyCFunction)__pyx_pw_12reachability_5Reach_21sage_plot, METH_VARARGS|METH_KEYWORDS, 0},
  {"sage_parametric_plot", (PyCFunction)__pyx_pw_12reachability_5Reach_23sage_parametric_plot, METH_VARARGS|METH_KEYWORDS, 0},
  {"run", (PyCFunction)__pyx_pw_12reachability_5Reach_25run, METH_NOARGS, 0},
  {"capture_globals", (PyCFunction)__pyx_pw_12reachability_5Reach_27capture_globals, METH_NOARGS, 0},
  {"clear_captured_globals", (PyCFunction)__pyx_pw_12reachability_5Reach_29clear_captured_globals, METH_NOARGS, 0},
  {"restore_globals", (PyCFunction)__pyx_pw_12reachability_5Reach_31restore_globals, METH_NOARGS, 0},
  {"__enter__", (PyCFunction)__pyx_pw_12reachability_5Reach_33__enter__, METH_NOARGS, 0},
  {"__exit__", (PyCFunction)__pyx_pw_12reachability_5Reach_35__exit__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_12reachability_5Reach_37__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_12reachability_5Reach_39__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_12reachability_Reach[] = {
  {(char *)"res", __pyx_getprop_12reachability_5Reach_res, 0, (char *)0, 0},
  {(char *)"cutoff_threshold", __pyx_getprop_12reachability_5Reach_cutoff_threshold, 0, (char *)0, 0},
  {(char *)"estimation", __pyx_getprop_12reachability_5Reach_estimation, 0, (char *)0, 0},
  {(char *)"num_flowpipes", __pyx_getprop_12reachability_5Reach_num_flowpipes, 0, (char *)0, 0},
  {(char *)"num_state_vars", __pyx_getprop_12reachability_5Reach_num_state_vars, 0, (char *)0, 0},
  {(char *)"state_vars", __pyx_getprop_12reachability_5Reach_state_vars, 0, (char *)0, 0},
  {(char *)"num_initials", __pyx_getprop_12reachability_5Reach_num_initials, 0, (char *)0, 0},
  {(char *)"step", __pyx_getprop_12reachability_5Reach_step, 0, (char *)0, 0},
  {(char *)"time", __pyx_getprop_12reachability_5Reach_time, 0, (char *)0, 0},
  {(char *)"ode_strs", __pyx_getprop_12reachability_5Reach_ode_strs, 0, (char *)0, 0},
  {(char *)"num_odes", __pyx_getprop_12reachability_5Reach_num_odes, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12reachability_Reach = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.Reach", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability_Reach), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability_Reach, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_12reachability_5Reach_9__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12reachability_Reach, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_12reachability_Reach, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability_Reach, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *__pyx_freelist_12reachability___pyx_scope_struct__from_monomial[8];
static int __pyx_freecount_12reachability___pyx_scope_struct__from_monomial = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct__from_monomial(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct__from_monomial > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct__from_monomial[--__pyx_freecount_12reachability___pyx_scope_struct__from_monomial];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct__from_monomial(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *p = (struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_mono);
  Py_CLEAR(p->__pyx_v_vars);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct__from_monomial < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial)))) {
    __pyx_freelist_12reachability___pyx_scope_struct__from_monomial[__pyx_freecount_12reachability___pyx_scope_struct__from_monomial++] = ((struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct__from_monomial(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *p = (struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *)o;
  if (p->__pyx_v_mono) {
    e = (*v)(p->__pyx_v_mono, a); if (e) return e;
  }
  if (p->__pyx_v_vars) {
    e = (*v)(p->__pyx_v_vars, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_12reachability___pyx_scope_struct__from_monomial(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *p = (struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial *)o;
  tmp = ((PyObject*)p->__pyx_v_mono);
  p->__pyx_v_mono = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vars);
  p->__pyx_v_vars = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct__from_monomial = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct__from_monomial", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct__from_monomial), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct__from_monomial, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct__from_monomial, /*tp_traverse*/
  __pyx_tp_clear_12reachability___pyx_scope_struct__from_monomial, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct__from_monomial, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *__pyx_freelist_12reachability___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_12reachability___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct_1_genexpr[--__pyx_freecount_12reachability___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_k);
  Py_CLEAR(p->__pyx_v_n);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_12reachability___pyx_scope_struct_1_genexpr[__pyx_freecount_12reachability___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_k) {
    e = (*v)(p->__pyx_v_k, a); if (e) return e;
  }
  if (p->__pyx_v_n) {
    e = (*v)(p->__pyx_v_n, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *__pyx_freelist_12reachability___pyx_scope_struct_2_from_sage[8];
static int __pyx_freecount_12reachability___pyx_scope_struct_2_from_sage = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_2_from_sage(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct_2_from_sage > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct_2_from_sage[--__pyx_freecount_12reachability___pyx_scope_struct_2_from_sage];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct_2_from_sage(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *p = (struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_cs);
  Py_CLEAR(p->__pyx_v_p);
  Py_CLEAR(p->__pyx_v_vars);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct_2_from_sage < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage)))) {
    __pyx_freelist_12reachability___pyx_scope_struct_2_from_sage[__pyx_freecount_12reachability___pyx_scope_struct_2_from_sage++] = ((struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct_2_from_sage(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *p = (struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *)o;
  if (p->__pyx_v_cs) {
    e = (*v)(p->__pyx_v_cs, a); if (e) return e;
  }
  if (p->__pyx_v_p) {
    e = (*v)(p->__pyx_v_p, a); if (e) return e;
  }
  if (p->__pyx_v_vars) {
    e = (*v)(p->__pyx_v_vars, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_12reachability___pyx_scope_struct_2_from_sage(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *p = (struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage *)o;
  tmp = ((PyObject*)p->__pyx_v_cs);
  p->__pyx_v_cs = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_p);
  p->__pyx_v_p = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_vars);
  p->__pyx_v_vars = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct_2_from_sage = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct_2_from_sage", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_2_from_sage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct_2_from_sage, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct_2_from_sage, /*tp_traverse*/
  __pyx_tp_clear_12reachability___pyx_scope_struct_2_from_sage, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct_2_from_sage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *__pyx_freelist_12reachability___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_12reachability___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct_3_genexpr[--__pyx_freecount_12reachability___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_c);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_12reachability___pyx_scope_struct_3_genexpr[__pyx_freecount_12reachability___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_c) {
    e = (*v)(p->__pyx_v_c, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *__pyx_freelist_12reachability___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_12reachability___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct_4_genexpr[--__pyx_freecount_12reachability___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_c);
  Py_CLEAR(p->__pyx_v_ex);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_12reachability___pyx_scope_struct_4_genexpr[__pyx_freecount_12reachability___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_c) {
    e = (*v)(p->__pyx_v_c, a); if (e) return e;
  }
  if (p->__pyx_v_ex) {
    e = (*v)(p->__pyx_v_ex, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *__pyx_freelist_12reachability___pyx_scope_struct_5___cinit__[8];
static int __pyx_freecount_12reachability___pyx_scope_struct_5___cinit__ = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_5___cinit__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct_5___cinit__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct_5___cinit__[--__pyx_freecount_12reachability___pyx_scope_struct_5___cinit__];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct_5___cinit__(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *p = (struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_orders);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct_5___cinit__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__)))) {
    __pyx_freelist_12reachability___pyx_scope_struct_5___cinit__[__pyx_freecount_12reachability___pyx_scope_struct_5___cinit__++] = ((struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct_5___cinit__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *p = (struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *)o;
  if (p->__pyx_v_orders) {
    e = (*v)(p->__pyx_v_orders, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_12reachability___pyx_scope_struct_5___cinit__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *p = (struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__ *)o;
  tmp = ((PyObject*)p->__pyx_v_orders);
  p->__pyx_v_orders = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct_5___cinit__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct_5___cinit__", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_5___cinit__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct_5___cinit__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct_5___cinit__, /*tp_traverse*/
  __pyx_tp_clear_12reachability___pyx_scope_struct_5___cinit__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct_5___cinit__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *__pyx_freelist_12reachability___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_12reachability___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct_6_genexpr[--__pyx_freecount_12reachability___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_12reachability___pyx_scope_struct_6_genexpr[__pyx_freecount_12reachability___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *__pyx_freelist_12reachability___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_12reachability___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct_7_genexpr[--__pyx_freecount_12reachability___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_12reachability___pyx_scope_struct_7_genexpr[__pyx_freecount_12reachability___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *__pyx_freelist_12reachability___pyx_scope_struct_8_sage_plot[8];
static int __pyx_freecount_12reachability___pyx_scope_struct_8_sage_plot = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_8_sage_plot(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct_8_sage_plot > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct_8_sage_plot[--__pyx_freecount_12reachability___pyx_scope_struct_8_sage_plot];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct_8_sage_plot(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *p = (struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_ress);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct_8_sage_plot < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot)))) {
    __pyx_freelist_12reachability___pyx_scope_struct_8_sage_plot[__pyx_freecount_12reachability___pyx_scope_struct_8_sage_plot++] = ((struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct_8_sage_plot(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *p = (struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *)o;
  if (p->__pyx_v_ress) {
    e = (*v)(p->__pyx_v_ress, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_12reachability___pyx_scope_struct_8_sage_plot(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *p = (struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot *)o;
  tmp = ((PyObject*)p->__pyx_v_ress);
  p->__pyx_v_ress = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_12reachability_Reach *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct_8_sage_plot = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct_8_sage_plot", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_8_sage_plot), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct_8_sage_plot, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct_8_sage_plot, /*tp_traverse*/
  __pyx_tp_clear_12reachability___pyx_scope_struct_8_sage_plot, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct_8_sage_plot, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *__pyx_freelist_12reachability___pyx_scope_struct_9_sage_parametric_plot[8];
static int __pyx_freecount_12reachability___pyx_scope_struct_9_sage_parametric_plot = 0;

static PyObject *__pyx_tp_new_12reachability___pyx_scope_struct_9_sage_parametric_plot(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_12reachability___pyx_scope_struct_9_sage_parametric_plot > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot)))) {
    o = (PyObject*)__pyx_freelist_12reachability___pyx_scope_struct_9_sage_parametric_plot[--__pyx_freecount_12reachability___pyx_scope_struct_9_sage_parametric_plot];
    memset(o, 0, sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12reachability___pyx_scope_struct_9_sage_parametric_plot(PyObject *o) {
  struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *p = (struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_12reachability___pyx_scope_struct_9_sage_parametric_plot < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot)))) {
    __pyx_freelist_12reachability___pyx_scope_struct_9_sage_parametric_plot[__pyx_freecount_12reachability___pyx_scope_struct_9_sage_parametric_plot++] = ((struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_12reachability___pyx_scope_struct_9_sage_parametric_plot(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *p = (struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_12reachability___pyx_scope_struct_9_sage_parametric_plot(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *p = (struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_12reachability_Reach *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_12reachability___pyx_scope_struct_9_sage_parametric_plot = {
  PyVarObject_HEAD_INIT(0, 0)
  "reachability.__pyx_scope_struct_9_sage_parametric_plot", /*tp_name*/
  sizeof(struct __pyx_obj_12reachability___pyx_scope_struct_9_sage_parametric_plot), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12reachability___pyx_scope_struct_9_sage_parametric_plot, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_12reachability___pyx_scope_struct_9_sage_parametric_plot, /*tp_traverse*/
  __pyx_tp_clear_12reachability___pyx_scope_struct_9_sage_parametric_plot, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12reachability___pyx_scope_struct_9_sage_parametric_plot, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"get_domain_var_names", (PyCFunction)__pyx_pw_12reachability_1get_domain_var_names, METH_NOARGS, 0},
  {"set_precision", (PyCFunction)__pyx_pw_12reachability_3set_precision, METH_O, 0},
  {"get_precision", (PyCFunction)__pyx_pw_12reachability_5get_precision, METH_NOARGS, 0},
  {"get_factorial_rec", (PyCFunction)__pyx_pw_12reachability_7get_factorial_rec, METH_NOARGS, 0},
  {"get_power_4", (PyCFunction)__pyx_pw_12reachability_9get_power_4, METH_NOARGS, 0},
  {"get_double_factorial", (PyCFunction)__pyx_pw_12reachability_11get_double_factorial, METH_NOARGS, 0},
  {"clear_globals", (PyCFunction)__pyx_pw_12reachability_13clear_globals, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_reachability(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_reachability},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "reachability",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_3bcc00, __pyx_k_3bcc00, sizeof(__pyx_k_3bcc00), 0, 0, 1, 0},
  {&__pyx_kp_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 0},
  {&__pyx_n_s_A_2, __pyx_k_A_2, sizeof(__pyx_k_A_2), 0, 0, 1, 1},
  {&__pyx_kp_s_Already_ran, __pyx_k_Already_ran, sizeof(__pyx_k_Already_ran), 0, 0, 1, 0},
  {&__pyx_kp_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 0},
  {&__pyx_n_s_B_2, __pyx_k_B_2, sizeof(__pyx_k_B_2), 0, 0, 1, 1},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_kp_s_Filename_too_long, __pyx_k_Filename_too_long, sizeof(__pyx_k_Filename_too_long), 0, 0, 1, 0},
  {&__pyx_n_s_Fprime, __pyx_k_Fprime, sizeof(__pyx_k_Fprime), 0, 0, 1, 1},
  {&__pyx_n_s_Graphics, __pyx_k_Graphics, sizeof(__pyx_k_Graphics), 0, 0, 1, 1},
  {&__pyx_n_s_Image, __pyx_k_Image, sizeof(__pyx_k_Image), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_args_for_Poly, __pyx_k_Invalid_args_for_Poly, sizeof(__pyx_k_Invalid_args_for_Poly), 0, 0, 1, 0},
  {&__pyx_n_s_Iterable, __pyx_k_Iterable, sizeof(__pyx_k_Iterable), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_kp_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_kp_s_Not_ran, __pyx_k_Not_ran, sizeof(__pyx_k_Not_ran), 0, 0, 1, 0},
  {&__pyx_kp_u_Poly_from_sage_line_180, __pyx_k_Poly_from_sage_line_180, sizeof(__pyx_k_Poly_from_sage_line_180), 0, 1, 0, 0},
  {&__pyx_n_s_RIF, __pyx_k_RIF, sizeof(__pyx_k_RIF), 0, 0, 1, 1},
  {&__pyx_kp_u_R_t_sage_PolynomialRing_sage_RI, __pyx_k_R_t_sage_PolynomialRing_sage_RI, sizeof(__pyx_k_R_t_sage_PolynomialRing_sage_RI), 0, 1, 0, 0},
  {&__pyx_kp_u_R_x_y_sage_PolynomialRing_sage, __pyx_k_R_x_y_sage_PolynomialRing_sage, sizeof(__pyx_k_R_x_y_sage_PolynomialRing_sage), 0, 1, 0, 0},
  {&__pyx_kp_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 0},
  {&__pyx_n_s_T_2, __pyx_k_T_2, sizeof(__pyx_k_T_2), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 0, 1, 1},
  {&__pyx_kp_s__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 0, 1, 0},
  {&__pyx_kp_s__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 0, 1, 0},
  {&__pyx_n_s__37, __pyx_k__37, sizeof(__pyx_k__37), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_absolute_diameter, __pyx_k_absolute_diameter, sizeof(__pyx_k_absolute_diameter), 0, 0, 1, 1},
  {&__pyx_n_s_arctan, __pyx_k_arctan, sizeof(__pyx_k_arctan), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_arrow, __pyx_k_arrow, sizeof(__pyx_k_arrow), 0, 0, 1, 1},
  {&__pyx_n_s_arrows, __pyx_k_arrows, sizeof(__pyx_k_arrows), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_boundaries, __pyx_k_boundaries, sizeof(__pyx_k_boundaries), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_call, __pyx_k_call, sizeof(__pyx_k_call), 0, 0, 1, 1},
  {&__pyx_n_s_capture_globals, __pyx_k_capture_globals, sizeof(__pyx_k_capture_globals), 0, 0, 1, 1},
  {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
  {&__pyx_n_s_cinit___locals_genexpr, __pyx_k_cinit___locals_genexpr, sizeof(__pyx_k_cinit___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_coeff, __pyx_k_coeff, sizeof(__pyx_k_coeff), 0, 0, 1, 1},
  {&__pyx_n_s_coefficients, __pyx_k_coefficients, sizeof(__pyx_k_coefficients), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_color, __pyx_k_color, sizeof(__pyx_k_color), 0, 0, 1, 1},
  {&__pyx_n_s_cos, __pyx_k_cos, sizeof(__pyx_k_cos), 0, 0, 1, 1},
  {&__pyx_n_s_cs, __pyx_k_cs, sizeof(__pyx_k_cs), 0, 0, 1, 1},
  {&__pyx_n_s_cutoff_threshold, __pyx_k_cutoff_threshold, sizeof(__pyx_k_cutoff_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_diameter, __pyx_k_diameter, sizeof(__pyx_k_diameter), 0, 0, 1, 1},
  {&__pyx_n_s_duration, __pyx_k_duration, sizeof(__pyx_k_duration), 0, 0, 1, 1},
  {&__pyx_n_s_endpoints, __pyx_k_endpoints, sizeof(__pyx_k_endpoints), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eps, __pyx_k_eps, sizeof(__pyx_k_eps), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_estimation, __pyx_k_estimation, sizeof(__pyx_k_estimation), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tb, __pyx_k_exc_tb, sizeof(__pyx_k_exc_tb), 0, 0, 1, 1},
  {&__pyx_n_s_exc_type, __pyx_k_exc_type, sizeof(__pyx_k_exc_type), 0, 0, 1, 1},
  {&__pyx_n_s_exc_val, __pyx_k_exc_val, sizeof(__pyx_k_exc_val), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_exponents, __pyx_k_exponents, sizeof(__pyx_k_exponents), 0, 0, 1, 1},
  {&__pyx_kp_s_extdiv2_T_Tu_split_T_fI_fP, __pyx_k_extdiv2_T_Tu_split_T_fI_fP, sizeof(__pyx_k_extdiv2_T_Tu_split_T_fI_fP), 0, 0, 1, 0},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_kp_s_failed_on, __pyx_k_failed_on, sizeof(__pyx_k_failed_on), 0, 0, 1, 0},
  {&__pyx_kp_s_failed_to_verify_contractive, __pyx_k_failed_to_verify_contractive, sizeof(__pyx_k_failed_to_verify_contractive), 0, 0, 1, 0},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_fill, __pyx_k_fill, sizeof(__pyx_k_fill), 0, 0, 1, 1},
  {&__pyx_n_s_fl, __pyx_k_fl, sizeof(__pyx_k_fl), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fprime, __pyx_k_fprime, sizeof(__pyx_k_fprime), 0, 0, 1, 1},
  {&__pyx_n_s_from_monomial, __pyx_k_from_monomial, sizeof(__pyx_k_from_monomial), 0, 0, 1, 1},
  {&__pyx_n_s_from_monomial_locals_genexpr, __pyx_k_from_monomial_locals_genexpr, sizeof(__pyx_k_from_monomial_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_from_sage, __pyx_k_from_sage, sizeof(__pyx_k_from_sage), 0, 0, 1, 1},
  {&__pyx_n_s_from_sage_locals_genexpr, __pyx_k_from_sage_locals_genexpr, sizeof(__pyx_k_from_sage_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_fu, __pyx_k_fu, sizeof(__pyx_k_fu), 0, 0, 1, 1},
  {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_gens, __pyx_k_gens, sizeof(__pyx_k_gens), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gnuplot, __pyx_k_gnuplot, sizeof(__pyx_k_gnuplot), 0, 0, 1, 1},
  {&__pyx_kp_s_images_eps, __pyx_k_images_eps, sizeof(__pyx_k_images_eps), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_initials, __pyx_k_initials, sizeof(__pyx_k_initials), 0, 0, 1, 1},
  {&__pyx_n_s_integrationScheme, __pyx_k_integrationScheme, sizeof(__pyx_k_integrationScheme), 0, 0, 1, 1},
  {&__pyx_n_s_itemgetter, __pyx_k_itemgetter, sizeof(__pyx_k_itemgetter), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_joins, __pyx_k_joins, sizeof(__pyx_k_joins), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_linestyle, __pyx_k_linestyle, sizeof(__pyx_k_linestyle), 0, 0, 1, 1},
  {&__pyx_n_s_list, __pyx_k_list, sizeof(__pyx_k_list), 0, 0, 1, 1},
  {&__pyx_n_b_local_t, __pyx_k_local_t, sizeof(__pyx_k_local_t), 0, 0, 0, 1},
  {&__pyx_n_s_local_t, __pyx_k_local_t, sizeof(__pyx_k_local_t), 0, 0, 1, 1},
  {&__pyx_kp_s_local_var, __pyx_k_local_var, sizeof(__pyx_k_local_var), 0, 0, 1, 0},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_maxNumSteps, __pyx_k_maxNumSteps, sizeof(__pyx_k_maxNumSteps), 0, 0, 1, 1},
  {&__pyx_n_s_max_remainder_queue, __pyx_k_max_remainder_queue, sizeof(__pyx_k_max_remainder_queue), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_mono, __pyx_k_mono, sizeof(__pyx_k_mono), 0, 0, 1, 1},
  {&__pyx_n_s_mul, __pyx_k_mul, sizeof(__pyx_k_mul), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_num_flowpipes, __pyx_k_num_flowpipes, sizeof(__pyx_k_num_flowpipes), 0, 0, 1, 1},
  {&__pyx_n_s_odes, __pyx_k_odes, sizeof(__pyx_k_odes), 0, 0, 1, 1},
  {&__pyx_n_s_operator, __pyx_k_operator, sizeof(__pyx_k_operator), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_orders, __pyx_k_orders, sizeof(__pyx_k_orders), 0, 0, 1, 1},
  {&__pyx_kp_s_outputs_plt, __pyx_k_outputs_plt, sizeof(__pyx_k_outputs_plt), 0, 0, 1, 0},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_parametric_plot, __pyx_k_parametric_plot, sizeof(__pyx_k_parametric_plot), 0, 0, 1, 1},
  {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {&__pyx_n_s_partial, __pyx_k_partial, sizeof(__pyx_k_partial), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_plot, __pyx_k_plot, sizeof(__pyx_k_plot), 0, 0, 1, 1},
  {&__pyx_n_s_plot_points, __pyx_k_plot_points, sizeof(__pyx_k_plot_points), 0, 0, 1, 1},
  {&__pyx_n_s_plot_type, __pyx_k_plot_type, sizeof(__pyx_k_plot_type), 0, 0, 1, 1},
  {&__pyx_n_s_point, __pyx_k_point, sizeof(__pyx_k_point), 0, 0, 1, 1},
  {&__pyx_n_s_polygon, __pyx_k_polygon, sizeof(__pyx_k_polygon), 0, 0, 1, 1},
  {&__pyx_n_s_precondition, __pyx_k_precondition, sizeof(__pyx_k_precondition), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_py_detect_roots3, __pyx_k_py_detect_roots3, sizeof(__pyx_k_py_detect_roots3), 0, 0, 1, 1},
  {&__pyx_kp_u_py_detect_roots3_line_512, __pyx_k_py_detect_roots3_line_512, sizeof(__pyx_k_py_detect_roots3_line_512), 0, 1, 0, 0},
  {&__pyx_n_s_py_extdiv2, __pyx_k_py_extdiv2, sizeof(__pyx_k_py_extdiv2), 0, 0, 1, 1},
  {&__pyx_kp_u_py_extdiv2_0_5_4_4_2_2_True_Fal, __pyx_k_py_extdiv2_0_5_4_4_2_2_True_Fal, sizeof(__pyx_k_py_extdiv2_0_5_4_4_2_2_True_Fal), 0, 1, 0, 0},
  {&__pyx_kp_u_py_extdiv2_line_347, __pyx_k_py_extdiv2_line_347, sizeof(__pyx_k_py_extdiv2_line_347), 0, 1, 0, 0},
  {&__pyx_n_s_py_int_diff2, __pyx_k_py_int_diff2, sizeof(__pyx_k_py_int_diff2), 0, 0, 1, 1},
  {&__pyx_kp_u_py_int_diff2_1_3_2_4_True_False, __pyx_k_py_int_diff2_1_3_2_4_True_False, sizeof(__pyx_k_py_int_diff2_1_3_2_4_True_False), 0, 1, 0, 0},
  {&__pyx_kp_u_py_int_diff2_line_294, __pyx_k_py_int_diff2_line_294, sizeof(__pyx_k_py_int_diff2_line_294), 0, 1, 0, 0},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reachability, __pyx_k_reachability, sizeof(__pyx_k_reachability), 0, 0, 1, 1},
  {&__pyx_kp_s_reachability_pyx, __pyx_k_reachability_pyx, sizeof(__pyx_k_reachability_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_2, __pyx_k_reduce_2, sizeof(__pyx_k_reduce_2), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_repr___locals_lambda, __pyx_k_repr___locals_lambda, sizeof(__pyx_k_repr___locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_restore_globals, __pyx_k_restore_globals, sizeof(__pyx_k_restore_globals), 0, 0, 1, 1},
  {&__pyx_kp_s_root_on_boundary, __pyx_k_root_on_boundary, sizeof(__pyx_k_root_on_boundary), 0, 0, 1, 0},
  {&__pyx_n_s_roots, __pyx_k_roots, sizeof(__pyx_k_roots), 0, 0, 1, 1},
  {&__pyx_n_s_rotate, __pyx_k_rotate, sizeof(__pyx_k_rotate), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_n_s_sage, __pyx_k_sage, sizeof(__pyx_k_sage), 0, 0, 1, 1},
  {&__pyx_n_s_sage_all, __pyx_k_sage_all, sizeof(__pyx_k_sage_all), 0, 0, 1, 1},
  {&__pyx_n_s_sage_parametric_plot_locals_f, __pyx_k_sage_parametric_plot_locals_f, sizeof(__pyx_k_sage_parametric_plot_locals_f), 0, 0, 1, 1},
  {&__pyx_n_s_sage_parametric_plot_locals_g, __pyx_k_sage_parametric_plot_locals_g, sizeof(__pyx_k_sage_parametric_plot_locals_g), 0, 0, 1, 1},
  {&__pyx_n_s_sage_plot_locals_fl, __pyx_k_sage_plot_locals_fl, sizeof(__pyx_k_sage_plot_locals_fl), 0, 0, 1, 1},
  {&__pyx_n_s_sage_plot_locals_fu, __pyx_k_sage_plot_locals_fu, sizeof(__pyx_k_sage_plot_locals_fu), 0, 0, 1, 1},
  {&__pyx_n_s_sage_tube_plot, __pyx_k_sage_tube_plot, sizeof(__pyx_k_sage_tube_plot), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sin, __pyx_k_sin, sizeof(__pyx_k_sin), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_kp_s_splitting, __pyx_k_splitting, sizeof(__pyx_k_splitting), 0, 0, 1, 0},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_straight, __pyx_k_straight, sizeof(__pyx_k_straight), 0, 0, 1, 1},
  {&__pyx_n_s_subprocess, __pyx_k_subprocess, sizeof(__pyx_k_subprocess), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_tan, __pyx_k_tan, sizeof(__pyx_k_tan), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tight, __pyx_k_tight, sizeof(__pyx_k_tight), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_uuid, __pyx_k_uuid, sizeof(__pyx_k_uuid), 0, 0, 1, 1},
  {&__pyx_n_s_uuid4, __pyx_k_uuid4, sizeof(__pyx_k_uuid4), 0, 0, 1, 1},
  {&__pyx_n_s_var_names, __pyx_k_var_names, sizeof(__pyx_k_var_names), 0, 0, 1, 1},
  {&__pyx_n_s_vars, __pyx_k_vars, sizeof(__pyx_k_vars), 0, 0, 1, 1},
  {&__pyx_n_s_vector, __pyx_k_vector, sizeof(__pyx_k_vector), 0, 0, 1, 1},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {&__pyx_n_s_verbosity, __pyx_k_verbosity, sizeof(__pyx_k_verbosity), 0, 0, 1, 1},
  {&__pyx_kp_s_verified_contractive, __pyx_k_verified_contractive, sizeof(__pyx_k_verified_contractive), 0, 0, 1, 0},
  {&__pyx_n_s_wand_image, __pyx_k_wand_image, sizeof(__pyx_k_wand_image), 0, 0, 1, 1},
  {&__pyx_kp_s_warning_eval_failed_for_t_in, __pyx_k_warning_eval_failed_for_t_in, sizeof(__pyx_k_warning_eval_failed_for_t_in), 0, 0, 1, 0},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_zero, __pyx_k_zero, sizeof(__pyx_k_zero), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 169, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 176, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 210, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 222, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 568, __pyx_L1_error)
  __pyx_builtin_min = __Pyx_GetBuiltinName(__pyx_n_s_min); if (!__pyx_builtin_min) __PYX_ERR(0, 835, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 837, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 1071, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "reachability.pyx":167
 *             # self.vars = vars
 *         else:
 *             raise Exception("Invalid args for Poly")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Invalid_args_for_Poly); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "reachability.pyx":222
 *     def var_names(self):
 *         return [k for k,v in
 *                     sorted(self.vars.items(), key=operator.itemgetter(0))             # <<<<<<<<<<<<<<
 *                     if k != 'local_t']
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "reachability.pyx":580
 *         if failed:
 *             if verbosity >= 2:
 *                 print("failed! on:")             # <<<<<<<<<<<<<<
 *                 print("M=[{}..{}]".format(M.inf(), M.sup()))
 *                 print("extdiv2(T=[{}..{}], Tu=[{}..{}], split={}, T=[{}..{}], fI=[{}..{}], fP=[{}..{}])".format(
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_failed_on); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "reachability.pyx":624
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 *                 print("root on boundary!")             # <<<<<<<<<<<<<<
 *         elif contractive:
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_root_on_boundary); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "reachability.pyx":628
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 *                 print("verified contractive!")             # <<<<<<<<<<<<<<
 *         else:
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_verified_contractive); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "reachability.pyx":632
 *             # print("root found! T = [{}..{}]".format(T.inf(), T.sup()))
 *             if verbosity >= 1:
 *                 print("failed to verify contractive!")             # <<<<<<<<<<<<<<
 *         roots.push_back(T)
 *         # elif T.width() > epsilon:
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_failed_to_verify_contractive); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "reachability.pyx":878
 *     def plot(self, x, y, bytes filename, plot_type=1):
 *         if not self.ran:
 *             raise Exception('Not ran!')             # <<<<<<<<<<<<<<
 * 
 *         cdef ContinuousReachability * C = &self.c_reach
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Not_ran); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "reachability.pyx":886
 *         cdef char * c_filename = filename
 *         if len(filename) >= 100:
 *             raise Exception('Filename too long!')             # <<<<<<<<<<<<<<
 *         strcpy(C.outputFileName, c_filename)
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Filename_too_long); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "reachability.pyx":899
 *         self.c_reach.outputAxes.push_back(self.c_reach.getIDForStateVar(y))
 * 
 *         with self:  # Use class's version of flowstar global variables             # <<<<<<<<<<<<<<
 *             # We set projected to False since we use prepareForDumping
 *             # which does not project the flowpipes to the output
 */
  __pyx_tuple__16 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "reachability.pyx":916
 *         self.plot(x, y, filename, plot_type)
 *         img = Image(filename='./images/{}.eps'.format(filename), format='eps')
 *         img.rotate(90)             # <<<<<<<<<<<<<<
 *         return img
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_int_90); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "reachability.pyx":925
 *             vector[Interval] c_res
 *         self.prepare()
 *         with self:             # <<<<<<<<<<<<<<
 *             c_res = self.c_roots(f_fn, fprime_fn)
 *         return [sage.RIF(r.inf(), r.sup()) for r in c_res]
 */
  __pyx_tuple__18 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "reachability.pyx":1046
 *         cdef Interval I = _interval(t)
 * 
 *         with self: #  Use captured globals             # <<<<<<<<<<<<<<
 *             res = self.eval_interval(I)
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "reachability.pyx":1054
 *         '''Prepare for plotting / evaluating.'''
 *         if not self.ran:
 *             raise Exception('Not ran!')             # <<<<<<<<<<<<<<
 * 
 *         if not self.prepared:
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Not_ran); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "reachability.pyx":1057
 * 
 *         if not self.prepared:
 *             with self:  # with local globals             # <<<<<<<<<<<<<<
 *                 # if we run prepareForPlotting more than once we crash
 *                 self.c_reach.prepareForDumping()
 */
  __pyx_tuple__21 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "reachability.pyx":1067
 *         p = Graphics()
 *         cdef int var_id = self.c_reach.getIDForStateVar(x)
 *         res1 = self((-1e-7,1e-7))[var_id]             # <<<<<<<<<<<<<<
 *         lo1, hi1 = res1.lower(), res1.upper()
 *         cdef double t = 0
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_float_neg_1eneg_7, __pyx_float_1eneg_7); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_tuple__22); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "reachability.pyx":1226
 *         ress = dict()
 * 
 *         def fl(t):             # <<<<<<<<<<<<<<
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_n_s_t); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_reachability_pyx, __pyx_n_s_fl, 1226, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 1226, __pyx_L1_error)

  /* "reachability.pyx":1230
 *                 ress[t] = self((t - step, t + step))[var_id]
 *             return ress[t].lower()
 *         def fu(t):             # <<<<<<<<<<<<<<
 *             if t not in ress:
 *                 ress[t] = self((t - step, t + step))[var_id]
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_t); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_reachability_pyx, __pyx_n_s_fu, 1230, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 1230, __pyx_L1_error)

  /* "reachability.pyx":1246
 *         cdef int var_id_y = self.c_reach.getIDForStateVar(y)
 * 
 *         def f(t):             # <<<<<<<<<<<<<<
 *             return self((t, t+step))[var_id_x].center()
 *         def g(t):
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_n_s_t); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_reachability_pyx, __pyx_n_s_f, 1246, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 1246, __pyx_L1_error)

  /* "reachability.pyx":1248
 *         def f(t):
 *             return self((t, t+step))[var_id_x].center()
 *         def g(t):             # <<<<<<<<<<<<<<
 *             return self((t, t+step))[var_id_y].center()
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_n_s_t); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_reachability_pyx, __pyx_n_s_g, 1248, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 1248, __pyx_L1_error)

  /* "reachability.pyx":1257
 *     def run(self):
 *         if self.ran:
 *             raise Exception('Already ran')             # <<<<<<<<<<<<<<
 *         try:
 *             clear_globals()
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Already_ran); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "reachability.pyx":170
 * 
 *     @staticmethod
 *     def from_monomial(coeff, mono, vars):             # <<<<<<<<<<<<<<
 *         # print("coeff =", coeff)
 *         # print("mono =", mono)
 */
  __pyx_tuple__38 = PyTuple_Pack(6, __pyx_n_s_coeff, __pyx_n_s_mono, __pyx_n_s_vars, __pyx_n_s_c, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_reachability_pyx, __pyx_n_s_from_monomial, 170, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 170, __pyx_L1_error)

  /* "reachability.pyx":180
 * 
 *     @staticmethod
 *     def from_sage(p):             # <<<<<<<<<<<<<<
 *         '''
 *         >>> R, (x, y) = sage.PolynomialRing(sage.RIF, 'x, y').objgens()
 */
  __pyx_tuple__39 = PyTuple_Pack(7, __pyx_n_s_p, __pyx_n_s_vars, __pyx_n_s_zero, __pyx_n_s_cs, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_reachability_pyx, __pyx_n_s_from_sage, 180, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 180, __pyx_L1_error)

  /* "reachability.pyx":294
 *         return True
 * 
 * def py_int_diff2(a, b):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> py_int_diff2((1,3), (2,4))
 */
  __pyx_tuple__40 = PyTuple_Pack(8, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_L, __pyx_n_s_U, __pyx_n_s_A_2, __pyx_n_s_B_2, __pyx_n_s_res, __pyx_n_s_split); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_reachability_pyx, __pyx_n_s_py_int_diff2, 294, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 294, __pyx_L1_error)

  /* "reachability.pyx":347
 *         return True
 * 
 * def py_extdiv2(d, a, b):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> py_extdiv2((0,5), (4,4), (2,2))
 */
  __pyx_tuple__41 = PyTuple_Pack(10, __pyx_n_s_d, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_A_2, __pyx_n_s_B_2, __pyx_n_s_D, __pyx_n_s_L, __pyx_n_s_U, __pyx_n_s_split, __pyx_n_s_res); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(3, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_reachability_pyx, __pyx_n_s_py_extdiv2, 347, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 347, __pyx_L1_error)

  /* "reachability.pyx":512
 *     # [(0.4, 0.5)]
 * 
 * def py_detect_roots3(Poly f, Poly fprime, t, double epsilon=1e-6, int verbosity=1):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> R, (t,) = sage.PolynomialRing(sage.RIF, 't').objgens()
 */
  __pyx_tuple__42 = PyTuple_Pack(10, __pyx_n_s_f, __pyx_n_s_fprime, __pyx_n_s_t, __pyx_n_s_epsilon, __pyx_n_s_verbosity, __pyx_n_s_T_2, __pyx_n_s_F, __pyx_n_s_Fprime, __pyx_n_s_roots, __pyx_n_s_r); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(5, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_reachability_pyx, __pyx_n_s_py_detect_roots3, 512, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_iteritems.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_3 = PyFloat_FromDouble(1e-3); if (unlikely(!__pyx_float_1eneg_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_7 = PyFloat_FromDouble(1e-7); if (unlikely(!__pyx_float_1eneg_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1eneg_7 = PyFloat_FromDouble(-1e-7); if (unlikely(!__pyx_float_neg_1eneg_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_90 = PyInt_FromLong(90); if (unlikely(!__pyx_int_90)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("int_diff2", (void (*)(void))__pyx_f_12reachability_int_diff2, "bool (flowstar::Interval &, flowstar::Interval &, bool &, flowstar::Interval &, flowstar::Interval const &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_12reachability_Poly) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_type_12reachability_Poly.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability_Poly.tp_dictoffset && __pyx_type_12reachability_Poly.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability_Poly.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttrString(__pyx_m, "Poly", (PyObject *)&__pyx_type_12reachability_Poly) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_12reachability_Poly) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_ptype_12reachability_Poly = &__pyx_type_12reachability_Poly;
  __pyx_vtabptr_12reachability_Reach = &__pyx_vtable_12reachability_Reach;
  __pyx_vtable_12reachability_Reach.c_roots = (std::vector<flowstar::Interval>  (*)(struct __pyx_obj_12reachability_Reach *, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)>, std::function<flowstar::Interval(std::vector<flowstar::Interval> &)>))__pyx_f_12reachability_5Reach_c_roots;
  __pyx_vtable_12reachability_Reach.eval_interval = (std::vector<flowstar::Interval>  (*)(struct __pyx_obj_12reachability_Reach *, flowstar::Interval))__pyx_f_12reachability_5Reach_eval_interval;
  if (PyType_Ready(&__pyx_type_12reachability_Reach) < 0) __PYX_ERR(0, 764, __pyx_L1_error)
  __pyx_type_12reachability_Reach.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability_Reach.tp_dictoffset && __pyx_type_12reachability_Reach.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability_Reach.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_12reachability_Reach.tp_dict, __pyx_vtabptr_12reachability_Reach) < 0) __PYX_ERR(0, 764, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Reach", (PyObject *)&__pyx_type_12reachability_Reach) < 0) __PYX_ERR(0, 764, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_12reachability_Reach) < 0) __PYX_ERR(0, 764, __pyx_L1_error)
  __pyx_ptype_12reachability_Reach = &__pyx_type_12reachability_Reach;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct__from_monomial) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct__from_monomial.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct__from_monomial.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct__from_monomial.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct__from_monomial.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct__from_monomial = &__pyx_type_12reachability___pyx_scope_struct__from_monomial;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct_1_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct_1_genexpr = &__pyx_type_12reachability___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct_2_from_sage) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct_2_from_sage.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct_2_from_sage.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct_2_from_sage.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct_2_from_sage.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct_2_from_sage = &__pyx_type_12reachability___pyx_scope_struct_2_from_sage;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct_3_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct_3_genexpr = &__pyx_type_12reachability___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 211, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct_4_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct_4_genexpr.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct_4_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct_4_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct_4_genexpr = &__pyx_type_12reachability___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct_5___cinit__) < 0) __PYX_ERR(0, 766, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct_5___cinit__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct_5___cinit__.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct_5___cinit__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct_5___cinit__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct_5___cinit__ = &__pyx_type_12reachability___pyx_scope_struct_5___cinit__;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(0, 835, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct_6_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct_6_genexpr.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct_6_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct_6_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct_6_genexpr = &__pyx_type_12reachability___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(0, 837, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct_7_genexpr.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct_7_genexpr.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct_7_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct_7_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct_7_genexpr = &__pyx_type_12reachability___pyx_scope_struct_7_genexpr;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct_8_sage_plot) < 0) __PYX_ERR(0, 1216, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct_8_sage_plot.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct_8_sage_plot.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct_8_sage_plot.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct_8_sage_plot.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct_8_sage_plot = &__pyx_type_12reachability___pyx_scope_struct_8_sage_plot;
  if (PyType_Ready(&__pyx_type_12reachability___pyx_scope_struct_9_sage_parametric_plot) < 0) __PYX_ERR(0, 1239, __pyx_L1_error)
  __pyx_type_12reachability___pyx_scope_struct_9_sage_parametric_plot.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_12reachability___pyx_scope_struct_9_sage_parametric_plot.tp_dictoffset && __pyx_type_12reachability___pyx_scope_struct_9_sage_parametric_plot.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_12reachability___pyx_scope_struct_9_sage_parametric_plot.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_12reachability___pyx_scope_struct_9_sage_parametric_plot = &__pyx_type_12reachability___pyx_scope_struct_9_sage_parametric_plot;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("cysignals.signals"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "cysigs", (void **)&__pyx_vp_9cysignals_7signals_cysigs, "cysigs_t") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("cysignals.signals"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_sig_on_interrupt_received", (void (**)(void))&_sig_on_interrupt_received, "void (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_sig_on_recover", (void (**)(void))&_sig_on_recover, "void (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "_sig_off_warning", (void (**)(void))&_sig_off_warning, "void (char const *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "print_backtrace", (void (**)(void))&print_backtrace, "void (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initreachability(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initreachability(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_reachability(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_reachability(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_reachability(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_reachability(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("reachability", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_reachability) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "reachability")) {
      if (unlikely(PyDict_SetItemString(modules, "reachability", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_import_code();
  if (unlikely(__Pyx_modinit_variable_import_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_reachability(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "reachability.pyx":19
 * from libcpp cimport bool as cbool
 * from libcpp.map cimport map as cmap
 * from subprocess import call             # <<<<<<<<<<<<<<
 * from libcpp.memory cimport unique_ptr, make_unique
 * from libcpp.algorithm cimport sort as csort
 */
  __Pyx_TraceLine(19,0,__PYX_ERR(0, 19, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_call);
  __Pyx_GIVEREF(__pyx_n_s_call);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_call);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_subprocess, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_call); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_call, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":22
 * from libcpp.memory cimport unique_ptr, make_unique
 * from libcpp.algorithm cimport sort as csort
 * import operator             # <<<<<<<<<<<<<<
 * from functools import reduce
 * import collections
 */
  __Pyx_TraceLine(22,0,__PYX_ERR(0, 22, __pyx_L1_error))
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_operator, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_operator, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":23
 * from libcpp.algorithm cimport sort as csort
 * import operator
 * from functools import reduce             # <<<<<<<<<<<<<<
 * import collections
 * import sage.all as sage
 */
  __Pyx_TraceLine(23,0,__PYX_ERR(0, 23, __pyx_L1_error))
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_reduce);
  __Pyx_GIVEREF(__pyx_n_s_reduce);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_reduce);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_functools, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_reduce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce, __pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":24
 * import operator
 * from functools import reduce
 * import collections             # <<<<<<<<<<<<<<
 * import sage.all as sage
 * from cysignals.signals cimport sig_on, sig_off, sig_check
 */
  __Pyx_TraceLine(24,0,__PYX_ERR(0, 24, __pyx_L1_error))
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collections, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "reachability.pyx":25
 * from functools import reduce
 * import collections
 * import sage.all as sage             # <<<<<<<<<<<<<<
 * from cysignals.signals cimport sig_on, sig_off, sig_check
 * 
 */
  __Pyx_TraceLine(25,0,__PYX_ERR(0, 25, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__37);
  __Pyx_GIVEREF(__pyx_n_s__37);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__37);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_all, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sage, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":170
 * 
 *     @staticmethod
 *     def from_monomial(coeff, mono, vars):             # <<<<<<<<<<<<<<
 *         # print("coeff =", coeff)
 *         # print("mono =", mono)
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(0, 170, __pyx_L1_error))
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_12reachability_4Poly_3from_monomial, NULL, __pyx_n_s_reachability); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12reachability_Poly->tp_dict, __pyx_n_s_from_monomial, __pyx_t_2) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_12reachability_Poly);

  /* "reachability.pyx":169
 *             raise Exception("Invalid args for Poly")
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_monomial(coeff, mono, vars):
 *         # print("coeff =", coeff)
 */
  __Pyx_TraceLine(169,0,__PYX_ERR(0, 169, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_12reachability_Poly, __pyx_n_s_from_monomial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12reachability_Poly->tp_dict, __pyx_n_s_from_monomial, __pyx_t_1) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_12reachability_Poly);

  /* "reachability.pyx":180
 * 
 *     @staticmethod
 *     def from_sage(p):             # <<<<<<<<<<<<<<
 *         '''
 *         >>> R, (x, y) = sage.PolynomialRing(sage.RIF, 'x, y').objgens()
 */
  __Pyx_TraceLine(180,0,__PYX_ERR(0, 180, __pyx_L1_error))
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_12reachability_4Poly_5from_sage, NULL, __pyx_n_s_reachability); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12reachability_Poly->tp_dict, __pyx_n_s_from_sage, __pyx_t_1) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_12reachability_Poly);

  /* "reachability.pyx":179
 *                       c)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_sage(p):
 *         '''
 */
  __Pyx_TraceLine(179,0,__PYX_ERR(0, 179, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_12reachability_Poly, __pyx_n_s_from_sage); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12reachability_Poly->tp_dict, __pyx_n_s_from_sage, __pyx_t_2) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_12reachability_Poly);

  /* "reachability.pyx":294
 *         return True
 * 
 * def py_int_diff2(a, b):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> py_int_diff2((1,3), (2,4))
 */
  __Pyx_TraceLine(294,0,__PYX_ERR(0, 294, __pyx_L1_error))
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_12reachability_15py_int_diff2, NULL, __pyx_n_s_reachability); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_int_diff2, __pyx_t_2) < 0) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":347
 *         return True
 * 
 * def py_extdiv2(d, a, b):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> py_extdiv2((0,5), (4,4), (2,2))
 */
  __Pyx_TraceLine(347,0,__PYX_ERR(0, 347, __pyx_L1_error))
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_12reachability_17py_extdiv2, NULL, __pyx_n_s_reachability); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_extdiv2, __pyx_t_2) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":512
 *     # [(0.4, 0.5)]
 * 
 * def py_detect_roots3(Poly f, Poly fprime, t, double epsilon=1e-6, int verbosity=1):             # <<<<<<<<<<<<<<
 *     '''
 *     >>> R, (t,) = sage.PolynomialRing(sage.RIF, 't').objgens()
 */
  __Pyx_TraceLine(512,0,__PYX_ERR(0, 512, __pyx_L1_error))
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_12reachability_19py_detect_roots3, NULL, __pyx_n_s_reachability); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_detect_roots3, __pyx_t_2) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "reachability.pyx":1
 * # cython: profile=True             # <<<<<<<<<<<<<<
 * # cython: linetrace=True
 * from __future__ import division, print_function
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(0, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Poly_from_sage_line_180, __pyx_kp_u_R_x_y_sage_PolynomialRing_sage) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_py_int_diff2_line_294, __pyx_kp_u_py_int_diff2_1_3_2_4_True_False) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_py_extdiv2_line_347, __pyx_kp_u_py_extdiv2_0_5_4_4_2_2_True_Fal) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_py_detect_roots3_line_512, __pyx_kp_u_R_t_sage_PolynomialRing_sage_RI) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init reachability", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init reachability");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,
        #if PY_MAJOR_VERSION >= 3
        0,
        #endif
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A3
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* KeywordStringCheck */
    static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* DictGetItem */
    #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* GetAttr */
    static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
    static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetItemInt */
    static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ExtTypeTest */
    static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseArgTupleInvalid */
    static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
    static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
    static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* None */
    static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* GetModuleGlobalName */
    static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyIntBinop */
        #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* UnpackUnboundCMethod */
        static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
        static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_items */
        static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* BytesEquals */
        static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
        static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* py_dict_iteritems */
        static CYTHON_INLINE PyObject* __Pyx_PyDict_IterItems(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_iteritems, d);
}

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
        #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* ArgTypeTest */
            static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* Import */
            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
            static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyIntFromDouble */
            #if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* None */
            static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyObjectCallMethod0 */
            static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
            static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
            static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
            static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
            static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* MergeKeywords */
            static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping) {
    PyObject *iter, *key = NULL, *value = NULL;
    int source_is_dict, result;
    Py_ssize_t orig_length, ppos = 0;
    iter = __Pyx_dict_iterator(source_mapping, 0, __pyx_n_s_items, &orig_length, &source_is_dict);
    if (unlikely(!iter)) {
        PyObject *args;
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        args = PyTuple_Pack(1, source_mapping);
        if (likely(args)) {
            PyObject *fallback = PyObject_Call((PyObject*)&PyDict_Type, args, NULL);
            Py_DECREF(args);
            if (likely(fallback)) {
                iter = __Pyx_dict_iterator(fallback, 1, __pyx_n_s_items, &orig_length, &source_is_dict);
                Py_DECREF(fallback);
            }
        }
        if (unlikely(!iter)) goto bad;
    }
    while (1) {
        result = __Pyx_dict_iter_next(iter, orig_length, &ppos, &key, &value, NULL, source_is_dict);
        if (unlikely(result < 0)) goto bad;
        if (!result) break;
        if (unlikely(PyDict_Contains(kwdict, key))) {
            __Pyx_RaiseDoubleKeywordsError("function", key);
            result = -1;
        } else {
            result = PyDict_SetItem(kwdict, key, value);
        }
        Py_DECREF(key);
        Py_DECREF(value);
        if (unlikely(result < 0)) goto bad;
    }
    Py_XDECREF(iter);
    return 0;
bad:
    Py_XDECREF(iter);
    return -1;
}

/* PyIntBinop */
            #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                    || __Pyx_sst_abs(size) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* py_abs */
            #if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            Py_SIZE(copy) = -(Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* SwapException */
            #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObject_GenericGetAttrNoDict */
            #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
            #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
            static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_2); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_2); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_2); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_2, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
            static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyErrExceptionMatches */
            #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetNameInClass */
            static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    return __Pyx_GetModuleGlobalName(name);
}
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
            #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_mpfr_prec_t(mpfr_prec_t value) {
    const mpfr_prec_t neg_one = (mpfr_prec_t) -1, const_zero = (mpfr_prec_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(mpfr_prec_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(mpfr_prec_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(mpfr_prec_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(mpfr_prec_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(mpfr_prec_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(mpfr_prec_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
            #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyObjectCallMethod1 */
            static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
    result = __Pyx__PyObject_CallMethod1(method, arg);
    Py_DECREF(method);
    return result;
}

/* CoroutineBase */
            #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    if (self->exc_type) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
        __Pyx_ExceptionSave(&self->exc_type, &self->exc_value, &self->exc_traceback);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self) {
    if (likely(self->exc_traceback)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
                static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* ModuleImport */
                #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* VoidPtrImport */
                #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
                #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
                static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
